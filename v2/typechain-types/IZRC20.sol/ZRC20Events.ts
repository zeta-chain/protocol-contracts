/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
} from "../common";

export interface ZRC20EventsInterface extends Interface {
  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "Deposit"
      | "Transfer"
      | "UpdatedGasLimit"
      | "UpdatedProtocolFlatFee"
      | "UpdatedSystemContract"
      | "Withdrawal"
  ): EventFragment;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositEvent {
  export type InputTuple = [
    from: BytesLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdatedGasLimitEvent {
  export type InputTuple = [gasLimit: BigNumberish];
  export type OutputTuple = [gasLimit: bigint];
  export interface OutputObject {
    gasLimit: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdatedProtocolFlatFeeEvent {
  export type InputTuple = [protocolFlatFee: BigNumberish];
  export type OutputTuple = [protocolFlatFee: bigint];
  export interface OutputObject {
    protocolFlatFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdatedSystemContractEvent {
  export type InputTuple = [systemContract: AddressLike];
  export type OutputTuple = [systemContract: string];
  export interface OutputObject {
    systemContract: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawalEvent {
  export type InputTuple = [
    from: AddressLike,
    to: BytesLike,
    value: BigNumberish,
    gasFee: BigNumberish,
    protocolFlatFee: BigNumberish
  ];
  export type OutputTuple = [
    from: string,
    to: string,
    value: bigint,
    gasFee: bigint,
    protocolFlatFee: bigint
  ];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
    gasFee: bigint;
    protocolFlatFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ZRC20Events extends BaseContract {
  connect(runner?: ContractRunner | null): ZRC20Events;
  waitForDeployment(): Promise<this>;

  interface: ZRC20EventsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "Deposit"
  ): TypedContractEvent<
    DepositEvent.InputTuple,
    DepositEvent.OutputTuple,
    DepositEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "UpdatedGasLimit"
  ): TypedContractEvent<
    UpdatedGasLimitEvent.InputTuple,
    UpdatedGasLimitEvent.OutputTuple,
    UpdatedGasLimitEvent.OutputObject
  >;
  getEvent(
    key: "UpdatedProtocolFlatFee"
  ): TypedContractEvent<
    UpdatedProtocolFlatFeeEvent.InputTuple,
    UpdatedProtocolFlatFeeEvent.OutputTuple,
    UpdatedProtocolFlatFeeEvent.OutputObject
  >;
  getEvent(
    key: "UpdatedSystemContract"
  ): TypedContractEvent<
    UpdatedSystemContractEvent.InputTuple,
    UpdatedSystemContractEvent.OutputTuple,
    UpdatedSystemContractEvent.OutputObject
  >;
  getEvent(
    key: "Withdrawal"
  ): TypedContractEvent<
    WithdrawalEvent.InputTuple,
    WithdrawalEvent.OutputTuple,
    WithdrawalEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "Deposit(bytes,address,uint256)": TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;
    Deposit: TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "UpdatedGasLimit(uint256)": TypedContractEvent<
      UpdatedGasLimitEvent.InputTuple,
      UpdatedGasLimitEvent.OutputTuple,
      UpdatedGasLimitEvent.OutputObject
    >;
    UpdatedGasLimit: TypedContractEvent<
      UpdatedGasLimitEvent.InputTuple,
      UpdatedGasLimitEvent.OutputTuple,
      UpdatedGasLimitEvent.OutputObject
    >;

    "UpdatedProtocolFlatFee(uint256)": TypedContractEvent<
      UpdatedProtocolFlatFeeEvent.InputTuple,
      UpdatedProtocolFlatFeeEvent.OutputTuple,
      UpdatedProtocolFlatFeeEvent.OutputObject
    >;
    UpdatedProtocolFlatFee: TypedContractEvent<
      UpdatedProtocolFlatFeeEvent.InputTuple,
      UpdatedProtocolFlatFeeEvent.OutputTuple,
      UpdatedProtocolFlatFeeEvent.OutputObject
    >;

    "UpdatedSystemContract(address)": TypedContractEvent<
      UpdatedSystemContractEvent.InputTuple,
      UpdatedSystemContractEvent.OutputTuple,
      UpdatedSystemContractEvent.OutputObject
    >;
    UpdatedSystemContract: TypedContractEvent<
      UpdatedSystemContractEvent.InputTuple,
      UpdatedSystemContractEvent.OutputTuple,
      UpdatedSystemContractEvent.OutputObject
    >;

    "Withdrawal(address,bytes,uint256,uint256,uint256)": TypedContractEvent<
      WithdrawalEvent.InputTuple,
      WithdrawalEvent.OutputTuple,
      WithdrawalEvent.OutputObject
    >;
    Withdrawal: TypedContractEvent<
      WithdrawalEvent.InputTuple,
      WithdrawalEvent.OutputTuple,
      WithdrawalEvent.OutputObject
    >;
  };
}
