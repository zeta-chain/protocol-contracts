// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package zrc20

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// StdInvariantFuzzArtifactSelector is an auto generated low-level Go binding around an user-defined struct.
type StdInvariantFuzzArtifactSelector struct {
	Artifact  string
	Selectors [][4]byte
}

// StdInvariantFuzzInterface is an auto generated low-level Go binding around an user-defined struct.
type StdInvariantFuzzInterface struct {
	Addr      common.Address
	Artifacts []string
}

// StdInvariantFuzzSelector is an auto generated low-level Go binding around an user-defined struct.
type StdInvariantFuzzSelector struct {
	Addr      common.Address
	Selectors [][4]byte
}

// ZRC20TestMetaData contains all meta data concerning the ZRC20Test contract.
var ZRC20TestMetaData = &bind.MetaData{
	ABI: "[{\"type\":\"function\",\"name\":\"IS_TEST\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"excludeArtifacts\",\"inputs\":[],\"outputs\":[{\"name\":\"excludedArtifacts_\",\"type\":\"string[]\",\"internalType\":\"string[]\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"excludeContracts\",\"inputs\":[],\"outputs\":[{\"name\":\"excludedContracts_\",\"type\":\"address[]\",\"internalType\":\"address[]\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"excludeSelectors\",\"inputs\":[],\"outputs\":[{\"name\":\"excludedSelectors_\",\"type\":\"tuple[]\",\"internalType\":\"structStdInvariant.FuzzSelector[]\",\"components\":[{\"name\":\"addr\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"selectors\",\"type\":\"bytes4[]\",\"internalType\":\"bytes4[]\"}]}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"excludeSenders\",\"inputs\":[],\"outputs\":[{\"name\":\"excludedSenders_\",\"type\":\"address[]\",\"internalType\":\"address[]\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"failed\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"setUp\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"targetArtifactSelectors\",\"inputs\":[],\"outputs\":[{\"name\":\"targetedArtifactSelectors_\",\"type\":\"tuple[]\",\"internalType\":\"structStdInvariant.FuzzArtifactSelector[]\",\"components\":[{\"name\":\"artifact\",\"type\":\"string\",\"internalType\":\"string\"},{\"name\":\"selectors\",\"type\":\"bytes4[]\",\"internalType\":\"bytes4[]\"}]}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"targetArtifacts\",\"inputs\":[],\"outputs\":[{\"name\":\"targetedArtifacts_\",\"type\":\"string[]\",\"internalType\":\"string[]\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"targetContracts\",\"inputs\":[],\"outputs\":[{\"name\":\"targetedContracts_\",\"type\":\"address[]\",\"internalType\":\"address[]\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"targetInterfaces\",\"inputs\":[],\"outputs\":[{\"name\":\"targetedInterfaces_\",\"type\":\"tuple[]\",\"internalType\":\"structStdInvariant.FuzzInterface[]\",\"components\":[{\"name\":\"addr\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"artifacts\",\"type\":\"string[]\",\"internalType\":\"string[]\"}]}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"targetSelectors\",\"inputs\":[],\"outputs\":[{\"name\":\"targetedSelectors_\",\"type\":\"tuple[]\",\"internalType\":\"structStdInvariant.FuzzSelector[]\",\"components\":[{\"name\":\"addr\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"selectors\",\"type\":\"bytes4[]\",\"internalType\":\"bytes4[]\"}]}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"targetSenders\",\"inputs\":[],\"outputs\":[{\"name\":\"targetedSenders_\",\"type\":\"address[]\",\"internalType\":\"address[]\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"testApproveFailsIfRecipientIsZeroAddress\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testBurn\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testBurnFailsIfNoBalance\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testDeposit\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testDepositFailsIfRecipientIsZeroAddress\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testDepositFailsIfSenderIsNotGateway\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testTransfer\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testTransferFailsIfNoBalance\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testTransferFailsIfRecipientIsZeroAddress\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testTransferFrom\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testTransferFromFailsIfNoAllowance\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testTransferFromFailsIfNoBalance\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testTransferFromFailsIfRecipientIsZeroAddress\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testTransferFromFailsIfSenderIsZeroAddress\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testUpdateGasLimit\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testUpdateGasLimitFailsIfSenderIsNotFungible\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testUpdateGatewayAddress\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testUpdateGatewayAddressFailsIfSenderIsNotFungible\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testUpdateGatewayAddressFailsIfZeroAddress\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testUpdateProtocolFlatFee\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testUpdateProtocolFlatFeeFailsIfSenderIsNotFungible\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testUpdateSystemContractAddress\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testUpdateSystemContractAddressFailsIfSenderIsNotFungible\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testUpdateSystemContractAddressFailsIfZeroAddress\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testWithdraw\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testWithdrawFailsIfNoAllowance\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testWithdrawFailsIfNoBalance\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testWithdrawGasFee\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testWithdrawGasFeeFailsIfGasCoinNotSetForChainId\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testWithdrawGasFeeFailsIfGasPriceNotSetForChainId\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testZRC20BasicInfo\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"event\",\"name\":\"log\",\"inputs\":[{\"name\":\"\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_address\",\"inputs\":[{\"name\":\"\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_array\",\"inputs\":[{\"name\":\"val\",\"type\":\"uint256[]\",\"indexed\":false,\"internalType\":\"uint256[]\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_array\",\"inputs\":[{\"name\":\"val\",\"type\":\"int256[]\",\"indexed\":false,\"internalType\":\"int256[]\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_array\",\"inputs\":[{\"name\":\"val\",\"type\":\"address[]\",\"indexed\":false,\"internalType\":\"address[]\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_bytes\",\"inputs\":[{\"name\":\"\",\"type\":\"bytes\",\"indexed\":false,\"internalType\":\"bytes\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_bytes32\",\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"indexed\":false,\"internalType\":\"bytes32\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_int\",\"inputs\":[{\"name\":\"\",\"type\":\"int256\",\"indexed\":false,\"internalType\":\"int256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_named_address\",\"inputs\":[{\"name\":\"key\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"val\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_named_array\",\"inputs\":[{\"name\":\"key\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"val\",\"type\":\"uint256[]\",\"indexed\":false,\"internalType\":\"uint256[]\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_named_array\",\"inputs\":[{\"name\":\"key\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"val\",\"type\":\"int256[]\",\"indexed\":false,\"internalType\":\"int256[]\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_named_array\",\"inputs\":[{\"name\":\"key\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"val\",\"type\":\"address[]\",\"indexed\":false,\"internalType\":\"address[]\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_named_bytes\",\"inputs\":[{\"name\":\"key\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"val\",\"type\":\"bytes\",\"indexed\":false,\"internalType\":\"bytes\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_named_bytes32\",\"inputs\":[{\"name\":\"key\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"val\",\"type\":\"bytes32\",\"indexed\":false,\"internalType\":\"bytes32\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_named_decimal_int\",\"inputs\":[{\"name\":\"key\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"val\",\"type\":\"int256\",\"indexed\":false,\"internalType\":\"int256\"},{\"name\":\"decimals\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_named_decimal_uint\",\"inputs\":[{\"name\":\"key\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"val\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"},{\"name\":\"decimals\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_named_int\",\"inputs\":[{\"name\":\"key\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"val\",\"type\":\"int256\",\"indexed\":false,\"internalType\":\"int256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_named_string\",\"inputs\":[{\"name\":\"key\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"val\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_named_uint\",\"inputs\":[{\"name\":\"key\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"val\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_string\",\"inputs\":[{\"name\":\"\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_uint\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"logs\",\"inputs\":[{\"name\":\"\",\"type\":\"bytes\",\"indexed\":false,\"internalType\":\"bytes\"}],\"anonymous\":false},{\"type\":\"error\",\"name\":\"CallerIsNotFungibleModule\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"GasFeeTransferFailed\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidSender\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"LowAllowance\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"LowBalance\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"ZeroAddress\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"ZeroGasCoin\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"ZeroGasPrice\",\"inputs\":[]}]",
	Bin: "",
}

// ZRC20TestABI is the input ABI used to generate the binding from.
// Deprecated: Use ZRC20TestMetaData.ABI instead.
var ZRC20TestABI = ZRC20TestMetaData.ABI

// ZRC20TestBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ZRC20TestMetaData.Bin instead.
var ZRC20TestBin = ZRC20TestMetaData.Bin

// DeployZRC20Test deploys a new Ethereum contract, binding an instance of ZRC20Test to it.
func DeployZRC20Test(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ZRC20Test, error) {
	parsed, err := ZRC20TestMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ZRC20TestBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ZRC20Test{ZRC20TestCaller: ZRC20TestCaller{contract: contract}, ZRC20TestTransactor: ZRC20TestTransactor{contract: contract}, ZRC20TestFilterer: ZRC20TestFilterer{contract: contract}}, nil
}

// ZRC20Test is an auto generated Go binding around an Ethereum contract.
type ZRC20Test struct {
	ZRC20TestCaller     // Read-only binding to the contract
	ZRC20TestTransactor // Write-only binding to the contract
	ZRC20TestFilterer   // Log filterer for contract events
}

// ZRC20TestCaller is an auto generated read-only Go binding around an Ethereum contract.
type ZRC20TestCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ZRC20TestTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ZRC20TestTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ZRC20TestFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ZRC20TestFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ZRC20TestSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ZRC20TestSession struct {
	Contract     *ZRC20Test        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ZRC20TestCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ZRC20TestCallerSession struct {
	Contract *ZRC20TestCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// ZRC20TestTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ZRC20TestTransactorSession struct {
	Contract     *ZRC20TestTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// ZRC20TestRaw is an auto generated low-level Go binding around an Ethereum contract.
type ZRC20TestRaw struct {
	Contract *ZRC20Test // Generic contract binding to access the raw methods on
}

// ZRC20TestCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ZRC20TestCallerRaw struct {
	Contract *ZRC20TestCaller // Generic read-only contract binding to access the raw methods on
}

// ZRC20TestTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ZRC20TestTransactorRaw struct {
	Contract *ZRC20TestTransactor // Generic write-only contract binding to access the raw methods on
}

// NewZRC20Test creates a new instance of ZRC20Test, bound to a specific deployed contract.
func NewZRC20Test(address common.Address, backend bind.ContractBackend) (*ZRC20Test, error) {
	contract, err := bindZRC20Test(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ZRC20Test{ZRC20TestCaller: ZRC20TestCaller{contract: contract}, ZRC20TestTransactor: ZRC20TestTransactor{contract: contract}, ZRC20TestFilterer: ZRC20TestFilterer{contract: contract}}, nil
}

// NewZRC20TestCaller creates a new read-only instance of ZRC20Test, bound to a specific deployed contract.
func NewZRC20TestCaller(address common.Address, caller bind.ContractCaller) (*ZRC20TestCaller, error) {
	contract, err := bindZRC20Test(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ZRC20TestCaller{contract: contract}, nil
}

// NewZRC20TestTransactor creates a new write-only instance of ZRC20Test, bound to a specific deployed contract.
func NewZRC20TestTransactor(address common.Address, transactor bind.ContractTransactor) (*ZRC20TestTransactor, error) {
	contract, err := bindZRC20Test(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ZRC20TestTransactor{contract: contract}, nil
}

// NewZRC20TestFilterer creates a new log filterer instance of ZRC20Test, bound to a specific deployed contract.
func NewZRC20TestFilterer(address common.Address, filterer bind.ContractFilterer) (*ZRC20TestFilterer, error) {
	contract, err := bindZRC20Test(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ZRC20TestFilterer{contract: contract}, nil
}

// bindZRC20Test binds a generic wrapper to an already deployed contract.
func bindZRC20Test(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ZRC20TestMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ZRC20Test *ZRC20TestRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ZRC20Test.Contract.ZRC20TestCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ZRC20Test *ZRC20TestRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ZRC20Test.Contract.ZRC20TestTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ZRC20Test *ZRC20TestRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ZRC20Test.Contract.ZRC20TestTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ZRC20Test *ZRC20TestCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ZRC20Test.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ZRC20Test *ZRC20TestTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ZRC20Test.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ZRC20Test *ZRC20TestTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ZRC20Test.Contract.contract.Transact(opts, method, params...)
}

// ISTEST is a free data retrieval call binding the contract method 0xfa7626d4.
//
// Solidity: function IS_TEST() view returns(bool)
func (_ZRC20Test *ZRC20TestCaller) ISTEST(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _ZRC20Test.contract.Call(opts, &out, "IS_TEST")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ISTEST is a free data retrieval call binding the contract method 0xfa7626d4.
//
// Solidity: function IS_TEST() view returns(bool)
func (_ZRC20Test *ZRC20TestSession) ISTEST() (bool, error) {
	return _ZRC20Test.Contract.ISTEST(&_ZRC20Test.CallOpts)
}

// ISTEST is a free data retrieval call binding the contract method 0xfa7626d4.
//
// Solidity: function IS_TEST() view returns(bool)
func (_ZRC20Test *ZRC20TestCallerSession) ISTEST() (bool, error) {
	return _ZRC20Test.Contract.ISTEST(&_ZRC20Test.CallOpts)
}

// ExcludeArtifacts is a free data retrieval call binding the contract method 0xb5508aa9.
//
// Solidity: function excludeArtifacts() view returns(string[] excludedArtifacts_)
func (_ZRC20Test *ZRC20TestCaller) ExcludeArtifacts(opts *bind.CallOpts) ([]string, error) {
	var out []interface{}
	err := _ZRC20Test.contract.Call(opts, &out, "excludeArtifacts")

	if err != nil {
		return *new([]string), err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)

	return out0, err

}

// ExcludeArtifacts is a free data retrieval call binding the contract method 0xb5508aa9.
//
// Solidity: function excludeArtifacts() view returns(string[] excludedArtifacts_)
func (_ZRC20Test *ZRC20TestSession) ExcludeArtifacts() ([]string, error) {
	return _ZRC20Test.Contract.ExcludeArtifacts(&_ZRC20Test.CallOpts)
}

// ExcludeArtifacts is a free data retrieval call binding the contract method 0xb5508aa9.
//
// Solidity: function excludeArtifacts() view returns(string[] excludedArtifacts_)
func (_ZRC20Test *ZRC20TestCallerSession) ExcludeArtifacts() ([]string, error) {
	return _ZRC20Test.Contract.ExcludeArtifacts(&_ZRC20Test.CallOpts)
}

// ExcludeContracts is a free data retrieval call binding the contract method 0xe20c9f71.
//
// Solidity: function excludeContracts() view returns(address[] excludedContracts_)
func (_ZRC20Test *ZRC20TestCaller) ExcludeContracts(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _ZRC20Test.contract.Call(opts, &out, "excludeContracts")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// ExcludeContracts is a free data retrieval call binding the contract method 0xe20c9f71.
//
// Solidity: function excludeContracts() view returns(address[] excludedContracts_)
func (_ZRC20Test *ZRC20TestSession) ExcludeContracts() ([]common.Address, error) {
	return _ZRC20Test.Contract.ExcludeContracts(&_ZRC20Test.CallOpts)
}

// ExcludeContracts is a free data retrieval call binding the contract method 0xe20c9f71.
//
// Solidity: function excludeContracts() view returns(address[] excludedContracts_)
func (_ZRC20Test *ZRC20TestCallerSession) ExcludeContracts() ([]common.Address, error) {
	return _ZRC20Test.Contract.ExcludeContracts(&_ZRC20Test.CallOpts)
}

// ExcludeSelectors is a free data retrieval call binding the contract method 0xb0464fdc.
//
// Solidity: function excludeSelectors() view returns((address,bytes4[])[] excludedSelectors_)
func (_ZRC20Test *ZRC20TestCaller) ExcludeSelectors(opts *bind.CallOpts) ([]StdInvariantFuzzSelector, error) {
	var out []interface{}
	err := _ZRC20Test.contract.Call(opts, &out, "excludeSelectors")

	if err != nil {
		return *new([]StdInvariantFuzzSelector), err
	}

	out0 := *abi.ConvertType(out[0], new([]StdInvariantFuzzSelector)).(*[]StdInvariantFuzzSelector)

	return out0, err

}

// ExcludeSelectors is a free data retrieval call binding the contract method 0xb0464fdc.
//
// Solidity: function excludeSelectors() view returns((address,bytes4[])[] excludedSelectors_)
func (_ZRC20Test *ZRC20TestSession) ExcludeSelectors() ([]StdInvariantFuzzSelector, error) {
	return _ZRC20Test.Contract.ExcludeSelectors(&_ZRC20Test.CallOpts)
}

// ExcludeSelectors is a free data retrieval call binding the contract method 0xb0464fdc.
//
// Solidity: function excludeSelectors() view returns((address,bytes4[])[] excludedSelectors_)
func (_ZRC20Test *ZRC20TestCallerSession) ExcludeSelectors() ([]StdInvariantFuzzSelector, error) {
	return _ZRC20Test.Contract.ExcludeSelectors(&_ZRC20Test.CallOpts)
}

// ExcludeSenders is a free data retrieval call binding the contract method 0x1ed7831c.
//
// Solidity: function excludeSenders() view returns(address[] excludedSenders_)
func (_ZRC20Test *ZRC20TestCaller) ExcludeSenders(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _ZRC20Test.contract.Call(opts, &out, "excludeSenders")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// ExcludeSenders is a free data retrieval call binding the contract method 0x1ed7831c.
//
// Solidity: function excludeSenders() view returns(address[] excludedSenders_)
func (_ZRC20Test *ZRC20TestSession) ExcludeSenders() ([]common.Address, error) {
	return _ZRC20Test.Contract.ExcludeSenders(&_ZRC20Test.CallOpts)
}

// ExcludeSenders is a free data retrieval call binding the contract method 0x1ed7831c.
//
// Solidity: function excludeSenders() view returns(address[] excludedSenders_)
func (_ZRC20Test *ZRC20TestCallerSession) ExcludeSenders() ([]common.Address, error) {
	return _ZRC20Test.Contract.ExcludeSenders(&_ZRC20Test.CallOpts)
}

// Failed is a free data retrieval call binding the contract method 0xba414fa6.
//
// Solidity: function failed() view returns(bool)
func (_ZRC20Test *ZRC20TestCaller) Failed(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _ZRC20Test.contract.Call(opts, &out, "failed")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Failed is a free data retrieval call binding the contract method 0xba414fa6.
//
// Solidity: function failed() view returns(bool)
func (_ZRC20Test *ZRC20TestSession) Failed() (bool, error) {
	return _ZRC20Test.Contract.Failed(&_ZRC20Test.CallOpts)
}

// Failed is a free data retrieval call binding the contract method 0xba414fa6.
//
// Solidity: function failed() view returns(bool)
func (_ZRC20Test *ZRC20TestCallerSession) Failed() (bool, error) {
	return _ZRC20Test.Contract.Failed(&_ZRC20Test.CallOpts)
}

// TargetArtifactSelectors is a free data retrieval call binding the contract method 0x66d9a9a0.
//
// Solidity: function targetArtifactSelectors() view returns((string,bytes4[])[] targetedArtifactSelectors_)
func (_ZRC20Test *ZRC20TestCaller) TargetArtifactSelectors(opts *bind.CallOpts) ([]StdInvariantFuzzArtifactSelector, error) {
	var out []interface{}
	err := _ZRC20Test.contract.Call(opts, &out, "targetArtifactSelectors")

	if err != nil {
		return *new([]StdInvariantFuzzArtifactSelector), err
	}

	out0 := *abi.ConvertType(out[0], new([]StdInvariantFuzzArtifactSelector)).(*[]StdInvariantFuzzArtifactSelector)

	return out0, err

}

// TargetArtifactSelectors is a free data retrieval call binding the contract method 0x66d9a9a0.
//
// Solidity: function targetArtifactSelectors() view returns((string,bytes4[])[] targetedArtifactSelectors_)
func (_ZRC20Test *ZRC20TestSession) TargetArtifactSelectors() ([]StdInvariantFuzzArtifactSelector, error) {
	return _ZRC20Test.Contract.TargetArtifactSelectors(&_ZRC20Test.CallOpts)
}

// TargetArtifactSelectors is a free data retrieval call binding the contract method 0x66d9a9a0.
//
// Solidity: function targetArtifactSelectors() view returns((string,bytes4[])[] targetedArtifactSelectors_)
func (_ZRC20Test *ZRC20TestCallerSession) TargetArtifactSelectors() ([]StdInvariantFuzzArtifactSelector, error) {
	return _ZRC20Test.Contract.TargetArtifactSelectors(&_ZRC20Test.CallOpts)
}

// TargetArtifacts is a free data retrieval call binding the contract method 0x85226c81.
//
// Solidity: function targetArtifacts() view returns(string[] targetedArtifacts_)
func (_ZRC20Test *ZRC20TestCaller) TargetArtifacts(opts *bind.CallOpts) ([]string, error) {
	var out []interface{}
	err := _ZRC20Test.contract.Call(opts, &out, "targetArtifacts")

	if err != nil {
		return *new([]string), err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)

	return out0, err

}

// TargetArtifacts is a free data retrieval call binding the contract method 0x85226c81.
//
// Solidity: function targetArtifacts() view returns(string[] targetedArtifacts_)
func (_ZRC20Test *ZRC20TestSession) TargetArtifacts() ([]string, error) {
	return _ZRC20Test.Contract.TargetArtifacts(&_ZRC20Test.CallOpts)
}

// TargetArtifacts is a free data retrieval call binding the contract method 0x85226c81.
//
// Solidity: function targetArtifacts() view returns(string[] targetedArtifacts_)
func (_ZRC20Test *ZRC20TestCallerSession) TargetArtifacts() ([]string, error) {
	return _ZRC20Test.Contract.TargetArtifacts(&_ZRC20Test.CallOpts)
}

// TargetContracts is a free data retrieval call binding the contract method 0x3f7286f4.
//
// Solidity: function targetContracts() view returns(address[] targetedContracts_)
func (_ZRC20Test *ZRC20TestCaller) TargetContracts(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _ZRC20Test.contract.Call(opts, &out, "targetContracts")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// TargetContracts is a free data retrieval call binding the contract method 0x3f7286f4.
//
// Solidity: function targetContracts() view returns(address[] targetedContracts_)
func (_ZRC20Test *ZRC20TestSession) TargetContracts() ([]common.Address, error) {
	return _ZRC20Test.Contract.TargetContracts(&_ZRC20Test.CallOpts)
}

// TargetContracts is a free data retrieval call binding the contract method 0x3f7286f4.
//
// Solidity: function targetContracts() view returns(address[] targetedContracts_)
func (_ZRC20Test *ZRC20TestCallerSession) TargetContracts() ([]common.Address, error) {
	return _ZRC20Test.Contract.TargetContracts(&_ZRC20Test.CallOpts)
}

// TargetInterfaces is a free data retrieval call binding the contract method 0x2ade3880.
//
// Solidity: function targetInterfaces() view returns((address,string[])[] targetedInterfaces_)
func (_ZRC20Test *ZRC20TestCaller) TargetInterfaces(opts *bind.CallOpts) ([]StdInvariantFuzzInterface, error) {
	var out []interface{}
	err := _ZRC20Test.contract.Call(opts, &out, "targetInterfaces")

	if err != nil {
		return *new([]StdInvariantFuzzInterface), err
	}

	out0 := *abi.ConvertType(out[0], new([]StdInvariantFuzzInterface)).(*[]StdInvariantFuzzInterface)

	return out0, err

}

// TargetInterfaces is a free data retrieval call binding the contract method 0x2ade3880.
//
// Solidity: function targetInterfaces() view returns((address,string[])[] targetedInterfaces_)
func (_ZRC20Test *ZRC20TestSession) TargetInterfaces() ([]StdInvariantFuzzInterface, error) {
	return _ZRC20Test.Contract.TargetInterfaces(&_ZRC20Test.CallOpts)
}

// TargetInterfaces is a free data retrieval call binding the contract method 0x2ade3880.
//
// Solidity: function targetInterfaces() view returns((address,string[])[] targetedInterfaces_)
func (_ZRC20Test *ZRC20TestCallerSession) TargetInterfaces() ([]StdInvariantFuzzInterface, error) {
	return _ZRC20Test.Contract.TargetInterfaces(&_ZRC20Test.CallOpts)
}

// TargetSelectors is a free data retrieval call binding the contract method 0x916a17c6.
//
// Solidity: function targetSelectors() view returns((address,bytes4[])[] targetedSelectors_)
func (_ZRC20Test *ZRC20TestCaller) TargetSelectors(opts *bind.CallOpts) ([]StdInvariantFuzzSelector, error) {
	var out []interface{}
	err := _ZRC20Test.contract.Call(opts, &out, "targetSelectors")

	if err != nil {
		return *new([]StdInvariantFuzzSelector), err
	}

	out0 := *abi.ConvertType(out[0], new([]StdInvariantFuzzSelector)).(*[]StdInvariantFuzzSelector)

	return out0, err

}

// TargetSelectors is a free data retrieval call binding the contract method 0x916a17c6.
//
// Solidity: function targetSelectors() view returns((address,bytes4[])[] targetedSelectors_)
func (_ZRC20Test *ZRC20TestSession) TargetSelectors() ([]StdInvariantFuzzSelector, error) {
	return _ZRC20Test.Contract.TargetSelectors(&_ZRC20Test.CallOpts)
}

// TargetSelectors is a free data retrieval call binding the contract method 0x916a17c6.
//
// Solidity: function targetSelectors() view returns((address,bytes4[])[] targetedSelectors_)
func (_ZRC20Test *ZRC20TestCallerSession) TargetSelectors() ([]StdInvariantFuzzSelector, error) {
	return _ZRC20Test.Contract.TargetSelectors(&_ZRC20Test.CallOpts)
}

// TargetSenders is a free data retrieval call binding the contract method 0x3e5e3c23.
//
// Solidity: function targetSenders() view returns(address[] targetedSenders_)
func (_ZRC20Test *ZRC20TestCaller) TargetSenders(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _ZRC20Test.contract.Call(opts, &out, "targetSenders")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// TargetSenders is a free data retrieval call binding the contract method 0x3e5e3c23.
//
// Solidity: function targetSenders() view returns(address[] targetedSenders_)
func (_ZRC20Test *ZRC20TestSession) TargetSenders() ([]common.Address, error) {
	return _ZRC20Test.Contract.TargetSenders(&_ZRC20Test.CallOpts)
}

// TargetSenders is a free data retrieval call binding the contract method 0x3e5e3c23.
//
// Solidity: function targetSenders() view returns(address[] targetedSenders_)
func (_ZRC20Test *ZRC20TestCallerSession) TargetSenders() ([]common.Address, error) {
	return _ZRC20Test.Contract.TargetSenders(&_ZRC20Test.CallOpts)
}

// SetUp is a paid mutator transaction binding the contract method 0x0a9254e4.
//
// Solidity: function setUp() returns()
func (_ZRC20Test *ZRC20TestTransactor) SetUp(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ZRC20Test.contract.Transact(opts, "setUp")
}

// SetUp is a paid mutator transaction binding the contract method 0x0a9254e4.
//
// Solidity: function setUp() returns()
func (_ZRC20Test *ZRC20TestSession) SetUp() (*types.Transaction, error) {
	return _ZRC20Test.Contract.SetUp(&_ZRC20Test.TransactOpts)
}

// SetUp is a paid mutator transaction binding the contract method 0x0a9254e4.
//
// Solidity: function setUp() returns()
func (_ZRC20Test *ZRC20TestTransactorSession) SetUp() (*types.Transaction, error) {
	return _ZRC20Test.Contract.SetUp(&_ZRC20Test.TransactOpts)
}

// TestApproveFailsIfRecipientIsZeroAddress is a paid mutator transaction binding the contract method 0x4cfc0aaa.
//
// Solidity: function testApproveFailsIfRecipientIsZeroAddress() returns()
func (_ZRC20Test *ZRC20TestTransactor) TestApproveFailsIfRecipientIsZeroAddress(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ZRC20Test.contract.Transact(opts, "testApproveFailsIfRecipientIsZeroAddress")
}

// TestApproveFailsIfRecipientIsZeroAddress is a paid mutator transaction binding the contract method 0x4cfc0aaa.
//
// Solidity: function testApproveFailsIfRecipientIsZeroAddress() returns()
func (_ZRC20Test *ZRC20TestSession) TestApproveFailsIfRecipientIsZeroAddress() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestApproveFailsIfRecipientIsZeroAddress(&_ZRC20Test.TransactOpts)
}

// TestApproveFailsIfRecipientIsZeroAddress is a paid mutator transaction binding the contract method 0x4cfc0aaa.
//
// Solidity: function testApproveFailsIfRecipientIsZeroAddress() returns()
func (_ZRC20Test *ZRC20TestTransactorSession) TestApproveFailsIfRecipientIsZeroAddress() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestApproveFailsIfRecipientIsZeroAddress(&_ZRC20Test.TransactOpts)
}

// TestBurn is a paid mutator transaction binding the contract method 0xe13aba48.
//
// Solidity: function testBurn() returns()
func (_ZRC20Test *ZRC20TestTransactor) TestBurn(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ZRC20Test.contract.Transact(opts, "testBurn")
}

// TestBurn is a paid mutator transaction binding the contract method 0xe13aba48.
//
// Solidity: function testBurn() returns()
func (_ZRC20Test *ZRC20TestSession) TestBurn() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestBurn(&_ZRC20Test.TransactOpts)
}

// TestBurn is a paid mutator transaction binding the contract method 0xe13aba48.
//
// Solidity: function testBurn() returns()
func (_ZRC20Test *ZRC20TestTransactorSession) TestBurn() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestBurn(&_ZRC20Test.TransactOpts)
}

// TestBurnFailsIfNoBalance is a paid mutator transaction binding the contract method 0x80326680.
//
// Solidity: function testBurnFailsIfNoBalance() returns()
func (_ZRC20Test *ZRC20TestTransactor) TestBurnFailsIfNoBalance(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ZRC20Test.contract.Transact(opts, "testBurnFailsIfNoBalance")
}

// TestBurnFailsIfNoBalance is a paid mutator transaction binding the contract method 0x80326680.
//
// Solidity: function testBurnFailsIfNoBalance() returns()
func (_ZRC20Test *ZRC20TestSession) TestBurnFailsIfNoBalance() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestBurnFailsIfNoBalance(&_ZRC20Test.TransactOpts)
}

// TestBurnFailsIfNoBalance is a paid mutator transaction binding the contract method 0x80326680.
//
// Solidity: function testBurnFailsIfNoBalance() returns()
func (_ZRC20Test *ZRC20TestTransactorSession) TestBurnFailsIfNoBalance() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestBurnFailsIfNoBalance(&_ZRC20Test.TransactOpts)
}

// TestDeposit is a paid mutator transaction binding the contract method 0x7f924c4e.
//
// Solidity: function testDeposit() returns()
func (_ZRC20Test *ZRC20TestTransactor) TestDeposit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ZRC20Test.contract.Transact(opts, "testDeposit")
}

// TestDeposit is a paid mutator transaction binding the contract method 0x7f924c4e.
//
// Solidity: function testDeposit() returns()
func (_ZRC20Test *ZRC20TestSession) TestDeposit() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestDeposit(&_ZRC20Test.TransactOpts)
}

// TestDeposit is a paid mutator transaction binding the contract method 0x7f924c4e.
//
// Solidity: function testDeposit() returns()
func (_ZRC20Test *ZRC20TestTransactorSession) TestDeposit() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestDeposit(&_ZRC20Test.TransactOpts)
}

// TestDepositFailsIfRecipientIsZeroAddress is a paid mutator transaction binding the contract method 0x0809dfef.
//
// Solidity: function testDepositFailsIfRecipientIsZeroAddress() returns()
func (_ZRC20Test *ZRC20TestTransactor) TestDepositFailsIfRecipientIsZeroAddress(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ZRC20Test.contract.Transact(opts, "testDepositFailsIfRecipientIsZeroAddress")
}

// TestDepositFailsIfRecipientIsZeroAddress is a paid mutator transaction binding the contract method 0x0809dfef.
//
// Solidity: function testDepositFailsIfRecipientIsZeroAddress() returns()
func (_ZRC20Test *ZRC20TestSession) TestDepositFailsIfRecipientIsZeroAddress() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestDepositFailsIfRecipientIsZeroAddress(&_ZRC20Test.TransactOpts)
}

// TestDepositFailsIfRecipientIsZeroAddress is a paid mutator transaction binding the contract method 0x0809dfef.
//
// Solidity: function testDepositFailsIfRecipientIsZeroAddress() returns()
func (_ZRC20Test *ZRC20TestTransactorSession) TestDepositFailsIfRecipientIsZeroAddress() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestDepositFailsIfRecipientIsZeroAddress(&_ZRC20Test.TransactOpts)
}

// TestDepositFailsIfSenderIsNotGateway is a paid mutator transaction binding the contract method 0x1142744e.
//
// Solidity: function testDepositFailsIfSenderIsNotGateway() returns()
func (_ZRC20Test *ZRC20TestTransactor) TestDepositFailsIfSenderIsNotGateway(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ZRC20Test.contract.Transact(opts, "testDepositFailsIfSenderIsNotGateway")
}

// TestDepositFailsIfSenderIsNotGateway is a paid mutator transaction binding the contract method 0x1142744e.
//
// Solidity: function testDepositFailsIfSenderIsNotGateway() returns()
func (_ZRC20Test *ZRC20TestSession) TestDepositFailsIfSenderIsNotGateway() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestDepositFailsIfSenderIsNotGateway(&_ZRC20Test.TransactOpts)
}

// TestDepositFailsIfSenderIsNotGateway is a paid mutator transaction binding the contract method 0x1142744e.
//
// Solidity: function testDepositFailsIfSenderIsNotGateway() returns()
func (_ZRC20Test *ZRC20TestTransactorSession) TestDepositFailsIfSenderIsNotGateway() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestDepositFailsIfSenderIsNotGateway(&_ZRC20Test.TransactOpts)
}

// TestTransfer is a paid mutator transaction binding the contract method 0xd591221f.
//
// Solidity: function testTransfer() returns()
func (_ZRC20Test *ZRC20TestTransactor) TestTransfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ZRC20Test.contract.Transact(opts, "testTransfer")
}

// TestTransfer is a paid mutator transaction binding the contract method 0xd591221f.
//
// Solidity: function testTransfer() returns()
func (_ZRC20Test *ZRC20TestSession) TestTransfer() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestTransfer(&_ZRC20Test.TransactOpts)
}

// TestTransfer is a paid mutator transaction binding the contract method 0xd591221f.
//
// Solidity: function testTransfer() returns()
func (_ZRC20Test *ZRC20TestTransactorSession) TestTransfer() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestTransfer(&_ZRC20Test.TransactOpts)
}

// TestTransferFailsIfNoBalance is a paid mutator transaction binding the contract method 0x8ce7ef05.
//
// Solidity: function testTransferFailsIfNoBalance() returns()
func (_ZRC20Test *ZRC20TestTransactor) TestTransferFailsIfNoBalance(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ZRC20Test.contract.Transact(opts, "testTransferFailsIfNoBalance")
}

// TestTransferFailsIfNoBalance is a paid mutator transaction binding the contract method 0x8ce7ef05.
//
// Solidity: function testTransferFailsIfNoBalance() returns()
func (_ZRC20Test *ZRC20TestSession) TestTransferFailsIfNoBalance() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestTransferFailsIfNoBalance(&_ZRC20Test.TransactOpts)
}

// TestTransferFailsIfNoBalance is a paid mutator transaction binding the contract method 0x8ce7ef05.
//
// Solidity: function testTransferFailsIfNoBalance() returns()
func (_ZRC20Test *ZRC20TestTransactorSession) TestTransferFailsIfNoBalance() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestTransferFailsIfNoBalance(&_ZRC20Test.TransactOpts)
}

// TestTransferFailsIfRecipientIsZeroAddress is a paid mutator transaction binding the contract method 0xa4aa6c7c.
//
// Solidity: function testTransferFailsIfRecipientIsZeroAddress() returns()
func (_ZRC20Test *ZRC20TestTransactor) TestTransferFailsIfRecipientIsZeroAddress(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ZRC20Test.contract.Transact(opts, "testTransferFailsIfRecipientIsZeroAddress")
}

// TestTransferFailsIfRecipientIsZeroAddress is a paid mutator transaction binding the contract method 0xa4aa6c7c.
//
// Solidity: function testTransferFailsIfRecipientIsZeroAddress() returns()
func (_ZRC20Test *ZRC20TestSession) TestTransferFailsIfRecipientIsZeroAddress() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestTransferFailsIfRecipientIsZeroAddress(&_ZRC20Test.TransactOpts)
}

// TestTransferFailsIfRecipientIsZeroAddress is a paid mutator transaction binding the contract method 0xa4aa6c7c.
//
// Solidity: function testTransferFailsIfRecipientIsZeroAddress() returns()
func (_ZRC20Test *ZRC20TestTransactorSession) TestTransferFailsIfRecipientIsZeroAddress() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestTransferFailsIfRecipientIsZeroAddress(&_ZRC20Test.TransactOpts)
}

// TestTransferFrom is a paid mutator transaction binding the contract method 0x70557298.
//
// Solidity: function testTransferFrom() returns()
func (_ZRC20Test *ZRC20TestTransactor) TestTransferFrom(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ZRC20Test.contract.Transact(opts, "testTransferFrom")
}

// TestTransferFrom is a paid mutator transaction binding the contract method 0x70557298.
//
// Solidity: function testTransferFrom() returns()
func (_ZRC20Test *ZRC20TestSession) TestTransferFrom() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestTransferFrom(&_ZRC20Test.TransactOpts)
}

// TestTransferFrom is a paid mutator transaction binding the contract method 0x70557298.
//
// Solidity: function testTransferFrom() returns()
func (_ZRC20Test *ZRC20TestTransactorSession) TestTransferFrom() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestTransferFrom(&_ZRC20Test.TransactOpts)
}

// TestTransferFromFailsIfNoAllowance is a paid mutator transaction binding the contract method 0xf2413096.
//
// Solidity: function testTransferFromFailsIfNoAllowance() returns()
func (_ZRC20Test *ZRC20TestTransactor) TestTransferFromFailsIfNoAllowance(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ZRC20Test.contract.Transact(opts, "testTransferFromFailsIfNoAllowance")
}

// TestTransferFromFailsIfNoAllowance is a paid mutator transaction binding the contract method 0xf2413096.
//
// Solidity: function testTransferFromFailsIfNoAllowance() returns()
func (_ZRC20Test *ZRC20TestSession) TestTransferFromFailsIfNoAllowance() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestTransferFromFailsIfNoAllowance(&_ZRC20Test.TransactOpts)
}

// TestTransferFromFailsIfNoAllowance is a paid mutator transaction binding the contract method 0xf2413096.
//
// Solidity: function testTransferFromFailsIfNoAllowance() returns()
func (_ZRC20Test *ZRC20TestTransactorSession) TestTransferFromFailsIfNoAllowance() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestTransferFromFailsIfNoAllowance(&_ZRC20Test.TransactOpts)
}

// TestTransferFromFailsIfNoBalance is a paid mutator transaction binding the contract method 0x6ff45850.
//
// Solidity: function testTransferFromFailsIfNoBalance() returns()
func (_ZRC20Test *ZRC20TestTransactor) TestTransferFromFailsIfNoBalance(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ZRC20Test.contract.Transact(opts, "testTransferFromFailsIfNoBalance")
}

// TestTransferFromFailsIfNoBalance is a paid mutator transaction binding the contract method 0x6ff45850.
//
// Solidity: function testTransferFromFailsIfNoBalance() returns()
func (_ZRC20Test *ZRC20TestSession) TestTransferFromFailsIfNoBalance() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestTransferFromFailsIfNoBalance(&_ZRC20Test.TransactOpts)
}

// TestTransferFromFailsIfNoBalance is a paid mutator transaction binding the contract method 0x6ff45850.
//
// Solidity: function testTransferFromFailsIfNoBalance() returns()
func (_ZRC20Test *ZRC20TestTransactorSession) TestTransferFromFailsIfNoBalance() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestTransferFromFailsIfNoBalance(&_ZRC20Test.TransactOpts)
}

// TestTransferFromFailsIfRecipientIsZeroAddress is a paid mutator transaction binding the contract method 0xd97136a2.
//
// Solidity: function testTransferFromFailsIfRecipientIsZeroAddress() returns()
func (_ZRC20Test *ZRC20TestTransactor) TestTransferFromFailsIfRecipientIsZeroAddress(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ZRC20Test.contract.Transact(opts, "testTransferFromFailsIfRecipientIsZeroAddress")
}

// TestTransferFromFailsIfRecipientIsZeroAddress is a paid mutator transaction binding the contract method 0xd97136a2.
//
// Solidity: function testTransferFromFailsIfRecipientIsZeroAddress() returns()
func (_ZRC20Test *ZRC20TestSession) TestTransferFromFailsIfRecipientIsZeroAddress() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestTransferFromFailsIfRecipientIsZeroAddress(&_ZRC20Test.TransactOpts)
}

// TestTransferFromFailsIfRecipientIsZeroAddress is a paid mutator transaction binding the contract method 0xd97136a2.
//
// Solidity: function testTransferFromFailsIfRecipientIsZeroAddress() returns()
func (_ZRC20Test *ZRC20TestTransactorSession) TestTransferFromFailsIfRecipientIsZeroAddress() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestTransferFromFailsIfRecipientIsZeroAddress(&_ZRC20Test.TransactOpts)
}

// TestTransferFromFailsIfSenderIsZeroAddress is a paid mutator transaction binding the contract method 0x28438826.
//
// Solidity: function testTransferFromFailsIfSenderIsZeroAddress() returns()
func (_ZRC20Test *ZRC20TestTransactor) TestTransferFromFailsIfSenderIsZeroAddress(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ZRC20Test.contract.Transact(opts, "testTransferFromFailsIfSenderIsZeroAddress")
}

// TestTransferFromFailsIfSenderIsZeroAddress is a paid mutator transaction binding the contract method 0x28438826.
//
// Solidity: function testTransferFromFailsIfSenderIsZeroAddress() returns()
func (_ZRC20Test *ZRC20TestSession) TestTransferFromFailsIfSenderIsZeroAddress() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestTransferFromFailsIfSenderIsZeroAddress(&_ZRC20Test.TransactOpts)
}

// TestTransferFromFailsIfSenderIsZeroAddress is a paid mutator transaction binding the contract method 0x28438826.
//
// Solidity: function testTransferFromFailsIfSenderIsZeroAddress() returns()
func (_ZRC20Test *ZRC20TestTransactorSession) TestTransferFromFailsIfSenderIsZeroAddress() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestTransferFromFailsIfSenderIsZeroAddress(&_ZRC20Test.TransactOpts)
}

// TestUpdateGasLimit is a paid mutator transaction binding the contract method 0x5f01db7e.
//
// Solidity: function testUpdateGasLimit() returns()
func (_ZRC20Test *ZRC20TestTransactor) TestUpdateGasLimit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ZRC20Test.contract.Transact(opts, "testUpdateGasLimit")
}

// TestUpdateGasLimit is a paid mutator transaction binding the contract method 0x5f01db7e.
//
// Solidity: function testUpdateGasLimit() returns()
func (_ZRC20Test *ZRC20TestSession) TestUpdateGasLimit() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestUpdateGasLimit(&_ZRC20Test.TransactOpts)
}

// TestUpdateGasLimit is a paid mutator transaction binding the contract method 0x5f01db7e.
//
// Solidity: function testUpdateGasLimit() returns()
func (_ZRC20Test *ZRC20TestTransactorSession) TestUpdateGasLimit() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestUpdateGasLimit(&_ZRC20Test.TransactOpts)
}

// TestUpdateGasLimitFailsIfSenderIsNotFungible is a paid mutator transaction binding the contract method 0xb549984c.
//
// Solidity: function testUpdateGasLimitFailsIfSenderIsNotFungible() returns()
func (_ZRC20Test *ZRC20TestTransactor) TestUpdateGasLimitFailsIfSenderIsNotFungible(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ZRC20Test.contract.Transact(opts, "testUpdateGasLimitFailsIfSenderIsNotFungible")
}

// TestUpdateGasLimitFailsIfSenderIsNotFungible is a paid mutator transaction binding the contract method 0xb549984c.
//
// Solidity: function testUpdateGasLimitFailsIfSenderIsNotFungible() returns()
func (_ZRC20Test *ZRC20TestSession) TestUpdateGasLimitFailsIfSenderIsNotFungible() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestUpdateGasLimitFailsIfSenderIsNotFungible(&_ZRC20Test.TransactOpts)
}

// TestUpdateGasLimitFailsIfSenderIsNotFungible is a paid mutator transaction binding the contract method 0xb549984c.
//
// Solidity: function testUpdateGasLimitFailsIfSenderIsNotFungible() returns()
func (_ZRC20Test *ZRC20TestTransactorSession) TestUpdateGasLimitFailsIfSenderIsNotFungible() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestUpdateGasLimitFailsIfSenderIsNotFungible(&_ZRC20Test.TransactOpts)
}

// TestUpdateGatewayAddress is a paid mutator transaction binding the contract method 0xdfbdf600.
//
// Solidity: function testUpdateGatewayAddress() returns()
func (_ZRC20Test *ZRC20TestTransactor) TestUpdateGatewayAddress(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ZRC20Test.contract.Transact(opts, "testUpdateGatewayAddress")
}

// TestUpdateGatewayAddress is a paid mutator transaction binding the contract method 0xdfbdf600.
//
// Solidity: function testUpdateGatewayAddress() returns()
func (_ZRC20Test *ZRC20TestSession) TestUpdateGatewayAddress() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestUpdateGatewayAddress(&_ZRC20Test.TransactOpts)
}

// TestUpdateGatewayAddress is a paid mutator transaction binding the contract method 0xdfbdf600.
//
// Solidity: function testUpdateGatewayAddress() returns()
func (_ZRC20Test *ZRC20TestTransactorSession) TestUpdateGatewayAddress() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestUpdateGatewayAddress(&_ZRC20Test.TransactOpts)
}

// TestUpdateGatewayAddressFailsIfSenderIsNotFungible is a paid mutator transaction binding the contract method 0x4b629509.
//
// Solidity: function testUpdateGatewayAddressFailsIfSenderIsNotFungible() returns()
func (_ZRC20Test *ZRC20TestTransactor) TestUpdateGatewayAddressFailsIfSenderIsNotFungible(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ZRC20Test.contract.Transact(opts, "testUpdateGatewayAddressFailsIfSenderIsNotFungible")
}

// TestUpdateGatewayAddressFailsIfSenderIsNotFungible is a paid mutator transaction binding the contract method 0x4b629509.
//
// Solidity: function testUpdateGatewayAddressFailsIfSenderIsNotFungible() returns()
func (_ZRC20Test *ZRC20TestSession) TestUpdateGatewayAddressFailsIfSenderIsNotFungible() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestUpdateGatewayAddressFailsIfSenderIsNotFungible(&_ZRC20Test.TransactOpts)
}

// TestUpdateGatewayAddressFailsIfSenderIsNotFungible is a paid mutator transaction binding the contract method 0x4b629509.
//
// Solidity: function testUpdateGatewayAddressFailsIfSenderIsNotFungible() returns()
func (_ZRC20Test *ZRC20TestTransactorSession) TestUpdateGatewayAddressFailsIfSenderIsNotFungible() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestUpdateGatewayAddressFailsIfSenderIsNotFungible(&_ZRC20Test.TransactOpts)
}

// TestUpdateGatewayAddressFailsIfZeroAddress is a paid mutator transaction binding the contract method 0xd1fd3291.
//
// Solidity: function testUpdateGatewayAddressFailsIfZeroAddress() returns()
func (_ZRC20Test *ZRC20TestTransactor) TestUpdateGatewayAddressFailsIfZeroAddress(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ZRC20Test.contract.Transact(opts, "testUpdateGatewayAddressFailsIfZeroAddress")
}

// TestUpdateGatewayAddressFailsIfZeroAddress is a paid mutator transaction binding the contract method 0xd1fd3291.
//
// Solidity: function testUpdateGatewayAddressFailsIfZeroAddress() returns()
func (_ZRC20Test *ZRC20TestSession) TestUpdateGatewayAddressFailsIfZeroAddress() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestUpdateGatewayAddressFailsIfZeroAddress(&_ZRC20Test.TransactOpts)
}

// TestUpdateGatewayAddressFailsIfZeroAddress is a paid mutator transaction binding the contract method 0xd1fd3291.
//
// Solidity: function testUpdateGatewayAddressFailsIfZeroAddress() returns()
func (_ZRC20Test *ZRC20TestTransactorSession) TestUpdateGatewayAddressFailsIfZeroAddress() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestUpdateGatewayAddressFailsIfZeroAddress(&_ZRC20Test.TransactOpts)
}

// TestUpdateProtocolFlatFee is a paid mutator transaction binding the contract method 0xd04cda98.
//
// Solidity: function testUpdateProtocolFlatFee() returns()
func (_ZRC20Test *ZRC20TestTransactor) TestUpdateProtocolFlatFee(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ZRC20Test.contract.Transact(opts, "testUpdateProtocolFlatFee")
}

// TestUpdateProtocolFlatFee is a paid mutator transaction binding the contract method 0xd04cda98.
//
// Solidity: function testUpdateProtocolFlatFee() returns()
func (_ZRC20Test *ZRC20TestSession) TestUpdateProtocolFlatFee() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestUpdateProtocolFlatFee(&_ZRC20Test.TransactOpts)
}

// TestUpdateProtocolFlatFee is a paid mutator transaction binding the contract method 0xd04cda98.
//
// Solidity: function testUpdateProtocolFlatFee() returns()
func (_ZRC20Test *ZRC20TestTransactorSession) TestUpdateProtocolFlatFee() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestUpdateProtocolFlatFee(&_ZRC20Test.TransactOpts)
}

// TestUpdateProtocolFlatFeeFailsIfSenderIsNotFungible is a paid mutator transaction binding the contract method 0x0393998b.
//
// Solidity: function testUpdateProtocolFlatFeeFailsIfSenderIsNotFungible() returns()
func (_ZRC20Test *ZRC20TestTransactor) TestUpdateProtocolFlatFeeFailsIfSenderIsNotFungible(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ZRC20Test.contract.Transact(opts, "testUpdateProtocolFlatFeeFailsIfSenderIsNotFungible")
}

// TestUpdateProtocolFlatFeeFailsIfSenderIsNotFungible is a paid mutator transaction binding the contract method 0x0393998b.
//
// Solidity: function testUpdateProtocolFlatFeeFailsIfSenderIsNotFungible() returns()
func (_ZRC20Test *ZRC20TestSession) TestUpdateProtocolFlatFeeFailsIfSenderIsNotFungible() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestUpdateProtocolFlatFeeFailsIfSenderIsNotFungible(&_ZRC20Test.TransactOpts)
}

// TestUpdateProtocolFlatFeeFailsIfSenderIsNotFungible is a paid mutator transaction binding the contract method 0x0393998b.
//
// Solidity: function testUpdateProtocolFlatFeeFailsIfSenderIsNotFungible() returns()
func (_ZRC20Test *ZRC20TestTransactorSession) TestUpdateProtocolFlatFeeFailsIfSenderIsNotFungible() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestUpdateProtocolFlatFeeFailsIfSenderIsNotFungible(&_ZRC20Test.TransactOpts)
}

// TestUpdateSystemContractAddress is a paid mutator transaction binding the contract method 0x2f6254fc.
//
// Solidity: function testUpdateSystemContractAddress() returns()
func (_ZRC20Test *ZRC20TestTransactor) TestUpdateSystemContractAddress(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ZRC20Test.contract.Transact(opts, "testUpdateSystemContractAddress")
}

// TestUpdateSystemContractAddress is a paid mutator transaction binding the contract method 0x2f6254fc.
//
// Solidity: function testUpdateSystemContractAddress() returns()
func (_ZRC20Test *ZRC20TestSession) TestUpdateSystemContractAddress() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestUpdateSystemContractAddress(&_ZRC20Test.TransactOpts)
}

// TestUpdateSystemContractAddress is a paid mutator transaction binding the contract method 0x2f6254fc.
//
// Solidity: function testUpdateSystemContractAddress() returns()
func (_ZRC20Test *ZRC20TestTransactorSession) TestUpdateSystemContractAddress() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestUpdateSystemContractAddress(&_ZRC20Test.TransactOpts)
}

// TestUpdateSystemContractAddressFailsIfSenderIsNotFungible is a paid mutator transaction binding the contract method 0x58fdbbe0.
//
// Solidity: function testUpdateSystemContractAddressFailsIfSenderIsNotFungible() returns()
func (_ZRC20Test *ZRC20TestTransactor) TestUpdateSystemContractAddressFailsIfSenderIsNotFungible(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ZRC20Test.contract.Transact(opts, "testUpdateSystemContractAddressFailsIfSenderIsNotFungible")
}

// TestUpdateSystemContractAddressFailsIfSenderIsNotFungible is a paid mutator transaction binding the contract method 0x58fdbbe0.
//
// Solidity: function testUpdateSystemContractAddressFailsIfSenderIsNotFungible() returns()
func (_ZRC20Test *ZRC20TestSession) TestUpdateSystemContractAddressFailsIfSenderIsNotFungible() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestUpdateSystemContractAddressFailsIfSenderIsNotFungible(&_ZRC20Test.TransactOpts)
}

// TestUpdateSystemContractAddressFailsIfSenderIsNotFungible is a paid mutator transaction binding the contract method 0x58fdbbe0.
//
// Solidity: function testUpdateSystemContractAddressFailsIfSenderIsNotFungible() returns()
func (_ZRC20Test *ZRC20TestTransactorSession) TestUpdateSystemContractAddressFailsIfSenderIsNotFungible() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestUpdateSystemContractAddressFailsIfSenderIsNotFungible(&_ZRC20Test.TransactOpts)
}

// TestUpdateSystemContractAddressFailsIfZeroAddress is a paid mutator transaction binding the contract method 0xd27b0427.
//
// Solidity: function testUpdateSystemContractAddressFailsIfZeroAddress() returns()
func (_ZRC20Test *ZRC20TestTransactor) TestUpdateSystemContractAddressFailsIfZeroAddress(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ZRC20Test.contract.Transact(opts, "testUpdateSystemContractAddressFailsIfZeroAddress")
}

// TestUpdateSystemContractAddressFailsIfZeroAddress is a paid mutator transaction binding the contract method 0xd27b0427.
//
// Solidity: function testUpdateSystemContractAddressFailsIfZeroAddress() returns()
func (_ZRC20Test *ZRC20TestSession) TestUpdateSystemContractAddressFailsIfZeroAddress() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestUpdateSystemContractAddressFailsIfZeroAddress(&_ZRC20Test.TransactOpts)
}

// TestUpdateSystemContractAddressFailsIfZeroAddress is a paid mutator transaction binding the contract method 0xd27b0427.
//
// Solidity: function testUpdateSystemContractAddressFailsIfZeroAddress() returns()
func (_ZRC20Test *ZRC20TestTransactorSession) TestUpdateSystemContractAddressFailsIfZeroAddress() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestUpdateSystemContractAddressFailsIfZeroAddress(&_ZRC20Test.TransactOpts)
}

// TestWithdraw is a paid mutator transaction binding the contract method 0xd509b16c.
//
// Solidity: function testWithdraw() returns()
func (_ZRC20Test *ZRC20TestTransactor) TestWithdraw(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ZRC20Test.contract.Transact(opts, "testWithdraw")
}

// TestWithdraw is a paid mutator transaction binding the contract method 0xd509b16c.
//
// Solidity: function testWithdraw() returns()
func (_ZRC20Test *ZRC20TestSession) TestWithdraw() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestWithdraw(&_ZRC20Test.TransactOpts)
}

// TestWithdraw is a paid mutator transaction binding the contract method 0xd509b16c.
//
// Solidity: function testWithdraw() returns()
func (_ZRC20Test *ZRC20TestTransactorSession) TestWithdraw() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestWithdraw(&_ZRC20Test.TransactOpts)
}

// TestWithdrawFailsIfNoAllowance is a paid mutator transaction binding the contract method 0x51399962.
//
// Solidity: function testWithdrawFailsIfNoAllowance() returns()
func (_ZRC20Test *ZRC20TestTransactor) TestWithdrawFailsIfNoAllowance(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ZRC20Test.contract.Transact(opts, "testWithdrawFailsIfNoAllowance")
}

// TestWithdrawFailsIfNoAllowance is a paid mutator transaction binding the contract method 0x51399962.
//
// Solidity: function testWithdrawFailsIfNoAllowance() returns()
func (_ZRC20Test *ZRC20TestSession) TestWithdrawFailsIfNoAllowance() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestWithdrawFailsIfNoAllowance(&_ZRC20Test.TransactOpts)
}

// TestWithdrawFailsIfNoAllowance is a paid mutator transaction binding the contract method 0x51399962.
//
// Solidity: function testWithdrawFailsIfNoAllowance() returns()
func (_ZRC20Test *ZRC20TestTransactorSession) TestWithdrawFailsIfNoAllowance() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestWithdrawFailsIfNoAllowance(&_ZRC20Test.TransactOpts)
}

// TestWithdrawFailsIfNoBalance is a paid mutator transaction binding the contract method 0xb79cad09.
//
// Solidity: function testWithdrawFailsIfNoBalance() returns()
func (_ZRC20Test *ZRC20TestTransactor) TestWithdrawFailsIfNoBalance(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ZRC20Test.contract.Transact(opts, "testWithdrawFailsIfNoBalance")
}

// TestWithdrawFailsIfNoBalance is a paid mutator transaction binding the contract method 0xb79cad09.
//
// Solidity: function testWithdrawFailsIfNoBalance() returns()
func (_ZRC20Test *ZRC20TestSession) TestWithdrawFailsIfNoBalance() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestWithdrawFailsIfNoBalance(&_ZRC20Test.TransactOpts)
}

// TestWithdrawFailsIfNoBalance is a paid mutator transaction binding the contract method 0xb79cad09.
//
// Solidity: function testWithdrawFailsIfNoBalance() returns()
func (_ZRC20Test *ZRC20TestTransactorSession) TestWithdrawFailsIfNoBalance() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestWithdrawFailsIfNoBalance(&_ZRC20Test.TransactOpts)
}

// TestWithdrawGasFee is a paid mutator transaction binding the contract method 0xdcba486a.
//
// Solidity: function testWithdrawGasFee() returns()
func (_ZRC20Test *ZRC20TestTransactor) TestWithdrawGasFee(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ZRC20Test.contract.Transact(opts, "testWithdrawGasFee")
}

// TestWithdrawGasFee is a paid mutator transaction binding the contract method 0xdcba486a.
//
// Solidity: function testWithdrawGasFee() returns()
func (_ZRC20Test *ZRC20TestSession) TestWithdrawGasFee() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestWithdrawGasFee(&_ZRC20Test.TransactOpts)
}

// TestWithdrawGasFee is a paid mutator transaction binding the contract method 0xdcba486a.
//
// Solidity: function testWithdrawGasFee() returns()
func (_ZRC20Test *ZRC20TestTransactorSession) TestWithdrawGasFee() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestWithdrawGasFee(&_ZRC20Test.TransactOpts)
}

// TestWithdrawGasFeeFailsIfGasCoinNotSetForChainId is a paid mutator transaction binding the contract method 0xf1f87f40.
//
// Solidity: function testWithdrawGasFeeFailsIfGasCoinNotSetForChainId() returns()
func (_ZRC20Test *ZRC20TestTransactor) TestWithdrawGasFeeFailsIfGasCoinNotSetForChainId(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ZRC20Test.contract.Transact(opts, "testWithdrawGasFeeFailsIfGasCoinNotSetForChainId")
}

// TestWithdrawGasFeeFailsIfGasCoinNotSetForChainId is a paid mutator transaction binding the contract method 0xf1f87f40.
//
// Solidity: function testWithdrawGasFeeFailsIfGasCoinNotSetForChainId() returns()
func (_ZRC20Test *ZRC20TestSession) TestWithdrawGasFeeFailsIfGasCoinNotSetForChainId() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestWithdrawGasFeeFailsIfGasCoinNotSetForChainId(&_ZRC20Test.TransactOpts)
}

// TestWithdrawGasFeeFailsIfGasCoinNotSetForChainId is a paid mutator transaction binding the contract method 0xf1f87f40.
//
// Solidity: function testWithdrawGasFeeFailsIfGasCoinNotSetForChainId() returns()
func (_ZRC20Test *ZRC20TestTransactorSession) TestWithdrawGasFeeFailsIfGasCoinNotSetForChainId() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestWithdrawGasFeeFailsIfGasCoinNotSetForChainId(&_ZRC20Test.TransactOpts)
}

// TestWithdrawGasFeeFailsIfGasPriceNotSetForChainId is a paid mutator transaction binding the contract method 0x3be9ec80.
//
// Solidity: function testWithdrawGasFeeFailsIfGasPriceNotSetForChainId() returns()
func (_ZRC20Test *ZRC20TestTransactor) TestWithdrawGasFeeFailsIfGasPriceNotSetForChainId(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ZRC20Test.contract.Transact(opts, "testWithdrawGasFeeFailsIfGasPriceNotSetForChainId")
}

// TestWithdrawGasFeeFailsIfGasPriceNotSetForChainId is a paid mutator transaction binding the contract method 0x3be9ec80.
//
// Solidity: function testWithdrawGasFeeFailsIfGasPriceNotSetForChainId() returns()
func (_ZRC20Test *ZRC20TestSession) TestWithdrawGasFeeFailsIfGasPriceNotSetForChainId() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestWithdrawGasFeeFailsIfGasPriceNotSetForChainId(&_ZRC20Test.TransactOpts)
}

// TestWithdrawGasFeeFailsIfGasPriceNotSetForChainId is a paid mutator transaction binding the contract method 0x3be9ec80.
//
// Solidity: function testWithdrawGasFeeFailsIfGasPriceNotSetForChainId() returns()
func (_ZRC20Test *ZRC20TestTransactorSession) TestWithdrawGasFeeFailsIfGasPriceNotSetForChainId() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestWithdrawGasFeeFailsIfGasPriceNotSetForChainId(&_ZRC20Test.TransactOpts)
}

// TestZRC20BasicInfo is a paid mutator transaction binding the contract method 0xae9687dc.
//
// Solidity: function testZRC20BasicInfo() returns()
func (_ZRC20Test *ZRC20TestTransactor) TestZRC20BasicInfo(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ZRC20Test.contract.Transact(opts, "testZRC20BasicInfo")
}

// TestZRC20BasicInfo is a paid mutator transaction binding the contract method 0xae9687dc.
//
// Solidity: function testZRC20BasicInfo() returns()
func (_ZRC20Test *ZRC20TestSession) TestZRC20BasicInfo() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestZRC20BasicInfo(&_ZRC20Test.TransactOpts)
}

// TestZRC20BasicInfo is a paid mutator transaction binding the contract method 0xae9687dc.
//
// Solidity: function testZRC20BasicInfo() returns()
func (_ZRC20Test *ZRC20TestTransactorSession) TestZRC20BasicInfo() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestZRC20BasicInfo(&_ZRC20Test.TransactOpts)
}

// ZRC20TestLogIterator is returned from FilterLog and is used to iterate over the raw logs and unpacked data for Log events raised by the ZRC20Test contract.
type ZRC20TestLogIterator struct {
	Event *ZRC20TestLog // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZRC20TestLogIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZRC20TestLog)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZRC20TestLog)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZRC20TestLogIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZRC20TestLogIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZRC20TestLog represents a Log event raised by the ZRC20Test contract.
type ZRC20TestLog struct {
	Arg0 string
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLog is a free log retrieval operation binding the contract event 0x41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50.
//
// Solidity: event log(string arg0)
func (_ZRC20Test *ZRC20TestFilterer) FilterLog(opts *bind.FilterOpts) (*ZRC20TestLogIterator, error) {

	logs, sub, err := _ZRC20Test.contract.FilterLogs(opts, "log")
	if err != nil {
		return nil, err
	}
	return &ZRC20TestLogIterator{contract: _ZRC20Test.contract, event: "log", logs: logs, sub: sub}, nil
}

// WatchLog is a free log subscription operation binding the contract event 0x41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50.
//
// Solidity: event log(string arg0)
func (_ZRC20Test *ZRC20TestFilterer) WatchLog(opts *bind.WatchOpts, sink chan<- *ZRC20TestLog) (event.Subscription, error) {

	logs, sub, err := _ZRC20Test.contract.WatchLogs(opts, "log")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZRC20TestLog)
				if err := _ZRC20Test.contract.UnpackLog(event, "log", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLog is a log parse operation binding the contract event 0x41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50.
//
// Solidity: event log(string arg0)
func (_ZRC20Test *ZRC20TestFilterer) ParseLog(log types.Log) (*ZRC20TestLog, error) {
	event := new(ZRC20TestLog)
	if err := _ZRC20Test.contract.UnpackLog(event, "log", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZRC20TestLogAddressIterator is returned from FilterLogAddress and is used to iterate over the raw logs and unpacked data for LogAddress events raised by the ZRC20Test contract.
type ZRC20TestLogAddressIterator struct {
	Event *ZRC20TestLogAddress // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZRC20TestLogAddressIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZRC20TestLogAddress)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZRC20TestLogAddress)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZRC20TestLogAddressIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZRC20TestLogAddressIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZRC20TestLogAddress represents a LogAddress event raised by the ZRC20Test contract.
type ZRC20TestLogAddress struct {
	Arg0 common.Address
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogAddress is a free log retrieval operation binding the contract event 0x7ae74c527414ae135fd97047b12921a5ec3911b804197855d67e25c7b75ee6f3.
//
// Solidity: event log_address(address arg0)
func (_ZRC20Test *ZRC20TestFilterer) FilterLogAddress(opts *bind.FilterOpts) (*ZRC20TestLogAddressIterator, error) {

	logs, sub, err := _ZRC20Test.contract.FilterLogs(opts, "log_address")
	if err != nil {
		return nil, err
	}
	return &ZRC20TestLogAddressIterator{contract: _ZRC20Test.contract, event: "log_address", logs: logs, sub: sub}, nil
}

// WatchLogAddress is a free log subscription operation binding the contract event 0x7ae74c527414ae135fd97047b12921a5ec3911b804197855d67e25c7b75ee6f3.
//
// Solidity: event log_address(address arg0)
func (_ZRC20Test *ZRC20TestFilterer) WatchLogAddress(opts *bind.WatchOpts, sink chan<- *ZRC20TestLogAddress) (event.Subscription, error) {

	logs, sub, err := _ZRC20Test.contract.WatchLogs(opts, "log_address")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZRC20TestLogAddress)
				if err := _ZRC20Test.contract.UnpackLog(event, "log_address", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogAddress is a log parse operation binding the contract event 0x7ae74c527414ae135fd97047b12921a5ec3911b804197855d67e25c7b75ee6f3.
//
// Solidity: event log_address(address arg0)
func (_ZRC20Test *ZRC20TestFilterer) ParseLogAddress(log types.Log) (*ZRC20TestLogAddress, error) {
	event := new(ZRC20TestLogAddress)
	if err := _ZRC20Test.contract.UnpackLog(event, "log_address", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZRC20TestLogArrayIterator is returned from FilterLogArray and is used to iterate over the raw logs and unpacked data for LogArray events raised by the ZRC20Test contract.
type ZRC20TestLogArrayIterator struct {
	Event *ZRC20TestLogArray // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZRC20TestLogArrayIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZRC20TestLogArray)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZRC20TestLogArray)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZRC20TestLogArrayIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZRC20TestLogArrayIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZRC20TestLogArray represents a LogArray event raised by the ZRC20Test contract.
type ZRC20TestLogArray struct {
	Val []*big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogArray is a free log retrieval operation binding the contract event 0xfb102865d50addddf69da9b5aa1bced66c80cf869a5c8d0471a467e18ce9cab1.
//
// Solidity: event log_array(uint256[] val)
func (_ZRC20Test *ZRC20TestFilterer) FilterLogArray(opts *bind.FilterOpts) (*ZRC20TestLogArrayIterator, error) {

	logs, sub, err := _ZRC20Test.contract.FilterLogs(opts, "log_array")
	if err != nil {
		return nil, err
	}
	return &ZRC20TestLogArrayIterator{contract: _ZRC20Test.contract, event: "log_array", logs: logs, sub: sub}, nil
}

// WatchLogArray is a free log subscription operation binding the contract event 0xfb102865d50addddf69da9b5aa1bced66c80cf869a5c8d0471a467e18ce9cab1.
//
// Solidity: event log_array(uint256[] val)
func (_ZRC20Test *ZRC20TestFilterer) WatchLogArray(opts *bind.WatchOpts, sink chan<- *ZRC20TestLogArray) (event.Subscription, error) {

	logs, sub, err := _ZRC20Test.contract.WatchLogs(opts, "log_array")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZRC20TestLogArray)
				if err := _ZRC20Test.contract.UnpackLog(event, "log_array", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogArray is a log parse operation binding the contract event 0xfb102865d50addddf69da9b5aa1bced66c80cf869a5c8d0471a467e18ce9cab1.
//
// Solidity: event log_array(uint256[] val)
func (_ZRC20Test *ZRC20TestFilterer) ParseLogArray(log types.Log) (*ZRC20TestLogArray, error) {
	event := new(ZRC20TestLogArray)
	if err := _ZRC20Test.contract.UnpackLog(event, "log_array", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZRC20TestLogArray0Iterator is returned from FilterLogArray0 and is used to iterate over the raw logs and unpacked data for LogArray0 events raised by the ZRC20Test contract.
type ZRC20TestLogArray0Iterator struct {
	Event *ZRC20TestLogArray0 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZRC20TestLogArray0Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZRC20TestLogArray0)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZRC20TestLogArray0)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZRC20TestLogArray0Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZRC20TestLogArray0Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZRC20TestLogArray0 represents a LogArray0 event raised by the ZRC20Test contract.
type ZRC20TestLogArray0 struct {
	Val []*big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogArray0 is a free log retrieval operation binding the contract event 0x890a82679b470f2bd82816ed9b161f97d8b967f37fa3647c21d5bf39749e2dd5.
//
// Solidity: event log_array(int256[] val)
func (_ZRC20Test *ZRC20TestFilterer) FilterLogArray0(opts *bind.FilterOpts) (*ZRC20TestLogArray0Iterator, error) {

	logs, sub, err := _ZRC20Test.contract.FilterLogs(opts, "log_array0")
	if err != nil {
		return nil, err
	}
	return &ZRC20TestLogArray0Iterator{contract: _ZRC20Test.contract, event: "log_array0", logs: logs, sub: sub}, nil
}

// WatchLogArray0 is a free log subscription operation binding the contract event 0x890a82679b470f2bd82816ed9b161f97d8b967f37fa3647c21d5bf39749e2dd5.
//
// Solidity: event log_array(int256[] val)
func (_ZRC20Test *ZRC20TestFilterer) WatchLogArray0(opts *bind.WatchOpts, sink chan<- *ZRC20TestLogArray0) (event.Subscription, error) {

	logs, sub, err := _ZRC20Test.contract.WatchLogs(opts, "log_array0")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZRC20TestLogArray0)
				if err := _ZRC20Test.contract.UnpackLog(event, "log_array0", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogArray0 is a log parse operation binding the contract event 0x890a82679b470f2bd82816ed9b161f97d8b967f37fa3647c21d5bf39749e2dd5.
//
// Solidity: event log_array(int256[] val)
func (_ZRC20Test *ZRC20TestFilterer) ParseLogArray0(log types.Log) (*ZRC20TestLogArray0, error) {
	event := new(ZRC20TestLogArray0)
	if err := _ZRC20Test.contract.UnpackLog(event, "log_array0", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZRC20TestLogArray1Iterator is returned from FilterLogArray1 and is used to iterate over the raw logs and unpacked data for LogArray1 events raised by the ZRC20Test contract.
type ZRC20TestLogArray1Iterator struct {
	Event *ZRC20TestLogArray1 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZRC20TestLogArray1Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZRC20TestLogArray1)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZRC20TestLogArray1)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZRC20TestLogArray1Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZRC20TestLogArray1Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZRC20TestLogArray1 represents a LogArray1 event raised by the ZRC20Test contract.
type ZRC20TestLogArray1 struct {
	Val []common.Address
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogArray1 is a free log retrieval operation binding the contract event 0x40e1840f5769073d61bd01372d9b75baa9842d5629a0c99ff103be1178a8e9e2.
//
// Solidity: event log_array(address[] val)
func (_ZRC20Test *ZRC20TestFilterer) FilterLogArray1(opts *bind.FilterOpts) (*ZRC20TestLogArray1Iterator, error) {

	logs, sub, err := _ZRC20Test.contract.FilterLogs(opts, "log_array1")
	if err != nil {
		return nil, err
	}
	return &ZRC20TestLogArray1Iterator{contract: _ZRC20Test.contract, event: "log_array1", logs: logs, sub: sub}, nil
}

// WatchLogArray1 is a free log subscription operation binding the contract event 0x40e1840f5769073d61bd01372d9b75baa9842d5629a0c99ff103be1178a8e9e2.
//
// Solidity: event log_array(address[] val)
func (_ZRC20Test *ZRC20TestFilterer) WatchLogArray1(opts *bind.WatchOpts, sink chan<- *ZRC20TestLogArray1) (event.Subscription, error) {

	logs, sub, err := _ZRC20Test.contract.WatchLogs(opts, "log_array1")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZRC20TestLogArray1)
				if err := _ZRC20Test.contract.UnpackLog(event, "log_array1", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogArray1 is a log parse operation binding the contract event 0x40e1840f5769073d61bd01372d9b75baa9842d5629a0c99ff103be1178a8e9e2.
//
// Solidity: event log_array(address[] val)
func (_ZRC20Test *ZRC20TestFilterer) ParseLogArray1(log types.Log) (*ZRC20TestLogArray1, error) {
	event := new(ZRC20TestLogArray1)
	if err := _ZRC20Test.contract.UnpackLog(event, "log_array1", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZRC20TestLogBytesIterator is returned from FilterLogBytes and is used to iterate over the raw logs and unpacked data for LogBytes events raised by the ZRC20Test contract.
type ZRC20TestLogBytesIterator struct {
	Event *ZRC20TestLogBytes // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZRC20TestLogBytesIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZRC20TestLogBytes)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZRC20TestLogBytes)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZRC20TestLogBytesIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZRC20TestLogBytesIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZRC20TestLogBytes represents a LogBytes event raised by the ZRC20Test contract.
type ZRC20TestLogBytes struct {
	Arg0 []byte
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogBytes is a free log retrieval operation binding the contract event 0x23b62ad0584d24a75f0bf3560391ef5659ec6db1269c56e11aa241d637f19b20.
//
// Solidity: event log_bytes(bytes arg0)
func (_ZRC20Test *ZRC20TestFilterer) FilterLogBytes(opts *bind.FilterOpts) (*ZRC20TestLogBytesIterator, error) {

	logs, sub, err := _ZRC20Test.contract.FilterLogs(opts, "log_bytes")
	if err != nil {
		return nil, err
	}
	return &ZRC20TestLogBytesIterator{contract: _ZRC20Test.contract, event: "log_bytes", logs: logs, sub: sub}, nil
}

// WatchLogBytes is a free log subscription operation binding the contract event 0x23b62ad0584d24a75f0bf3560391ef5659ec6db1269c56e11aa241d637f19b20.
//
// Solidity: event log_bytes(bytes arg0)
func (_ZRC20Test *ZRC20TestFilterer) WatchLogBytes(opts *bind.WatchOpts, sink chan<- *ZRC20TestLogBytes) (event.Subscription, error) {

	logs, sub, err := _ZRC20Test.contract.WatchLogs(opts, "log_bytes")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZRC20TestLogBytes)
				if err := _ZRC20Test.contract.UnpackLog(event, "log_bytes", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogBytes is a log parse operation binding the contract event 0x23b62ad0584d24a75f0bf3560391ef5659ec6db1269c56e11aa241d637f19b20.
//
// Solidity: event log_bytes(bytes arg0)
func (_ZRC20Test *ZRC20TestFilterer) ParseLogBytes(log types.Log) (*ZRC20TestLogBytes, error) {
	event := new(ZRC20TestLogBytes)
	if err := _ZRC20Test.contract.UnpackLog(event, "log_bytes", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZRC20TestLogBytes32Iterator is returned from FilterLogBytes32 and is used to iterate over the raw logs and unpacked data for LogBytes32 events raised by the ZRC20Test contract.
type ZRC20TestLogBytes32Iterator struct {
	Event *ZRC20TestLogBytes32 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZRC20TestLogBytes32Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZRC20TestLogBytes32)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZRC20TestLogBytes32)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZRC20TestLogBytes32Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZRC20TestLogBytes32Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZRC20TestLogBytes32 represents a LogBytes32 event raised by the ZRC20Test contract.
type ZRC20TestLogBytes32 struct {
	Arg0 [32]byte
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogBytes32 is a free log retrieval operation binding the contract event 0xe81699b85113eea1c73e10588b2b035e55893369632173afd43feb192fac64e3.
//
// Solidity: event log_bytes32(bytes32 arg0)
func (_ZRC20Test *ZRC20TestFilterer) FilterLogBytes32(opts *bind.FilterOpts) (*ZRC20TestLogBytes32Iterator, error) {

	logs, sub, err := _ZRC20Test.contract.FilterLogs(opts, "log_bytes32")
	if err != nil {
		return nil, err
	}
	return &ZRC20TestLogBytes32Iterator{contract: _ZRC20Test.contract, event: "log_bytes32", logs: logs, sub: sub}, nil
}

// WatchLogBytes32 is a free log subscription operation binding the contract event 0xe81699b85113eea1c73e10588b2b035e55893369632173afd43feb192fac64e3.
//
// Solidity: event log_bytes32(bytes32 arg0)
func (_ZRC20Test *ZRC20TestFilterer) WatchLogBytes32(opts *bind.WatchOpts, sink chan<- *ZRC20TestLogBytes32) (event.Subscription, error) {

	logs, sub, err := _ZRC20Test.contract.WatchLogs(opts, "log_bytes32")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZRC20TestLogBytes32)
				if err := _ZRC20Test.contract.UnpackLog(event, "log_bytes32", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogBytes32 is a log parse operation binding the contract event 0xe81699b85113eea1c73e10588b2b035e55893369632173afd43feb192fac64e3.
//
// Solidity: event log_bytes32(bytes32 arg0)
func (_ZRC20Test *ZRC20TestFilterer) ParseLogBytes32(log types.Log) (*ZRC20TestLogBytes32, error) {
	event := new(ZRC20TestLogBytes32)
	if err := _ZRC20Test.contract.UnpackLog(event, "log_bytes32", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZRC20TestLogIntIterator is returned from FilterLogInt and is used to iterate over the raw logs and unpacked data for LogInt events raised by the ZRC20Test contract.
type ZRC20TestLogIntIterator struct {
	Event *ZRC20TestLogInt // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZRC20TestLogIntIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZRC20TestLogInt)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZRC20TestLogInt)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZRC20TestLogIntIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZRC20TestLogIntIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZRC20TestLogInt represents a LogInt event raised by the ZRC20Test contract.
type ZRC20TestLogInt struct {
	Arg0 *big.Int
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogInt is a free log retrieval operation binding the contract event 0x0eb5d52624c8d28ada9fc55a8c502ed5aa3fbe2fb6e91b71b5f376882b1d2fb8.
//
// Solidity: event log_int(int256 arg0)
func (_ZRC20Test *ZRC20TestFilterer) FilterLogInt(opts *bind.FilterOpts) (*ZRC20TestLogIntIterator, error) {

	logs, sub, err := _ZRC20Test.contract.FilterLogs(opts, "log_int")
	if err != nil {
		return nil, err
	}
	return &ZRC20TestLogIntIterator{contract: _ZRC20Test.contract, event: "log_int", logs: logs, sub: sub}, nil
}

// WatchLogInt is a free log subscription operation binding the contract event 0x0eb5d52624c8d28ada9fc55a8c502ed5aa3fbe2fb6e91b71b5f376882b1d2fb8.
//
// Solidity: event log_int(int256 arg0)
func (_ZRC20Test *ZRC20TestFilterer) WatchLogInt(opts *bind.WatchOpts, sink chan<- *ZRC20TestLogInt) (event.Subscription, error) {

	logs, sub, err := _ZRC20Test.contract.WatchLogs(opts, "log_int")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZRC20TestLogInt)
				if err := _ZRC20Test.contract.UnpackLog(event, "log_int", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogInt is a log parse operation binding the contract event 0x0eb5d52624c8d28ada9fc55a8c502ed5aa3fbe2fb6e91b71b5f376882b1d2fb8.
//
// Solidity: event log_int(int256 arg0)
func (_ZRC20Test *ZRC20TestFilterer) ParseLogInt(log types.Log) (*ZRC20TestLogInt, error) {
	event := new(ZRC20TestLogInt)
	if err := _ZRC20Test.contract.UnpackLog(event, "log_int", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZRC20TestLogNamedAddressIterator is returned from FilterLogNamedAddress and is used to iterate over the raw logs and unpacked data for LogNamedAddress events raised by the ZRC20Test contract.
type ZRC20TestLogNamedAddressIterator struct {
	Event *ZRC20TestLogNamedAddress // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZRC20TestLogNamedAddressIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZRC20TestLogNamedAddress)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZRC20TestLogNamedAddress)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZRC20TestLogNamedAddressIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZRC20TestLogNamedAddressIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZRC20TestLogNamedAddress represents a LogNamedAddress event raised by the ZRC20Test contract.
type ZRC20TestLogNamedAddress struct {
	Key string
	Val common.Address
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedAddress is a free log retrieval operation binding the contract event 0x9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f.
//
// Solidity: event log_named_address(string key, address val)
func (_ZRC20Test *ZRC20TestFilterer) FilterLogNamedAddress(opts *bind.FilterOpts) (*ZRC20TestLogNamedAddressIterator, error) {

	logs, sub, err := _ZRC20Test.contract.FilterLogs(opts, "log_named_address")
	if err != nil {
		return nil, err
	}
	return &ZRC20TestLogNamedAddressIterator{contract: _ZRC20Test.contract, event: "log_named_address", logs: logs, sub: sub}, nil
}

// WatchLogNamedAddress is a free log subscription operation binding the contract event 0x9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f.
//
// Solidity: event log_named_address(string key, address val)
func (_ZRC20Test *ZRC20TestFilterer) WatchLogNamedAddress(opts *bind.WatchOpts, sink chan<- *ZRC20TestLogNamedAddress) (event.Subscription, error) {

	logs, sub, err := _ZRC20Test.contract.WatchLogs(opts, "log_named_address")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZRC20TestLogNamedAddress)
				if err := _ZRC20Test.contract.UnpackLog(event, "log_named_address", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedAddress is a log parse operation binding the contract event 0x9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f.
//
// Solidity: event log_named_address(string key, address val)
func (_ZRC20Test *ZRC20TestFilterer) ParseLogNamedAddress(log types.Log) (*ZRC20TestLogNamedAddress, error) {
	event := new(ZRC20TestLogNamedAddress)
	if err := _ZRC20Test.contract.UnpackLog(event, "log_named_address", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZRC20TestLogNamedArrayIterator is returned from FilterLogNamedArray and is used to iterate over the raw logs and unpacked data for LogNamedArray events raised by the ZRC20Test contract.
type ZRC20TestLogNamedArrayIterator struct {
	Event *ZRC20TestLogNamedArray // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZRC20TestLogNamedArrayIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZRC20TestLogNamedArray)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZRC20TestLogNamedArray)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZRC20TestLogNamedArrayIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZRC20TestLogNamedArrayIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZRC20TestLogNamedArray represents a LogNamedArray event raised by the ZRC20Test contract.
type ZRC20TestLogNamedArray struct {
	Key string
	Val []*big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedArray is a free log retrieval operation binding the contract event 0x00aaa39c9ffb5f567a4534380c737075702e1f7f14107fc95328e3b56c0325fb.
//
// Solidity: event log_named_array(string key, uint256[] val)
func (_ZRC20Test *ZRC20TestFilterer) FilterLogNamedArray(opts *bind.FilterOpts) (*ZRC20TestLogNamedArrayIterator, error) {

	logs, sub, err := _ZRC20Test.contract.FilterLogs(opts, "log_named_array")
	if err != nil {
		return nil, err
	}
	return &ZRC20TestLogNamedArrayIterator{contract: _ZRC20Test.contract, event: "log_named_array", logs: logs, sub: sub}, nil
}

// WatchLogNamedArray is a free log subscription operation binding the contract event 0x00aaa39c9ffb5f567a4534380c737075702e1f7f14107fc95328e3b56c0325fb.
//
// Solidity: event log_named_array(string key, uint256[] val)
func (_ZRC20Test *ZRC20TestFilterer) WatchLogNamedArray(opts *bind.WatchOpts, sink chan<- *ZRC20TestLogNamedArray) (event.Subscription, error) {

	logs, sub, err := _ZRC20Test.contract.WatchLogs(opts, "log_named_array")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZRC20TestLogNamedArray)
				if err := _ZRC20Test.contract.UnpackLog(event, "log_named_array", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedArray is a log parse operation binding the contract event 0x00aaa39c9ffb5f567a4534380c737075702e1f7f14107fc95328e3b56c0325fb.
//
// Solidity: event log_named_array(string key, uint256[] val)
func (_ZRC20Test *ZRC20TestFilterer) ParseLogNamedArray(log types.Log) (*ZRC20TestLogNamedArray, error) {
	event := new(ZRC20TestLogNamedArray)
	if err := _ZRC20Test.contract.UnpackLog(event, "log_named_array", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZRC20TestLogNamedArray0Iterator is returned from FilterLogNamedArray0 and is used to iterate over the raw logs and unpacked data for LogNamedArray0 events raised by the ZRC20Test contract.
type ZRC20TestLogNamedArray0Iterator struct {
	Event *ZRC20TestLogNamedArray0 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZRC20TestLogNamedArray0Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZRC20TestLogNamedArray0)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZRC20TestLogNamedArray0)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZRC20TestLogNamedArray0Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZRC20TestLogNamedArray0Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZRC20TestLogNamedArray0 represents a LogNamedArray0 event raised by the ZRC20Test contract.
type ZRC20TestLogNamedArray0 struct {
	Key string
	Val []*big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedArray0 is a free log retrieval operation binding the contract event 0xa73eda09662f46dde729be4611385ff34fe6c44fbbc6f7e17b042b59a3445b57.
//
// Solidity: event log_named_array(string key, int256[] val)
func (_ZRC20Test *ZRC20TestFilterer) FilterLogNamedArray0(opts *bind.FilterOpts) (*ZRC20TestLogNamedArray0Iterator, error) {

	logs, sub, err := _ZRC20Test.contract.FilterLogs(opts, "log_named_array0")
	if err != nil {
		return nil, err
	}
	return &ZRC20TestLogNamedArray0Iterator{contract: _ZRC20Test.contract, event: "log_named_array0", logs: logs, sub: sub}, nil
}

// WatchLogNamedArray0 is a free log subscription operation binding the contract event 0xa73eda09662f46dde729be4611385ff34fe6c44fbbc6f7e17b042b59a3445b57.
//
// Solidity: event log_named_array(string key, int256[] val)
func (_ZRC20Test *ZRC20TestFilterer) WatchLogNamedArray0(opts *bind.WatchOpts, sink chan<- *ZRC20TestLogNamedArray0) (event.Subscription, error) {

	logs, sub, err := _ZRC20Test.contract.WatchLogs(opts, "log_named_array0")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZRC20TestLogNamedArray0)
				if err := _ZRC20Test.contract.UnpackLog(event, "log_named_array0", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedArray0 is a log parse operation binding the contract event 0xa73eda09662f46dde729be4611385ff34fe6c44fbbc6f7e17b042b59a3445b57.
//
// Solidity: event log_named_array(string key, int256[] val)
func (_ZRC20Test *ZRC20TestFilterer) ParseLogNamedArray0(log types.Log) (*ZRC20TestLogNamedArray0, error) {
	event := new(ZRC20TestLogNamedArray0)
	if err := _ZRC20Test.contract.UnpackLog(event, "log_named_array0", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZRC20TestLogNamedArray1Iterator is returned from FilterLogNamedArray1 and is used to iterate over the raw logs and unpacked data for LogNamedArray1 events raised by the ZRC20Test contract.
type ZRC20TestLogNamedArray1Iterator struct {
	Event *ZRC20TestLogNamedArray1 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZRC20TestLogNamedArray1Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZRC20TestLogNamedArray1)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZRC20TestLogNamedArray1)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZRC20TestLogNamedArray1Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZRC20TestLogNamedArray1Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZRC20TestLogNamedArray1 represents a LogNamedArray1 event raised by the ZRC20Test contract.
type ZRC20TestLogNamedArray1 struct {
	Key string
	Val []common.Address
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedArray1 is a free log retrieval operation binding the contract event 0x3bcfb2ae2e8d132dd1fce7cf278a9a19756a9fceabe470df3bdabb4bc577d1bd.
//
// Solidity: event log_named_array(string key, address[] val)
func (_ZRC20Test *ZRC20TestFilterer) FilterLogNamedArray1(opts *bind.FilterOpts) (*ZRC20TestLogNamedArray1Iterator, error) {

	logs, sub, err := _ZRC20Test.contract.FilterLogs(opts, "log_named_array1")
	if err != nil {
		return nil, err
	}
	return &ZRC20TestLogNamedArray1Iterator{contract: _ZRC20Test.contract, event: "log_named_array1", logs: logs, sub: sub}, nil
}

// WatchLogNamedArray1 is a free log subscription operation binding the contract event 0x3bcfb2ae2e8d132dd1fce7cf278a9a19756a9fceabe470df3bdabb4bc577d1bd.
//
// Solidity: event log_named_array(string key, address[] val)
func (_ZRC20Test *ZRC20TestFilterer) WatchLogNamedArray1(opts *bind.WatchOpts, sink chan<- *ZRC20TestLogNamedArray1) (event.Subscription, error) {

	logs, sub, err := _ZRC20Test.contract.WatchLogs(opts, "log_named_array1")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZRC20TestLogNamedArray1)
				if err := _ZRC20Test.contract.UnpackLog(event, "log_named_array1", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedArray1 is a log parse operation binding the contract event 0x3bcfb2ae2e8d132dd1fce7cf278a9a19756a9fceabe470df3bdabb4bc577d1bd.
//
// Solidity: event log_named_array(string key, address[] val)
func (_ZRC20Test *ZRC20TestFilterer) ParseLogNamedArray1(log types.Log) (*ZRC20TestLogNamedArray1, error) {
	event := new(ZRC20TestLogNamedArray1)
	if err := _ZRC20Test.contract.UnpackLog(event, "log_named_array1", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZRC20TestLogNamedBytesIterator is returned from FilterLogNamedBytes and is used to iterate over the raw logs and unpacked data for LogNamedBytes events raised by the ZRC20Test contract.
type ZRC20TestLogNamedBytesIterator struct {
	Event *ZRC20TestLogNamedBytes // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZRC20TestLogNamedBytesIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZRC20TestLogNamedBytes)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZRC20TestLogNamedBytes)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZRC20TestLogNamedBytesIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZRC20TestLogNamedBytesIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZRC20TestLogNamedBytes represents a LogNamedBytes event raised by the ZRC20Test contract.
type ZRC20TestLogNamedBytes struct {
	Key string
	Val []byte
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedBytes is a free log retrieval operation binding the contract event 0xd26e16cad4548705e4c9e2d94f98ee91c289085ee425594fd5635fa2964ccf18.
//
// Solidity: event log_named_bytes(string key, bytes val)
func (_ZRC20Test *ZRC20TestFilterer) FilterLogNamedBytes(opts *bind.FilterOpts) (*ZRC20TestLogNamedBytesIterator, error) {

	logs, sub, err := _ZRC20Test.contract.FilterLogs(opts, "log_named_bytes")
	if err != nil {
		return nil, err
	}
	return &ZRC20TestLogNamedBytesIterator{contract: _ZRC20Test.contract, event: "log_named_bytes", logs: logs, sub: sub}, nil
}

// WatchLogNamedBytes is a free log subscription operation binding the contract event 0xd26e16cad4548705e4c9e2d94f98ee91c289085ee425594fd5635fa2964ccf18.
//
// Solidity: event log_named_bytes(string key, bytes val)
func (_ZRC20Test *ZRC20TestFilterer) WatchLogNamedBytes(opts *bind.WatchOpts, sink chan<- *ZRC20TestLogNamedBytes) (event.Subscription, error) {

	logs, sub, err := _ZRC20Test.contract.WatchLogs(opts, "log_named_bytes")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZRC20TestLogNamedBytes)
				if err := _ZRC20Test.contract.UnpackLog(event, "log_named_bytes", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedBytes is a log parse operation binding the contract event 0xd26e16cad4548705e4c9e2d94f98ee91c289085ee425594fd5635fa2964ccf18.
//
// Solidity: event log_named_bytes(string key, bytes val)
func (_ZRC20Test *ZRC20TestFilterer) ParseLogNamedBytes(log types.Log) (*ZRC20TestLogNamedBytes, error) {
	event := new(ZRC20TestLogNamedBytes)
	if err := _ZRC20Test.contract.UnpackLog(event, "log_named_bytes", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZRC20TestLogNamedBytes32Iterator is returned from FilterLogNamedBytes32 and is used to iterate over the raw logs and unpacked data for LogNamedBytes32 events raised by the ZRC20Test contract.
type ZRC20TestLogNamedBytes32Iterator struct {
	Event *ZRC20TestLogNamedBytes32 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZRC20TestLogNamedBytes32Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZRC20TestLogNamedBytes32)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZRC20TestLogNamedBytes32)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZRC20TestLogNamedBytes32Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZRC20TestLogNamedBytes32Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZRC20TestLogNamedBytes32 represents a LogNamedBytes32 event raised by the ZRC20Test contract.
type ZRC20TestLogNamedBytes32 struct {
	Key string
	Val [32]byte
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedBytes32 is a free log retrieval operation binding the contract event 0xafb795c9c61e4fe7468c386f925d7a5429ecad9c0495ddb8d38d690614d32f99.
//
// Solidity: event log_named_bytes32(string key, bytes32 val)
func (_ZRC20Test *ZRC20TestFilterer) FilterLogNamedBytes32(opts *bind.FilterOpts) (*ZRC20TestLogNamedBytes32Iterator, error) {

	logs, sub, err := _ZRC20Test.contract.FilterLogs(opts, "log_named_bytes32")
	if err != nil {
		return nil, err
	}
	return &ZRC20TestLogNamedBytes32Iterator{contract: _ZRC20Test.contract, event: "log_named_bytes32", logs: logs, sub: sub}, nil
}

// WatchLogNamedBytes32 is a free log subscription operation binding the contract event 0xafb795c9c61e4fe7468c386f925d7a5429ecad9c0495ddb8d38d690614d32f99.
//
// Solidity: event log_named_bytes32(string key, bytes32 val)
func (_ZRC20Test *ZRC20TestFilterer) WatchLogNamedBytes32(opts *bind.WatchOpts, sink chan<- *ZRC20TestLogNamedBytes32) (event.Subscription, error) {

	logs, sub, err := _ZRC20Test.contract.WatchLogs(opts, "log_named_bytes32")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZRC20TestLogNamedBytes32)
				if err := _ZRC20Test.contract.UnpackLog(event, "log_named_bytes32", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedBytes32 is a log parse operation binding the contract event 0xafb795c9c61e4fe7468c386f925d7a5429ecad9c0495ddb8d38d690614d32f99.
//
// Solidity: event log_named_bytes32(string key, bytes32 val)
func (_ZRC20Test *ZRC20TestFilterer) ParseLogNamedBytes32(log types.Log) (*ZRC20TestLogNamedBytes32, error) {
	event := new(ZRC20TestLogNamedBytes32)
	if err := _ZRC20Test.contract.UnpackLog(event, "log_named_bytes32", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZRC20TestLogNamedDecimalIntIterator is returned from FilterLogNamedDecimalInt and is used to iterate over the raw logs and unpacked data for LogNamedDecimalInt events raised by the ZRC20Test contract.
type ZRC20TestLogNamedDecimalIntIterator struct {
	Event *ZRC20TestLogNamedDecimalInt // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZRC20TestLogNamedDecimalIntIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZRC20TestLogNamedDecimalInt)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZRC20TestLogNamedDecimalInt)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZRC20TestLogNamedDecimalIntIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZRC20TestLogNamedDecimalIntIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZRC20TestLogNamedDecimalInt represents a LogNamedDecimalInt event raised by the ZRC20Test contract.
type ZRC20TestLogNamedDecimalInt struct {
	Key      string
	Val      *big.Int
	Decimals *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterLogNamedDecimalInt is a free log retrieval operation binding the contract event 0x5da6ce9d51151ba10c09a559ef24d520b9dac5c5b8810ae8434e4d0d86411a95.
//
// Solidity: event log_named_decimal_int(string key, int256 val, uint256 decimals)
func (_ZRC20Test *ZRC20TestFilterer) FilterLogNamedDecimalInt(opts *bind.FilterOpts) (*ZRC20TestLogNamedDecimalIntIterator, error) {

	logs, sub, err := _ZRC20Test.contract.FilterLogs(opts, "log_named_decimal_int")
	if err != nil {
		return nil, err
	}
	return &ZRC20TestLogNamedDecimalIntIterator{contract: _ZRC20Test.contract, event: "log_named_decimal_int", logs: logs, sub: sub}, nil
}

// WatchLogNamedDecimalInt is a free log subscription operation binding the contract event 0x5da6ce9d51151ba10c09a559ef24d520b9dac5c5b8810ae8434e4d0d86411a95.
//
// Solidity: event log_named_decimal_int(string key, int256 val, uint256 decimals)
func (_ZRC20Test *ZRC20TestFilterer) WatchLogNamedDecimalInt(opts *bind.WatchOpts, sink chan<- *ZRC20TestLogNamedDecimalInt) (event.Subscription, error) {

	logs, sub, err := _ZRC20Test.contract.WatchLogs(opts, "log_named_decimal_int")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZRC20TestLogNamedDecimalInt)
				if err := _ZRC20Test.contract.UnpackLog(event, "log_named_decimal_int", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedDecimalInt is a log parse operation binding the contract event 0x5da6ce9d51151ba10c09a559ef24d520b9dac5c5b8810ae8434e4d0d86411a95.
//
// Solidity: event log_named_decimal_int(string key, int256 val, uint256 decimals)
func (_ZRC20Test *ZRC20TestFilterer) ParseLogNamedDecimalInt(log types.Log) (*ZRC20TestLogNamedDecimalInt, error) {
	event := new(ZRC20TestLogNamedDecimalInt)
	if err := _ZRC20Test.contract.UnpackLog(event, "log_named_decimal_int", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZRC20TestLogNamedDecimalUintIterator is returned from FilterLogNamedDecimalUint and is used to iterate over the raw logs and unpacked data for LogNamedDecimalUint events raised by the ZRC20Test contract.
type ZRC20TestLogNamedDecimalUintIterator struct {
	Event *ZRC20TestLogNamedDecimalUint // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZRC20TestLogNamedDecimalUintIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZRC20TestLogNamedDecimalUint)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZRC20TestLogNamedDecimalUint)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZRC20TestLogNamedDecimalUintIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZRC20TestLogNamedDecimalUintIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZRC20TestLogNamedDecimalUint represents a LogNamedDecimalUint event raised by the ZRC20Test contract.
type ZRC20TestLogNamedDecimalUint struct {
	Key      string
	Val      *big.Int
	Decimals *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterLogNamedDecimalUint is a free log retrieval operation binding the contract event 0xeb8ba43ced7537421946bd43e828b8b2b8428927aa8f801c13d934bf11aca57b.
//
// Solidity: event log_named_decimal_uint(string key, uint256 val, uint256 decimals)
func (_ZRC20Test *ZRC20TestFilterer) FilterLogNamedDecimalUint(opts *bind.FilterOpts) (*ZRC20TestLogNamedDecimalUintIterator, error) {

	logs, sub, err := _ZRC20Test.contract.FilterLogs(opts, "log_named_decimal_uint")
	if err != nil {
		return nil, err
	}
	return &ZRC20TestLogNamedDecimalUintIterator{contract: _ZRC20Test.contract, event: "log_named_decimal_uint", logs: logs, sub: sub}, nil
}

// WatchLogNamedDecimalUint is a free log subscription operation binding the contract event 0xeb8ba43ced7537421946bd43e828b8b2b8428927aa8f801c13d934bf11aca57b.
//
// Solidity: event log_named_decimal_uint(string key, uint256 val, uint256 decimals)
func (_ZRC20Test *ZRC20TestFilterer) WatchLogNamedDecimalUint(opts *bind.WatchOpts, sink chan<- *ZRC20TestLogNamedDecimalUint) (event.Subscription, error) {

	logs, sub, err := _ZRC20Test.contract.WatchLogs(opts, "log_named_decimal_uint")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZRC20TestLogNamedDecimalUint)
				if err := _ZRC20Test.contract.UnpackLog(event, "log_named_decimal_uint", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedDecimalUint is a log parse operation binding the contract event 0xeb8ba43ced7537421946bd43e828b8b2b8428927aa8f801c13d934bf11aca57b.
//
// Solidity: event log_named_decimal_uint(string key, uint256 val, uint256 decimals)
func (_ZRC20Test *ZRC20TestFilterer) ParseLogNamedDecimalUint(log types.Log) (*ZRC20TestLogNamedDecimalUint, error) {
	event := new(ZRC20TestLogNamedDecimalUint)
	if err := _ZRC20Test.contract.UnpackLog(event, "log_named_decimal_uint", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZRC20TestLogNamedIntIterator is returned from FilterLogNamedInt and is used to iterate over the raw logs and unpacked data for LogNamedInt events raised by the ZRC20Test contract.
type ZRC20TestLogNamedIntIterator struct {
	Event *ZRC20TestLogNamedInt // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZRC20TestLogNamedIntIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZRC20TestLogNamedInt)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZRC20TestLogNamedInt)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZRC20TestLogNamedIntIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZRC20TestLogNamedIntIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZRC20TestLogNamedInt represents a LogNamedInt event raised by the ZRC20Test contract.
type ZRC20TestLogNamedInt struct {
	Key string
	Val *big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedInt is a free log retrieval operation binding the contract event 0x2fe632779174374378442a8e978bccfbdcc1d6b2b0d81f7e8eb776ab2286f168.
//
// Solidity: event log_named_int(string key, int256 val)
func (_ZRC20Test *ZRC20TestFilterer) FilterLogNamedInt(opts *bind.FilterOpts) (*ZRC20TestLogNamedIntIterator, error) {

	logs, sub, err := _ZRC20Test.contract.FilterLogs(opts, "log_named_int")
	if err != nil {
		return nil, err
	}
	return &ZRC20TestLogNamedIntIterator{contract: _ZRC20Test.contract, event: "log_named_int", logs: logs, sub: sub}, nil
}

// WatchLogNamedInt is a free log subscription operation binding the contract event 0x2fe632779174374378442a8e978bccfbdcc1d6b2b0d81f7e8eb776ab2286f168.
//
// Solidity: event log_named_int(string key, int256 val)
func (_ZRC20Test *ZRC20TestFilterer) WatchLogNamedInt(opts *bind.WatchOpts, sink chan<- *ZRC20TestLogNamedInt) (event.Subscription, error) {

	logs, sub, err := _ZRC20Test.contract.WatchLogs(opts, "log_named_int")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZRC20TestLogNamedInt)
				if err := _ZRC20Test.contract.UnpackLog(event, "log_named_int", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedInt is a log parse operation binding the contract event 0x2fe632779174374378442a8e978bccfbdcc1d6b2b0d81f7e8eb776ab2286f168.
//
// Solidity: event log_named_int(string key, int256 val)
func (_ZRC20Test *ZRC20TestFilterer) ParseLogNamedInt(log types.Log) (*ZRC20TestLogNamedInt, error) {
	event := new(ZRC20TestLogNamedInt)
	if err := _ZRC20Test.contract.UnpackLog(event, "log_named_int", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZRC20TestLogNamedStringIterator is returned from FilterLogNamedString and is used to iterate over the raw logs and unpacked data for LogNamedString events raised by the ZRC20Test contract.
type ZRC20TestLogNamedStringIterator struct {
	Event *ZRC20TestLogNamedString // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZRC20TestLogNamedStringIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZRC20TestLogNamedString)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZRC20TestLogNamedString)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZRC20TestLogNamedStringIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZRC20TestLogNamedStringIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZRC20TestLogNamedString represents a LogNamedString event raised by the ZRC20Test contract.
type ZRC20TestLogNamedString struct {
	Key string
	Val string
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedString is a free log retrieval operation binding the contract event 0x280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf3583.
//
// Solidity: event log_named_string(string key, string val)
func (_ZRC20Test *ZRC20TestFilterer) FilterLogNamedString(opts *bind.FilterOpts) (*ZRC20TestLogNamedStringIterator, error) {

	logs, sub, err := _ZRC20Test.contract.FilterLogs(opts, "log_named_string")
	if err != nil {
		return nil, err
	}
	return &ZRC20TestLogNamedStringIterator{contract: _ZRC20Test.contract, event: "log_named_string", logs: logs, sub: sub}, nil
}

// WatchLogNamedString is a free log subscription operation binding the contract event 0x280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf3583.
//
// Solidity: event log_named_string(string key, string val)
func (_ZRC20Test *ZRC20TestFilterer) WatchLogNamedString(opts *bind.WatchOpts, sink chan<- *ZRC20TestLogNamedString) (event.Subscription, error) {

	logs, sub, err := _ZRC20Test.contract.WatchLogs(opts, "log_named_string")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZRC20TestLogNamedString)
				if err := _ZRC20Test.contract.UnpackLog(event, "log_named_string", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedString is a log parse operation binding the contract event 0x280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf3583.
//
// Solidity: event log_named_string(string key, string val)
func (_ZRC20Test *ZRC20TestFilterer) ParseLogNamedString(log types.Log) (*ZRC20TestLogNamedString, error) {
	event := new(ZRC20TestLogNamedString)
	if err := _ZRC20Test.contract.UnpackLog(event, "log_named_string", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZRC20TestLogNamedUintIterator is returned from FilterLogNamedUint and is used to iterate over the raw logs and unpacked data for LogNamedUint events raised by the ZRC20Test contract.
type ZRC20TestLogNamedUintIterator struct {
	Event *ZRC20TestLogNamedUint // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZRC20TestLogNamedUintIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZRC20TestLogNamedUint)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZRC20TestLogNamedUint)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZRC20TestLogNamedUintIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZRC20TestLogNamedUintIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZRC20TestLogNamedUint represents a LogNamedUint event raised by the ZRC20Test contract.
type ZRC20TestLogNamedUint struct {
	Key string
	Val *big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedUint is a free log retrieval operation binding the contract event 0xb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a8.
//
// Solidity: event log_named_uint(string key, uint256 val)
func (_ZRC20Test *ZRC20TestFilterer) FilterLogNamedUint(opts *bind.FilterOpts) (*ZRC20TestLogNamedUintIterator, error) {

	logs, sub, err := _ZRC20Test.contract.FilterLogs(opts, "log_named_uint")
	if err != nil {
		return nil, err
	}
	return &ZRC20TestLogNamedUintIterator{contract: _ZRC20Test.contract, event: "log_named_uint", logs: logs, sub: sub}, nil
}

// WatchLogNamedUint is a free log subscription operation binding the contract event 0xb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a8.
//
// Solidity: event log_named_uint(string key, uint256 val)
func (_ZRC20Test *ZRC20TestFilterer) WatchLogNamedUint(opts *bind.WatchOpts, sink chan<- *ZRC20TestLogNamedUint) (event.Subscription, error) {

	logs, sub, err := _ZRC20Test.contract.WatchLogs(opts, "log_named_uint")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZRC20TestLogNamedUint)
				if err := _ZRC20Test.contract.UnpackLog(event, "log_named_uint", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedUint is a log parse operation binding the contract event 0xb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a8.
//
// Solidity: event log_named_uint(string key, uint256 val)
func (_ZRC20Test *ZRC20TestFilterer) ParseLogNamedUint(log types.Log) (*ZRC20TestLogNamedUint, error) {
	event := new(ZRC20TestLogNamedUint)
	if err := _ZRC20Test.contract.UnpackLog(event, "log_named_uint", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZRC20TestLogStringIterator is returned from FilterLogString and is used to iterate over the raw logs and unpacked data for LogString events raised by the ZRC20Test contract.
type ZRC20TestLogStringIterator struct {
	Event *ZRC20TestLogString // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZRC20TestLogStringIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZRC20TestLogString)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZRC20TestLogString)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZRC20TestLogStringIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZRC20TestLogStringIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZRC20TestLogString represents a LogString event raised by the ZRC20Test contract.
type ZRC20TestLogString struct {
	Arg0 string
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogString is a free log retrieval operation binding the contract event 0x0b2e13ff20ac7b474198655583edf70dedd2c1dc980e329c4fbb2fc0748b796b.
//
// Solidity: event log_string(string arg0)
func (_ZRC20Test *ZRC20TestFilterer) FilterLogString(opts *bind.FilterOpts) (*ZRC20TestLogStringIterator, error) {

	logs, sub, err := _ZRC20Test.contract.FilterLogs(opts, "log_string")
	if err != nil {
		return nil, err
	}
	return &ZRC20TestLogStringIterator{contract: _ZRC20Test.contract, event: "log_string", logs: logs, sub: sub}, nil
}

// WatchLogString is a free log subscription operation binding the contract event 0x0b2e13ff20ac7b474198655583edf70dedd2c1dc980e329c4fbb2fc0748b796b.
//
// Solidity: event log_string(string arg0)
func (_ZRC20Test *ZRC20TestFilterer) WatchLogString(opts *bind.WatchOpts, sink chan<- *ZRC20TestLogString) (event.Subscription, error) {

	logs, sub, err := _ZRC20Test.contract.WatchLogs(opts, "log_string")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZRC20TestLogString)
				if err := _ZRC20Test.contract.UnpackLog(event, "log_string", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogString is a log parse operation binding the contract event 0x0b2e13ff20ac7b474198655583edf70dedd2c1dc980e329c4fbb2fc0748b796b.
//
// Solidity: event log_string(string arg0)
func (_ZRC20Test *ZRC20TestFilterer) ParseLogString(log types.Log) (*ZRC20TestLogString, error) {
	event := new(ZRC20TestLogString)
	if err := _ZRC20Test.contract.UnpackLog(event, "log_string", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZRC20TestLogUintIterator is returned from FilterLogUint and is used to iterate over the raw logs and unpacked data for LogUint events raised by the ZRC20Test contract.
type ZRC20TestLogUintIterator struct {
	Event *ZRC20TestLogUint // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZRC20TestLogUintIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZRC20TestLogUint)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZRC20TestLogUint)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZRC20TestLogUintIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZRC20TestLogUintIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZRC20TestLogUint represents a LogUint event raised by the ZRC20Test contract.
type ZRC20TestLogUint struct {
	Arg0 *big.Int
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogUint is a free log retrieval operation binding the contract event 0x2cab9790510fd8bdfbd2115288db33fec66691d476efc5427cfd4c0969301755.
//
// Solidity: event log_uint(uint256 arg0)
func (_ZRC20Test *ZRC20TestFilterer) FilterLogUint(opts *bind.FilterOpts) (*ZRC20TestLogUintIterator, error) {

	logs, sub, err := _ZRC20Test.contract.FilterLogs(opts, "log_uint")
	if err != nil {
		return nil, err
	}
	return &ZRC20TestLogUintIterator{contract: _ZRC20Test.contract, event: "log_uint", logs: logs, sub: sub}, nil
}

// WatchLogUint is a free log subscription operation binding the contract event 0x2cab9790510fd8bdfbd2115288db33fec66691d476efc5427cfd4c0969301755.
//
// Solidity: event log_uint(uint256 arg0)
func (_ZRC20Test *ZRC20TestFilterer) WatchLogUint(opts *bind.WatchOpts, sink chan<- *ZRC20TestLogUint) (event.Subscription, error) {

	logs, sub, err := _ZRC20Test.contract.WatchLogs(opts, "log_uint")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZRC20TestLogUint)
				if err := _ZRC20Test.contract.UnpackLog(event, "log_uint", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogUint is a log parse operation binding the contract event 0x2cab9790510fd8bdfbd2115288db33fec66691d476efc5427cfd4c0969301755.
//
// Solidity: event log_uint(uint256 arg0)
func (_ZRC20Test *ZRC20TestFilterer) ParseLogUint(log types.Log) (*ZRC20TestLogUint, error) {
	event := new(ZRC20TestLogUint)
	if err := _ZRC20Test.contract.UnpackLog(event, "log_uint", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZRC20TestLogsIterator is returned from FilterLogs and is used to iterate over the raw logs and unpacked data for Logs events raised by the ZRC20Test contract.
type ZRC20TestLogsIterator struct {
	Event *ZRC20TestLogs // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZRC20TestLogsIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZRC20TestLogs)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZRC20TestLogs)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZRC20TestLogsIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZRC20TestLogsIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZRC20TestLogs represents a Logs event raised by the ZRC20Test contract.
type ZRC20TestLogs struct {
	Arg0 []byte
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogs is a free log retrieval operation binding the contract event 0xe7950ede0394b9f2ce4a5a1bf5a7e1852411f7e6661b4308c913c4bfd11027e4.
//
// Solidity: event logs(bytes arg0)
func (_ZRC20Test *ZRC20TestFilterer) FilterLogs(opts *bind.FilterOpts) (*ZRC20TestLogsIterator, error) {

	logs, sub, err := _ZRC20Test.contract.FilterLogs(opts, "logs")
	if err != nil {
		return nil, err
	}
	return &ZRC20TestLogsIterator{contract: _ZRC20Test.contract, event: "logs", logs: logs, sub: sub}, nil
}

// WatchLogs is a free log subscription operation binding the contract event 0xe7950ede0394b9f2ce4a5a1bf5a7e1852411f7e6661b4308c913c4bfd11027e4.
//
// Solidity: event logs(bytes arg0)
func (_ZRC20Test *ZRC20TestFilterer) WatchLogs(opts *bind.WatchOpts, sink chan<- *ZRC20TestLogs) (event.Subscription, error) {

	logs, sub, err := _ZRC20Test.contract.WatchLogs(opts, "logs")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZRC20TestLogs)
				if err := _ZRC20Test.contract.UnpackLog(event, "logs", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogs is a log parse operation binding the contract event 0xe7950ede0394b9f2ce4a5a1bf5a7e1852411f7e6661b4308c913c4bfd11027e4.
//
// Solidity: event logs(bytes arg0)
func (_ZRC20Test *ZRC20TestFilterer) ParseLogs(log types.Log) (*ZRC20TestLogs, error) {
	event := new(ZRC20TestLogs)
	if err := _ZRC20Test.contract.UnpackLog(event, "logs", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
