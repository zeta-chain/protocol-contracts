// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package erc20custodynewechidnatest

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// ERC20CustodyNewEchidnaTestMetaData contains all meta data concerning the ERC20CustodyNewEchidnaTest contract.
var ERC20CustodyNewEchidnaTestMetaData = &bind.MetaData{
	ABI: "[{\"type\":\"constructor\",\"inputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"echidnaCaller\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"gateway\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractIGatewayEVM\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"testERC20\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractTestERC20\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"testWithdrawAndCall\",\"inputs\":[{\"name\":\"to\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"tssAddress\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"withdraw\",\"inputs\":[{\"name\":\"token\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"to\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"withdrawAndCall\",\"inputs\":[{\"name\":\"token\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"to\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"withdrawAndRevert\",\"inputs\":[{\"name\":\"token\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"to\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"event\",\"name\":\"Withdraw\",\"inputs\":[{\"name\":\"token\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"to\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"WithdrawAndCall\",\"inputs\":[{\"name\":\"token\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"to\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\",\"indexed\":false,\"internalType\":\"bytes\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"WithdrawAndRevert\",\"inputs\":[{\"name\":\"token\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"to\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\",\"indexed\":false,\"internalType\":\"bytes\"}],\"anonymous\":false},{\"type\":\"error\",\"name\":\"AddressEmptyCode\",\"inputs\":[{\"name\":\"target\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"AddressInsufficientBalance\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"FailedInnerCall\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidSender\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"ReentrancyGuardReentrantCall\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"SafeERC20FailedOperation\",\"inputs\":[{\"name\":\"token\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"ZeroAddress\",\"inputs\":[]}]",
	Bin: "0x600480546001600160a01b03191633908117909155600e60809081526d11d85d195dd85e5155934b9cdbdb60921b60a05260e49190915261012361010452604460c090815261012460405260e080516001600160e01b0390811663485cc95560e01b1790915262000073929190620001fe16565b600580546001600160a01b03929092166001600160a01b0319928316811790915560068054909216179055348015620000ab57600080fd5b5060065460045460016000556001600160a01b039182169116811580620000d957506001600160a01b038116155b15620000f85760405163d92e233d60e01b815260040160405180910390fd5b600180546001600160a01b039384166001600160a01b03199182161790915560028054929093169116179055604051620001329062003ae3565b60408082526004908201819052631d195cdd60e21b606083015260806020830181905282015263151154d560e21b60a082015260c001604051809103906000f08015801562000185573d6000803e3d6000fd5b50600380546001600160a01b0319166001600160a01b0392831617905560065460405163ae7a3a6f60e01b815230600482015291169063ae7a3a6f90602401600060405180830381600087803b158015620001df57600080fd5b505af1158015620001f4573d6000803e3d6000fd5b5050505062004bf2565b60006200020a62003af1565b6200021784848362000221565b9150505b92915050565b600080620002308584620002a3565b9050620002986040518060400160405280601d81526020017f4552433139363750726f78792e736f6c3a4552433139363750726f787900000081525082866040516020016200028192919062003c01565b60408051601f1981840301815291905285620002b1565b9150505b9392505050565b60006200029c8383620002eb565b60c08101515160009015620002df57620002d784848460c001516200031060201b60201c565b90506200029c565b620002d78484620004a0565b6000620002f983836200057a565b6200029c83836020015184620002b160201b60201c565b6000806200031d6200058c565b905060006200032d86836200062c565b905060006200034c826060015183602001518562000a7f60201b60201c565b905060006200035e8383898962000c4e565b905060006200036d82620019b5565b602081015181519192509060030b15620003cb578982604001516040516020016200039a92919062003c27565b60408051601f198184030181529082905262461bcd60e51b8252620003c29160040162003c91565b60405180910390fd5b6000620004166040518060400160405280601581526020017f4465706c6f79656420746f20616464726573733a20000000000000000000000081525083600162001b6260201b60201c565b60405163c6ce059d60e01b8152909150600080516020620066908339815191529063c6ce059d906200044d90849060040162003c91565b602060405180830381865afa1580156200046b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000491919062003ca6565b9b9a5050505050505050505050565b604051638d1cc92560e01b815260009081906000805160206200669083398151915290638d1cc92590620004d990879060040162003c91565b600060405180830381865afa158015620004f7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000521919081019062003db1565b905060006200055482856040516020016200053e92919062003de9565b60408051601f1981840301815291905262001d14565b90506001600160a01b038116620002175784846040516020016200039a92919062003e1c565b620005888282600062001d27565b5050565b60408051808201825260038152621bdd5d60ea1b602082015290516334515cdb60e21b81526060916000805160206200669083398151915291829063d145736c90620005dd90849060040162003eaf565b600060405180830381865afa158015620005fb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000625919081019062003ee6565b9250505090565b6200065f6040518060a0016040528060608152602001606081526020016060815260200160608152602001606081525090565b6000600080516020620066908339815191529050620006a66040518060a0016040528060608152602001606081526020016060815260200160608152602001606081525090565b620006b18562001e11565b60208201526000620006c38662002093565b90506000836001600160a01b031663d930a0e66040518163ffffffff1660e01b8152600401600060405180830381865afa15801562000706573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000730919081019062003ee6565b868385602001516040516020016200074c949392919062003f33565b60408051601f19818403018152908290526360f9bb1160e01b825291506000906001600160a01b038616906360f9bb11906200078d90859060040162003c91565b600060405180830381865afa158015620007ab573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620007d5919081019062003ee6565b604051636da11afb60e11b81529091506001600160a01b0386169063db4235f6906200080690849060040162003fc5565b602060405180830381865afa15801562000824573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200084a919062004000565b6200086257816040516020016200039a919062004024565b6040516309389f5960e31b81526001600160a01b038616906349c4fac890620008909084906004016200409d565b600060405180830381865afa158015620008ae573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620008d8919081019062003ee6565b8452604051636da11afb60e11b81526001600160a01b0386169063db4235f69062000908908490600401620040e5565b602060405180830381865afa15801562000926573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200094c919062004000565b15620009ce576040516309389f5960e31b81526001600160a01b038616906349c4fac89062000980908490600401620040e5565b600060405180830381865afa1580156200099e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620009c8919081019062003ee6565b60408501525b846001600160a01b03166349c4fac8828660000151604051602001620009f5919062004128565b6040516020818303038152906040526040518363ffffffff1660e01b815260040162000a2392919062004185565b600060405180830381865afa15801562000a41573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000a6b919081019062003ee6565b606085015250608083015250949350505050565b60408051600480825260a0820190925260609160009190816020015b606081526020019060019003908162000a9b579050509050604051806040016040528060048152602001630677265760e41b8152508160008151811062000ae65762000ae6620041ae565b6020026020010181905250604051806040016040528060038152602001620b5c9b60ea1b8152508160018151811062000b235762000b23620041ae565b60200260200101819052508460405160200162000b419190620041c4565b6040516020818303038152906040528160028151811062000b665762000b66620041ae565b60200260200101819052508260405160200162000b849190620041f4565b6040516020818303038152906040528160038151811062000ba95762000ba9620041ae565b6020908102919091010152600062000bc182620019b5565b905060008160200151905062000c2c62000bfe60405180604001604052806005815260200164173539b7b760d91b8152506200223460201b60201c565b6040805180820182526000808252602091820152815180830190925284518252808501908201529062002261565b62000c4457856040516020016200039a919062004225565b9695505050505050565b60a081015160408051808201825260008082526020918201528151808301909252825180835292810191015260609060008051602062006690833981519152901562000c9a565b511590565b62000dbd5782602001511562000d2e5760405162461bcd60e51b81526020600482015260586024820152600080516020620066b083398151915260448201527f62652075736564207768656e207468652060736b6970566572696679536f757260648201527f6365436f646560206f7074696f6e206973206074727565600000000000000000608482015260a401620003c2565b8260c001511562000dbd5760405162461bcd60e51b81526020600482015260536024820152600080516020620066b083398151915260448201527f62652075736564207768656e207468652060736b69704c6963656e736554797060648201527f6560206f7074696f6e2069732060747275656000000000000000000000000000608482015260a401620003c2565b6040805160ff8082526120008201909252600091816020015b606081526020019060019003908162000dd65790505090506000604051806040016040528060038152602001620dce0f60eb1b81525082828062000e1a90620042bc565b935060ff168151811062000e325762000e32620041ae565b60200260200101819052506040518060400160405280600d81526020016c302e302e312d616c7068612e3760981b81525060405160200162000e759190620042de565b60405160208183030381529060405282828062000e9290620042bc565b935060ff168151811062000eaa5762000eaa620041ae565b6020026020010181905250604051806040016040528060068152602001656465706c6f7960d01b81525082828062000ee290620042bc565b935060ff168151811062000efa5762000efa620041ae565b60200260200101819052506040518060400160405280600e81526020016d2d2d636f6e74726163744e616d6560901b81525082828062000f3a90620042bc565b935060ff168151811062000f525762000f52620041ae565b6020026020010181905250876020015182828062000f7090620042bc565b935060ff168151811062000f885762000f88620041ae565b60200260200101819052506040518060400160405280600e81526020016d05a5ac6dedce8e4c2c6e8a0c2e8d60931b81525082828062000fc890620042bc565b935060ff168151811062000fe05762000fe0620041ae565b60209081029190910101528751828262000ffa81620042bc565b935060ff1681518110620010125762001012620041ae565b6020026020010181905250604051806040016040528060098152602001680b4b58da185a5b925960ba1b8152508282806200104d90620042bc565b935060ff1681518110620010655762001065620041ae565b60209081029190910101526200107b46620022ca565b82826200108881620042bc565b935060ff1681518110620010a057620010a0620041ae565b60200260200101819052506040518060400160405280600f81526020016e2d2d6275696c64496e666f46696c6560881b815250828280620010e190620042bc565b935060ff1681518110620010f957620010f9620041ae565b6020026020010181905250868282806200111390620042bc565b935060ff16815181106200112b576200112b620041ae565b6020908102919091010152855115620012495760408051808201909152601581527f2d2d636f6e7374727563746f7242797465636f64650000000000000000000000602082015282826200117f81620042bc565b935060ff1681518110620011975762001197620041ae565b60209081029190910101526040516371aad10d60e01b81526001600160a01b038416906371aad10d90620011d090899060040162003c91565b600060405180830381865afa158015620011ee573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262001218919081019062003ee6565b82826200122581620042bc565b935060ff16815181106200123d576200123d620041ae565b60200260200101819052505b84602001511562001302576040805180820190915260128152712d2d766572696679536f75726365436f646560701b602082015282826200128a81620042bc565b935060ff1681518110620012a257620012a2620041ae565b60200260200101819052506040518060400160405280600581526020016466616c736560d81b815250828280620012d990620042bc565b935060ff1681518110620012f157620012f1620041ae565b602002602001018190525062001489565b6200131b62000c958660a001516200223460201b60201c565b620013a85760408051808201909152600d81526c2d2d6c6963656e73655479706560981b602082015282826200135181620042bc565b935060ff1681518110620013695762001369620041ae565b60200260200101819052508460a001516040516020016200138b9190620041c4565b604051602081830303815290604052828280620012d990620042bc565b8460c00151158015620013d15750620013cf62000c9589604001516200223460201b60201c565b155b15620014895760408051808201909152600d81526c2d2d6c6963656e73655479706560981b602082015282826200140881620042bc565b935060ff1681518110620014205762001420620041ae565b6020908102919091010152620014368862002363565b604051602001620014489190620041c4565b6040516020818303038152906040528282806200146590620042bc565b935060ff16815181106200147d576200147d620041ae565b60200260200101819052505b620014a262000c9586604001516200223460201b60201c565b620015305760408051808201909152600b81526a0b4b5c995b185e595c925960aa1b60208201528282620014d681620042bc565b935060ff1681518110620014ee57620014ee620041ae565b602002602001018190525084604001518282806200150c90620042bc565b935060ff1681518110620015245762001524620041ae565b60200260200101819052505b6060850151156200162f576040805180820190915260068152650b4b5cd85b1d60d21b602082015282826200156581620042bc565b935060ff16815181106200157d576200157d620041ae565b60209081029190910101526060850151604051631623433d60e31b815260048101919091526001600160a01b0384169063b11a19e890602401600060405180830381865afa158015620015d4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620015fe919081019062003ee6565b82826200160b81620042bc565b935060ff1681518110620016235762001623620041ae565b60200260200101819052505b60e08501515115620016ce5760408051808201909152600a8152690b4b59d85cd31a5b5a5d60b21b602082015282826200166981620042bc565b935060ff1681518110620016815762001681620041ae565b602090810291909101015260e0850151516200169d90620022ca565b8282620016aa81620042bc565b935060ff1681518110620016c257620016c2620041ae565b60200260200101819052505b60e08501516020015115620017785760408051808201909152600a8152692d2d676173507269636560b01b602082015282826200170b81620042bc565b935060ff1681518110620017235762001723620041ae565b6020026020010181905250620017478560e0015160200151620022ca60201b60201c565b82826200175481620042bc565b935060ff16815181106200176c576200176c620041ae565b60200260200101819052505b60e08501516040015115620018265760408051808201909152600e81526d2d2d6d617846656550657247617360901b60208201528282620017b981620042bc565b935060ff1681518110620017d157620017d1620041ae565b6020026020010181905250620017f58560e0015160400151620022ca60201b60201c565b82826200180281620042bc565b935060ff16815181106200181a576200181a620041ae565b60200260200101819052505b60e08501516060015115620018e35760408051808201909152601681527f2d2d6d61785072696f7269747946656550657247617300000000000000000000602082015282826200187681620042bc565b935060ff16815181106200188e576200188e620041ae565b6020026020010181905250620018b28560e0015160600151620022ca60201b60201c565b8282620018bf81620042bc565b935060ff1681518110620018d757620018d7620041ae565b60200260200101819052505b60008160ff166001600160401b0381111562001903576200190362003cd1565b6040519080825280602002602001820160405280156200193857816020015b6060815260200190600190039081620019225790505b50905060005b8260ff168160ff161015620019a657838160ff1681518110620019655762001965620041ae565b6020026020010151828260ff1681518110620019855762001985620041ae565b602002602001018190525080806200199d90620042bc565b9150506200193e565b5093505050505b949350505050565b620019dd6040518060600160405280600060030b815260200160608152602001606081525090565b6040805180820182526004808252630c4c2e6d60e31b602083015291516334515cdb60e21b81526000805160206200669083398151915292600091849163d145736c9162001a2e9186910162004337565b600060405180830381865afa15801562001a4c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262001a76919081019062003ee6565b9050600062001a86868362002a6a565b90506000846001600160a01b031663f45c1ce7836040518263ffffffff1660e01b815260040162001ab8919062004380565b6000604051808303816000875af115801562001ad8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262001b029190810190620043e6565b805190915060030b1580159062001b1c5750602081015151155b801562001b2c5750604081015151155b1562000c44578160008151811062001b485762001b48620041ae565b60200260200101516040516020016200039a91906200449b565b6060600062001b988560408051808201825260008082526020918201528151808301909252825182529182019181019190915290565b60408051808201825260008082526020918201528151808301909252865182528087019082015290915062001bd19082905b9062002bc6565b1562001ce157600062001c558262001c4e8162001c4762001c198a60408051808201825260008082526020918201528151808301909252825182529182019181019190915290565b6040805180820182526000808252602091820152815180830190925282518252918201519181019190915290565b9062002bef565b9062002c52565b905062001c8d62001c85604051806040016040528060018152602001600560f91b8152506200223460201b60201c565b829062002bc6565b1562001ccc5762001cc962001cc1604051806040016040528060018152602001600560f91b8152506200223460201b60201c565b829062002cdf565b90505b62001cd78162002d07565b925050506200029c565b821562001cfd5784846040516020016200039a9291906200466d565b50506040805160208101909152600081526200029c565b6000808251602084016000f09392505050565b8160a001511562001d3757505050565b600062001d4684848462002d72565b9050600062001d5582620019b5565b602081015181519192509060030b15801562001dcd575062001dcd62001da0604051806040016040528060078152602001665355434345535360c81b8152506200223460201b60201c565b60408051808201825260008082526020918201528151808301909252845182528085019082015262001bca565b1562001ddb57505050505050565b6040820151511562001dfe5781604001516040516020016200039a9190620046ec565b806040516020016200039a919062004738565b6060600062001e478360408051808201825260008082526020918201528151808301909252825182529182019181019190915290565b905062001e8262001e7a604051806040016040528060048152602001630b9cdbdb60e21b8152506200223460201b60201c565b829062002261565b1562001ecb576200029c62001ec562001ebd604051806040016040528060048152602001630b9cdbdb60e21b8152506200223460201b60201c565b8390620032f1565b62002d07565b62001f0162001ef9604051806040016040528060018152602001601d60f91b8152506200223460201b60201c565b829062003385565b60010362001f725762001f3762001cc1604051806040016040528060018152602001601d60f91b8152506200223460201b60201c565b506200029c62001ec562001f6a604051806040016040528060018152602001601d60f91b8152506200223460201b60201c565b839062002cdf565b62001fa462001e7a60405180604001604052806005815260200164173539b7b760d91b8152506200223460201b60201c565b156200208057600062001fe18262001fdb604051806040016040528060018152602001602f60f81b8152506200223460201b60201c565b6200342c565b90506000816001835162001ff691906200478a565b81518110620020095762002009620041ae565b602002602001015190506200207762001ec56200204960405180604001604052806005815260200164173539b7b760d91b8152506200223460201b60201c565b60408051808201825260008082526020918201528151808301909252855182528086019082015290620032f1565b95945050505050565b826040516020016200039a9190620047a0565b60606000620020c98360408051808201825260008082526020918201528151808301909252825182529182019181019190915290565b9050620020fc62001e7a604051806040016040528060048152602001630b9cdbdb60e21b8152506200223460201b60201c565b156200210d576200029c8162002d07565b6200213b62001ef9604051806040016040528060018152602001601d60f91b8152506200223460201b60201c565b60010362002175576200029c62001ec562001f6a604051806040016040528060018152602001601d60f91b8152506200223460201b60201c565b620021a762001e7a60405180604001604052806005815260200164173539b7b760d91b8152506200223460201b60201c565b1562002080576000620021de8262001fdb604051806040016040528060018152602001602f60f81b8152506200223460201b60201c565b905060018151111562002220578060028251620021fc91906200478a565b815181106200220f576200220f620041ae565b602002602001015192505050919050565b50826040516020016200039a9190620047a0565b60408051808201825260008082526020918201528151808301909252825182529182019181019190915290565b80518251600091111562002278575060006200021b565b8151835160208501516000929162002290916200485c565b6200229c91906200478a565b905082602001518103620022b55760019150506200021b565b82516020840151819020912014905092915050565b60606000620022d983620034f6565b60010190506000816001600160401b03811115620022fb57620022fb62003cd1565b6040519080825280601f01601f19166020018201604052801562002326576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a85049450846200233057509392505050565b606060006200237c83604001516200223460201b60201c565b9050620023bd620023b56040518060400160405280600a8152602001691553931250d15394d15160b21b8152506200223460201b60201c565b8290620035df565b15620023e55750506040805180820190915260048152634e6f6e6560e01b6020820152919050565b6200241b620023b560405180604001604052806009815260200168556e6c6963656e736560b81b8152506200223460201b60201c565b1562002448575050604080518082019091526009815268556e6c6963656e736560b81b6020820152919050565b62002478620023b56040518060400160405280600381526020016213525560ea1b8152506200223460201b60201c565b156200249f57505060408051808201909152600381526213525560ea1b6020820152919050565b620024d8620023b56040518060400160405280600c81526020016b47504c2d322e302d6f6e6c7960a01b8152506200223460201b60201c565b806200251c57506200251c620023b56040518060400160405280601081526020016f23a8261699171816b7b916b630ba32b960811b8152506200223460201b60201c565b156200254957505060408051808201909152600981526823a72a9023a8263b1960b91b6020820152919050565b62002582620023b56040518060400160405280600c81526020016b47504c2d332e302d6f6e6c7960a01b8152506200223460201b60201c565b80620025c65750620025c6620023b56040518060400160405280601081526020016f23a8261699971816b7b916b630ba32b960811b8152506200223460201b60201c565b15620025f3575050604080518082019091526009815268474e552047504c763360b81b6020820152919050565b6200262d620023b56040518060400160405280600d81526020016c4c47504c2d322e312d6f6e6c7960981b8152506200223460201b60201c565b8062002672575062002672620023b5604051806040016040528060118152602001702623a8261699171896b7b916b630ba32b960791b8152506200223460201b60201c565b15620026a257505060408051808201909152600c81526b474e55204c47504c76322e3160a01b6020820152919050565b620026dc620023b56040518060400160405280600d81526020016c4c47504c2d332e302d6f6e6c7960981b8152506200223460201b60201c565b8062002721575062002721620023b5604051806040016040528060118152602001702623a8261699971816b7b916b630ba32b960791b8152506200223460201b60201c565b156200274f57505060408051808201909152600a815269474e55204c47504c763360b01b6020820152919050565b62002788620023b56040518060400160405280600c81526020016b4253442d322d436c6175736560a01b8152506200223460201b60201c565b15620027b857505060408051808201909152600c81526b4253442d322d436c6175736560a01b6020820152919050565b620027f1620023b56040518060400160405280600c81526020016b4253442d332d436c6175736560a01b8152506200223460201b60201c565b156200282157505060408051808201909152600c81526b4253442d332d436c6175736560a01b6020820152919050565b62002855620023b56040518060400160405280600781526020016604d504c2d322e360cc1b8152506200223460201b60201c565b156200288057505060408051808201909152600781526604d504c2d322e360cc1b6020820152919050565b620028b4620023b56040518060400160405280600781526020016604f534c2d332e360cc1b8152506200223460201b60201c565b15620028df57505060408051808201909152600781526604f534c2d332e360cc1b6020820152919050565b62002916620023b56040518060400160405280600a81526020016904170616368652d322e360b41b8152506200223460201b60201c565b156200294457505060408051808201909152600a81526904170616368652d322e360b41b6020820152919050565b6200297e620023b56040518060400160405280600d81526020016c4147504c2d332e302d6f6e6c7960981b8152506200223460201b60201c565b80620029c35750620029c3620023b56040518060400160405280601181526020017020a3a8261699971816b7b916b630ba32b960791b8152506200223460201b60201c565b15620029f157505060408051808201909152600a815269474e55204147504c763360b01b6020820152919050565b62002a26620023b5604051806040016040528060088152602001674255534c2d312e3160c01b8152506200223460201b60201c565b1562002a5157505060408051808201909152600781526642534c20312e3160c81b6020820152919050565b604080840151845191516200039a929060200162004872565b60608060005b845181101562002b0d578185828151811062002a905762002a90620041ae565b602002602001015160405160200162002aab92919062003de9565b60405160208183030381529060405291506001855162002acc91906200478a565b811462002af8578160405160200162002ae69190620049c6565b60405160208183030381529060405291505b8062002b0481620049ed565b91505062002a70565b5060408051600380825260808201909252600091816020015b606081526020019060019003908162002b26579050509050838160008151811062002b555762002b55620041ae565b6020026020010181905250604051806040016040528060028152602001612d6360f01b8152508160018151811062002b915762002b91620041ae565b6020026020010181905250818160028151811062002bb35762002bb3620041ae565b6020908102919091010152949350505050565b602080830151835183519284015160009362002be69291849190620035f5565b14159392505050565b604080518082019091526000808252602080830182905284518582015185519286015162002c1e93906200372a565b905083602001518162002c3291906200478a565b8451859062002c439083906200478a565b90525060208401525090919050565b604080518082019091526000808252602082015281518351101562002c795750816200021b565b602080830151908401516001911462002ca15750815160208481015190840151829020919020145b801562002cd75782518451859062002cbb9083906200478a565b905250825160208501805162002cd39083906200485c565b9052505b509192915050565b604080518082019091526000808252602082015262002d008383836200386e565b5092915050565b6060600082600001516001600160401b0381111562002d2a5762002d2a62003cd1565b6040519080825280601f01601f19166020018201604052801562002d55576020820181803683370190505b5060208481015185519293509083019162002d0091839162003922565b6060600062002d806200058c565b6040805160ff808252612000820190925291925060009190816020015b606081526020019060019003908162002d9d5790505090506000604051806040016040528060038152602001620dce0f60eb1b81525082828062002de190620042bc565b935060ff168151811062002df95762002df9620041ae565b6020026020010181905250604051806040016040528060078152602001665e312e33322e3360c81b81525060405160200162002e36919062004a09565b60405160208183030381529060405282828062002e5390620042bc565b935060ff168151811062002e6b5762002e6b620041ae565b60200260200101819052506040518060400160405280600881526020016776616c696461746560c01b81525082828062002ea590620042bc565b935060ff168151811062002ebd5762002ebd620041ae565b60200260200101819052508260405160200162002edb9190620041f4565b60405160208183030381529060405282828062002ef890620042bc565b935060ff168151811062002f105762002f10620041ae565b60200260200101819052506040518060400160405280600a8152602001690b4b58dbdb9d1c9858dd60b21b81525082828062002f4c90620042bc565b935060ff168151811062002f645762002f64620041ae565b602090810291909101015262002f7b8784620039ab565b828262002f8881620042bc565b935060ff168151811062002fa05762002fa0620041ae565b602090810291909101015285515115620030455760408051808201909152600b81526a2d2d7265666572656e636560a81b6020820152828262002fe381620042bc565b935060ff168151811062002ffb5762002ffb620041ae565b60209081029190910101528551620030149084620039ab565b82826200302181620042bc565b935060ff1681518110620030395762003039620041ae565b60200260200101819052505b856080015115620030ba5760408051808201909152601881527f2d2d756e73616665536b697053746f72616765436865636b0000000000000000602082015282826200309181620042bc565b935060ff1681518110620030a957620030a9620041ae565b60200260200101819052506200311b565b84156200311b576040805180820190915260128152712d2d726571756972655265666572656e636560701b60208201528282620030f781620042bc565b935060ff16815181106200310f576200310f620041ae565b60200260200101819052505b60408601515115620031b25760408051808201909152600d81526c2d2d756e73616665416c6c6f7760981b602082015282826200315881620042bc565b935060ff1681518110620031705762003170620041ae565b602002602001018190525085604001518282806200318e90620042bc565b935060ff1681518110620031a657620031a6620041ae565b60200260200101819052505b856060015115620032225760408051808201909152601481527f2d2d756e73616665416c6c6f7752656e616d657300000000000000000000000060208201528282620031fe81620042bc565b935060ff1681518110620032165762003216620041ae565b60200260200101819052505b60008160ff166001600160401b0381111562003242576200324262003cd1565b6040519080825280602002602001820160405280156200327757816020015b6060815260200190600190039081620032615790505b50905060005b8260ff168160ff161015620032e557838160ff1681518110620032a457620032a4620041ae565b6020026020010151828260ff1681518110620032c457620032c4620041ae565b60200260200101819052508080620032dc90620042bc565b9150506200327d565b50979650505050505050565b6040805180820190915260008082526020820152815183511015620033185750816200021b565b8151835160208501516000929162003330916200485c565b6200333c91906200478a565b602084015190915060019082146200335e575082516020840151819020908220145b80156200337c57835185518690620033789083906200478a565b9052505b50929392505050565b805182516020808501519084015160009384939092620033a79284906200372a565b620033b391906200485c565b90505b83516020850151620033c991906200485c565b811162002d005781620033dc81620049ed565b925050826000015162003418856020015183620033fa91906200478a565b86516200340891906200478a565b855160208701518591906200372a565b6200342491906200485c565b9050620033b6565b606060006200343c848462003385565b620034499060016200485c565b6001600160401b0381111562003463576200346362003cd1565b6040519080825280602002602001820160405280156200349857816020015b6060815260200190600190039081620034825790505b50905060005b8151811015620034ee57620034b862001ec5868662002cdf565b828281518110620034cd57620034cd620041ae565b60200260200101819052508080620034e590620049ed565b9150506200349e565b509392505050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000831062003540577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef810000000083106200356d576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106200358c57662386f26fc10000830492506010015b6305f5e1008310620035a5576305f5e100830492506008015b6127108310620035ba57612710830492506004015b60648310620035cd576064830492506002015b600a83106200021b5760010192915050565b6000620035ed8383620039ef565b159392505050565b600080858411620037205760208411620036c057600084156200364b576001620036218660206200478a565b6200362e90600862004a50565b6200363b90600262004b67565b6200364791906200478a565b1990505b83518116856200365c89896200485c565b6200366891906200478a565b805190935082165b818114620036a8578784116200368d5787945050505050620019ad565b83620036998162004b75565b94505082845116905062003670565b620036b487856200485c565b945050505050620019ad565b838320620036cf85886200478a565b620036db90876200485c565b91505b8582106200371e578482208082036200370857620036fd86846200485c565b9350505050620019ad565b620037156001846200478a565b925050620036de565b505b5092949350505050565b60008381868511620038575760208511620037fc576000851562003781576001620037578760206200478a565b6200376490600862004a50565b6200377190600262004b67565b6200377d91906200478a565b1990505b84518116600087620037948b8b6200485c565b620037a091906200478a565b855190915083165b828114620037ed57818610620037d257620037c48b8b6200485c565b9650505050505050620019ad565b85620037de81620049ed565b965050838651169050620037a8565b859650505050505050620019ad565b508383206000905b6200381086896200478a565b821162003855578583208082036200382f5783945050505050620019ad565b6200383c6001856200485c565b93505081806200384c90620049ed565b92505062003804565b505b6200386387876200485c565b979650505050505050565b60408051808201909152600080825260208083018290528551868201518651928701516200389d93906200372a565b602080870180519186019190915251909150620038bb90826200478a565b835284516020860151620038d091906200485c565b8103620038e1576000855262003919565b83518351620038f191906200485c565b85518690620039029083906200478a565b90525083516200391390826200485c565b60208601525b50909392505050565b602081106200396257815183526200393c6020846200485c565b92506200394b6020836200485c565b91506200395a6020826200478a565b905062003922565b6000198115620039985760016200397b8360206200478a565b620039899061010062004b67565b6200399591906200478a565b90505b9151835183169219169190911790915250565b60606000620039bb84846200062c565b8051602080830151604051939450620039d79390910162004b8f565b60405160208183030381529060405291505092915050565b815181516000919081111562003a03575081515b6020808501519084015160005b8381101562003ad2578251825180821462003a9b57600019602087101562003a785760018462003a428960206200478a565b62003a4e91906200485c565b62003a5b90600862004a50565b62003a6890600262004b67565b62003a7491906200478a565b1990505b818116838216818103911462003a985797506200021b9650505050505050565b50505b62003aa86020866200485c565b945062003ab76020856200485c565b9350505060208162003aca91906200485c565b905062003a10565b508451865162000c44919062004bcf565b610cca80620059c683390190565b6040518060e0016040528060608152602001606081526020016060815260200160001515815260200160001515815260200160001515815260200162003b3662003b3b565b905290565b6040518061010001604052806000151581526020016000151581526020016060815260200160008019168152602001606081526020016060815260200160001515815260200162003b366040518060800160405280600081526020016000815260200160008152602001600081525090565b60005b8381101562003bca57818101518382015260200162003bb0565b50506000910152565b6000815180845262003bed81602086016020860162003bad565b601f01601f19169290920160200192915050565b6001600160a01b0383168152604060208201819052600090620019ad9083018462003bd3565b7f4661696c656420746f206465706c6f7920636f6e74726163742000000000000081526000835162003c6181601a85016020880162003bad565b6101d160f51b601a91840191820152835162003c8581601c84016020880162003bad565b01601c01949350505050565b6020815260006200029c602083018462003bd3565b60006020828403121562003cb957600080fd5b81516001600160a01b03811681146200029c57600080fd5b634e487b7160e01b600052604160045260246000fd5b604051606081016001600160401b038111828210171562003d0c5762003d0c62003cd1565b60405290565b60006001600160401b038084111562003d2f5762003d2f62003cd1565b604051601f8501601f19908116603f0116810190828211818310171562003d5a5762003d5a62003cd1565b8160405280935085815286868601111562003d7457600080fd5b62003d8486602083018762003bad565b5050509392505050565b600082601f83011262003da057600080fd5b6200029c8383516020850162003d12565b60006020828403121562003dc457600080fd5b81516001600160401b0381111562003ddb57600080fd5b620002178482850162003d8e565b6000835162003dfd81846020880162003bad565b83519083019062003e1381836020880162003bad565b01949350505050565b7f4661696c656420746f206465706c6f7920636f6e74726163742000000000000081526000835162003e5681601a85016020880162003bad565b7f207573696e6720636f6e7374727563746f722064617461202200000000000000601a91840191820152835162003e9581603384016020880162003bad565b601160f91b60339290910191820152603401949350505050565b60408152600b60408201526a1193d55391149657d3d55560aa1b60608201526080602082015260006200029c608083018462003bd3565b60006020828403121562003ef957600080fd5b81516001600160401b0381111562003f1057600080fd5b8201601f8101841362003f2257600080fd5b620002178482516020840162003d12565b6000855162003f47818460208a0162003bad565b8083019050602f60f81b808252865162003f69816001850160208b0162003bad565b60019201918201819052855162003f88816002850160208a0162003bad565b6002920191820152835162003fa581600384016020880162003bad565b64173539b7b760d91b600392909101918201526008019695505050505050565b60408152600062003fda604083018462003bd3565b828103602084015260048152630b985cdd60e21b60208201526040810191505092915050565b6000602082840312156200401357600080fd5b815180151581146200029c57600080fd5b7f436f756c64206e6f742066696e642041535420696e20617274696661637420008152600082516200405e81601f85016020870162003bad565b7f2e205365742060617374203d20747275656020696e20666f756e6472792e746f601f939091019283015250611b5b60f21b603f820152604101919050565b604081526000620040b2604083018462003bd3565b8281036020840152601181527005cc2e6e85cc2c4e6ded8eae8caa0c2e8d607b1b60208201526040810191505092915050565b604081526000620040fa604083018462003bd3565b8281036020840152600c81526b2e6173742e6c6963656e736560a01b60208201526040810191505092915050565b7f2e6d657461646174612e736f75726365732e5b270000000000000000000000008152600082516200416281601485016020870162003bad565b6b13ae9735b2b1b1b0b5991a9b60a11b6014939091019283015250602001919050565b6040815260006200419a604083018562003bd3565b828103602084015262000298818562003bd3565b634e487b7160e01b600052603260045260246000fd5b6000601160f91b8083528351620041e381600186016020880162003bad565b600193019283015250600201919050565b600082516200420881846020870162003bad565b6a2f6275696c642d696e666f60a81b920191825250600b01919050565b7f436f756c64206e6f742066696e64206275696c642d696e666f2066696c65207781527f697468206d61746368696e6720736f7572636520636f6465206861736820666f60208201526a0391031b7b73a3930b1ba160ad1b6040820152600082516200429981604b85016020870162003bad565b91909101604b0192915050565b634e487b7160e01b600052601160045260246000fd5b600060ff821660ff8103620042d557620042d5620042a6565b60010192915050565b7f406f70656e7a657070656c696e2f646566656e6465722d6465706c6f792d636c81526801a595b9d0b58db1a560be1b6020820152600082516200432a81602985016020870162003bad565b9190910160290192915050565b60408152601660408201527f4f50454e5a455050454c494e5f424153485f504154480000000000000000000060608201526080602082015260006200029c608083018462003bd3565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015620043d957603f19888603018452620043c685835162003bd3565b94509285019290850190600101620043a7565b5092979650505050505050565b600060208284031215620043f957600080fd5b81516001600160401b03808211156200441157600080fd5b90830190606082860312156200442657600080fd5b6200443062003ce7565b82518060030b81146200444257600080fd5b81526020830151828111156200445757600080fd5b620044658782860162003d8e565b6020830152506040830151828111156200447e57600080fd5b6200448c8782860162003d8e565b60408301525095945050505050565b7f4661696c656420746f2072756e206261736820636f6d6d616e642077697468208152601160f91b602082015260008251620044df81602185016020870162003bad565b7f222e20496620796f7520617265207573696e672057696e646f77732c2073657460219390910192830152507f20746865204f50454e5a455050454c494e5f424153485f5041544820656e766960418201527f726f6e6d656e74207661726961626c6520746f207468652066756c6c7920717560618201527f616c69666965642070617468206f66207468652062617368206578656375746160818201527f626c652e20466f72206578616d706c652c20696620796f75206172652075736960a18201527f6e672047697420666f722057696e646f77732c206164642074686520666f6c6c60c18201527f6f77696e67206c696e6520696e20746865202e656e762066696c65206f66207960e18201527f6f75722070726f6a65637420287573696e6720666f727761726420736c6173686101018201527f6573293a0a4f50454e5a455050454c494e5f424153485f504154483d22433a2f6101218201527f50726f6772616d2046696c65732f4769742f62696e2f6261736822000000000061014182015261015c01919050565b7f4661696c656420746f2066696e64206c696e65207769746820707265666978208152602760f81b602082015260008351620046b181602185016020880162003bad565b6c0139034b71037baba383aba1d1609d1b6021918401918201528351620046e081602e84016020880162003bad565b01602e01949350505050565b7f4661696c656420746f2072756e2075706772616465207361666574792076616c815268034b230ba34b7b71d160bd1b6020820152600082516200432a81602985016020870162003bad565b7f55706772616465207361666574792076616c69646174696f6e206661696c65648152611d0560f11b6020820152600082516200477d81602285016020870162003bad565b9190910160220192915050565b818103818111156200021b576200021b620042a6565b6d021b7b73a3930b1ba103730b6b2960951b815260008251620047cb81600e85016020870162003bad565b7f206d75737420626520696e2074686520666f726d6174204d79436f6e74726163600e9390910192830152507f742e736f6c3a4d79436f6e7472616374206f72204d79436f6e74726163742e73602e8201527f6f6c206f72206f75742f4d79436f6e74726163742e736f6c2f4d79436f6e7472604e8201526730b1ba173539b7b760c11b606e820152607601919050565b808201808211156200021b576200021b620042a6565b7f53504458206c6963656e7365206964656e746966696572200000000000000000815260008351620048ac81601885016020880162003bad565b6301034b7160e51b6018918401918201528351620048d281601c84016020880162003bad565b7f20646f6573206e6f74206c6f6f6b206c696b65206120737570706f7274656420601c92909101918201527f6c6963656e736520666f7220626c6f636b206578706c6f726572207665726966603c8201527f69636174696f6e2e205573652074686520606c6963656e73655479706560206f605c8201527f7074696f6e20746f20737065636966792061206c6963656e736520747970652c607c8201527f206f7220736574207468652060736b69704c6963656e73655479706560206f70609c8201527f74696f6e20746f2060747275656020746f20736b69702e00000000000000000060bc82015260d301949350505050565b60008251620049da81846020870162003bad565b600160fd1b920191825250600101919050565b60006001820162004a025762004a02620042a6565b5060010190565b7f406f70656e7a657070656c696e2f75706772616465732d636f7265400000000081526000825162004a4381601c85016020870162003bad565b91909101601c0192915050565b80820281158282048414176200021b576200021b620042a6565b600181815b8085111562004aab57816000190482111562004a8f5762004a8f620042a6565b8085161562004a9d57918102915b93841c939080029062004a6f565b509250929050565b60008262004ac4575060016200021b565b8162004ad3575060006200021b565b816001811462004aec576002811462004af75762004b17565b60019150506200021b565b60ff84111562004b0b5762004b0b620042a6565b50506001821b6200021b565b5060208310610133831016604e8410600b841016171562004b3c575081810a6200021b565b62004b48838362004a6a565b806000190482111562004b5f5762004b5f620042a6565b029392505050565b60006200029c838362004ab3565b60008162004b875762004b87620042a6565b506000190190565b6000835162004ba381846020880162003bad565b601d60f91b908301908152835162004bc381600184016020880162003bad565b01600101949350505050565b818103600083128015838313168383128216171562002d005762002d00620042a6565b610dc48062004c026000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80636133b4bb1161005b5780636133b4bb1461012b57806381100bf01461013e578063c8a023621461015e578063d9caed121461017157600080fd5b8063116191b61461008d57806321fc65f2146100d65780633c2f05a8146100eb5780635b1125911461010b575b600080fd5b6001546100ad9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b6100e96100e4366004610aff565b610184565b005b6003546100ad9073ffffffffffffffffffffffffffffffffffffffff1681565b6002546100ad9073ffffffffffffffffffffffffffffffffffffffff1681565b6100e9610139366004610b6e565b61030e565b6004546100ad9073ffffffffffffffffffffffffffffffffffffffff1681565b6100e961016c366004610aff565b61052a565b6100e961017f366004610bc8565b61069b565b61018c61078b565b60025473ffffffffffffffffffffffffffffffffffffffff1633146101dd576040517fddb5de5e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001546102049073ffffffffffffffffffffffffffffffffffffffff8781169116856107ce565b6001546040517f5131ab5900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911690635131ab59906102629088908890889088908890600401610c4d565b600060405180830381600087803b15801561027c57600080fd5b505af1158015610290573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167f85b5be9cf454e05e0bddf49315178102227c312078eefa3c00294fb4d912ae4e8585856040516102f593929190610c98565b60405180910390a36103076001600055565b5050505050565b60035473ffffffffffffffffffffffffffffffffffffffff166340c10f1930610338866005610cbb565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff90921660048301526024820152604401600060405180830381600087803b1580156103a357600080fd5b505af11580156103b7573d6000803e3d6000fd5b50506003546006546040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9182166004820152600560248201529116925063a9059cbb91506044016020604051808303816000875af1158015610436573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061045a9190610cf5565b506003546104819073ffffffffffffffffffffffffffffffffffffffff1685858585610184565b6003546001546040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff91821660048201529116906370a0823190602401602060405180830381865afa1580156104f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105179190610d17565b1561052457610524610d30565b50505050565b61053261078b565b60025473ffffffffffffffffffffffffffffffffffffffff163314610583576040517fddb5de5e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001546105aa9073ffffffffffffffffffffffffffffffffffffffff8781169116856107ce565b6001546040517fb8969bd400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063b8969bd4906106089088908890889088908890600401610c4d565b600060405180830381600087803b15801561062257600080fd5b505af1158015610636573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fb9d4efa96044e5f5e03e696fa9ae2ff66911cc27e8a637c3627c75bc5b2241c88585856040516102f593929190610c98565b6106a361078b565b60025473ffffffffffffffffffffffffffffffffffffffff1633146106f4576040517fddb5de5e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61071573ffffffffffffffffffffffffffffffffffffffff841683836107ce565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb8360405161077491815260200190565b60405180910390a36107866001600055565b505050565b6002600054036107c7576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002600055565b6040805173ffffffffffffffffffffffffffffffffffffffff848116602483015260448083018590528351808403909101815260649092019092526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb0000000000000000000000000000000000000000000000000000000017905261078691859190600090610867908416836108e0565b9050805160001415801561088c57508080602001905181019061088a9190610cf5565b155b15610786576040517f5274afe700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff841660048201526024015b60405180910390fd5b60606108ee838360006108f7565b90505b92915050565b606081471015610935576040517fcd7860590000000000000000000000000000000000000000000000000000000081523060048201526024016108d7565b6000808573ffffffffffffffffffffffffffffffffffffffff16848660405161095e9190610d5f565b60006040518083038185875af1925050503d806000811461099b576040519150601f19603f3d011682016040523d82523d6000602084013e6109a0565b606091505b50915091506109b08683836109bc565b925050505b9392505050565b6060826109d1576109cc82610a4b565b6109b5565b81511580156109f5575073ffffffffffffffffffffffffffffffffffffffff84163b155b15610a44576040517f9996b31500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff851660048201526024016108d7565b50806109b5565b805115610a5b5780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b803573ffffffffffffffffffffffffffffffffffffffff81168114610ab157600080fd5b919050565b60008083601f840112610ac857600080fd5b50813567ffffffffffffffff811115610ae057600080fd5b602083019150836020828501011115610af857600080fd5b9250929050565b600080600080600060808688031215610b1757600080fd5b610b2086610a8d565b9450610b2e60208701610a8d565b935060408601359250606086013567ffffffffffffffff811115610b5157600080fd5b610b5d88828901610ab6565b969995985093965092949392505050565b60008060008060608587031215610b8457600080fd5b610b8d85610a8d565b935060208501359250604085013567ffffffffffffffff811115610bb057600080fd5b610bbc87828801610ab6565b95989497509550505050565b600080600060608486031215610bdd57600080fd5b610be684610a8d565b9250610bf460208501610a8d565b9150604084013590509250925092565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b600073ffffffffffffffffffffffffffffffffffffffff808816835280871660208401525084604083015260806060830152610c8d608083018486610c04565b979650505050505050565b838152604060208201526000610cb2604083018486610c04565b95945050505050565b808201808211156108f1577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600060208284031215610d0757600080fd5b815180151581146109b557600080fd5b600060208284031215610d2957600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b6000825160005b81811015610d805760208186018101518583015201610d66565b50600092019182525091905056fea2646970667358221220eb028202b4da53149bed08dab79e88c9d242f872840a2a15ea961a98e5b81d6564736f6c6343000815003360806040523480156200001157600080fd5b5060405162000cca38038062000cca833981016040819052620000349162000123565b818160036200004483826200021c565b5060046200005382826200021c565b5050505050620002e8565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200008657600080fd5b81516001600160401b0380821115620000a357620000a36200005e565b604051601f8301601f19908116603f01168101908282118183101715620000ce57620000ce6200005e565b81604052838152602092508683858801011115620000eb57600080fd5b600091505b838210156200010f5785820183015181830184015290820190620000f0565b600093810190920192909252949350505050565b600080604083850312156200013757600080fd5b82516001600160401b03808211156200014f57600080fd5b6200015d8683870162000074565b935060208501519150808211156200017457600080fd5b50620001838582860162000074565b9150509250929050565b600181811c90821680620001a257607f821691505b602082108103620001c357634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200021757600081815260208120601f850160051c81016020861015620001f25750805b601f850160051c820191505b818110156200021357828155600101620001fe565b5050505b505050565b81516001600160401b038111156200023857620002386200005e565b62000250816200024984546200018d565b84620001c9565b602080601f8311600181146200028857600084156200026f5750858301515b600019600386901b1c1916600185901b17855562000213565b600085815260208120601f198616915b82811015620002b95788860151825594840194600190910190840162000298565b5085821015620002d85787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6109d280620002f86000396000f3fe608060405234801561001057600080fd5b50600436106100be5760003560e01c806340c10f191161007657806395d89b411161005b57806395d89b4114610183578063a9059cbb1461018b578063dd62ed3e1461019e57600080fd5b806340c10f191461013857806370a082311461014d57600080fd5b806318160ddd116100a757806318160ddd1461010457806323b872dd14610116578063313ce5671461012957600080fd5b806306fdde03146100c3578063095ea7b3146100e1575b600080fd5b6100cb6101e4565b6040516100d891906107bf565b60405180910390f35b6100f46100ef366004610854565b610276565b60405190151581526020016100d8565b6002545b6040519081526020016100d8565b6100f461012436600461087e565b610290565b604051601281526020016100d8565b61014b610146366004610854565b6102b4565b005b61010861015b3660046108ba565b73ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205490565b6100cb6102c2565b6100f4610199366004610854565b6102d1565b6101086101ac3660046108dc565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260016020908152604080832093909416825291909152205490565b6060600380546101f39061090f565b80601f016020809104026020016040519081016040528092919081815260200182805461021f9061090f565b801561026c5780601f106102415761010080835404028352916020019161026c565b820191906000526020600020905b81548152906001019060200180831161024f57829003601f168201915b5050505050905090565b6000336102848185856102df565b60019150505b92915050565b60003361029e8582856102f1565b6102a98585856103c5565b506001949350505050565b6102be8282610470565b5050565b6060600480546101f39061090f565b6000336102848185856103c5565b6102ec83838360016104cc565b505050565b73ffffffffffffffffffffffffffffffffffffffff8381166000908152600160209081526040808320938616835292905220547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146103bf57818110156103b0576040517ffb8f41b200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8416600482015260248101829052604481018390526064015b60405180910390fd5b6103bf848484840360006104cc565b50505050565b73ffffffffffffffffffffffffffffffffffffffff8316610415576040517f96c6fd1e000000000000000000000000000000000000000000000000000000008152600060048201526024016103a7565b73ffffffffffffffffffffffffffffffffffffffff8216610465576040517fec442f05000000000000000000000000000000000000000000000000000000008152600060048201526024016103a7565b6102ec838383610614565b73ffffffffffffffffffffffffffffffffffffffff82166104c0576040517fec442f05000000000000000000000000000000000000000000000000000000008152600060048201526024016103a7565b6102be60008383610614565b73ffffffffffffffffffffffffffffffffffffffff841661051c576040517fe602df05000000000000000000000000000000000000000000000000000000008152600060048201526024016103a7565b73ffffffffffffffffffffffffffffffffffffffff831661056c576040517f94280d62000000000000000000000000000000000000000000000000000000008152600060048201526024016103a7565b73ffffffffffffffffffffffffffffffffffffffff808516600090815260016020908152604080832093871683529290522082905580156103bf578273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258460405161060691815260200190565b60405180910390a350505050565b73ffffffffffffffffffffffffffffffffffffffff831661064c5780600260008282546106419190610962565b909155506106fe9050565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260208190526040902054818110156106d2576040517fe450d38c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8516600482015260248101829052604481018390526064016103a7565b73ffffffffffffffffffffffffffffffffffffffff841660009081526020819052604090209082900390555b73ffffffffffffffffffffffffffffffffffffffff821661072757600280548290039055610753565b73ffffffffffffffffffffffffffffffffffffffff821660009081526020819052604090208054820190555b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516107b291815260200190565b60405180910390a3505050565b600060208083528351808285015260005b818110156107ec578581018301518582016040015282016107d0565b5060006040828601015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168501019250505092915050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461084f57600080fd5b919050565b6000806040838503121561086757600080fd5b6108708361082b565b946020939093013593505050565b60008060006060848603121561089357600080fd5b61089c8461082b565b92506108aa6020850161082b565b9150604084013590509250925092565b6000602082840312156108cc57600080fd5b6108d58261082b565b9392505050565b600080604083850312156108ef57600080fd5b6108f88361082b565b91506109066020840161082b565b90509250929050565b600181811c9082168061092357607f821691505b60208210810361095c577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b8082018082111561028a577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fdfea2646970667358221220556869bd33d6741656e444b7d99e56e0c3a9495b8426ba227d4f4af169660e8264736f6c634300081500330000000000000000000000007109709ecfa91a80626ff3989d68f67f5b1dd12d54686520606c6963656e73655479706560206f7074696f6e2063616e6e6f7420",
}

// ERC20CustodyNewEchidnaTestABI is the input ABI used to generate the binding from.
// Deprecated: Use ERC20CustodyNewEchidnaTestMetaData.ABI instead.
var ERC20CustodyNewEchidnaTestABI = ERC20CustodyNewEchidnaTestMetaData.ABI

// ERC20CustodyNewEchidnaTestBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ERC20CustodyNewEchidnaTestMetaData.Bin instead.
var ERC20CustodyNewEchidnaTestBin = ERC20CustodyNewEchidnaTestMetaData.Bin

// DeployERC20CustodyNewEchidnaTest deploys a new Ethereum contract, binding an instance of ERC20CustodyNewEchidnaTest to it.
func DeployERC20CustodyNewEchidnaTest(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ERC20CustodyNewEchidnaTest, error) {
	parsed, err := ERC20CustodyNewEchidnaTestMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ERC20CustodyNewEchidnaTestBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ERC20CustodyNewEchidnaTest{ERC20CustodyNewEchidnaTestCaller: ERC20CustodyNewEchidnaTestCaller{contract: contract}, ERC20CustodyNewEchidnaTestTransactor: ERC20CustodyNewEchidnaTestTransactor{contract: contract}, ERC20CustodyNewEchidnaTestFilterer: ERC20CustodyNewEchidnaTestFilterer{contract: contract}}, nil
}

// ERC20CustodyNewEchidnaTest is an auto generated Go binding around an Ethereum contract.
type ERC20CustodyNewEchidnaTest struct {
	ERC20CustodyNewEchidnaTestCaller     // Read-only binding to the contract
	ERC20CustodyNewEchidnaTestTransactor // Write-only binding to the contract
	ERC20CustodyNewEchidnaTestFilterer   // Log filterer for contract events
}

// ERC20CustodyNewEchidnaTestCaller is an auto generated read-only Go binding around an Ethereum contract.
type ERC20CustodyNewEchidnaTestCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC20CustodyNewEchidnaTestTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ERC20CustodyNewEchidnaTestTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC20CustodyNewEchidnaTestFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ERC20CustodyNewEchidnaTestFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC20CustodyNewEchidnaTestSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ERC20CustodyNewEchidnaTestSession struct {
	Contract     *ERC20CustodyNewEchidnaTest // Generic contract binding to set the session for
	CallOpts     bind.CallOpts               // Call options to use throughout this session
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// ERC20CustodyNewEchidnaTestCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ERC20CustodyNewEchidnaTestCallerSession struct {
	Contract *ERC20CustodyNewEchidnaTestCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                     // Call options to use throughout this session
}

// ERC20CustodyNewEchidnaTestTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ERC20CustodyNewEchidnaTestTransactorSession struct {
	Contract     *ERC20CustodyNewEchidnaTestTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                     // Transaction auth options to use throughout this session
}

// ERC20CustodyNewEchidnaTestRaw is an auto generated low-level Go binding around an Ethereum contract.
type ERC20CustodyNewEchidnaTestRaw struct {
	Contract *ERC20CustodyNewEchidnaTest // Generic contract binding to access the raw methods on
}

// ERC20CustodyNewEchidnaTestCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ERC20CustodyNewEchidnaTestCallerRaw struct {
	Contract *ERC20CustodyNewEchidnaTestCaller // Generic read-only contract binding to access the raw methods on
}

// ERC20CustodyNewEchidnaTestTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ERC20CustodyNewEchidnaTestTransactorRaw struct {
	Contract *ERC20CustodyNewEchidnaTestTransactor // Generic write-only contract binding to access the raw methods on
}

// NewERC20CustodyNewEchidnaTest creates a new instance of ERC20CustodyNewEchidnaTest, bound to a specific deployed contract.
func NewERC20CustodyNewEchidnaTest(address common.Address, backend bind.ContractBackend) (*ERC20CustodyNewEchidnaTest, error) {
	contract, err := bindERC20CustodyNewEchidnaTest(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ERC20CustodyNewEchidnaTest{ERC20CustodyNewEchidnaTestCaller: ERC20CustodyNewEchidnaTestCaller{contract: contract}, ERC20CustodyNewEchidnaTestTransactor: ERC20CustodyNewEchidnaTestTransactor{contract: contract}, ERC20CustodyNewEchidnaTestFilterer: ERC20CustodyNewEchidnaTestFilterer{contract: contract}}, nil
}

// NewERC20CustodyNewEchidnaTestCaller creates a new read-only instance of ERC20CustodyNewEchidnaTest, bound to a specific deployed contract.
func NewERC20CustodyNewEchidnaTestCaller(address common.Address, caller bind.ContractCaller) (*ERC20CustodyNewEchidnaTestCaller, error) {
	contract, err := bindERC20CustodyNewEchidnaTest(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ERC20CustodyNewEchidnaTestCaller{contract: contract}, nil
}

// NewERC20CustodyNewEchidnaTestTransactor creates a new write-only instance of ERC20CustodyNewEchidnaTest, bound to a specific deployed contract.
func NewERC20CustodyNewEchidnaTestTransactor(address common.Address, transactor bind.ContractTransactor) (*ERC20CustodyNewEchidnaTestTransactor, error) {
	contract, err := bindERC20CustodyNewEchidnaTest(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ERC20CustodyNewEchidnaTestTransactor{contract: contract}, nil
}

// NewERC20CustodyNewEchidnaTestFilterer creates a new log filterer instance of ERC20CustodyNewEchidnaTest, bound to a specific deployed contract.
func NewERC20CustodyNewEchidnaTestFilterer(address common.Address, filterer bind.ContractFilterer) (*ERC20CustodyNewEchidnaTestFilterer, error) {
	contract, err := bindERC20CustodyNewEchidnaTest(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ERC20CustodyNewEchidnaTestFilterer{contract: contract}, nil
}

// bindERC20CustodyNewEchidnaTest binds a generic wrapper to an already deployed contract.
func bindERC20CustodyNewEchidnaTest(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ERC20CustodyNewEchidnaTestMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC20CustodyNewEchidnaTest *ERC20CustodyNewEchidnaTestRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ERC20CustodyNewEchidnaTest.Contract.ERC20CustodyNewEchidnaTestCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC20CustodyNewEchidnaTest *ERC20CustodyNewEchidnaTestRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC20CustodyNewEchidnaTest.Contract.ERC20CustodyNewEchidnaTestTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC20CustodyNewEchidnaTest *ERC20CustodyNewEchidnaTestRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC20CustodyNewEchidnaTest.Contract.ERC20CustodyNewEchidnaTestTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC20CustodyNewEchidnaTest *ERC20CustodyNewEchidnaTestCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ERC20CustodyNewEchidnaTest.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC20CustodyNewEchidnaTest *ERC20CustodyNewEchidnaTestTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC20CustodyNewEchidnaTest.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC20CustodyNewEchidnaTest *ERC20CustodyNewEchidnaTestTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC20CustodyNewEchidnaTest.Contract.contract.Transact(opts, method, params...)
}

// EchidnaCaller is a free data retrieval call binding the contract method 0x81100bf0.
//
// Solidity: function echidnaCaller() view returns(address)
func (_ERC20CustodyNewEchidnaTest *ERC20CustodyNewEchidnaTestCaller) EchidnaCaller(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ERC20CustodyNewEchidnaTest.contract.Call(opts, &out, "echidnaCaller")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// EchidnaCaller is a free data retrieval call binding the contract method 0x81100bf0.
//
// Solidity: function echidnaCaller() view returns(address)
func (_ERC20CustodyNewEchidnaTest *ERC20CustodyNewEchidnaTestSession) EchidnaCaller() (common.Address, error) {
	return _ERC20CustodyNewEchidnaTest.Contract.EchidnaCaller(&_ERC20CustodyNewEchidnaTest.CallOpts)
}

// EchidnaCaller is a free data retrieval call binding the contract method 0x81100bf0.
//
// Solidity: function echidnaCaller() view returns(address)
func (_ERC20CustodyNewEchidnaTest *ERC20CustodyNewEchidnaTestCallerSession) EchidnaCaller() (common.Address, error) {
	return _ERC20CustodyNewEchidnaTest.Contract.EchidnaCaller(&_ERC20CustodyNewEchidnaTest.CallOpts)
}

// Gateway is a free data retrieval call binding the contract method 0x116191b6.
//
// Solidity: function gateway() view returns(address)
func (_ERC20CustodyNewEchidnaTest *ERC20CustodyNewEchidnaTestCaller) Gateway(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ERC20CustodyNewEchidnaTest.contract.Call(opts, &out, "gateway")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Gateway is a free data retrieval call binding the contract method 0x116191b6.
//
// Solidity: function gateway() view returns(address)
func (_ERC20CustodyNewEchidnaTest *ERC20CustodyNewEchidnaTestSession) Gateway() (common.Address, error) {
	return _ERC20CustodyNewEchidnaTest.Contract.Gateway(&_ERC20CustodyNewEchidnaTest.CallOpts)
}

// Gateway is a free data retrieval call binding the contract method 0x116191b6.
//
// Solidity: function gateway() view returns(address)
func (_ERC20CustodyNewEchidnaTest *ERC20CustodyNewEchidnaTestCallerSession) Gateway() (common.Address, error) {
	return _ERC20CustodyNewEchidnaTest.Contract.Gateway(&_ERC20CustodyNewEchidnaTest.CallOpts)
}

// TestERC20 is a free data retrieval call binding the contract method 0x3c2f05a8.
//
// Solidity: function testERC20() view returns(address)
func (_ERC20CustodyNewEchidnaTest *ERC20CustodyNewEchidnaTestCaller) TestERC20(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ERC20CustodyNewEchidnaTest.contract.Call(opts, &out, "testERC20")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// TestERC20 is a free data retrieval call binding the contract method 0x3c2f05a8.
//
// Solidity: function testERC20() view returns(address)
func (_ERC20CustodyNewEchidnaTest *ERC20CustodyNewEchidnaTestSession) TestERC20() (common.Address, error) {
	return _ERC20CustodyNewEchidnaTest.Contract.TestERC20(&_ERC20CustodyNewEchidnaTest.CallOpts)
}

// TestERC20 is a free data retrieval call binding the contract method 0x3c2f05a8.
//
// Solidity: function testERC20() view returns(address)
func (_ERC20CustodyNewEchidnaTest *ERC20CustodyNewEchidnaTestCallerSession) TestERC20() (common.Address, error) {
	return _ERC20CustodyNewEchidnaTest.Contract.TestERC20(&_ERC20CustodyNewEchidnaTest.CallOpts)
}

// TssAddress is a free data retrieval call binding the contract method 0x5b112591.
//
// Solidity: function tssAddress() view returns(address)
func (_ERC20CustodyNewEchidnaTest *ERC20CustodyNewEchidnaTestCaller) TssAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ERC20CustodyNewEchidnaTest.contract.Call(opts, &out, "tssAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// TssAddress is a free data retrieval call binding the contract method 0x5b112591.
//
// Solidity: function tssAddress() view returns(address)
func (_ERC20CustodyNewEchidnaTest *ERC20CustodyNewEchidnaTestSession) TssAddress() (common.Address, error) {
	return _ERC20CustodyNewEchidnaTest.Contract.TssAddress(&_ERC20CustodyNewEchidnaTest.CallOpts)
}

// TssAddress is a free data retrieval call binding the contract method 0x5b112591.
//
// Solidity: function tssAddress() view returns(address)
func (_ERC20CustodyNewEchidnaTest *ERC20CustodyNewEchidnaTestCallerSession) TssAddress() (common.Address, error) {
	return _ERC20CustodyNewEchidnaTest.Contract.TssAddress(&_ERC20CustodyNewEchidnaTest.CallOpts)
}

// TestWithdrawAndCall is a paid mutator transaction binding the contract method 0x6133b4bb.
//
// Solidity: function testWithdrawAndCall(address to, uint256 amount, bytes data) returns()
func (_ERC20CustodyNewEchidnaTest *ERC20CustodyNewEchidnaTestTransactor) TestWithdrawAndCall(opts *bind.TransactOpts, to common.Address, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _ERC20CustodyNewEchidnaTest.contract.Transact(opts, "testWithdrawAndCall", to, amount, data)
}

// TestWithdrawAndCall is a paid mutator transaction binding the contract method 0x6133b4bb.
//
// Solidity: function testWithdrawAndCall(address to, uint256 amount, bytes data) returns()
func (_ERC20CustodyNewEchidnaTest *ERC20CustodyNewEchidnaTestSession) TestWithdrawAndCall(to common.Address, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _ERC20CustodyNewEchidnaTest.Contract.TestWithdrawAndCall(&_ERC20CustodyNewEchidnaTest.TransactOpts, to, amount, data)
}

// TestWithdrawAndCall is a paid mutator transaction binding the contract method 0x6133b4bb.
//
// Solidity: function testWithdrawAndCall(address to, uint256 amount, bytes data) returns()
func (_ERC20CustodyNewEchidnaTest *ERC20CustodyNewEchidnaTestTransactorSession) TestWithdrawAndCall(to common.Address, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _ERC20CustodyNewEchidnaTest.Contract.TestWithdrawAndCall(&_ERC20CustodyNewEchidnaTest.TransactOpts, to, amount, data)
}

// Withdraw is a paid mutator transaction binding the contract method 0xd9caed12.
//
// Solidity: function withdraw(address token, address to, uint256 amount) returns()
func (_ERC20CustodyNewEchidnaTest *ERC20CustodyNewEchidnaTestTransactor) Withdraw(opts *bind.TransactOpts, token common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20CustodyNewEchidnaTest.contract.Transact(opts, "withdraw", token, to, amount)
}

// Withdraw is a paid mutator transaction binding the contract method 0xd9caed12.
//
// Solidity: function withdraw(address token, address to, uint256 amount) returns()
func (_ERC20CustodyNewEchidnaTest *ERC20CustodyNewEchidnaTestSession) Withdraw(token common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20CustodyNewEchidnaTest.Contract.Withdraw(&_ERC20CustodyNewEchidnaTest.TransactOpts, token, to, amount)
}

// Withdraw is a paid mutator transaction binding the contract method 0xd9caed12.
//
// Solidity: function withdraw(address token, address to, uint256 amount) returns()
func (_ERC20CustodyNewEchidnaTest *ERC20CustodyNewEchidnaTestTransactorSession) Withdraw(token common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20CustodyNewEchidnaTest.Contract.Withdraw(&_ERC20CustodyNewEchidnaTest.TransactOpts, token, to, amount)
}

// WithdrawAndCall is a paid mutator transaction binding the contract method 0x21fc65f2.
//
// Solidity: function withdrawAndCall(address token, address to, uint256 amount, bytes data) returns()
func (_ERC20CustodyNewEchidnaTest *ERC20CustodyNewEchidnaTestTransactor) WithdrawAndCall(opts *bind.TransactOpts, token common.Address, to common.Address, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _ERC20CustodyNewEchidnaTest.contract.Transact(opts, "withdrawAndCall", token, to, amount, data)
}

// WithdrawAndCall is a paid mutator transaction binding the contract method 0x21fc65f2.
//
// Solidity: function withdrawAndCall(address token, address to, uint256 amount, bytes data) returns()
func (_ERC20CustodyNewEchidnaTest *ERC20CustodyNewEchidnaTestSession) WithdrawAndCall(token common.Address, to common.Address, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _ERC20CustodyNewEchidnaTest.Contract.WithdrawAndCall(&_ERC20CustodyNewEchidnaTest.TransactOpts, token, to, amount, data)
}

// WithdrawAndCall is a paid mutator transaction binding the contract method 0x21fc65f2.
//
// Solidity: function withdrawAndCall(address token, address to, uint256 amount, bytes data) returns()
func (_ERC20CustodyNewEchidnaTest *ERC20CustodyNewEchidnaTestTransactorSession) WithdrawAndCall(token common.Address, to common.Address, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _ERC20CustodyNewEchidnaTest.Contract.WithdrawAndCall(&_ERC20CustodyNewEchidnaTest.TransactOpts, token, to, amount, data)
}

// WithdrawAndRevert is a paid mutator transaction binding the contract method 0xc8a02362.
//
// Solidity: function withdrawAndRevert(address token, address to, uint256 amount, bytes data) returns()
func (_ERC20CustodyNewEchidnaTest *ERC20CustodyNewEchidnaTestTransactor) WithdrawAndRevert(opts *bind.TransactOpts, token common.Address, to common.Address, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _ERC20CustodyNewEchidnaTest.contract.Transact(opts, "withdrawAndRevert", token, to, amount, data)
}

// WithdrawAndRevert is a paid mutator transaction binding the contract method 0xc8a02362.
//
// Solidity: function withdrawAndRevert(address token, address to, uint256 amount, bytes data) returns()
func (_ERC20CustodyNewEchidnaTest *ERC20CustodyNewEchidnaTestSession) WithdrawAndRevert(token common.Address, to common.Address, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _ERC20CustodyNewEchidnaTest.Contract.WithdrawAndRevert(&_ERC20CustodyNewEchidnaTest.TransactOpts, token, to, amount, data)
}

// WithdrawAndRevert is a paid mutator transaction binding the contract method 0xc8a02362.
//
// Solidity: function withdrawAndRevert(address token, address to, uint256 amount, bytes data) returns()
func (_ERC20CustodyNewEchidnaTest *ERC20CustodyNewEchidnaTestTransactorSession) WithdrawAndRevert(token common.Address, to common.Address, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _ERC20CustodyNewEchidnaTest.Contract.WithdrawAndRevert(&_ERC20CustodyNewEchidnaTest.TransactOpts, token, to, amount, data)
}

// ERC20CustodyNewEchidnaTestWithdrawIterator is returned from FilterWithdraw and is used to iterate over the raw logs and unpacked data for Withdraw events raised by the ERC20CustodyNewEchidnaTest contract.
type ERC20CustodyNewEchidnaTestWithdrawIterator struct {
	Event *ERC20CustodyNewEchidnaTestWithdraw // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20CustodyNewEchidnaTestWithdrawIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20CustodyNewEchidnaTestWithdraw)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20CustodyNewEchidnaTestWithdraw)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20CustodyNewEchidnaTestWithdrawIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20CustodyNewEchidnaTestWithdrawIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20CustodyNewEchidnaTestWithdraw represents a Withdraw event raised by the ERC20CustodyNewEchidnaTest contract.
type ERC20CustodyNewEchidnaTestWithdraw struct {
	Token  common.Address
	To     common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterWithdraw is a free log retrieval operation binding the contract event 0x9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb.
//
// Solidity: event Withdraw(address indexed token, address indexed to, uint256 amount)
func (_ERC20CustodyNewEchidnaTest *ERC20CustodyNewEchidnaTestFilterer) FilterWithdraw(opts *bind.FilterOpts, token []common.Address, to []common.Address) (*ERC20CustodyNewEchidnaTestWithdrawIterator, error) {

	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _ERC20CustodyNewEchidnaTest.contract.FilterLogs(opts, "Withdraw", tokenRule, toRule)
	if err != nil {
		return nil, err
	}
	return &ERC20CustodyNewEchidnaTestWithdrawIterator{contract: _ERC20CustodyNewEchidnaTest.contract, event: "Withdraw", logs: logs, sub: sub}, nil
}

// WatchWithdraw is a free log subscription operation binding the contract event 0x9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb.
//
// Solidity: event Withdraw(address indexed token, address indexed to, uint256 amount)
func (_ERC20CustodyNewEchidnaTest *ERC20CustodyNewEchidnaTestFilterer) WatchWithdraw(opts *bind.WatchOpts, sink chan<- *ERC20CustodyNewEchidnaTestWithdraw, token []common.Address, to []common.Address) (event.Subscription, error) {

	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _ERC20CustodyNewEchidnaTest.contract.WatchLogs(opts, "Withdraw", tokenRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20CustodyNewEchidnaTestWithdraw)
				if err := _ERC20CustodyNewEchidnaTest.contract.UnpackLog(event, "Withdraw", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdraw is a log parse operation binding the contract event 0x9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb.
//
// Solidity: event Withdraw(address indexed token, address indexed to, uint256 amount)
func (_ERC20CustodyNewEchidnaTest *ERC20CustodyNewEchidnaTestFilterer) ParseWithdraw(log types.Log) (*ERC20CustodyNewEchidnaTestWithdraw, error) {
	event := new(ERC20CustodyNewEchidnaTestWithdraw)
	if err := _ERC20CustodyNewEchidnaTest.contract.UnpackLog(event, "Withdraw", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC20CustodyNewEchidnaTestWithdrawAndCallIterator is returned from FilterWithdrawAndCall and is used to iterate over the raw logs and unpacked data for WithdrawAndCall events raised by the ERC20CustodyNewEchidnaTest contract.
type ERC20CustodyNewEchidnaTestWithdrawAndCallIterator struct {
	Event *ERC20CustodyNewEchidnaTestWithdrawAndCall // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20CustodyNewEchidnaTestWithdrawAndCallIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20CustodyNewEchidnaTestWithdrawAndCall)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20CustodyNewEchidnaTestWithdrawAndCall)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20CustodyNewEchidnaTestWithdrawAndCallIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20CustodyNewEchidnaTestWithdrawAndCallIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20CustodyNewEchidnaTestWithdrawAndCall represents a WithdrawAndCall event raised by the ERC20CustodyNewEchidnaTest contract.
type ERC20CustodyNewEchidnaTestWithdrawAndCall struct {
	Token  common.Address
	To     common.Address
	Amount *big.Int
	Data   []byte
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterWithdrawAndCall is a free log retrieval operation binding the contract event 0x85b5be9cf454e05e0bddf49315178102227c312078eefa3c00294fb4d912ae4e.
//
// Solidity: event WithdrawAndCall(address indexed token, address indexed to, uint256 amount, bytes data)
func (_ERC20CustodyNewEchidnaTest *ERC20CustodyNewEchidnaTestFilterer) FilterWithdrawAndCall(opts *bind.FilterOpts, token []common.Address, to []common.Address) (*ERC20CustodyNewEchidnaTestWithdrawAndCallIterator, error) {

	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _ERC20CustodyNewEchidnaTest.contract.FilterLogs(opts, "WithdrawAndCall", tokenRule, toRule)
	if err != nil {
		return nil, err
	}
	return &ERC20CustodyNewEchidnaTestWithdrawAndCallIterator{contract: _ERC20CustodyNewEchidnaTest.contract, event: "WithdrawAndCall", logs: logs, sub: sub}, nil
}

// WatchWithdrawAndCall is a free log subscription operation binding the contract event 0x85b5be9cf454e05e0bddf49315178102227c312078eefa3c00294fb4d912ae4e.
//
// Solidity: event WithdrawAndCall(address indexed token, address indexed to, uint256 amount, bytes data)
func (_ERC20CustodyNewEchidnaTest *ERC20CustodyNewEchidnaTestFilterer) WatchWithdrawAndCall(opts *bind.WatchOpts, sink chan<- *ERC20CustodyNewEchidnaTestWithdrawAndCall, token []common.Address, to []common.Address) (event.Subscription, error) {

	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _ERC20CustodyNewEchidnaTest.contract.WatchLogs(opts, "WithdrawAndCall", tokenRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20CustodyNewEchidnaTestWithdrawAndCall)
				if err := _ERC20CustodyNewEchidnaTest.contract.UnpackLog(event, "WithdrawAndCall", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdrawAndCall is a log parse operation binding the contract event 0x85b5be9cf454e05e0bddf49315178102227c312078eefa3c00294fb4d912ae4e.
//
// Solidity: event WithdrawAndCall(address indexed token, address indexed to, uint256 amount, bytes data)
func (_ERC20CustodyNewEchidnaTest *ERC20CustodyNewEchidnaTestFilterer) ParseWithdrawAndCall(log types.Log) (*ERC20CustodyNewEchidnaTestWithdrawAndCall, error) {
	event := new(ERC20CustodyNewEchidnaTestWithdrawAndCall)
	if err := _ERC20CustodyNewEchidnaTest.contract.UnpackLog(event, "WithdrawAndCall", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC20CustodyNewEchidnaTestWithdrawAndRevertIterator is returned from FilterWithdrawAndRevert and is used to iterate over the raw logs and unpacked data for WithdrawAndRevert events raised by the ERC20CustodyNewEchidnaTest contract.
type ERC20CustodyNewEchidnaTestWithdrawAndRevertIterator struct {
	Event *ERC20CustodyNewEchidnaTestWithdrawAndRevert // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20CustodyNewEchidnaTestWithdrawAndRevertIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20CustodyNewEchidnaTestWithdrawAndRevert)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20CustodyNewEchidnaTestWithdrawAndRevert)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20CustodyNewEchidnaTestWithdrawAndRevertIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20CustodyNewEchidnaTestWithdrawAndRevertIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20CustodyNewEchidnaTestWithdrawAndRevert represents a WithdrawAndRevert event raised by the ERC20CustodyNewEchidnaTest contract.
type ERC20CustodyNewEchidnaTestWithdrawAndRevert struct {
	Token  common.Address
	To     common.Address
	Amount *big.Int
	Data   []byte
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterWithdrawAndRevert is a free log retrieval operation binding the contract event 0xb9d4efa96044e5f5e03e696fa9ae2ff66911cc27e8a637c3627c75bc5b2241c8.
//
// Solidity: event WithdrawAndRevert(address indexed token, address indexed to, uint256 amount, bytes data)
func (_ERC20CustodyNewEchidnaTest *ERC20CustodyNewEchidnaTestFilterer) FilterWithdrawAndRevert(opts *bind.FilterOpts, token []common.Address, to []common.Address) (*ERC20CustodyNewEchidnaTestWithdrawAndRevertIterator, error) {

	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _ERC20CustodyNewEchidnaTest.contract.FilterLogs(opts, "WithdrawAndRevert", tokenRule, toRule)
	if err != nil {
		return nil, err
	}
	return &ERC20CustodyNewEchidnaTestWithdrawAndRevertIterator{contract: _ERC20CustodyNewEchidnaTest.contract, event: "WithdrawAndRevert", logs: logs, sub: sub}, nil
}

// WatchWithdrawAndRevert is a free log subscription operation binding the contract event 0xb9d4efa96044e5f5e03e696fa9ae2ff66911cc27e8a637c3627c75bc5b2241c8.
//
// Solidity: event WithdrawAndRevert(address indexed token, address indexed to, uint256 amount, bytes data)
func (_ERC20CustodyNewEchidnaTest *ERC20CustodyNewEchidnaTestFilterer) WatchWithdrawAndRevert(opts *bind.WatchOpts, sink chan<- *ERC20CustodyNewEchidnaTestWithdrawAndRevert, token []common.Address, to []common.Address) (event.Subscription, error) {

	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _ERC20CustodyNewEchidnaTest.contract.WatchLogs(opts, "WithdrawAndRevert", tokenRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20CustodyNewEchidnaTestWithdrawAndRevert)
				if err := _ERC20CustodyNewEchidnaTest.contract.UnpackLog(event, "WithdrawAndRevert", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdrawAndRevert is a log parse operation binding the contract event 0xb9d4efa96044e5f5e03e696fa9ae2ff66911cc27e8a637c3627c75bc5b2241c8.
//
// Solidity: event WithdrawAndRevert(address indexed token, address indexed to, uint256 amount, bytes data)
func (_ERC20CustodyNewEchidnaTest *ERC20CustodyNewEchidnaTestFilterer) ParseWithdrawAndRevert(log types.Log) (*ERC20CustodyNewEchidnaTestWithdrawAndRevert, error) {
	event := new(ERC20CustodyNewEchidnaTestWithdrawAndRevert)
	if err := _ERC20CustodyNewEchidnaTest.contract.UnpackLog(event, "WithdrawAndRevert", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
