/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  ZContract,
  ZContractInterface,
} from "../../zContract.sol/ZContract";

const _abi = [
  {
    type: "function",
    name: "onCrossChainCall",
    inputs: [
      {
        name: "context",
        type: "tuple",
        internalType: "struct zContext",
        components: [
          {
            name: "origin",
            type: "bytes",
            internalType: "bytes",
          },
          {
            name: "sender",
            type: "address",
            internalType: "address",
          },
          {
            name: "chainID",
            type: "uint256",
            internalType: "uint256",
          },
        ],
      },
      {
        name: "zrc20",
        type: "address",
        internalType: "address",
      },
      {
        name: "amount",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "message",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
] as const;

export class ZContract__factory {
  static readonly abi = _abi;
  static createInterface(): ZContractInterface {
    return new Interface(_abi) as ZContractInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): ZContract {
    return new Contract(address, _abi, runner) as unknown as ZContract;
  }
}
