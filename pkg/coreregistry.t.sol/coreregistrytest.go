// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package coreregistry

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// StdInvariantFuzzArtifactSelector is an auto generated low-level Go binding around an user-defined struct.
type StdInvariantFuzzArtifactSelector struct {
	Artifact  string
	Selectors [][4]byte
}

// StdInvariantFuzzInterface is an auto generated low-level Go binding around an user-defined struct.
type StdInvariantFuzzInterface struct {
	Addr      common.Address
	Artifacts []string
}

// StdInvariantFuzzSelector is an auto generated low-level Go binding around an user-defined struct.
type StdInvariantFuzzSelector struct {
	Addr      common.Address
	Selectors [][4]byte
}

// CoreRegistryTestMetaData contains all meta data concerning the CoreRegistryTest contract.
var CoreRegistryTestMetaData = &bind.MetaData{
	ABI: "[{\"type\":\"function\",\"name\":\"IS_TEST\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"excludeArtifacts\",\"inputs\":[],\"outputs\":[{\"name\":\"excludedArtifacts_\",\"type\":\"string[]\",\"internalType\":\"string[]\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"excludeContracts\",\"inputs\":[],\"outputs\":[{\"name\":\"excludedContracts_\",\"type\":\"address[]\",\"internalType\":\"address[]\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"excludeSelectors\",\"inputs\":[],\"outputs\":[{\"name\":\"excludedSelectors_\",\"type\":\"tuple[]\",\"internalType\":\"structStdInvariant.FuzzSelector[]\",\"components\":[{\"name\":\"addr\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"selectors\",\"type\":\"bytes4[]\",\"internalType\":\"bytes4[]\"}]}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"excludeSenders\",\"inputs\":[],\"outputs\":[{\"name\":\"excludedSenders_\",\"type\":\"address[]\",\"internalType\":\"address[]\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"failed\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"setUp\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"targetArtifactSelectors\",\"inputs\":[],\"outputs\":[{\"name\":\"targetedArtifactSelectors_\",\"type\":\"tuple[]\",\"internalType\":\"structStdInvariant.FuzzArtifactSelector[]\",\"components\":[{\"name\":\"artifact\",\"type\":\"string\",\"internalType\":\"string\"},{\"name\":\"selectors\",\"type\":\"bytes4[]\",\"internalType\":\"bytes4[]\"}]}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"targetArtifacts\",\"inputs\":[],\"outputs\":[{\"name\":\"targetedArtifacts_\",\"type\":\"string[]\",\"internalType\":\"string[]\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"targetContracts\",\"inputs\":[],\"outputs\":[{\"name\":\"targetedContracts_\",\"type\":\"address[]\",\"internalType\":\"address[]\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"targetInterfaces\",\"inputs\":[],\"outputs\":[{\"name\":\"targetedInterfaces_\",\"type\":\"tuple[]\",\"internalType\":\"structStdInvariant.FuzzInterface[]\",\"components\":[{\"name\":\"addr\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"artifacts\",\"type\":\"string[]\",\"internalType\":\"string[]\"}]}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"targetSelectors\",\"inputs\":[],\"outputs\":[{\"name\":\"targetedSelectors_\",\"type\":\"tuple[]\",\"internalType\":\"structStdInvariant.FuzzSelector[]\",\"components\":[{\"name\":\"addr\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"selectors\",\"type\":\"bytes4[]\",\"internalType\":\"bytes4[]\"}]}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"targetSenders\",\"inputs\":[],\"outputs\":[{\"name\":\"targetedSenders_\",\"type\":\"address[]\",\"internalType\":\"address[]\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"testActivateAlreadyActiveChain\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testActivateChain\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testActivateChainUnauthorized\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testDeactivateChain\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testDeactivateNonActiveChain\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testInitialize\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"testInitializeWithZeroAddress\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testPause\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testPauseUnauthorized\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testRegisterContract\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testRegisterContractForNonActiveChain\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testRegisterContractTwice\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testRegisterContractWithEmptyAddress\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testRegisterContractWithEmptyType\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testRegisterZRC20Token\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testRegisterZRC20TokenTwice\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testRegisterZRC20TokenWithDuplicateSymbol\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testRegisterZRC20TokenWithEmptyAddress\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testRegisterZRC20TokenWithEmptyOriginAddress\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testRegisterZRC20TokenWithEmptySymbol\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testSetContractActive\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testSetStatusForNonExistenContract\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testUpdateChainMetadata\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testUpdateConfigForNonExistentContract\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testUpdateContractConfig\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testUpdateMetadataForNonActiveChain\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testUpdateMetadataUnauthorized\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testUpdateNonExistentZRC20Token\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testUpdateZRC20TokenStatus\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testUpdateZRC20TokenWithZeroAddress\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testWhenPaused\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"event\",\"name\":\"ChainStatusChanged\",\"inputs\":[{\"name\":\"chainId\",\"type\":\"uint256\",\"indexed\":true,\"internalType\":\"uint256\"},{\"name\":\"oldStatus\",\"type\":\"bool\",\"indexed\":false,\"internalType\":\"bool\"},{\"name\":\"newStatus\",\"type\":\"bool\",\"indexed\":false,\"internalType\":\"bool\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"ContractRegistered\",\"inputs\":[{\"name\":\"chainId\",\"type\":\"uint256\",\"indexed\":true,\"internalType\":\"uint256\"},{\"name\":\"contractType\",\"type\":\"string\",\"indexed\":true,\"internalType\":\"string\"},{\"name\":\"addressBytes\",\"type\":\"bytes\",\"indexed\":false,\"internalType\":\"bytes\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"ContractStatusChanged\",\"inputs\":[{\"name\":\"addressBytes\",\"type\":\"bytes\",\"indexed\":false,\"internalType\":\"bytes\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"NewChainMetadata\",\"inputs\":[{\"name\":\"chainId\",\"type\":\"uint256\",\"indexed\":true,\"internalType\":\"uint256\"},{\"name\":\"key\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"value\",\"type\":\"bytes\",\"indexed\":false,\"internalType\":\"bytes\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"NewContractConfiguration\",\"inputs\":[{\"name\":\"chainId\",\"type\":\"uint256\",\"indexed\":true,\"internalType\":\"uint256\"},{\"name\":\"contractType\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"key\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"value\",\"type\":\"bytes\",\"indexed\":false,\"internalType\":\"bytes\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"ZRC20TokenRegistered\",\"inputs\":[{\"name\":\"originAddress\",\"type\":\"bytes\",\"indexed\":true,\"internalType\":\"bytes\"},{\"name\":\"address_\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"decimals\",\"type\":\"uint8\",\"indexed\":false,\"internalType\":\"uint8\"},{\"name\":\"originChainId\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"},{\"name\":\"symbol\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"ZRC20TokenUpdated\",\"inputs\":[{\"name\":\"address_\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"},{\"name\":\"active\",\"type\":\"bool\",\"indexed\":false,\"internalType\":\"bool\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log\",\"inputs\":[{\"name\":\"\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_address\",\"inputs\":[{\"name\":\"\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_array\",\"inputs\":[{\"name\":\"val\",\"type\":\"uint256[]\",\"indexed\":false,\"internalType\":\"uint256[]\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_array\",\"inputs\":[{\"name\":\"val\",\"type\":\"int256[]\",\"indexed\":false,\"internalType\":\"int256[]\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_array\",\"inputs\":[{\"name\":\"val\",\"type\":\"address[]\",\"indexed\":false,\"internalType\":\"address[]\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_bytes\",\"inputs\":[{\"name\":\"\",\"type\":\"bytes\",\"indexed\":false,\"internalType\":\"bytes\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_bytes32\",\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"indexed\":false,\"internalType\":\"bytes32\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_int\",\"inputs\":[{\"name\":\"\",\"type\":\"int256\",\"indexed\":false,\"internalType\":\"int256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_named_address\",\"inputs\":[{\"name\":\"key\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"val\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_named_array\",\"inputs\":[{\"name\":\"key\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"val\",\"type\":\"uint256[]\",\"indexed\":false,\"internalType\":\"uint256[]\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_named_array\",\"inputs\":[{\"name\":\"key\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"val\",\"type\":\"int256[]\",\"indexed\":false,\"internalType\":\"int256[]\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_named_array\",\"inputs\":[{\"name\":\"key\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"val\",\"type\":\"address[]\",\"indexed\":false,\"internalType\":\"address[]\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_named_bytes\",\"inputs\":[{\"name\":\"key\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"val\",\"type\":\"bytes\",\"indexed\":false,\"internalType\":\"bytes\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_named_bytes32\",\"inputs\":[{\"name\":\"key\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"val\",\"type\":\"bytes32\",\"indexed\":false,\"internalType\":\"bytes32\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_named_decimal_int\",\"inputs\":[{\"name\":\"key\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"val\",\"type\":\"int256\",\"indexed\":false,\"internalType\":\"int256\"},{\"name\":\"decimals\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_named_decimal_uint\",\"inputs\":[{\"name\":\"key\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"val\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"},{\"name\":\"decimals\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_named_int\",\"inputs\":[{\"name\":\"key\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"val\",\"type\":\"int256\",\"indexed\":false,\"internalType\":\"int256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_named_string\",\"inputs\":[{\"name\":\"key\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"val\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_named_uint\",\"inputs\":[{\"name\":\"key\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"val\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_string\",\"inputs\":[{\"name\":\"\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_uint\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"logs\",\"inputs\":[{\"name\":\"\",\"type\":\"bytes\",\"indexed\":false,\"internalType\":\"bytes\"}],\"anonymous\":false},{\"type\":\"error\",\"name\":\"ChainActive\",\"inputs\":[{\"name\":\"chainId\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"type\":\"error\",\"name\":\"ChainNonActive\",\"inputs\":[{\"name\":\"chainId\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"type\":\"error\",\"name\":\"ContractAlreadyRegistered\",\"inputs\":[{\"name\":\"chainId\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"contractType\",\"type\":\"string\",\"internalType\":\"string\"},{\"name\":\"addressBytes\",\"type\":\"bytes\",\"internalType\":\"bytes\"}]},{\"type\":\"error\",\"name\":\"ContractNotFound\",\"inputs\":[{\"name\":\"chainId\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"contractType\",\"type\":\"string\",\"internalType\":\"string\"}]},{\"type\":\"error\",\"name\":\"InvalidContractType\",\"inputs\":[{\"name\":\"message\",\"type\":\"string\",\"internalType\":\"string\"}]},{\"type\":\"error\",\"name\":\"ZRC20AlreadyRegistered\",\"inputs\":[{\"name\":\"address_\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"ZRC20SymbolAlreadyInUse\",\"inputs\":[{\"name\":\"symbol\",\"type\":\"string\",\"internalType\":\"string\"}]},{\"type\":\"error\",\"name\":\"ZeroAddress\",\"inputs\":[]}]",
	Bin: "",
}

// CoreRegistryTestABI is the input ABI used to generate the binding from.
// Deprecated: Use CoreRegistryTestMetaData.ABI instead.
var CoreRegistryTestABI = CoreRegistryTestMetaData.ABI

// CoreRegistryTestBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use CoreRegistryTestMetaData.Bin instead.
var CoreRegistryTestBin = CoreRegistryTestMetaData.Bin

// DeployCoreRegistryTest deploys a new Ethereum contract, binding an instance of CoreRegistryTest to it.
func DeployCoreRegistryTest(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *CoreRegistryTest, error) {
	parsed, err := CoreRegistryTestMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(CoreRegistryTestBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &CoreRegistryTest{CoreRegistryTestCaller: CoreRegistryTestCaller{contract: contract}, CoreRegistryTestTransactor: CoreRegistryTestTransactor{contract: contract}, CoreRegistryTestFilterer: CoreRegistryTestFilterer{contract: contract}}, nil
}

// CoreRegistryTest is an auto generated Go binding around an Ethereum contract.
type CoreRegistryTest struct {
	CoreRegistryTestCaller     // Read-only binding to the contract
	CoreRegistryTestTransactor // Write-only binding to the contract
	CoreRegistryTestFilterer   // Log filterer for contract events
}

// CoreRegistryTestCaller is an auto generated read-only Go binding around an Ethereum contract.
type CoreRegistryTestCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CoreRegistryTestTransactor is an auto generated write-only Go binding around an Ethereum contract.
type CoreRegistryTestTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CoreRegistryTestFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type CoreRegistryTestFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CoreRegistryTestSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type CoreRegistryTestSession struct {
	Contract     *CoreRegistryTest // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// CoreRegistryTestCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type CoreRegistryTestCallerSession struct {
	Contract *CoreRegistryTestCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// CoreRegistryTestTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type CoreRegistryTestTransactorSession struct {
	Contract     *CoreRegistryTestTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// CoreRegistryTestRaw is an auto generated low-level Go binding around an Ethereum contract.
type CoreRegistryTestRaw struct {
	Contract *CoreRegistryTest // Generic contract binding to access the raw methods on
}

// CoreRegistryTestCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type CoreRegistryTestCallerRaw struct {
	Contract *CoreRegistryTestCaller // Generic read-only contract binding to access the raw methods on
}

// CoreRegistryTestTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type CoreRegistryTestTransactorRaw struct {
	Contract *CoreRegistryTestTransactor // Generic write-only contract binding to access the raw methods on
}

// NewCoreRegistryTest creates a new instance of CoreRegistryTest, bound to a specific deployed contract.
func NewCoreRegistryTest(address common.Address, backend bind.ContractBackend) (*CoreRegistryTest, error) {
	contract, err := bindCoreRegistryTest(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &CoreRegistryTest{CoreRegistryTestCaller: CoreRegistryTestCaller{contract: contract}, CoreRegistryTestTransactor: CoreRegistryTestTransactor{contract: contract}, CoreRegistryTestFilterer: CoreRegistryTestFilterer{contract: contract}}, nil
}

// NewCoreRegistryTestCaller creates a new read-only instance of CoreRegistryTest, bound to a specific deployed contract.
func NewCoreRegistryTestCaller(address common.Address, caller bind.ContractCaller) (*CoreRegistryTestCaller, error) {
	contract, err := bindCoreRegistryTest(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &CoreRegistryTestCaller{contract: contract}, nil
}

// NewCoreRegistryTestTransactor creates a new write-only instance of CoreRegistryTest, bound to a specific deployed contract.
func NewCoreRegistryTestTransactor(address common.Address, transactor bind.ContractTransactor) (*CoreRegistryTestTransactor, error) {
	contract, err := bindCoreRegistryTest(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &CoreRegistryTestTransactor{contract: contract}, nil
}

// NewCoreRegistryTestFilterer creates a new log filterer instance of CoreRegistryTest, bound to a specific deployed contract.
func NewCoreRegistryTestFilterer(address common.Address, filterer bind.ContractFilterer) (*CoreRegistryTestFilterer, error) {
	contract, err := bindCoreRegistryTest(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &CoreRegistryTestFilterer{contract: contract}, nil
}

// bindCoreRegistryTest binds a generic wrapper to an already deployed contract.
func bindCoreRegistryTest(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := CoreRegistryTestMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_CoreRegistryTest *CoreRegistryTestRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CoreRegistryTest.Contract.CoreRegistryTestCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_CoreRegistryTest *CoreRegistryTestRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CoreRegistryTest.Contract.CoreRegistryTestTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_CoreRegistryTest *CoreRegistryTestRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CoreRegistryTest.Contract.CoreRegistryTestTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_CoreRegistryTest *CoreRegistryTestCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CoreRegistryTest.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_CoreRegistryTest *CoreRegistryTestTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CoreRegistryTest.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_CoreRegistryTest *CoreRegistryTestTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CoreRegistryTest.Contract.contract.Transact(opts, method, params...)
}

// ISTEST is a free data retrieval call binding the contract method 0xfa7626d4.
//
// Solidity: function IS_TEST() view returns(bool)
func (_CoreRegistryTest *CoreRegistryTestCaller) ISTEST(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _CoreRegistryTest.contract.Call(opts, &out, "IS_TEST")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ISTEST is a free data retrieval call binding the contract method 0xfa7626d4.
//
// Solidity: function IS_TEST() view returns(bool)
func (_CoreRegistryTest *CoreRegistryTestSession) ISTEST() (bool, error) {
	return _CoreRegistryTest.Contract.ISTEST(&_CoreRegistryTest.CallOpts)
}

// ISTEST is a free data retrieval call binding the contract method 0xfa7626d4.
//
// Solidity: function IS_TEST() view returns(bool)
func (_CoreRegistryTest *CoreRegistryTestCallerSession) ISTEST() (bool, error) {
	return _CoreRegistryTest.Contract.ISTEST(&_CoreRegistryTest.CallOpts)
}

// ExcludeArtifacts is a free data retrieval call binding the contract method 0xb5508aa9.
//
// Solidity: function excludeArtifacts() view returns(string[] excludedArtifacts_)
func (_CoreRegistryTest *CoreRegistryTestCaller) ExcludeArtifacts(opts *bind.CallOpts) ([]string, error) {
	var out []interface{}
	err := _CoreRegistryTest.contract.Call(opts, &out, "excludeArtifacts")

	if err != nil {
		return *new([]string), err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)

	return out0, err

}

// ExcludeArtifacts is a free data retrieval call binding the contract method 0xb5508aa9.
//
// Solidity: function excludeArtifacts() view returns(string[] excludedArtifacts_)
func (_CoreRegistryTest *CoreRegistryTestSession) ExcludeArtifacts() ([]string, error) {
	return _CoreRegistryTest.Contract.ExcludeArtifacts(&_CoreRegistryTest.CallOpts)
}

// ExcludeArtifacts is a free data retrieval call binding the contract method 0xb5508aa9.
//
// Solidity: function excludeArtifacts() view returns(string[] excludedArtifacts_)
func (_CoreRegistryTest *CoreRegistryTestCallerSession) ExcludeArtifacts() ([]string, error) {
	return _CoreRegistryTest.Contract.ExcludeArtifacts(&_CoreRegistryTest.CallOpts)
}

// ExcludeContracts is a free data retrieval call binding the contract method 0xe20c9f71.
//
// Solidity: function excludeContracts() view returns(address[] excludedContracts_)
func (_CoreRegistryTest *CoreRegistryTestCaller) ExcludeContracts(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _CoreRegistryTest.contract.Call(opts, &out, "excludeContracts")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// ExcludeContracts is a free data retrieval call binding the contract method 0xe20c9f71.
//
// Solidity: function excludeContracts() view returns(address[] excludedContracts_)
func (_CoreRegistryTest *CoreRegistryTestSession) ExcludeContracts() ([]common.Address, error) {
	return _CoreRegistryTest.Contract.ExcludeContracts(&_CoreRegistryTest.CallOpts)
}

// ExcludeContracts is a free data retrieval call binding the contract method 0xe20c9f71.
//
// Solidity: function excludeContracts() view returns(address[] excludedContracts_)
func (_CoreRegistryTest *CoreRegistryTestCallerSession) ExcludeContracts() ([]common.Address, error) {
	return _CoreRegistryTest.Contract.ExcludeContracts(&_CoreRegistryTest.CallOpts)
}

// ExcludeSelectors is a free data retrieval call binding the contract method 0xb0464fdc.
//
// Solidity: function excludeSelectors() view returns((address,bytes4[])[] excludedSelectors_)
func (_CoreRegistryTest *CoreRegistryTestCaller) ExcludeSelectors(opts *bind.CallOpts) ([]StdInvariantFuzzSelector, error) {
	var out []interface{}
	err := _CoreRegistryTest.contract.Call(opts, &out, "excludeSelectors")

	if err != nil {
		return *new([]StdInvariantFuzzSelector), err
	}

	out0 := *abi.ConvertType(out[0], new([]StdInvariantFuzzSelector)).(*[]StdInvariantFuzzSelector)

	return out0, err

}

// ExcludeSelectors is a free data retrieval call binding the contract method 0xb0464fdc.
//
// Solidity: function excludeSelectors() view returns((address,bytes4[])[] excludedSelectors_)
func (_CoreRegistryTest *CoreRegistryTestSession) ExcludeSelectors() ([]StdInvariantFuzzSelector, error) {
	return _CoreRegistryTest.Contract.ExcludeSelectors(&_CoreRegistryTest.CallOpts)
}

// ExcludeSelectors is a free data retrieval call binding the contract method 0xb0464fdc.
//
// Solidity: function excludeSelectors() view returns((address,bytes4[])[] excludedSelectors_)
func (_CoreRegistryTest *CoreRegistryTestCallerSession) ExcludeSelectors() ([]StdInvariantFuzzSelector, error) {
	return _CoreRegistryTest.Contract.ExcludeSelectors(&_CoreRegistryTest.CallOpts)
}

// ExcludeSenders is a free data retrieval call binding the contract method 0x1ed7831c.
//
// Solidity: function excludeSenders() view returns(address[] excludedSenders_)
func (_CoreRegistryTest *CoreRegistryTestCaller) ExcludeSenders(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _CoreRegistryTest.contract.Call(opts, &out, "excludeSenders")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// ExcludeSenders is a free data retrieval call binding the contract method 0x1ed7831c.
//
// Solidity: function excludeSenders() view returns(address[] excludedSenders_)
func (_CoreRegistryTest *CoreRegistryTestSession) ExcludeSenders() ([]common.Address, error) {
	return _CoreRegistryTest.Contract.ExcludeSenders(&_CoreRegistryTest.CallOpts)
}

// ExcludeSenders is a free data retrieval call binding the contract method 0x1ed7831c.
//
// Solidity: function excludeSenders() view returns(address[] excludedSenders_)
func (_CoreRegistryTest *CoreRegistryTestCallerSession) ExcludeSenders() ([]common.Address, error) {
	return _CoreRegistryTest.Contract.ExcludeSenders(&_CoreRegistryTest.CallOpts)
}

// Failed is a free data retrieval call binding the contract method 0xba414fa6.
//
// Solidity: function failed() view returns(bool)
func (_CoreRegistryTest *CoreRegistryTestCaller) Failed(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _CoreRegistryTest.contract.Call(opts, &out, "failed")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Failed is a free data retrieval call binding the contract method 0xba414fa6.
//
// Solidity: function failed() view returns(bool)
func (_CoreRegistryTest *CoreRegistryTestSession) Failed() (bool, error) {
	return _CoreRegistryTest.Contract.Failed(&_CoreRegistryTest.CallOpts)
}

// Failed is a free data retrieval call binding the contract method 0xba414fa6.
//
// Solidity: function failed() view returns(bool)
func (_CoreRegistryTest *CoreRegistryTestCallerSession) Failed() (bool, error) {
	return _CoreRegistryTest.Contract.Failed(&_CoreRegistryTest.CallOpts)
}

// TargetArtifactSelectors is a free data retrieval call binding the contract method 0x66d9a9a0.
//
// Solidity: function targetArtifactSelectors() view returns((string,bytes4[])[] targetedArtifactSelectors_)
func (_CoreRegistryTest *CoreRegistryTestCaller) TargetArtifactSelectors(opts *bind.CallOpts) ([]StdInvariantFuzzArtifactSelector, error) {
	var out []interface{}
	err := _CoreRegistryTest.contract.Call(opts, &out, "targetArtifactSelectors")

	if err != nil {
		return *new([]StdInvariantFuzzArtifactSelector), err
	}

	out0 := *abi.ConvertType(out[0], new([]StdInvariantFuzzArtifactSelector)).(*[]StdInvariantFuzzArtifactSelector)

	return out0, err

}

// TargetArtifactSelectors is a free data retrieval call binding the contract method 0x66d9a9a0.
//
// Solidity: function targetArtifactSelectors() view returns((string,bytes4[])[] targetedArtifactSelectors_)
func (_CoreRegistryTest *CoreRegistryTestSession) TargetArtifactSelectors() ([]StdInvariantFuzzArtifactSelector, error) {
	return _CoreRegistryTest.Contract.TargetArtifactSelectors(&_CoreRegistryTest.CallOpts)
}

// TargetArtifactSelectors is a free data retrieval call binding the contract method 0x66d9a9a0.
//
// Solidity: function targetArtifactSelectors() view returns((string,bytes4[])[] targetedArtifactSelectors_)
func (_CoreRegistryTest *CoreRegistryTestCallerSession) TargetArtifactSelectors() ([]StdInvariantFuzzArtifactSelector, error) {
	return _CoreRegistryTest.Contract.TargetArtifactSelectors(&_CoreRegistryTest.CallOpts)
}

// TargetArtifacts is a free data retrieval call binding the contract method 0x85226c81.
//
// Solidity: function targetArtifacts() view returns(string[] targetedArtifacts_)
func (_CoreRegistryTest *CoreRegistryTestCaller) TargetArtifacts(opts *bind.CallOpts) ([]string, error) {
	var out []interface{}
	err := _CoreRegistryTest.contract.Call(opts, &out, "targetArtifacts")

	if err != nil {
		return *new([]string), err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)

	return out0, err

}

// TargetArtifacts is a free data retrieval call binding the contract method 0x85226c81.
//
// Solidity: function targetArtifacts() view returns(string[] targetedArtifacts_)
func (_CoreRegistryTest *CoreRegistryTestSession) TargetArtifacts() ([]string, error) {
	return _CoreRegistryTest.Contract.TargetArtifacts(&_CoreRegistryTest.CallOpts)
}

// TargetArtifacts is a free data retrieval call binding the contract method 0x85226c81.
//
// Solidity: function targetArtifacts() view returns(string[] targetedArtifacts_)
func (_CoreRegistryTest *CoreRegistryTestCallerSession) TargetArtifacts() ([]string, error) {
	return _CoreRegistryTest.Contract.TargetArtifacts(&_CoreRegistryTest.CallOpts)
}

// TargetContracts is a free data retrieval call binding the contract method 0x3f7286f4.
//
// Solidity: function targetContracts() view returns(address[] targetedContracts_)
func (_CoreRegistryTest *CoreRegistryTestCaller) TargetContracts(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _CoreRegistryTest.contract.Call(opts, &out, "targetContracts")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// TargetContracts is a free data retrieval call binding the contract method 0x3f7286f4.
//
// Solidity: function targetContracts() view returns(address[] targetedContracts_)
func (_CoreRegistryTest *CoreRegistryTestSession) TargetContracts() ([]common.Address, error) {
	return _CoreRegistryTest.Contract.TargetContracts(&_CoreRegistryTest.CallOpts)
}

// TargetContracts is a free data retrieval call binding the contract method 0x3f7286f4.
//
// Solidity: function targetContracts() view returns(address[] targetedContracts_)
func (_CoreRegistryTest *CoreRegistryTestCallerSession) TargetContracts() ([]common.Address, error) {
	return _CoreRegistryTest.Contract.TargetContracts(&_CoreRegistryTest.CallOpts)
}

// TargetInterfaces is a free data retrieval call binding the contract method 0x2ade3880.
//
// Solidity: function targetInterfaces() view returns((address,string[])[] targetedInterfaces_)
func (_CoreRegistryTest *CoreRegistryTestCaller) TargetInterfaces(opts *bind.CallOpts) ([]StdInvariantFuzzInterface, error) {
	var out []interface{}
	err := _CoreRegistryTest.contract.Call(opts, &out, "targetInterfaces")

	if err != nil {
		return *new([]StdInvariantFuzzInterface), err
	}

	out0 := *abi.ConvertType(out[0], new([]StdInvariantFuzzInterface)).(*[]StdInvariantFuzzInterface)

	return out0, err

}

// TargetInterfaces is a free data retrieval call binding the contract method 0x2ade3880.
//
// Solidity: function targetInterfaces() view returns((address,string[])[] targetedInterfaces_)
func (_CoreRegistryTest *CoreRegistryTestSession) TargetInterfaces() ([]StdInvariantFuzzInterface, error) {
	return _CoreRegistryTest.Contract.TargetInterfaces(&_CoreRegistryTest.CallOpts)
}

// TargetInterfaces is a free data retrieval call binding the contract method 0x2ade3880.
//
// Solidity: function targetInterfaces() view returns((address,string[])[] targetedInterfaces_)
func (_CoreRegistryTest *CoreRegistryTestCallerSession) TargetInterfaces() ([]StdInvariantFuzzInterface, error) {
	return _CoreRegistryTest.Contract.TargetInterfaces(&_CoreRegistryTest.CallOpts)
}

// TargetSelectors is a free data retrieval call binding the contract method 0x916a17c6.
//
// Solidity: function targetSelectors() view returns((address,bytes4[])[] targetedSelectors_)
func (_CoreRegistryTest *CoreRegistryTestCaller) TargetSelectors(opts *bind.CallOpts) ([]StdInvariantFuzzSelector, error) {
	var out []interface{}
	err := _CoreRegistryTest.contract.Call(opts, &out, "targetSelectors")

	if err != nil {
		return *new([]StdInvariantFuzzSelector), err
	}

	out0 := *abi.ConvertType(out[0], new([]StdInvariantFuzzSelector)).(*[]StdInvariantFuzzSelector)

	return out0, err

}

// TargetSelectors is a free data retrieval call binding the contract method 0x916a17c6.
//
// Solidity: function targetSelectors() view returns((address,bytes4[])[] targetedSelectors_)
func (_CoreRegistryTest *CoreRegistryTestSession) TargetSelectors() ([]StdInvariantFuzzSelector, error) {
	return _CoreRegistryTest.Contract.TargetSelectors(&_CoreRegistryTest.CallOpts)
}

// TargetSelectors is a free data retrieval call binding the contract method 0x916a17c6.
//
// Solidity: function targetSelectors() view returns((address,bytes4[])[] targetedSelectors_)
func (_CoreRegistryTest *CoreRegistryTestCallerSession) TargetSelectors() ([]StdInvariantFuzzSelector, error) {
	return _CoreRegistryTest.Contract.TargetSelectors(&_CoreRegistryTest.CallOpts)
}

// TargetSenders is a free data retrieval call binding the contract method 0x3e5e3c23.
//
// Solidity: function targetSenders() view returns(address[] targetedSenders_)
func (_CoreRegistryTest *CoreRegistryTestCaller) TargetSenders(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _CoreRegistryTest.contract.Call(opts, &out, "targetSenders")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// TargetSenders is a free data retrieval call binding the contract method 0x3e5e3c23.
//
// Solidity: function targetSenders() view returns(address[] targetedSenders_)
func (_CoreRegistryTest *CoreRegistryTestSession) TargetSenders() ([]common.Address, error) {
	return _CoreRegistryTest.Contract.TargetSenders(&_CoreRegistryTest.CallOpts)
}

// TargetSenders is a free data retrieval call binding the contract method 0x3e5e3c23.
//
// Solidity: function targetSenders() view returns(address[] targetedSenders_)
func (_CoreRegistryTest *CoreRegistryTestCallerSession) TargetSenders() ([]common.Address, error) {
	return _CoreRegistryTest.Contract.TargetSenders(&_CoreRegistryTest.CallOpts)
}

// TestInitialize is a free data retrieval call binding the contract method 0x993831b6.
//
// Solidity: function testInitialize() view returns()
func (_CoreRegistryTest *CoreRegistryTestCaller) TestInitialize(opts *bind.CallOpts) error {
	var out []interface{}
	err := _CoreRegistryTest.contract.Call(opts, &out, "testInitialize")

	if err != nil {
		return err
	}

	return err

}

// TestInitialize is a free data retrieval call binding the contract method 0x993831b6.
//
// Solidity: function testInitialize() view returns()
func (_CoreRegistryTest *CoreRegistryTestSession) TestInitialize() error {
	return _CoreRegistryTest.Contract.TestInitialize(&_CoreRegistryTest.CallOpts)
}

// TestInitialize is a free data retrieval call binding the contract method 0x993831b6.
//
// Solidity: function testInitialize() view returns()
func (_CoreRegistryTest *CoreRegistryTestCallerSession) TestInitialize() error {
	return _CoreRegistryTest.Contract.TestInitialize(&_CoreRegistryTest.CallOpts)
}

// SetUp is a paid mutator transaction binding the contract method 0x0a9254e4.
//
// Solidity: function setUp() returns()
func (_CoreRegistryTest *CoreRegistryTestTransactor) SetUp(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CoreRegistryTest.contract.Transact(opts, "setUp")
}

// SetUp is a paid mutator transaction binding the contract method 0x0a9254e4.
//
// Solidity: function setUp() returns()
func (_CoreRegistryTest *CoreRegistryTestSession) SetUp() (*types.Transaction, error) {
	return _CoreRegistryTest.Contract.SetUp(&_CoreRegistryTest.TransactOpts)
}

// SetUp is a paid mutator transaction binding the contract method 0x0a9254e4.
//
// Solidity: function setUp() returns()
func (_CoreRegistryTest *CoreRegistryTestTransactorSession) SetUp() (*types.Transaction, error) {
	return _CoreRegistryTest.Contract.SetUp(&_CoreRegistryTest.TransactOpts)
}

// TestActivateAlreadyActiveChain is a paid mutator transaction binding the contract method 0x7d706cef.
//
// Solidity: function testActivateAlreadyActiveChain() returns()
func (_CoreRegistryTest *CoreRegistryTestTransactor) TestActivateAlreadyActiveChain(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CoreRegistryTest.contract.Transact(opts, "testActivateAlreadyActiveChain")
}

// TestActivateAlreadyActiveChain is a paid mutator transaction binding the contract method 0x7d706cef.
//
// Solidity: function testActivateAlreadyActiveChain() returns()
func (_CoreRegistryTest *CoreRegistryTestSession) TestActivateAlreadyActiveChain() (*types.Transaction, error) {
	return _CoreRegistryTest.Contract.TestActivateAlreadyActiveChain(&_CoreRegistryTest.TransactOpts)
}

// TestActivateAlreadyActiveChain is a paid mutator transaction binding the contract method 0x7d706cef.
//
// Solidity: function testActivateAlreadyActiveChain() returns()
func (_CoreRegistryTest *CoreRegistryTestTransactorSession) TestActivateAlreadyActiveChain() (*types.Transaction, error) {
	return _CoreRegistryTest.Contract.TestActivateAlreadyActiveChain(&_CoreRegistryTest.TransactOpts)
}

// TestActivateChain is a paid mutator transaction binding the contract method 0xcff8f111.
//
// Solidity: function testActivateChain() returns()
func (_CoreRegistryTest *CoreRegistryTestTransactor) TestActivateChain(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CoreRegistryTest.contract.Transact(opts, "testActivateChain")
}

// TestActivateChain is a paid mutator transaction binding the contract method 0xcff8f111.
//
// Solidity: function testActivateChain() returns()
func (_CoreRegistryTest *CoreRegistryTestSession) TestActivateChain() (*types.Transaction, error) {
	return _CoreRegistryTest.Contract.TestActivateChain(&_CoreRegistryTest.TransactOpts)
}

// TestActivateChain is a paid mutator transaction binding the contract method 0xcff8f111.
//
// Solidity: function testActivateChain() returns()
func (_CoreRegistryTest *CoreRegistryTestTransactorSession) TestActivateChain() (*types.Transaction, error) {
	return _CoreRegistryTest.Contract.TestActivateChain(&_CoreRegistryTest.TransactOpts)
}

// TestActivateChainUnauthorized is a paid mutator transaction binding the contract method 0x173d9590.
//
// Solidity: function testActivateChainUnauthorized() returns()
func (_CoreRegistryTest *CoreRegistryTestTransactor) TestActivateChainUnauthorized(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CoreRegistryTest.contract.Transact(opts, "testActivateChainUnauthorized")
}

// TestActivateChainUnauthorized is a paid mutator transaction binding the contract method 0x173d9590.
//
// Solidity: function testActivateChainUnauthorized() returns()
func (_CoreRegistryTest *CoreRegistryTestSession) TestActivateChainUnauthorized() (*types.Transaction, error) {
	return _CoreRegistryTest.Contract.TestActivateChainUnauthorized(&_CoreRegistryTest.TransactOpts)
}

// TestActivateChainUnauthorized is a paid mutator transaction binding the contract method 0x173d9590.
//
// Solidity: function testActivateChainUnauthorized() returns()
func (_CoreRegistryTest *CoreRegistryTestTransactorSession) TestActivateChainUnauthorized() (*types.Transaction, error) {
	return _CoreRegistryTest.Contract.TestActivateChainUnauthorized(&_CoreRegistryTest.TransactOpts)
}

// TestDeactivateChain is a paid mutator transaction binding the contract method 0x24ffc317.
//
// Solidity: function testDeactivateChain() returns()
func (_CoreRegistryTest *CoreRegistryTestTransactor) TestDeactivateChain(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CoreRegistryTest.contract.Transact(opts, "testDeactivateChain")
}

// TestDeactivateChain is a paid mutator transaction binding the contract method 0x24ffc317.
//
// Solidity: function testDeactivateChain() returns()
func (_CoreRegistryTest *CoreRegistryTestSession) TestDeactivateChain() (*types.Transaction, error) {
	return _CoreRegistryTest.Contract.TestDeactivateChain(&_CoreRegistryTest.TransactOpts)
}

// TestDeactivateChain is a paid mutator transaction binding the contract method 0x24ffc317.
//
// Solidity: function testDeactivateChain() returns()
func (_CoreRegistryTest *CoreRegistryTestTransactorSession) TestDeactivateChain() (*types.Transaction, error) {
	return _CoreRegistryTest.Contract.TestDeactivateChain(&_CoreRegistryTest.TransactOpts)
}

// TestDeactivateNonActiveChain is a paid mutator transaction binding the contract method 0x40a3b50b.
//
// Solidity: function testDeactivateNonActiveChain() returns()
func (_CoreRegistryTest *CoreRegistryTestTransactor) TestDeactivateNonActiveChain(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CoreRegistryTest.contract.Transact(opts, "testDeactivateNonActiveChain")
}

// TestDeactivateNonActiveChain is a paid mutator transaction binding the contract method 0x40a3b50b.
//
// Solidity: function testDeactivateNonActiveChain() returns()
func (_CoreRegistryTest *CoreRegistryTestSession) TestDeactivateNonActiveChain() (*types.Transaction, error) {
	return _CoreRegistryTest.Contract.TestDeactivateNonActiveChain(&_CoreRegistryTest.TransactOpts)
}

// TestDeactivateNonActiveChain is a paid mutator transaction binding the contract method 0x40a3b50b.
//
// Solidity: function testDeactivateNonActiveChain() returns()
func (_CoreRegistryTest *CoreRegistryTestTransactorSession) TestDeactivateNonActiveChain() (*types.Transaction, error) {
	return _CoreRegistryTest.Contract.TestDeactivateNonActiveChain(&_CoreRegistryTest.TransactOpts)
}

// TestInitializeWithZeroAddress is a paid mutator transaction binding the contract method 0x71748c09.
//
// Solidity: function testInitializeWithZeroAddress() returns()
func (_CoreRegistryTest *CoreRegistryTestTransactor) TestInitializeWithZeroAddress(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CoreRegistryTest.contract.Transact(opts, "testInitializeWithZeroAddress")
}

// TestInitializeWithZeroAddress is a paid mutator transaction binding the contract method 0x71748c09.
//
// Solidity: function testInitializeWithZeroAddress() returns()
func (_CoreRegistryTest *CoreRegistryTestSession) TestInitializeWithZeroAddress() (*types.Transaction, error) {
	return _CoreRegistryTest.Contract.TestInitializeWithZeroAddress(&_CoreRegistryTest.TransactOpts)
}

// TestInitializeWithZeroAddress is a paid mutator transaction binding the contract method 0x71748c09.
//
// Solidity: function testInitializeWithZeroAddress() returns()
func (_CoreRegistryTest *CoreRegistryTestTransactorSession) TestInitializeWithZeroAddress() (*types.Transaction, error) {
	return _CoreRegistryTest.Contract.TestInitializeWithZeroAddress(&_CoreRegistryTest.TransactOpts)
}

// TestPause is a paid mutator transaction binding the contract method 0x9bf35597.
//
// Solidity: function testPause() returns()
func (_CoreRegistryTest *CoreRegistryTestTransactor) TestPause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CoreRegistryTest.contract.Transact(opts, "testPause")
}

// TestPause is a paid mutator transaction binding the contract method 0x9bf35597.
//
// Solidity: function testPause() returns()
func (_CoreRegistryTest *CoreRegistryTestSession) TestPause() (*types.Transaction, error) {
	return _CoreRegistryTest.Contract.TestPause(&_CoreRegistryTest.TransactOpts)
}

// TestPause is a paid mutator transaction binding the contract method 0x9bf35597.
//
// Solidity: function testPause() returns()
func (_CoreRegistryTest *CoreRegistryTestTransactorSession) TestPause() (*types.Transaction, error) {
	return _CoreRegistryTest.Contract.TestPause(&_CoreRegistryTest.TransactOpts)
}

// TestPauseUnauthorized is a paid mutator transaction binding the contract method 0x151e9be4.
//
// Solidity: function testPauseUnauthorized() returns()
func (_CoreRegistryTest *CoreRegistryTestTransactor) TestPauseUnauthorized(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CoreRegistryTest.contract.Transact(opts, "testPauseUnauthorized")
}

// TestPauseUnauthorized is a paid mutator transaction binding the contract method 0x151e9be4.
//
// Solidity: function testPauseUnauthorized() returns()
func (_CoreRegistryTest *CoreRegistryTestSession) TestPauseUnauthorized() (*types.Transaction, error) {
	return _CoreRegistryTest.Contract.TestPauseUnauthorized(&_CoreRegistryTest.TransactOpts)
}

// TestPauseUnauthorized is a paid mutator transaction binding the contract method 0x151e9be4.
//
// Solidity: function testPauseUnauthorized() returns()
func (_CoreRegistryTest *CoreRegistryTestTransactorSession) TestPauseUnauthorized() (*types.Transaction, error) {
	return _CoreRegistryTest.Contract.TestPauseUnauthorized(&_CoreRegistryTest.TransactOpts)
}

// TestRegisterContract is a paid mutator transaction binding the contract method 0xb39377d8.
//
// Solidity: function testRegisterContract() returns()
func (_CoreRegistryTest *CoreRegistryTestTransactor) TestRegisterContract(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CoreRegistryTest.contract.Transact(opts, "testRegisterContract")
}

// TestRegisterContract is a paid mutator transaction binding the contract method 0xb39377d8.
//
// Solidity: function testRegisterContract() returns()
func (_CoreRegistryTest *CoreRegistryTestSession) TestRegisterContract() (*types.Transaction, error) {
	return _CoreRegistryTest.Contract.TestRegisterContract(&_CoreRegistryTest.TransactOpts)
}

// TestRegisterContract is a paid mutator transaction binding the contract method 0xb39377d8.
//
// Solidity: function testRegisterContract() returns()
func (_CoreRegistryTest *CoreRegistryTestTransactorSession) TestRegisterContract() (*types.Transaction, error) {
	return _CoreRegistryTest.Contract.TestRegisterContract(&_CoreRegistryTest.TransactOpts)
}

// TestRegisterContractForNonActiveChain is a paid mutator transaction binding the contract method 0x004e57bd.
//
// Solidity: function testRegisterContractForNonActiveChain() returns()
func (_CoreRegistryTest *CoreRegistryTestTransactor) TestRegisterContractForNonActiveChain(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CoreRegistryTest.contract.Transact(opts, "testRegisterContractForNonActiveChain")
}

// TestRegisterContractForNonActiveChain is a paid mutator transaction binding the contract method 0x004e57bd.
//
// Solidity: function testRegisterContractForNonActiveChain() returns()
func (_CoreRegistryTest *CoreRegistryTestSession) TestRegisterContractForNonActiveChain() (*types.Transaction, error) {
	return _CoreRegistryTest.Contract.TestRegisterContractForNonActiveChain(&_CoreRegistryTest.TransactOpts)
}

// TestRegisterContractForNonActiveChain is a paid mutator transaction binding the contract method 0x004e57bd.
//
// Solidity: function testRegisterContractForNonActiveChain() returns()
func (_CoreRegistryTest *CoreRegistryTestTransactorSession) TestRegisterContractForNonActiveChain() (*types.Transaction, error) {
	return _CoreRegistryTest.Contract.TestRegisterContractForNonActiveChain(&_CoreRegistryTest.TransactOpts)
}

// TestRegisterContractTwice is a paid mutator transaction binding the contract method 0xf81b656b.
//
// Solidity: function testRegisterContractTwice() returns()
func (_CoreRegistryTest *CoreRegistryTestTransactor) TestRegisterContractTwice(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CoreRegistryTest.contract.Transact(opts, "testRegisterContractTwice")
}

// TestRegisterContractTwice is a paid mutator transaction binding the contract method 0xf81b656b.
//
// Solidity: function testRegisterContractTwice() returns()
func (_CoreRegistryTest *CoreRegistryTestSession) TestRegisterContractTwice() (*types.Transaction, error) {
	return _CoreRegistryTest.Contract.TestRegisterContractTwice(&_CoreRegistryTest.TransactOpts)
}

// TestRegisterContractTwice is a paid mutator transaction binding the contract method 0xf81b656b.
//
// Solidity: function testRegisterContractTwice() returns()
func (_CoreRegistryTest *CoreRegistryTestTransactorSession) TestRegisterContractTwice() (*types.Transaction, error) {
	return _CoreRegistryTest.Contract.TestRegisterContractTwice(&_CoreRegistryTest.TransactOpts)
}

// TestRegisterContractWithEmptyAddress is a paid mutator transaction binding the contract method 0x2013038b.
//
// Solidity: function testRegisterContractWithEmptyAddress() returns()
func (_CoreRegistryTest *CoreRegistryTestTransactor) TestRegisterContractWithEmptyAddress(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CoreRegistryTest.contract.Transact(opts, "testRegisterContractWithEmptyAddress")
}

// TestRegisterContractWithEmptyAddress is a paid mutator transaction binding the contract method 0x2013038b.
//
// Solidity: function testRegisterContractWithEmptyAddress() returns()
func (_CoreRegistryTest *CoreRegistryTestSession) TestRegisterContractWithEmptyAddress() (*types.Transaction, error) {
	return _CoreRegistryTest.Contract.TestRegisterContractWithEmptyAddress(&_CoreRegistryTest.TransactOpts)
}

// TestRegisterContractWithEmptyAddress is a paid mutator transaction binding the contract method 0x2013038b.
//
// Solidity: function testRegisterContractWithEmptyAddress() returns()
func (_CoreRegistryTest *CoreRegistryTestTransactorSession) TestRegisterContractWithEmptyAddress() (*types.Transaction, error) {
	return _CoreRegistryTest.Contract.TestRegisterContractWithEmptyAddress(&_CoreRegistryTest.TransactOpts)
}

// TestRegisterContractWithEmptyType is a paid mutator transaction binding the contract method 0xd97aa899.
//
// Solidity: function testRegisterContractWithEmptyType() returns()
func (_CoreRegistryTest *CoreRegistryTestTransactor) TestRegisterContractWithEmptyType(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CoreRegistryTest.contract.Transact(opts, "testRegisterContractWithEmptyType")
}

// TestRegisterContractWithEmptyType is a paid mutator transaction binding the contract method 0xd97aa899.
//
// Solidity: function testRegisterContractWithEmptyType() returns()
func (_CoreRegistryTest *CoreRegistryTestSession) TestRegisterContractWithEmptyType() (*types.Transaction, error) {
	return _CoreRegistryTest.Contract.TestRegisterContractWithEmptyType(&_CoreRegistryTest.TransactOpts)
}

// TestRegisterContractWithEmptyType is a paid mutator transaction binding the contract method 0xd97aa899.
//
// Solidity: function testRegisterContractWithEmptyType() returns()
func (_CoreRegistryTest *CoreRegistryTestTransactorSession) TestRegisterContractWithEmptyType() (*types.Transaction, error) {
	return _CoreRegistryTest.Contract.TestRegisterContractWithEmptyType(&_CoreRegistryTest.TransactOpts)
}

// TestRegisterZRC20Token is a paid mutator transaction binding the contract method 0x8c500b5c.
//
// Solidity: function testRegisterZRC20Token() returns()
func (_CoreRegistryTest *CoreRegistryTestTransactor) TestRegisterZRC20Token(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CoreRegistryTest.contract.Transact(opts, "testRegisterZRC20Token")
}

// TestRegisterZRC20Token is a paid mutator transaction binding the contract method 0x8c500b5c.
//
// Solidity: function testRegisterZRC20Token() returns()
func (_CoreRegistryTest *CoreRegistryTestSession) TestRegisterZRC20Token() (*types.Transaction, error) {
	return _CoreRegistryTest.Contract.TestRegisterZRC20Token(&_CoreRegistryTest.TransactOpts)
}

// TestRegisterZRC20Token is a paid mutator transaction binding the contract method 0x8c500b5c.
//
// Solidity: function testRegisterZRC20Token() returns()
func (_CoreRegistryTest *CoreRegistryTestTransactorSession) TestRegisterZRC20Token() (*types.Transaction, error) {
	return _CoreRegistryTest.Contract.TestRegisterZRC20Token(&_CoreRegistryTest.TransactOpts)
}

// TestRegisterZRC20TokenTwice is a paid mutator transaction binding the contract method 0x70cd4138.
//
// Solidity: function testRegisterZRC20TokenTwice() returns()
func (_CoreRegistryTest *CoreRegistryTestTransactor) TestRegisterZRC20TokenTwice(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CoreRegistryTest.contract.Transact(opts, "testRegisterZRC20TokenTwice")
}

// TestRegisterZRC20TokenTwice is a paid mutator transaction binding the contract method 0x70cd4138.
//
// Solidity: function testRegisterZRC20TokenTwice() returns()
func (_CoreRegistryTest *CoreRegistryTestSession) TestRegisterZRC20TokenTwice() (*types.Transaction, error) {
	return _CoreRegistryTest.Contract.TestRegisterZRC20TokenTwice(&_CoreRegistryTest.TransactOpts)
}

// TestRegisterZRC20TokenTwice is a paid mutator transaction binding the contract method 0x70cd4138.
//
// Solidity: function testRegisterZRC20TokenTwice() returns()
func (_CoreRegistryTest *CoreRegistryTestTransactorSession) TestRegisterZRC20TokenTwice() (*types.Transaction, error) {
	return _CoreRegistryTest.Contract.TestRegisterZRC20TokenTwice(&_CoreRegistryTest.TransactOpts)
}

// TestRegisterZRC20TokenWithDuplicateSymbol is a paid mutator transaction binding the contract method 0x8c18b40f.
//
// Solidity: function testRegisterZRC20TokenWithDuplicateSymbol() returns()
func (_CoreRegistryTest *CoreRegistryTestTransactor) TestRegisterZRC20TokenWithDuplicateSymbol(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CoreRegistryTest.contract.Transact(opts, "testRegisterZRC20TokenWithDuplicateSymbol")
}

// TestRegisterZRC20TokenWithDuplicateSymbol is a paid mutator transaction binding the contract method 0x8c18b40f.
//
// Solidity: function testRegisterZRC20TokenWithDuplicateSymbol() returns()
func (_CoreRegistryTest *CoreRegistryTestSession) TestRegisterZRC20TokenWithDuplicateSymbol() (*types.Transaction, error) {
	return _CoreRegistryTest.Contract.TestRegisterZRC20TokenWithDuplicateSymbol(&_CoreRegistryTest.TransactOpts)
}

// TestRegisterZRC20TokenWithDuplicateSymbol is a paid mutator transaction binding the contract method 0x8c18b40f.
//
// Solidity: function testRegisterZRC20TokenWithDuplicateSymbol() returns()
func (_CoreRegistryTest *CoreRegistryTestTransactorSession) TestRegisterZRC20TokenWithDuplicateSymbol() (*types.Transaction, error) {
	return _CoreRegistryTest.Contract.TestRegisterZRC20TokenWithDuplicateSymbol(&_CoreRegistryTest.TransactOpts)
}

// TestRegisterZRC20TokenWithEmptyAddress is a paid mutator transaction binding the contract method 0xaa5ec565.
//
// Solidity: function testRegisterZRC20TokenWithEmptyAddress() returns()
func (_CoreRegistryTest *CoreRegistryTestTransactor) TestRegisterZRC20TokenWithEmptyAddress(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CoreRegistryTest.contract.Transact(opts, "testRegisterZRC20TokenWithEmptyAddress")
}

// TestRegisterZRC20TokenWithEmptyAddress is a paid mutator transaction binding the contract method 0xaa5ec565.
//
// Solidity: function testRegisterZRC20TokenWithEmptyAddress() returns()
func (_CoreRegistryTest *CoreRegistryTestSession) TestRegisterZRC20TokenWithEmptyAddress() (*types.Transaction, error) {
	return _CoreRegistryTest.Contract.TestRegisterZRC20TokenWithEmptyAddress(&_CoreRegistryTest.TransactOpts)
}

// TestRegisterZRC20TokenWithEmptyAddress is a paid mutator transaction binding the contract method 0xaa5ec565.
//
// Solidity: function testRegisterZRC20TokenWithEmptyAddress() returns()
func (_CoreRegistryTest *CoreRegistryTestTransactorSession) TestRegisterZRC20TokenWithEmptyAddress() (*types.Transaction, error) {
	return _CoreRegistryTest.Contract.TestRegisterZRC20TokenWithEmptyAddress(&_CoreRegistryTest.TransactOpts)
}

// TestRegisterZRC20TokenWithEmptyOriginAddress is a paid mutator transaction binding the contract method 0xd312ad7d.
//
// Solidity: function testRegisterZRC20TokenWithEmptyOriginAddress() returns()
func (_CoreRegistryTest *CoreRegistryTestTransactor) TestRegisterZRC20TokenWithEmptyOriginAddress(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CoreRegistryTest.contract.Transact(opts, "testRegisterZRC20TokenWithEmptyOriginAddress")
}

// TestRegisterZRC20TokenWithEmptyOriginAddress is a paid mutator transaction binding the contract method 0xd312ad7d.
//
// Solidity: function testRegisterZRC20TokenWithEmptyOriginAddress() returns()
func (_CoreRegistryTest *CoreRegistryTestSession) TestRegisterZRC20TokenWithEmptyOriginAddress() (*types.Transaction, error) {
	return _CoreRegistryTest.Contract.TestRegisterZRC20TokenWithEmptyOriginAddress(&_CoreRegistryTest.TransactOpts)
}

// TestRegisterZRC20TokenWithEmptyOriginAddress is a paid mutator transaction binding the contract method 0xd312ad7d.
//
// Solidity: function testRegisterZRC20TokenWithEmptyOriginAddress() returns()
func (_CoreRegistryTest *CoreRegistryTestTransactorSession) TestRegisterZRC20TokenWithEmptyOriginAddress() (*types.Transaction, error) {
	return _CoreRegistryTest.Contract.TestRegisterZRC20TokenWithEmptyOriginAddress(&_CoreRegistryTest.TransactOpts)
}

// TestRegisterZRC20TokenWithEmptySymbol is a paid mutator transaction binding the contract method 0xd6683856.
//
// Solidity: function testRegisterZRC20TokenWithEmptySymbol() returns()
func (_CoreRegistryTest *CoreRegistryTestTransactor) TestRegisterZRC20TokenWithEmptySymbol(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CoreRegistryTest.contract.Transact(opts, "testRegisterZRC20TokenWithEmptySymbol")
}

// TestRegisterZRC20TokenWithEmptySymbol is a paid mutator transaction binding the contract method 0xd6683856.
//
// Solidity: function testRegisterZRC20TokenWithEmptySymbol() returns()
func (_CoreRegistryTest *CoreRegistryTestSession) TestRegisterZRC20TokenWithEmptySymbol() (*types.Transaction, error) {
	return _CoreRegistryTest.Contract.TestRegisterZRC20TokenWithEmptySymbol(&_CoreRegistryTest.TransactOpts)
}

// TestRegisterZRC20TokenWithEmptySymbol is a paid mutator transaction binding the contract method 0xd6683856.
//
// Solidity: function testRegisterZRC20TokenWithEmptySymbol() returns()
func (_CoreRegistryTest *CoreRegistryTestTransactorSession) TestRegisterZRC20TokenWithEmptySymbol() (*types.Transaction, error) {
	return _CoreRegistryTest.Contract.TestRegisterZRC20TokenWithEmptySymbol(&_CoreRegistryTest.TransactOpts)
}

// TestSetContractActive is a paid mutator transaction binding the contract method 0xfaab466a.
//
// Solidity: function testSetContractActive() returns()
func (_CoreRegistryTest *CoreRegistryTestTransactor) TestSetContractActive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CoreRegistryTest.contract.Transact(opts, "testSetContractActive")
}

// TestSetContractActive is a paid mutator transaction binding the contract method 0xfaab466a.
//
// Solidity: function testSetContractActive() returns()
func (_CoreRegistryTest *CoreRegistryTestSession) TestSetContractActive() (*types.Transaction, error) {
	return _CoreRegistryTest.Contract.TestSetContractActive(&_CoreRegistryTest.TransactOpts)
}

// TestSetContractActive is a paid mutator transaction binding the contract method 0xfaab466a.
//
// Solidity: function testSetContractActive() returns()
func (_CoreRegistryTest *CoreRegistryTestTransactorSession) TestSetContractActive() (*types.Transaction, error) {
	return _CoreRegistryTest.Contract.TestSetContractActive(&_CoreRegistryTest.TransactOpts)
}

// TestSetStatusForNonExistenContract is a paid mutator transaction binding the contract method 0x4a3b5640.
//
// Solidity: function testSetStatusForNonExistenContract() returns()
func (_CoreRegistryTest *CoreRegistryTestTransactor) TestSetStatusForNonExistenContract(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CoreRegistryTest.contract.Transact(opts, "testSetStatusForNonExistenContract")
}

// TestSetStatusForNonExistenContract is a paid mutator transaction binding the contract method 0x4a3b5640.
//
// Solidity: function testSetStatusForNonExistenContract() returns()
func (_CoreRegistryTest *CoreRegistryTestSession) TestSetStatusForNonExistenContract() (*types.Transaction, error) {
	return _CoreRegistryTest.Contract.TestSetStatusForNonExistenContract(&_CoreRegistryTest.TransactOpts)
}

// TestSetStatusForNonExistenContract is a paid mutator transaction binding the contract method 0x4a3b5640.
//
// Solidity: function testSetStatusForNonExistenContract() returns()
func (_CoreRegistryTest *CoreRegistryTestTransactorSession) TestSetStatusForNonExistenContract() (*types.Transaction, error) {
	return _CoreRegistryTest.Contract.TestSetStatusForNonExistenContract(&_CoreRegistryTest.TransactOpts)
}

// TestUpdateChainMetadata is a paid mutator transaction binding the contract method 0xbc056f7f.
//
// Solidity: function testUpdateChainMetadata() returns()
func (_CoreRegistryTest *CoreRegistryTestTransactor) TestUpdateChainMetadata(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CoreRegistryTest.contract.Transact(opts, "testUpdateChainMetadata")
}

// TestUpdateChainMetadata is a paid mutator transaction binding the contract method 0xbc056f7f.
//
// Solidity: function testUpdateChainMetadata() returns()
func (_CoreRegistryTest *CoreRegistryTestSession) TestUpdateChainMetadata() (*types.Transaction, error) {
	return _CoreRegistryTest.Contract.TestUpdateChainMetadata(&_CoreRegistryTest.TransactOpts)
}

// TestUpdateChainMetadata is a paid mutator transaction binding the contract method 0xbc056f7f.
//
// Solidity: function testUpdateChainMetadata() returns()
func (_CoreRegistryTest *CoreRegistryTestTransactorSession) TestUpdateChainMetadata() (*types.Transaction, error) {
	return _CoreRegistryTest.Contract.TestUpdateChainMetadata(&_CoreRegistryTest.TransactOpts)
}

// TestUpdateConfigForNonExistentContract is a paid mutator transaction binding the contract method 0x39c1f2a4.
//
// Solidity: function testUpdateConfigForNonExistentContract() returns()
func (_CoreRegistryTest *CoreRegistryTestTransactor) TestUpdateConfigForNonExistentContract(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CoreRegistryTest.contract.Transact(opts, "testUpdateConfigForNonExistentContract")
}

// TestUpdateConfigForNonExistentContract is a paid mutator transaction binding the contract method 0x39c1f2a4.
//
// Solidity: function testUpdateConfigForNonExistentContract() returns()
func (_CoreRegistryTest *CoreRegistryTestSession) TestUpdateConfigForNonExistentContract() (*types.Transaction, error) {
	return _CoreRegistryTest.Contract.TestUpdateConfigForNonExistentContract(&_CoreRegistryTest.TransactOpts)
}

// TestUpdateConfigForNonExistentContract is a paid mutator transaction binding the contract method 0x39c1f2a4.
//
// Solidity: function testUpdateConfigForNonExistentContract() returns()
func (_CoreRegistryTest *CoreRegistryTestTransactorSession) TestUpdateConfigForNonExistentContract() (*types.Transaction, error) {
	return _CoreRegistryTest.Contract.TestUpdateConfigForNonExistentContract(&_CoreRegistryTest.TransactOpts)
}

// TestUpdateContractConfig is a paid mutator transaction binding the contract method 0x674270a0.
//
// Solidity: function testUpdateContractConfig() returns()
func (_CoreRegistryTest *CoreRegistryTestTransactor) TestUpdateContractConfig(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CoreRegistryTest.contract.Transact(opts, "testUpdateContractConfig")
}

// TestUpdateContractConfig is a paid mutator transaction binding the contract method 0x674270a0.
//
// Solidity: function testUpdateContractConfig() returns()
func (_CoreRegistryTest *CoreRegistryTestSession) TestUpdateContractConfig() (*types.Transaction, error) {
	return _CoreRegistryTest.Contract.TestUpdateContractConfig(&_CoreRegistryTest.TransactOpts)
}

// TestUpdateContractConfig is a paid mutator transaction binding the contract method 0x674270a0.
//
// Solidity: function testUpdateContractConfig() returns()
func (_CoreRegistryTest *CoreRegistryTestTransactorSession) TestUpdateContractConfig() (*types.Transaction, error) {
	return _CoreRegistryTest.Contract.TestUpdateContractConfig(&_CoreRegistryTest.TransactOpts)
}

// TestUpdateMetadataForNonActiveChain is a paid mutator transaction binding the contract method 0x9fe48db2.
//
// Solidity: function testUpdateMetadataForNonActiveChain() returns()
func (_CoreRegistryTest *CoreRegistryTestTransactor) TestUpdateMetadataForNonActiveChain(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CoreRegistryTest.contract.Transact(opts, "testUpdateMetadataForNonActiveChain")
}

// TestUpdateMetadataForNonActiveChain is a paid mutator transaction binding the contract method 0x9fe48db2.
//
// Solidity: function testUpdateMetadataForNonActiveChain() returns()
func (_CoreRegistryTest *CoreRegistryTestSession) TestUpdateMetadataForNonActiveChain() (*types.Transaction, error) {
	return _CoreRegistryTest.Contract.TestUpdateMetadataForNonActiveChain(&_CoreRegistryTest.TransactOpts)
}

// TestUpdateMetadataForNonActiveChain is a paid mutator transaction binding the contract method 0x9fe48db2.
//
// Solidity: function testUpdateMetadataForNonActiveChain() returns()
func (_CoreRegistryTest *CoreRegistryTestTransactorSession) TestUpdateMetadataForNonActiveChain() (*types.Transaction, error) {
	return _CoreRegistryTest.Contract.TestUpdateMetadataForNonActiveChain(&_CoreRegistryTest.TransactOpts)
}

// TestUpdateMetadataUnauthorized is a paid mutator transaction binding the contract method 0xf48974af.
//
// Solidity: function testUpdateMetadataUnauthorized() returns()
func (_CoreRegistryTest *CoreRegistryTestTransactor) TestUpdateMetadataUnauthorized(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CoreRegistryTest.contract.Transact(opts, "testUpdateMetadataUnauthorized")
}

// TestUpdateMetadataUnauthorized is a paid mutator transaction binding the contract method 0xf48974af.
//
// Solidity: function testUpdateMetadataUnauthorized() returns()
func (_CoreRegistryTest *CoreRegistryTestSession) TestUpdateMetadataUnauthorized() (*types.Transaction, error) {
	return _CoreRegistryTest.Contract.TestUpdateMetadataUnauthorized(&_CoreRegistryTest.TransactOpts)
}

// TestUpdateMetadataUnauthorized is a paid mutator transaction binding the contract method 0xf48974af.
//
// Solidity: function testUpdateMetadataUnauthorized() returns()
func (_CoreRegistryTest *CoreRegistryTestTransactorSession) TestUpdateMetadataUnauthorized() (*types.Transaction, error) {
	return _CoreRegistryTest.Contract.TestUpdateMetadataUnauthorized(&_CoreRegistryTest.TransactOpts)
}

// TestUpdateNonExistentZRC20Token is a paid mutator transaction binding the contract method 0x933e8970.
//
// Solidity: function testUpdateNonExistentZRC20Token() returns()
func (_CoreRegistryTest *CoreRegistryTestTransactor) TestUpdateNonExistentZRC20Token(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CoreRegistryTest.contract.Transact(opts, "testUpdateNonExistentZRC20Token")
}

// TestUpdateNonExistentZRC20Token is a paid mutator transaction binding the contract method 0x933e8970.
//
// Solidity: function testUpdateNonExistentZRC20Token() returns()
func (_CoreRegistryTest *CoreRegistryTestSession) TestUpdateNonExistentZRC20Token() (*types.Transaction, error) {
	return _CoreRegistryTest.Contract.TestUpdateNonExistentZRC20Token(&_CoreRegistryTest.TransactOpts)
}

// TestUpdateNonExistentZRC20Token is a paid mutator transaction binding the contract method 0x933e8970.
//
// Solidity: function testUpdateNonExistentZRC20Token() returns()
func (_CoreRegistryTest *CoreRegistryTestTransactorSession) TestUpdateNonExistentZRC20Token() (*types.Transaction, error) {
	return _CoreRegistryTest.Contract.TestUpdateNonExistentZRC20Token(&_CoreRegistryTest.TransactOpts)
}

// TestUpdateZRC20TokenStatus is a paid mutator transaction binding the contract method 0x816c5669.
//
// Solidity: function testUpdateZRC20TokenStatus() returns()
func (_CoreRegistryTest *CoreRegistryTestTransactor) TestUpdateZRC20TokenStatus(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CoreRegistryTest.contract.Transact(opts, "testUpdateZRC20TokenStatus")
}

// TestUpdateZRC20TokenStatus is a paid mutator transaction binding the contract method 0x816c5669.
//
// Solidity: function testUpdateZRC20TokenStatus() returns()
func (_CoreRegistryTest *CoreRegistryTestSession) TestUpdateZRC20TokenStatus() (*types.Transaction, error) {
	return _CoreRegistryTest.Contract.TestUpdateZRC20TokenStatus(&_CoreRegistryTest.TransactOpts)
}

// TestUpdateZRC20TokenStatus is a paid mutator transaction binding the contract method 0x816c5669.
//
// Solidity: function testUpdateZRC20TokenStatus() returns()
func (_CoreRegistryTest *CoreRegistryTestTransactorSession) TestUpdateZRC20TokenStatus() (*types.Transaction, error) {
	return _CoreRegistryTest.Contract.TestUpdateZRC20TokenStatus(&_CoreRegistryTest.TransactOpts)
}

// TestUpdateZRC20TokenWithZeroAddress is a paid mutator transaction binding the contract method 0xfd757afb.
//
// Solidity: function testUpdateZRC20TokenWithZeroAddress() returns()
func (_CoreRegistryTest *CoreRegistryTestTransactor) TestUpdateZRC20TokenWithZeroAddress(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CoreRegistryTest.contract.Transact(opts, "testUpdateZRC20TokenWithZeroAddress")
}

// TestUpdateZRC20TokenWithZeroAddress is a paid mutator transaction binding the contract method 0xfd757afb.
//
// Solidity: function testUpdateZRC20TokenWithZeroAddress() returns()
func (_CoreRegistryTest *CoreRegistryTestSession) TestUpdateZRC20TokenWithZeroAddress() (*types.Transaction, error) {
	return _CoreRegistryTest.Contract.TestUpdateZRC20TokenWithZeroAddress(&_CoreRegistryTest.TransactOpts)
}

// TestUpdateZRC20TokenWithZeroAddress is a paid mutator transaction binding the contract method 0xfd757afb.
//
// Solidity: function testUpdateZRC20TokenWithZeroAddress() returns()
func (_CoreRegistryTest *CoreRegistryTestTransactorSession) TestUpdateZRC20TokenWithZeroAddress() (*types.Transaction, error) {
	return _CoreRegistryTest.Contract.TestUpdateZRC20TokenWithZeroAddress(&_CoreRegistryTest.TransactOpts)
}

// TestWhenPaused is a paid mutator transaction binding the contract method 0x5d737a7e.
//
// Solidity: function testWhenPaused() returns()
func (_CoreRegistryTest *CoreRegistryTestTransactor) TestWhenPaused(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CoreRegistryTest.contract.Transact(opts, "testWhenPaused")
}

// TestWhenPaused is a paid mutator transaction binding the contract method 0x5d737a7e.
//
// Solidity: function testWhenPaused() returns()
func (_CoreRegistryTest *CoreRegistryTestSession) TestWhenPaused() (*types.Transaction, error) {
	return _CoreRegistryTest.Contract.TestWhenPaused(&_CoreRegistryTest.TransactOpts)
}

// TestWhenPaused is a paid mutator transaction binding the contract method 0x5d737a7e.
//
// Solidity: function testWhenPaused() returns()
func (_CoreRegistryTest *CoreRegistryTestTransactorSession) TestWhenPaused() (*types.Transaction, error) {
	return _CoreRegistryTest.Contract.TestWhenPaused(&_CoreRegistryTest.TransactOpts)
}

// CoreRegistryTestChainStatusChangedIterator is returned from FilterChainStatusChanged and is used to iterate over the raw logs and unpacked data for ChainStatusChanged events raised by the CoreRegistryTest contract.
type CoreRegistryTestChainStatusChangedIterator struct {
	Event *CoreRegistryTestChainStatusChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CoreRegistryTestChainStatusChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CoreRegistryTestChainStatusChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CoreRegistryTestChainStatusChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CoreRegistryTestChainStatusChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CoreRegistryTestChainStatusChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CoreRegistryTestChainStatusChanged represents a ChainStatusChanged event raised by the CoreRegistryTest contract.
type CoreRegistryTestChainStatusChanged struct {
	ChainId   *big.Int
	OldStatus bool
	NewStatus bool
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterChainStatusChanged is a free log retrieval operation binding the contract event 0x8ec58cc2d2754b6fd6c4941a30811cb0dbcdad24de12c2aae8a1e9e48e1d04e7.
//
// Solidity: event ChainStatusChanged(uint256 indexed chainId, bool oldStatus, bool newStatus)
func (_CoreRegistryTest *CoreRegistryTestFilterer) FilterChainStatusChanged(opts *bind.FilterOpts, chainId []*big.Int) (*CoreRegistryTestChainStatusChangedIterator, error) {

	var chainIdRule []interface{}
	for _, chainIdItem := range chainId {
		chainIdRule = append(chainIdRule, chainIdItem)
	}

	logs, sub, err := _CoreRegistryTest.contract.FilterLogs(opts, "ChainStatusChanged", chainIdRule)
	if err != nil {
		return nil, err
	}
	return &CoreRegistryTestChainStatusChangedIterator{contract: _CoreRegistryTest.contract, event: "ChainStatusChanged", logs: logs, sub: sub}, nil
}

// WatchChainStatusChanged is a free log subscription operation binding the contract event 0x8ec58cc2d2754b6fd6c4941a30811cb0dbcdad24de12c2aae8a1e9e48e1d04e7.
//
// Solidity: event ChainStatusChanged(uint256 indexed chainId, bool oldStatus, bool newStatus)
func (_CoreRegistryTest *CoreRegistryTestFilterer) WatchChainStatusChanged(opts *bind.WatchOpts, sink chan<- *CoreRegistryTestChainStatusChanged, chainId []*big.Int) (event.Subscription, error) {

	var chainIdRule []interface{}
	for _, chainIdItem := range chainId {
		chainIdRule = append(chainIdRule, chainIdItem)
	}

	logs, sub, err := _CoreRegistryTest.contract.WatchLogs(opts, "ChainStatusChanged", chainIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CoreRegistryTestChainStatusChanged)
				if err := _CoreRegistryTest.contract.UnpackLog(event, "ChainStatusChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseChainStatusChanged is a log parse operation binding the contract event 0x8ec58cc2d2754b6fd6c4941a30811cb0dbcdad24de12c2aae8a1e9e48e1d04e7.
//
// Solidity: event ChainStatusChanged(uint256 indexed chainId, bool oldStatus, bool newStatus)
func (_CoreRegistryTest *CoreRegistryTestFilterer) ParseChainStatusChanged(log types.Log) (*CoreRegistryTestChainStatusChanged, error) {
	event := new(CoreRegistryTestChainStatusChanged)
	if err := _CoreRegistryTest.contract.UnpackLog(event, "ChainStatusChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CoreRegistryTestContractRegisteredIterator is returned from FilterContractRegistered and is used to iterate over the raw logs and unpacked data for ContractRegistered events raised by the CoreRegistryTest contract.
type CoreRegistryTestContractRegisteredIterator struct {
	Event *CoreRegistryTestContractRegistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CoreRegistryTestContractRegisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CoreRegistryTestContractRegistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CoreRegistryTestContractRegistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CoreRegistryTestContractRegisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CoreRegistryTestContractRegisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CoreRegistryTestContractRegistered represents a ContractRegistered event raised by the CoreRegistryTest contract.
type CoreRegistryTestContractRegistered struct {
	ChainId      *big.Int
	ContractType common.Hash
	AddressBytes []byte
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterContractRegistered is a free log retrieval operation binding the contract event 0x20319e67335097991b9d6add94a71632118372c1a0b5650654f069668dce2581.
//
// Solidity: event ContractRegistered(uint256 indexed chainId, string indexed contractType, bytes addressBytes)
func (_CoreRegistryTest *CoreRegistryTestFilterer) FilterContractRegistered(opts *bind.FilterOpts, chainId []*big.Int, contractType []string) (*CoreRegistryTestContractRegisteredIterator, error) {

	var chainIdRule []interface{}
	for _, chainIdItem := range chainId {
		chainIdRule = append(chainIdRule, chainIdItem)
	}
	var contractTypeRule []interface{}
	for _, contractTypeItem := range contractType {
		contractTypeRule = append(contractTypeRule, contractTypeItem)
	}

	logs, sub, err := _CoreRegistryTest.contract.FilterLogs(opts, "ContractRegistered", chainIdRule, contractTypeRule)
	if err != nil {
		return nil, err
	}
	return &CoreRegistryTestContractRegisteredIterator{contract: _CoreRegistryTest.contract, event: "ContractRegistered", logs: logs, sub: sub}, nil
}

// WatchContractRegistered is a free log subscription operation binding the contract event 0x20319e67335097991b9d6add94a71632118372c1a0b5650654f069668dce2581.
//
// Solidity: event ContractRegistered(uint256 indexed chainId, string indexed contractType, bytes addressBytes)
func (_CoreRegistryTest *CoreRegistryTestFilterer) WatchContractRegistered(opts *bind.WatchOpts, sink chan<- *CoreRegistryTestContractRegistered, chainId []*big.Int, contractType []string) (event.Subscription, error) {

	var chainIdRule []interface{}
	for _, chainIdItem := range chainId {
		chainIdRule = append(chainIdRule, chainIdItem)
	}
	var contractTypeRule []interface{}
	for _, contractTypeItem := range contractType {
		contractTypeRule = append(contractTypeRule, contractTypeItem)
	}

	logs, sub, err := _CoreRegistryTest.contract.WatchLogs(opts, "ContractRegistered", chainIdRule, contractTypeRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CoreRegistryTestContractRegistered)
				if err := _CoreRegistryTest.contract.UnpackLog(event, "ContractRegistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseContractRegistered is a log parse operation binding the contract event 0x20319e67335097991b9d6add94a71632118372c1a0b5650654f069668dce2581.
//
// Solidity: event ContractRegistered(uint256 indexed chainId, string indexed contractType, bytes addressBytes)
func (_CoreRegistryTest *CoreRegistryTestFilterer) ParseContractRegistered(log types.Log) (*CoreRegistryTestContractRegistered, error) {
	event := new(CoreRegistryTestContractRegistered)
	if err := _CoreRegistryTest.contract.UnpackLog(event, "ContractRegistered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CoreRegistryTestContractStatusChangedIterator is returned from FilterContractStatusChanged and is used to iterate over the raw logs and unpacked data for ContractStatusChanged events raised by the CoreRegistryTest contract.
type CoreRegistryTestContractStatusChangedIterator struct {
	Event *CoreRegistryTestContractStatusChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CoreRegistryTestContractStatusChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CoreRegistryTestContractStatusChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CoreRegistryTestContractStatusChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CoreRegistryTestContractStatusChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CoreRegistryTestContractStatusChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CoreRegistryTestContractStatusChanged represents a ContractStatusChanged event raised by the CoreRegistryTest contract.
type CoreRegistryTestContractStatusChanged struct {
	AddressBytes []byte
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterContractStatusChanged is a free log retrieval operation binding the contract event 0x6db122b2555e642c944e09ae6d733a3f7600404765f612912f72b3c921c0b88c.
//
// Solidity: event ContractStatusChanged(bytes addressBytes)
func (_CoreRegistryTest *CoreRegistryTestFilterer) FilterContractStatusChanged(opts *bind.FilterOpts) (*CoreRegistryTestContractStatusChangedIterator, error) {

	logs, sub, err := _CoreRegistryTest.contract.FilterLogs(opts, "ContractStatusChanged")
	if err != nil {
		return nil, err
	}
	return &CoreRegistryTestContractStatusChangedIterator{contract: _CoreRegistryTest.contract, event: "ContractStatusChanged", logs: logs, sub: sub}, nil
}

// WatchContractStatusChanged is a free log subscription operation binding the contract event 0x6db122b2555e642c944e09ae6d733a3f7600404765f612912f72b3c921c0b88c.
//
// Solidity: event ContractStatusChanged(bytes addressBytes)
func (_CoreRegistryTest *CoreRegistryTestFilterer) WatchContractStatusChanged(opts *bind.WatchOpts, sink chan<- *CoreRegistryTestContractStatusChanged) (event.Subscription, error) {

	logs, sub, err := _CoreRegistryTest.contract.WatchLogs(opts, "ContractStatusChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CoreRegistryTestContractStatusChanged)
				if err := _CoreRegistryTest.contract.UnpackLog(event, "ContractStatusChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseContractStatusChanged is a log parse operation binding the contract event 0x6db122b2555e642c944e09ae6d733a3f7600404765f612912f72b3c921c0b88c.
//
// Solidity: event ContractStatusChanged(bytes addressBytes)
func (_CoreRegistryTest *CoreRegistryTestFilterer) ParseContractStatusChanged(log types.Log) (*CoreRegistryTestContractStatusChanged, error) {
	event := new(CoreRegistryTestContractStatusChanged)
	if err := _CoreRegistryTest.contract.UnpackLog(event, "ContractStatusChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CoreRegistryTestNewChainMetadataIterator is returned from FilterNewChainMetadata and is used to iterate over the raw logs and unpacked data for NewChainMetadata events raised by the CoreRegistryTest contract.
type CoreRegistryTestNewChainMetadataIterator struct {
	Event *CoreRegistryTestNewChainMetadata // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CoreRegistryTestNewChainMetadataIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CoreRegistryTestNewChainMetadata)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CoreRegistryTestNewChainMetadata)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CoreRegistryTestNewChainMetadataIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CoreRegistryTestNewChainMetadataIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CoreRegistryTestNewChainMetadata represents a NewChainMetadata event raised by the CoreRegistryTest contract.
type CoreRegistryTestNewChainMetadata struct {
	ChainId *big.Int
	Key     string
	Value   []byte
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterNewChainMetadata is a free log retrieval operation binding the contract event 0xa274ec62326b7df2ece1add0babcb0f90b87b6d4a7e144f8d0b9b9057c039dc1.
//
// Solidity: event NewChainMetadata(uint256 indexed chainId, string key, bytes value)
func (_CoreRegistryTest *CoreRegistryTestFilterer) FilterNewChainMetadata(opts *bind.FilterOpts, chainId []*big.Int) (*CoreRegistryTestNewChainMetadataIterator, error) {

	var chainIdRule []interface{}
	for _, chainIdItem := range chainId {
		chainIdRule = append(chainIdRule, chainIdItem)
	}

	logs, sub, err := _CoreRegistryTest.contract.FilterLogs(opts, "NewChainMetadata", chainIdRule)
	if err != nil {
		return nil, err
	}
	return &CoreRegistryTestNewChainMetadataIterator{contract: _CoreRegistryTest.contract, event: "NewChainMetadata", logs: logs, sub: sub}, nil
}

// WatchNewChainMetadata is a free log subscription operation binding the contract event 0xa274ec62326b7df2ece1add0babcb0f90b87b6d4a7e144f8d0b9b9057c039dc1.
//
// Solidity: event NewChainMetadata(uint256 indexed chainId, string key, bytes value)
func (_CoreRegistryTest *CoreRegistryTestFilterer) WatchNewChainMetadata(opts *bind.WatchOpts, sink chan<- *CoreRegistryTestNewChainMetadata, chainId []*big.Int) (event.Subscription, error) {

	var chainIdRule []interface{}
	for _, chainIdItem := range chainId {
		chainIdRule = append(chainIdRule, chainIdItem)
	}

	logs, sub, err := _CoreRegistryTest.contract.WatchLogs(opts, "NewChainMetadata", chainIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CoreRegistryTestNewChainMetadata)
				if err := _CoreRegistryTest.contract.UnpackLog(event, "NewChainMetadata", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewChainMetadata is a log parse operation binding the contract event 0xa274ec62326b7df2ece1add0babcb0f90b87b6d4a7e144f8d0b9b9057c039dc1.
//
// Solidity: event NewChainMetadata(uint256 indexed chainId, string key, bytes value)
func (_CoreRegistryTest *CoreRegistryTestFilterer) ParseNewChainMetadata(log types.Log) (*CoreRegistryTestNewChainMetadata, error) {
	event := new(CoreRegistryTestNewChainMetadata)
	if err := _CoreRegistryTest.contract.UnpackLog(event, "NewChainMetadata", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CoreRegistryTestNewContractConfigurationIterator is returned from FilterNewContractConfiguration and is used to iterate over the raw logs and unpacked data for NewContractConfiguration events raised by the CoreRegistryTest contract.
type CoreRegistryTestNewContractConfigurationIterator struct {
	Event *CoreRegistryTestNewContractConfiguration // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CoreRegistryTestNewContractConfigurationIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CoreRegistryTestNewContractConfiguration)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CoreRegistryTestNewContractConfiguration)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CoreRegistryTestNewContractConfigurationIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CoreRegistryTestNewContractConfigurationIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CoreRegistryTestNewContractConfiguration represents a NewContractConfiguration event raised by the CoreRegistryTest contract.
type CoreRegistryTestNewContractConfiguration struct {
	ChainId      *big.Int
	ContractType string
	Key          string
	Value        []byte
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterNewContractConfiguration is a free log retrieval operation binding the contract event 0x9453d408be9167c029f60b137dddf03dd0d2ff9f51d834c1b2238f335bd96f9b.
//
// Solidity: event NewContractConfiguration(uint256 indexed chainId, string contractType, string key, bytes value)
func (_CoreRegistryTest *CoreRegistryTestFilterer) FilterNewContractConfiguration(opts *bind.FilterOpts, chainId []*big.Int) (*CoreRegistryTestNewContractConfigurationIterator, error) {

	var chainIdRule []interface{}
	for _, chainIdItem := range chainId {
		chainIdRule = append(chainIdRule, chainIdItem)
	}

	logs, sub, err := _CoreRegistryTest.contract.FilterLogs(opts, "NewContractConfiguration", chainIdRule)
	if err != nil {
		return nil, err
	}
	return &CoreRegistryTestNewContractConfigurationIterator{contract: _CoreRegistryTest.contract, event: "NewContractConfiguration", logs: logs, sub: sub}, nil
}

// WatchNewContractConfiguration is a free log subscription operation binding the contract event 0x9453d408be9167c029f60b137dddf03dd0d2ff9f51d834c1b2238f335bd96f9b.
//
// Solidity: event NewContractConfiguration(uint256 indexed chainId, string contractType, string key, bytes value)
func (_CoreRegistryTest *CoreRegistryTestFilterer) WatchNewContractConfiguration(opts *bind.WatchOpts, sink chan<- *CoreRegistryTestNewContractConfiguration, chainId []*big.Int) (event.Subscription, error) {

	var chainIdRule []interface{}
	for _, chainIdItem := range chainId {
		chainIdRule = append(chainIdRule, chainIdItem)
	}

	logs, sub, err := _CoreRegistryTest.contract.WatchLogs(opts, "NewContractConfiguration", chainIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CoreRegistryTestNewContractConfiguration)
				if err := _CoreRegistryTest.contract.UnpackLog(event, "NewContractConfiguration", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewContractConfiguration is a log parse operation binding the contract event 0x9453d408be9167c029f60b137dddf03dd0d2ff9f51d834c1b2238f335bd96f9b.
//
// Solidity: event NewContractConfiguration(uint256 indexed chainId, string contractType, string key, bytes value)
func (_CoreRegistryTest *CoreRegistryTestFilterer) ParseNewContractConfiguration(log types.Log) (*CoreRegistryTestNewContractConfiguration, error) {
	event := new(CoreRegistryTestNewContractConfiguration)
	if err := _CoreRegistryTest.contract.UnpackLog(event, "NewContractConfiguration", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CoreRegistryTestZRC20TokenRegisteredIterator is returned from FilterZRC20TokenRegistered and is used to iterate over the raw logs and unpacked data for ZRC20TokenRegistered events raised by the CoreRegistryTest contract.
type CoreRegistryTestZRC20TokenRegisteredIterator struct {
	Event *CoreRegistryTestZRC20TokenRegistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CoreRegistryTestZRC20TokenRegisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CoreRegistryTestZRC20TokenRegistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CoreRegistryTestZRC20TokenRegistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CoreRegistryTestZRC20TokenRegisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CoreRegistryTestZRC20TokenRegisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CoreRegistryTestZRC20TokenRegistered represents a ZRC20TokenRegistered event raised by the CoreRegistryTest contract.
type CoreRegistryTestZRC20TokenRegistered struct {
	OriginAddress common.Hash
	Address       common.Address
	Decimals      uint8
	OriginChainId *big.Int
	Symbol        string
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterZRC20TokenRegistered is a free log retrieval operation binding the contract event 0xa9edd2fd29fc8cab6015c2725afa5bc5f3b8d709a02d9e89990ef20fd781e367.
//
// Solidity: event ZRC20TokenRegistered(bytes indexed originAddress, address indexed address_, uint8 decimals, uint256 originChainId, string symbol)
func (_CoreRegistryTest *CoreRegistryTestFilterer) FilterZRC20TokenRegistered(opts *bind.FilterOpts, originAddress [][]byte, address_ []common.Address) (*CoreRegistryTestZRC20TokenRegisteredIterator, error) {

	var originAddressRule []interface{}
	for _, originAddressItem := range originAddress {
		originAddressRule = append(originAddressRule, originAddressItem)
	}
	var address_Rule []interface{}
	for _, address_Item := range address_ {
		address_Rule = append(address_Rule, address_Item)
	}

	logs, sub, err := _CoreRegistryTest.contract.FilterLogs(opts, "ZRC20TokenRegistered", originAddressRule, address_Rule)
	if err != nil {
		return nil, err
	}
	return &CoreRegistryTestZRC20TokenRegisteredIterator{contract: _CoreRegistryTest.contract, event: "ZRC20TokenRegistered", logs: logs, sub: sub}, nil
}

// WatchZRC20TokenRegistered is a free log subscription operation binding the contract event 0xa9edd2fd29fc8cab6015c2725afa5bc5f3b8d709a02d9e89990ef20fd781e367.
//
// Solidity: event ZRC20TokenRegistered(bytes indexed originAddress, address indexed address_, uint8 decimals, uint256 originChainId, string symbol)
func (_CoreRegistryTest *CoreRegistryTestFilterer) WatchZRC20TokenRegistered(opts *bind.WatchOpts, sink chan<- *CoreRegistryTestZRC20TokenRegistered, originAddress [][]byte, address_ []common.Address) (event.Subscription, error) {

	var originAddressRule []interface{}
	for _, originAddressItem := range originAddress {
		originAddressRule = append(originAddressRule, originAddressItem)
	}
	var address_Rule []interface{}
	for _, address_Item := range address_ {
		address_Rule = append(address_Rule, address_Item)
	}

	logs, sub, err := _CoreRegistryTest.contract.WatchLogs(opts, "ZRC20TokenRegistered", originAddressRule, address_Rule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CoreRegistryTestZRC20TokenRegistered)
				if err := _CoreRegistryTest.contract.UnpackLog(event, "ZRC20TokenRegistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseZRC20TokenRegistered is a log parse operation binding the contract event 0xa9edd2fd29fc8cab6015c2725afa5bc5f3b8d709a02d9e89990ef20fd781e367.
//
// Solidity: event ZRC20TokenRegistered(bytes indexed originAddress, address indexed address_, uint8 decimals, uint256 originChainId, string symbol)
func (_CoreRegistryTest *CoreRegistryTestFilterer) ParseZRC20TokenRegistered(log types.Log) (*CoreRegistryTestZRC20TokenRegistered, error) {
	event := new(CoreRegistryTestZRC20TokenRegistered)
	if err := _CoreRegistryTest.contract.UnpackLog(event, "ZRC20TokenRegistered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CoreRegistryTestZRC20TokenUpdatedIterator is returned from FilterZRC20TokenUpdated and is used to iterate over the raw logs and unpacked data for ZRC20TokenUpdated events raised by the CoreRegistryTest contract.
type CoreRegistryTestZRC20TokenUpdatedIterator struct {
	Event *CoreRegistryTestZRC20TokenUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CoreRegistryTestZRC20TokenUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CoreRegistryTestZRC20TokenUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CoreRegistryTestZRC20TokenUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CoreRegistryTestZRC20TokenUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CoreRegistryTestZRC20TokenUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CoreRegistryTestZRC20TokenUpdated represents a ZRC20TokenUpdated event raised by the CoreRegistryTest contract.
type CoreRegistryTestZRC20TokenUpdated struct {
	Address common.Address
	Active  bool
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterZRC20TokenUpdated is a free log retrieval operation binding the contract event 0x9542d02d4224477c9e9b53628bf5eae8b59520ea6bf2809cec7f24f76bba8ff8.
//
// Solidity: event ZRC20TokenUpdated(address address_, bool active)
func (_CoreRegistryTest *CoreRegistryTestFilterer) FilterZRC20TokenUpdated(opts *bind.FilterOpts) (*CoreRegistryTestZRC20TokenUpdatedIterator, error) {

	logs, sub, err := _CoreRegistryTest.contract.FilterLogs(opts, "ZRC20TokenUpdated")
	if err != nil {
		return nil, err
	}
	return &CoreRegistryTestZRC20TokenUpdatedIterator{contract: _CoreRegistryTest.contract, event: "ZRC20TokenUpdated", logs: logs, sub: sub}, nil
}

// WatchZRC20TokenUpdated is a free log subscription operation binding the contract event 0x9542d02d4224477c9e9b53628bf5eae8b59520ea6bf2809cec7f24f76bba8ff8.
//
// Solidity: event ZRC20TokenUpdated(address address_, bool active)
func (_CoreRegistryTest *CoreRegistryTestFilterer) WatchZRC20TokenUpdated(opts *bind.WatchOpts, sink chan<- *CoreRegistryTestZRC20TokenUpdated) (event.Subscription, error) {

	logs, sub, err := _CoreRegistryTest.contract.WatchLogs(opts, "ZRC20TokenUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CoreRegistryTestZRC20TokenUpdated)
				if err := _CoreRegistryTest.contract.UnpackLog(event, "ZRC20TokenUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseZRC20TokenUpdated is a log parse operation binding the contract event 0x9542d02d4224477c9e9b53628bf5eae8b59520ea6bf2809cec7f24f76bba8ff8.
//
// Solidity: event ZRC20TokenUpdated(address address_, bool active)
func (_CoreRegistryTest *CoreRegistryTestFilterer) ParseZRC20TokenUpdated(log types.Log) (*CoreRegistryTestZRC20TokenUpdated, error) {
	event := new(CoreRegistryTestZRC20TokenUpdated)
	if err := _CoreRegistryTest.contract.UnpackLog(event, "ZRC20TokenUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CoreRegistryTestLogIterator is returned from FilterLog and is used to iterate over the raw logs and unpacked data for Log events raised by the CoreRegistryTest contract.
type CoreRegistryTestLogIterator struct {
	Event *CoreRegistryTestLog // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CoreRegistryTestLogIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CoreRegistryTestLog)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CoreRegistryTestLog)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CoreRegistryTestLogIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CoreRegistryTestLogIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CoreRegistryTestLog represents a Log event raised by the CoreRegistryTest contract.
type CoreRegistryTestLog struct {
	Arg0 string
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLog is a free log retrieval operation binding the contract event 0x41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50.
//
// Solidity: event log(string arg0)
func (_CoreRegistryTest *CoreRegistryTestFilterer) FilterLog(opts *bind.FilterOpts) (*CoreRegistryTestLogIterator, error) {

	logs, sub, err := _CoreRegistryTest.contract.FilterLogs(opts, "log")
	if err != nil {
		return nil, err
	}
	return &CoreRegistryTestLogIterator{contract: _CoreRegistryTest.contract, event: "log", logs: logs, sub: sub}, nil
}

// WatchLog is a free log subscription operation binding the contract event 0x41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50.
//
// Solidity: event log(string arg0)
func (_CoreRegistryTest *CoreRegistryTestFilterer) WatchLog(opts *bind.WatchOpts, sink chan<- *CoreRegistryTestLog) (event.Subscription, error) {

	logs, sub, err := _CoreRegistryTest.contract.WatchLogs(opts, "log")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CoreRegistryTestLog)
				if err := _CoreRegistryTest.contract.UnpackLog(event, "log", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLog is a log parse operation binding the contract event 0x41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50.
//
// Solidity: event log(string arg0)
func (_CoreRegistryTest *CoreRegistryTestFilterer) ParseLog(log types.Log) (*CoreRegistryTestLog, error) {
	event := new(CoreRegistryTestLog)
	if err := _CoreRegistryTest.contract.UnpackLog(event, "log", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CoreRegistryTestLogAddressIterator is returned from FilterLogAddress and is used to iterate over the raw logs and unpacked data for LogAddress events raised by the CoreRegistryTest contract.
type CoreRegistryTestLogAddressIterator struct {
	Event *CoreRegistryTestLogAddress // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CoreRegistryTestLogAddressIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CoreRegistryTestLogAddress)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CoreRegistryTestLogAddress)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CoreRegistryTestLogAddressIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CoreRegistryTestLogAddressIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CoreRegistryTestLogAddress represents a LogAddress event raised by the CoreRegistryTest contract.
type CoreRegistryTestLogAddress struct {
	Arg0 common.Address
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogAddress is a free log retrieval operation binding the contract event 0x7ae74c527414ae135fd97047b12921a5ec3911b804197855d67e25c7b75ee6f3.
//
// Solidity: event log_address(address arg0)
func (_CoreRegistryTest *CoreRegistryTestFilterer) FilterLogAddress(opts *bind.FilterOpts) (*CoreRegistryTestLogAddressIterator, error) {

	logs, sub, err := _CoreRegistryTest.contract.FilterLogs(opts, "log_address")
	if err != nil {
		return nil, err
	}
	return &CoreRegistryTestLogAddressIterator{contract: _CoreRegistryTest.contract, event: "log_address", logs: logs, sub: sub}, nil
}

// WatchLogAddress is a free log subscription operation binding the contract event 0x7ae74c527414ae135fd97047b12921a5ec3911b804197855d67e25c7b75ee6f3.
//
// Solidity: event log_address(address arg0)
func (_CoreRegistryTest *CoreRegistryTestFilterer) WatchLogAddress(opts *bind.WatchOpts, sink chan<- *CoreRegistryTestLogAddress) (event.Subscription, error) {

	logs, sub, err := _CoreRegistryTest.contract.WatchLogs(opts, "log_address")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CoreRegistryTestLogAddress)
				if err := _CoreRegistryTest.contract.UnpackLog(event, "log_address", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogAddress is a log parse operation binding the contract event 0x7ae74c527414ae135fd97047b12921a5ec3911b804197855d67e25c7b75ee6f3.
//
// Solidity: event log_address(address arg0)
func (_CoreRegistryTest *CoreRegistryTestFilterer) ParseLogAddress(log types.Log) (*CoreRegistryTestLogAddress, error) {
	event := new(CoreRegistryTestLogAddress)
	if err := _CoreRegistryTest.contract.UnpackLog(event, "log_address", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CoreRegistryTestLogArrayIterator is returned from FilterLogArray and is used to iterate over the raw logs and unpacked data for LogArray events raised by the CoreRegistryTest contract.
type CoreRegistryTestLogArrayIterator struct {
	Event *CoreRegistryTestLogArray // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CoreRegistryTestLogArrayIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CoreRegistryTestLogArray)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CoreRegistryTestLogArray)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CoreRegistryTestLogArrayIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CoreRegistryTestLogArrayIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CoreRegistryTestLogArray represents a LogArray event raised by the CoreRegistryTest contract.
type CoreRegistryTestLogArray struct {
	Val []*big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogArray is a free log retrieval operation binding the contract event 0xfb102865d50addddf69da9b5aa1bced66c80cf869a5c8d0471a467e18ce9cab1.
//
// Solidity: event log_array(uint256[] val)
func (_CoreRegistryTest *CoreRegistryTestFilterer) FilterLogArray(opts *bind.FilterOpts) (*CoreRegistryTestLogArrayIterator, error) {

	logs, sub, err := _CoreRegistryTest.contract.FilterLogs(opts, "log_array")
	if err != nil {
		return nil, err
	}
	return &CoreRegistryTestLogArrayIterator{contract: _CoreRegistryTest.contract, event: "log_array", logs: logs, sub: sub}, nil
}

// WatchLogArray is a free log subscription operation binding the contract event 0xfb102865d50addddf69da9b5aa1bced66c80cf869a5c8d0471a467e18ce9cab1.
//
// Solidity: event log_array(uint256[] val)
func (_CoreRegistryTest *CoreRegistryTestFilterer) WatchLogArray(opts *bind.WatchOpts, sink chan<- *CoreRegistryTestLogArray) (event.Subscription, error) {

	logs, sub, err := _CoreRegistryTest.contract.WatchLogs(opts, "log_array")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CoreRegistryTestLogArray)
				if err := _CoreRegistryTest.contract.UnpackLog(event, "log_array", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogArray is a log parse operation binding the contract event 0xfb102865d50addddf69da9b5aa1bced66c80cf869a5c8d0471a467e18ce9cab1.
//
// Solidity: event log_array(uint256[] val)
func (_CoreRegistryTest *CoreRegistryTestFilterer) ParseLogArray(log types.Log) (*CoreRegistryTestLogArray, error) {
	event := new(CoreRegistryTestLogArray)
	if err := _CoreRegistryTest.contract.UnpackLog(event, "log_array", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CoreRegistryTestLogArray0Iterator is returned from FilterLogArray0 and is used to iterate over the raw logs and unpacked data for LogArray0 events raised by the CoreRegistryTest contract.
type CoreRegistryTestLogArray0Iterator struct {
	Event *CoreRegistryTestLogArray0 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CoreRegistryTestLogArray0Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CoreRegistryTestLogArray0)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CoreRegistryTestLogArray0)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CoreRegistryTestLogArray0Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CoreRegistryTestLogArray0Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CoreRegistryTestLogArray0 represents a LogArray0 event raised by the CoreRegistryTest contract.
type CoreRegistryTestLogArray0 struct {
	Val []*big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogArray0 is a free log retrieval operation binding the contract event 0x890a82679b470f2bd82816ed9b161f97d8b967f37fa3647c21d5bf39749e2dd5.
//
// Solidity: event log_array(int256[] val)
func (_CoreRegistryTest *CoreRegistryTestFilterer) FilterLogArray0(opts *bind.FilterOpts) (*CoreRegistryTestLogArray0Iterator, error) {

	logs, sub, err := _CoreRegistryTest.contract.FilterLogs(opts, "log_array0")
	if err != nil {
		return nil, err
	}
	return &CoreRegistryTestLogArray0Iterator{contract: _CoreRegistryTest.contract, event: "log_array0", logs: logs, sub: sub}, nil
}

// WatchLogArray0 is a free log subscription operation binding the contract event 0x890a82679b470f2bd82816ed9b161f97d8b967f37fa3647c21d5bf39749e2dd5.
//
// Solidity: event log_array(int256[] val)
func (_CoreRegistryTest *CoreRegistryTestFilterer) WatchLogArray0(opts *bind.WatchOpts, sink chan<- *CoreRegistryTestLogArray0) (event.Subscription, error) {

	logs, sub, err := _CoreRegistryTest.contract.WatchLogs(opts, "log_array0")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CoreRegistryTestLogArray0)
				if err := _CoreRegistryTest.contract.UnpackLog(event, "log_array0", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogArray0 is a log parse operation binding the contract event 0x890a82679b470f2bd82816ed9b161f97d8b967f37fa3647c21d5bf39749e2dd5.
//
// Solidity: event log_array(int256[] val)
func (_CoreRegistryTest *CoreRegistryTestFilterer) ParseLogArray0(log types.Log) (*CoreRegistryTestLogArray0, error) {
	event := new(CoreRegistryTestLogArray0)
	if err := _CoreRegistryTest.contract.UnpackLog(event, "log_array0", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CoreRegistryTestLogArray1Iterator is returned from FilterLogArray1 and is used to iterate over the raw logs and unpacked data for LogArray1 events raised by the CoreRegistryTest contract.
type CoreRegistryTestLogArray1Iterator struct {
	Event *CoreRegistryTestLogArray1 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CoreRegistryTestLogArray1Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CoreRegistryTestLogArray1)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CoreRegistryTestLogArray1)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CoreRegistryTestLogArray1Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CoreRegistryTestLogArray1Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CoreRegistryTestLogArray1 represents a LogArray1 event raised by the CoreRegistryTest contract.
type CoreRegistryTestLogArray1 struct {
	Val []common.Address
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogArray1 is a free log retrieval operation binding the contract event 0x40e1840f5769073d61bd01372d9b75baa9842d5629a0c99ff103be1178a8e9e2.
//
// Solidity: event log_array(address[] val)
func (_CoreRegistryTest *CoreRegistryTestFilterer) FilterLogArray1(opts *bind.FilterOpts) (*CoreRegistryTestLogArray1Iterator, error) {

	logs, sub, err := _CoreRegistryTest.contract.FilterLogs(opts, "log_array1")
	if err != nil {
		return nil, err
	}
	return &CoreRegistryTestLogArray1Iterator{contract: _CoreRegistryTest.contract, event: "log_array1", logs: logs, sub: sub}, nil
}

// WatchLogArray1 is a free log subscription operation binding the contract event 0x40e1840f5769073d61bd01372d9b75baa9842d5629a0c99ff103be1178a8e9e2.
//
// Solidity: event log_array(address[] val)
func (_CoreRegistryTest *CoreRegistryTestFilterer) WatchLogArray1(opts *bind.WatchOpts, sink chan<- *CoreRegistryTestLogArray1) (event.Subscription, error) {

	logs, sub, err := _CoreRegistryTest.contract.WatchLogs(opts, "log_array1")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CoreRegistryTestLogArray1)
				if err := _CoreRegistryTest.contract.UnpackLog(event, "log_array1", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogArray1 is a log parse operation binding the contract event 0x40e1840f5769073d61bd01372d9b75baa9842d5629a0c99ff103be1178a8e9e2.
//
// Solidity: event log_array(address[] val)
func (_CoreRegistryTest *CoreRegistryTestFilterer) ParseLogArray1(log types.Log) (*CoreRegistryTestLogArray1, error) {
	event := new(CoreRegistryTestLogArray1)
	if err := _CoreRegistryTest.contract.UnpackLog(event, "log_array1", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CoreRegistryTestLogBytesIterator is returned from FilterLogBytes and is used to iterate over the raw logs and unpacked data for LogBytes events raised by the CoreRegistryTest contract.
type CoreRegistryTestLogBytesIterator struct {
	Event *CoreRegistryTestLogBytes // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CoreRegistryTestLogBytesIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CoreRegistryTestLogBytes)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CoreRegistryTestLogBytes)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CoreRegistryTestLogBytesIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CoreRegistryTestLogBytesIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CoreRegistryTestLogBytes represents a LogBytes event raised by the CoreRegistryTest contract.
type CoreRegistryTestLogBytes struct {
	Arg0 []byte
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogBytes is a free log retrieval operation binding the contract event 0x23b62ad0584d24a75f0bf3560391ef5659ec6db1269c56e11aa241d637f19b20.
//
// Solidity: event log_bytes(bytes arg0)
func (_CoreRegistryTest *CoreRegistryTestFilterer) FilterLogBytes(opts *bind.FilterOpts) (*CoreRegistryTestLogBytesIterator, error) {

	logs, sub, err := _CoreRegistryTest.contract.FilterLogs(opts, "log_bytes")
	if err != nil {
		return nil, err
	}
	return &CoreRegistryTestLogBytesIterator{contract: _CoreRegistryTest.contract, event: "log_bytes", logs: logs, sub: sub}, nil
}

// WatchLogBytes is a free log subscription operation binding the contract event 0x23b62ad0584d24a75f0bf3560391ef5659ec6db1269c56e11aa241d637f19b20.
//
// Solidity: event log_bytes(bytes arg0)
func (_CoreRegistryTest *CoreRegistryTestFilterer) WatchLogBytes(opts *bind.WatchOpts, sink chan<- *CoreRegistryTestLogBytes) (event.Subscription, error) {

	logs, sub, err := _CoreRegistryTest.contract.WatchLogs(opts, "log_bytes")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CoreRegistryTestLogBytes)
				if err := _CoreRegistryTest.contract.UnpackLog(event, "log_bytes", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogBytes is a log parse operation binding the contract event 0x23b62ad0584d24a75f0bf3560391ef5659ec6db1269c56e11aa241d637f19b20.
//
// Solidity: event log_bytes(bytes arg0)
func (_CoreRegistryTest *CoreRegistryTestFilterer) ParseLogBytes(log types.Log) (*CoreRegistryTestLogBytes, error) {
	event := new(CoreRegistryTestLogBytes)
	if err := _CoreRegistryTest.contract.UnpackLog(event, "log_bytes", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CoreRegistryTestLogBytes32Iterator is returned from FilterLogBytes32 and is used to iterate over the raw logs and unpacked data for LogBytes32 events raised by the CoreRegistryTest contract.
type CoreRegistryTestLogBytes32Iterator struct {
	Event *CoreRegistryTestLogBytes32 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CoreRegistryTestLogBytes32Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CoreRegistryTestLogBytes32)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CoreRegistryTestLogBytes32)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CoreRegistryTestLogBytes32Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CoreRegistryTestLogBytes32Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CoreRegistryTestLogBytes32 represents a LogBytes32 event raised by the CoreRegistryTest contract.
type CoreRegistryTestLogBytes32 struct {
	Arg0 [32]byte
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogBytes32 is a free log retrieval operation binding the contract event 0xe81699b85113eea1c73e10588b2b035e55893369632173afd43feb192fac64e3.
//
// Solidity: event log_bytes32(bytes32 arg0)
func (_CoreRegistryTest *CoreRegistryTestFilterer) FilterLogBytes32(opts *bind.FilterOpts) (*CoreRegistryTestLogBytes32Iterator, error) {

	logs, sub, err := _CoreRegistryTest.contract.FilterLogs(opts, "log_bytes32")
	if err != nil {
		return nil, err
	}
	return &CoreRegistryTestLogBytes32Iterator{contract: _CoreRegistryTest.contract, event: "log_bytes32", logs: logs, sub: sub}, nil
}

// WatchLogBytes32 is a free log subscription operation binding the contract event 0xe81699b85113eea1c73e10588b2b035e55893369632173afd43feb192fac64e3.
//
// Solidity: event log_bytes32(bytes32 arg0)
func (_CoreRegistryTest *CoreRegistryTestFilterer) WatchLogBytes32(opts *bind.WatchOpts, sink chan<- *CoreRegistryTestLogBytes32) (event.Subscription, error) {

	logs, sub, err := _CoreRegistryTest.contract.WatchLogs(opts, "log_bytes32")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CoreRegistryTestLogBytes32)
				if err := _CoreRegistryTest.contract.UnpackLog(event, "log_bytes32", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogBytes32 is a log parse operation binding the contract event 0xe81699b85113eea1c73e10588b2b035e55893369632173afd43feb192fac64e3.
//
// Solidity: event log_bytes32(bytes32 arg0)
func (_CoreRegistryTest *CoreRegistryTestFilterer) ParseLogBytes32(log types.Log) (*CoreRegistryTestLogBytes32, error) {
	event := new(CoreRegistryTestLogBytes32)
	if err := _CoreRegistryTest.contract.UnpackLog(event, "log_bytes32", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CoreRegistryTestLogIntIterator is returned from FilterLogInt and is used to iterate over the raw logs and unpacked data for LogInt events raised by the CoreRegistryTest contract.
type CoreRegistryTestLogIntIterator struct {
	Event *CoreRegistryTestLogInt // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CoreRegistryTestLogIntIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CoreRegistryTestLogInt)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CoreRegistryTestLogInt)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CoreRegistryTestLogIntIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CoreRegistryTestLogIntIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CoreRegistryTestLogInt represents a LogInt event raised by the CoreRegistryTest contract.
type CoreRegistryTestLogInt struct {
	Arg0 *big.Int
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogInt is a free log retrieval operation binding the contract event 0x0eb5d52624c8d28ada9fc55a8c502ed5aa3fbe2fb6e91b71b5f376882b1d2fb8.
//
// Solidity: event log_int(int256 arg0)
func (_CoreRegistryTest *CoreRegistryTestFilterer) FilterLogInt(opts *bind.FilterOpts) (*CoreRegistryTestLogIntIterator, error) {

	logs, sub, err := _CoreRegistryTest.contract.FilterLogs(opts, "log_int")
	if err != nil {
		return nil, err
	}
	return &CoreRegistryTestLogIntIterator{contract: _CoreRegistryTest.contract, event: "log_int", logs: logs, sub: sub}, nil
}

// WatchLogInt is a free log subscription operation binding the contract event 0x0eb5d52624c8d28ada9fc55a8c502ed5aa3fbe2fb6e91b71b5f376882b1d2fb8.
//
// Solidity: event log_int(int256 arg0)
func (_CoreRegistryTest *CoreRegistryTestFilterer) WatchLogInt(opts *bind.WatchOpts, sink chan<- *CoreRegistryTestLogInt) (event.Subscription, error) {

	logs, sub, err := _CoreRegistryTest.contract.WatchLogs(opts, "log_int")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CoreRegistryTestLogInt)
				if err := _CoreRegistryTest.contract.UnpackLog(event, "log_int", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogInt is a log parse operation binding the contract event 0x0eb5d52624c8d28ada9fc55a8c502ed5aa3fbe2fb6e91b71b5f376882b1d2fb8.
//
// Solidity: event log_int(int256 arg0)
func (_CoreRegistryTest *CoreRegistryTestFilterer) ParseLogInt(log types.Log) (*CoreRegistryTestLogInt, error) {
	event := new(CoreRegistryTestLogInt)
	if err := _CoreRegistryTest.contract.UnpackLog(event, "log_int", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CoreRegistryTestLogNamedAddressIterator is returned from FilterLogNamedAddress and is used to iterate over the raw logs and unpacked data for LogNamedAddress events raised by the CoreRegistryTest contract.
type CoreRegistryTestLogNamedAddressIterator struct {
	Event *CoreRegistryTestLogNamedAddress // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CoreRegistryTestLogNamedAddressIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CoreRegistryTestLogNamedAddress)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CoreRegistryTestLogNamedAddress)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CoreRegistryTestLogNamedAddressIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CoreRegistryTestLogNamedAddressIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CoreRegistryTestLogNamedAddress represents a LogNamedAddress event raised by the CoreRegistryTest contract.
type CoreRegistryTestLogNamedAddress struct {
	Key string
	Val common.Address
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedAddress is a free log retrieval operation binding the contract event 0x9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f.
//
// Solidity: event log_named_address(string key, address val)
func (_CoreRegistryTest *CoreRegistryTestFilterer) FilterLogNamedAddress(opts *bind.FilterOpts) (*CoreRegistryTestLogNamedAddressIterator, error) {

	logs, sub, err := _CoreRegistryTest.contract.FilterLogs(opts, "log_named_address")
	if err != nil {
		return nil, err
	}
	return &CoreRegistryTestLogNamedAddressIterator{contract: _CoreRegistryTest.contract, event: "log_named_address", logs: logs, sub: sub}, nil
}

// WatchLogNamedAddress is a free log subscription operation binding the contract event 0x9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f.
//
// Solidity: event log_named_address(string key, address val)
func (_CoreRegistryTest *CoreRegistryTestFilterer) WatchLogNamedAddress(opts *bind.WatchOpts, sink chan<- *CoreRegistryTestLogNamedAddress) (event.Subscription, error) {

	logs, sub, err := _CoreRegistryTest.contract.WatchLogs(opts, "log_named_address")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CoreRegistryTestLogNamedAddress)
				if err := _CoreRegistryTest.contract.UnpackLog(event, "log_named_address", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedAddress is a log parse operation binding the contract event 0x9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f.
//
// Solidity: event log_named_address(string key, address val)
func (_CoreRegistryTest *CoreRegistryTestFilterer) ParseLogNamedAddress(log types.Log) (*CoreRegistryTestLogNamedAddress, error) {
	event := new(CoreRegistryTestLogNamedAddress)
	if err := _CoreRegistryTest.contract.UnpackLog(event, "log_named_address", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CoreRegistryTestLogNamedArrayIterator is returned from FilterLogNamedArray and is used to iterate over the raw logs and unpacked data for LogNamedArray events raised by the CoreRegistryTest contract.
type CoreRegistryTestLogNamedArrayIterator struct {
	Event *CoreRegistryTestLogNamedArray // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CoreRegistryTestLogNamedArrayIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CoreRegistryTestLogNamedArray)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CoreRegistryTestLogNamedArray)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CoreRegistryTestLogNamedArrayIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CoreRegistryTestLogNamedArrayIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CoreRegistryTestLogNamedArray represents a LogNamedArray event raised by the CoreRegistryTest contract.
type CoreRegistryTestLogNamedArray struct {
	Key string
	Val []*big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedArray is a free log retrieval operation binding the contract event 0x00aaa39c9ffb5f567a4534380c737075702e1f7f14107fc95328e3b56c0325fb.
//
// Solidity: event log_named_array(string key, uint256[] val)
func (_CoreRegistryTest *CoreRegistryTestFilterer) FilterLogNamedArray(opts *bind.FilterOpts) (*CoreRegistryTestLogNamedArrayIterator, error) {

	logs, sub, err := _CoreRegistryTest.contract.FilterLogs(opts, "log_named_array")
	if err != nil {
		return nil, err
	}
	return &CoreRegistryTestLogNamedArrayIterator{contract: _CoreRegistryTest.contract, event: "log_named_array", logs: logs, sub: sub}, nil
}

// WatchLogNamedArray is a free log subscription operation binding the contract event 0x00aaa39c9ffb5f567a4534380c737075702e1f7f14107fc95328e3b56c0325fb.
//
// Solidity: event log_named_array(string key, uint256[] val)
func (_CoreRegistryTest *CoreRegistryTestFilterer) WatchLogNamedArray(opts *bind.WatchOpts, sink chan<- *CoreRegistryTestLogNamedArray) (event.Subscription, error) {

	logs, sub, err := _CoreRegistryTest.contract.WatchLogs(opts, "log_named_array")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CoreRegistryTestLogNamedArray)
				if err := _CoreRegistryTest.contract.UnpackLog(event, "log_named_array", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedArray is a log parse operation binding the contract event 0x00aaa39c9ffb5f567a4534380c737075702e1f7f14107fc95328e3b56c0325fb.
//
// Solidity: event log_named_array(string key, uint256[] val)
func (_CoreRegistryTest *CoreRegistryTestFilterer) ParseLogNamedArray(log types.Log) (*CoreRegistryTestLogNamedArray, error) {
	event := new(CoreRegistryTestLogNamedArray)
	if err := _CoreRegistryTest.contract.UnpackLog(event, "log_named_array", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CoreRegistryTestLogNamedArray0Iterator is returned from FilterLogNamedArray0 and is used to iterate over the raw logs and unpacked data for LogNamedArray0 events raised by the CoreRegistryTest contract.
type CoreRegistryTestLogNamedArray0Iterator struct {
	Event *CoreRegistryTestLogNamedArray0 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CoreRegistryTestLogNamedArray0Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CoreRegistryTestLogNamedArray0)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CoreRegistryTestLogNamedArray0)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CoreRegistryTestLogNamedArray0Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CoreRegistryTestLogNamedArray0Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CoreRegistryTestLogNamedArray0 represents a LogNamedArray0 event raised by the CoreRegistryTest contract.
type CoreRegistryTestLogNamedArray0 struct {
	Key string
	Val []*big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedArray0 is a free log retrieval operation binding the contract event 0xa73eda09662f46dde729be4611385ff34fe6c44fbbc6f7e17b042b59a3445b57.
//
// Solidity: event log_named_array(string key, int256[] val)
func (_CoreRegistryTest *CoreRegistryTestFilterer) FilterLogNamedArray0(opts *bind.FilterOpts) (*CoreRegistryTestLogNamedArray0Iterator, error) {

	logs, sub, err := _CoreRegistryTest.contract.FilterLogs(opts, "log_named_array0")
	if err != nil {
		return nil, err
	}
	return &CoreRegistryTestLogNamedArray0Iterator{contract: _CoreRegistryTest.contract, event: "log_named_array0", logs: logs, sub: sub}, nil
}

// WatchLogNamedArray0 is a free log subscription operation binding the contract event 0xa73eda09662f46dde729be4611385ff34fe6c44fbbc6f7e17b042b59a3445b57.
//
// Solidity: event log_named_array(string key, int256[] val)
func (_CoreRegistryTest *CoreRegistryTestFilterer) WatchLogNamedArray0(opts *bind.WatchOpts, sink chan<- *CoreRegistryTestLogNamedArray0) (event.Subscription, error) {

	logs, sub, err := _CoreRegistryTest.contract.WatchLogs(opts, "log_named_array0")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CoreRegistryTestLogNamedArray0)
				if err := _CoreRegistryTest.contract.UnpackLog(event, "log_named_array0", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedArray0 is a log parse operation binding the contract event 0xa73eda09662f46dde729be4611385ff34fe6c44fbbc6f7e17b042b59a3445b57.
//
// Solidity: event log_named_array(string key, int256[] val)
func (_CoreRegistryTest *CoreRegistryTestFilterer) ParseLogNamedArray0(log types.Log) (*CoreRegistryTestLogNamedArray0, error) {
	event := new(CoreRegistryTestLogNamedArray0)
	if err := _CoreRegistryTest.contract.UnpackLog(event, "log_named_array0", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CoreRegistryTestLogNamedArray1Iterator is returned from FilterLogNamedArray1 and is used to iterate over the raw logs and unpacked data for LogNamedArray1 events raised by the CoreRegistryTest contract.
type CoreRegistryTestLogNamedArray1Iterator struct {
	Event *CoreRegistryTestLogNamedArray1 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CoreRegistryTestLogNamedArray1Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CoreRegistryTestLogNamedArray1)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CoreRegistryTestLogNamedArray1)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CoreRegistryTestLogNamedArray1Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CoreRegistryTestLogNamedArray1Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CoreRegistryTestLogNamedArray1 represents a LogNamedArray1 event raised by the CoreRegistryTest contract.
type CoreRegistryTestLogNamedArray1 struct {
	Key string
	Val []common.Address
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedArray1 is a free log retrieval operation binding the contract event 0x3bcfb2ae2e8d132dd1fce7cf278a9a19756a9fceabe470df3bdabb4bc577d1bd.
//
// Solidity: event log_named_array(string key, address[] val)
func (_CoreRegistryTest *CoreRegistryTestFilterer) FilterLogNamedArray1(opts *bind.FilterOpts) (*CoreRegistryTestLogNamedArray1Iterator, error) {

	logs, sub, err := _CoreRegistryTest.contract.FilterLogs(opts, "log_named_array1")
	if err != nil {
		return nil, err
	}
	return &CoreRegistryTestLogNamedArray1Iterator{contract: _CoreRegistryTest.contract, event: "log_named_array1", logs: logs, sub: sub}, nil
}

// WatchLogNamedArray1 is a free log subscription operation binding the contract event 0x3bcfb2ae2e8d132dd1fce7cf278a9a19756a9fceabe470df3bdabb4bc577d1bd.
//
// Solidity: event log_named_array(string key, address[] val)
func (_CoreRegistryTest *CoreRegistryTestFilterer) WatchLogNamedArray1(opts *bind.WatchOpts, sink chan<- *CoreRegistryTestLogNamedArray1) (event.Subscription, error) {

	logs, sub, err := _CoreRegistryTest.contract.WatchLogs(opts, "log_named_array1")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CoreRegistryTestLogNamedArray1)
				if err := _CoreRegistryTest.contract.UnpackLog(event, "log_named_array1", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedArray1 is a log parse operation binding the contract event 0x3bcfb2ae2e8d132dd1fce7cf278a9a19756a9fceabe470df3bdabb4bc577d1bd.
//
// Solidity: event log_named_array(string key, address[] val)
func (_CoreRegistryTest *CoreRegistryTestFilterer) ParseLogNamedArray1(log types.Log) (*CoreRegistryTestLogNamedArray1, error) {
	event := new(CoreRegistryTestLogNamedArray1)
	if err := _CoreRegistryTest.contract.UnpackLog(event, "log_named_array1", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CoreRegistryTestLogNamedBytesIterator is returned from FilterLogNamedBytes and is used to iterate over the raw logs and unpacked data for LogNamedBytes events raised by the CoreRegistryTest contract.
type CoreRegistryTestLogNamedBytesIterator struct {
	Event *CoreRegistryTestLogNamedBytes // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CoreRegistryTestLogNamedBytesIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CoreRegistryTestLogNamedBytes)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CoreRegistryTestLogNamedBytes)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CoreRegistryTestLogNamedBytesIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CoreRegistryTestLogNamedBytesIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CoreRegistryTestLogNamedBytes represents a LogNamedBytes event raised by the CoreRegistryTest contract.
type CoreRegistryTestLogNamedBytes struct {
	Key string
	Val []byte
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedBytes is a free log retrieval operation binding the contract event 0xd26e16cad4548705e4c9e2d94f98ee91c289085ee425594fd5635fa2964ccf18.
//
// Solidity: event log_named_bytes(string key, bytes val)
func (_CoreRegistryTest *CoreRegistryTestFilterer) FilterLogNamedBytes(opts *bind.FilterOpts) (*CoreRegistryTestLogNamedBytesIterator, error) {

	logs, sub, err := _CoreRegistryTest.contract.FilterLogs(opts, "log_named_bytes")
	if err != nil {
		return nil, err
	}
	return &CoreRegistryTestLogNamedBytesIterator{contract: _CoreRegistryTest.contract, event: "log_named_bytes", logs: logs, sub: sub}, nil
}

// WatchLogNamedBytes is a free log subscription operation binding the contract event 0xd26e16cad4548705e4c9e2d94f98ee91c289085ee425594fd5635fa2964ccf18.
//
// Solidity: event log_named_bytes(string key, bytes val)
func (_CoreRegistryTest *CoreRegistryTestFilterer) WatchLogNamedBytes(opts *bind.WatchOpts, sink chan<- *CoreRegistryTestLogNamedBytes) (event.Subscription, error) {

	logs, sub, err := _CoreRegistryTest.contract.WatchLogs(opts, "log_named_bytes")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CoreRegistryTestLogNamedBytes)
				if err := _CoreRegistryTest.contract.UnpackLog(event, "log_named_bytes", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedBytes is a log parse operation binding the contract event 0xd26e16cad4548705e4c9e2d94f98ee91c289085ee425594fd5635fa2964ccf18.
//
// Solidity: event log_named_bytes(string key, bytes val)
func (_CoreRegistryTest *CoreRegistryTestFilterer) ParseLogNamedBytes(log types.Log) (*CoreRegistryTestLogNamedBytes, error) {
	event := new(CoreRegistryTestLogNamedBytes)
	if err := _CoreRegistryTest.contract.UnpackLog(event, "log_named_bytes", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CoreRegistryTestLogNamedBytes32Iterator is returned from FilterLogNamedBytes32 and is used to iterate over the raw logs and unpacked data for LogNamedBytes32 events raised by the CoreRegistryTest contract.
type CoreRegistryTestLogNamedBytes32Iterator struct {
	Event *CoreRegistryTestLogNamedBytes32 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CoreRegistryTestLogNamedBytes32Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CoreRegistryTestLogNamedBytes32)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CoreRegistryTestLogNamedBytes32)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CoreRegistryTestLogNamedBytes32Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CoreRegistryTestLogNamedBytes32Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CoreRegistryTestLogNamedBytes32 represents a LogNamedBytes32 event raised by the CoreRegistryTest contract.
type CoreRegistryTestLogNamedBytes32 struct {
	Key string
	Val [32]byte
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedBytes32 is a free log retrieval operation binding the contract event 0xafb795c9c61e4fe7468c386f925d7a5429ecad9c0495ddb8d38d690614d32f99.
//
// Solidity: event log_named_bytes32(string key, bytes32 val)
func (_CoreRegistryTest *CoreRegistryTestFilterer) FilterLogNamedBytes32(opts *bind.FilterOpts) (*CoreRegistryTestLogNamedBytes32Iterator, error) {

	logs, sub, err := _CoreRegistryTest.contract.FilterLogs(opts, "log_named_bytes32")
	if err != nil {
		return nil, err
	}
	return &CoreRegistryTestLogNamedBytes32Iterator{contract: _CoreRegistryTest.contract, event: "log_named_bytes32", logs: logs, sub: sub}, nil
}

// WatchLogNamedBytes32 is a free log subscription operation binding the contract event 0xafb795c9c61e4fe7468c386f925d7a5429ecad9c0495ddb8d38d690614d32f99.
//
// Solidity: event log_named_bytes32(string key, bytes32 val)
func (_CoreRegistryTest *CoreRegistryTestFilterer) WatchLogNamedBytes32(opts *bind.WatchOpts, sink chan<- *CoreRegistryTestLogNamedBytes32) (event.Subscription, error) {

	logs, sub, err := _CoreRegistryTest.contract.WatchLogs(opts, "log_named_bytes32")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CoreRegistryTestLogNamedBytes32)
				if err := _CoreRegistryTest.contract.UnpackLog(event, "log_named_bytes32", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedBytes32 is a log parse operation binding the contract event 0xafb795c9c61e4fe7468c386f925d7a5429ecad9c0495ddb8d38d690614d32f99.
//
// Solidity: event log_named_bytes32(string key, bytes32 val)
func (_CoreRegistryTest *CoreRegistryTestFilterer) ParseLogNamedBytes32(log types.Log) (*CoreRegistryTestLogNamedBytes32, error) {
	event := new(CoreRegistryTestLogNamedBytes32)
	if err := _CoreRegistryTest.contract.UnpackLog(event, "log_named_bytes32", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CoreRegistryTestLogNamedDecimalIntIterator is returned from FilterLogNamedDecimalInt and is used to iterate over the raw logs and unpacked data for LogNamedDecimalInt events raised by the CoreRegistryTest contract.
type CoreRegistryTestLogNamedDecimalIntIterator struct {
	Event *CoreRegistryTestLogNamedDecimalInt // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CoreRegistryTestLogNamedDecimalIntIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CoreRegistryTestLogNamedDecimalInt)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CoreRegistryTestLogNamedDecimalInt)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CoreRegistryTestLogNamedDecimalIntIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CoreRegistryTestLogNamedDecimalIntIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CoreRegistryTestLogNamedDecimalInt represents a LogNamedDecimalInt event raised by the CoreRegistryTest contract.
type CoreRegistryTestLogNamedDecimalInt struct {
	Key      string
	Val      *big.Int
	Decimals *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterLogNamedDecimalInt is a free log retrieval operation binding the contract event 0x5da6ce9d51151ba10c09a559ef24d520b9dac5c5b8810ae8434e4d0d86411a95.
//
// Solidity: event log_named_decimal_int(string key, int256 val, uint256 decimals)
func (_CoreRegistryTest *CoreRegistryTestFilterer) FilterLogNamedDecimalInt(opts *bind.FilterOpts) (*CoreRegistryTestLogNamedDecimalIntIterator, error) {

	logs, sub, err := _CoreRegistryTest.contract.FilterLogs(opts, "log_named_decimal_int")
	if err != nil {
		return nil, err
	}
	return &CoreRegistryTestLogNamedDecimalIntIterator{contract: _CoreRegistryTest.contract, event: "log_named_decimal_int", logs: logs, sub: sub}, nil
}

// WatchLogNamedDecimalInt is a free log subscription operation binding the contract event 0x5da6ce9d51151ba10c09a559ef24d520b9dac5c5b8810ae8434e4d0d86411a95.
//
// Solidity: event log_named_decimal_int(string key, int256 val, uint256 decimals)
func (_CoreRegistryTest *CoreRegistryTestFilterer) WatchLogNamedDecimalInt(opts *bind.WatchOpts, sink chan<- *CoreRegistryTestLogNamedDecimalInt) (event.Subscription, error) {

	logs, sub, err := _CoreRegistryTest.contract.WatchLogs(opts, "log_named_decimal_int")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CoreRegistryTestLogNamedDecimalInt)
				if err := _CoreRegistryTest.contract.UnpackLog(event, "log_named_decimal_int", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedDecimalInt is a log parse operation binding the contract event 0x5da6ce9d51151ba10c09a559ef24d520b9dac5c5b8810ae8434e4d0d86411a95.
//
// Solidity: event log_named_decimal_int(string key, int256 val, uint256 decimals)
func (_CoreRegistryTest *CoreRegistryTestFilterer) ParseLogNamedDecimalInt(log types.Log) (*CoreRegistryTestLogNamedDecimalInt, error) {
	event := new(CoreRegistryTestLogNamedDecimalInt)
	if err := _CoreRegistryTest.contract.UnpackLog(event, "log_named_decimal_int", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CoreRegistryTestLogNamedDecimalUintIterator is returned from FilterLogNamedDecimalUint and is used to iterate over the raw logs and unpacked data for LogNamedDecimalUint events raised by the CoreRegistryTest contract.
type CoreRegistryTestLogNamedDecimalUintIterator struct {
	Event *CoreRegistryTestLogNamedDecimalUint // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CoreRegistryTestLogNamedDecimalUintIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CoreRegistryTestLogNamedDecimalUint)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CoreRegistryTestLogNamedDecimalUint)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CoreRegistryTestLogNamedDecimalUintIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CoreRegistryTestLogNamedDecimalUintIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CoreRegistryTestLogNamedDecimalUint represents a LogNamedDecimalUint event raised by the CoreRegistryTest contract.
type CoreRegistryTestLogNamedDecimalUint struct {
	Key      string
	Val      *big.Int
	Decimals *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterLogNamedDecimalUint is a free log retrieval operation binding the contract event 0xeb8ba43ced7537421946bd43e828b8b2b8428927aa8f801c13d934bf11aca57b.
//
// Solidity: event log_named_decimal_uint(string key, uint256 val, uint256 decimals)
func (_CoreRegistryTest *CoreRegistryTestFilterer) FilterLogNamedDecimalUint(opts *bind.FilterOpts) (*CoreRegistryTestLogNamedDecimalUintIterator, error) {

	logs, sub, err := _CoreRegistryTest.contract.FilterLogs(opts, "log_named_decimal_uint")
	if err != nil {
		return nil, err
	}
	return &CoreRegistryTestLogNamedDecimalUintIterator{contract: _CoreRegistryTest.contract, event: "log_named_decimal_uint", logs: logs, sub: sub}, nil
}

// WatchLogNamedDecimalUint is a free log subscription operation binding the contract event 0xeb8ba43ced7537421946bd43e828b8b2b8428927aa8f801c13d934bf11aca57b.
//
// Solidity: event log_named_decimal_uint(string key, uint256 val, uint256 decimals)
func (_CoreRegistryTest *CoreRegistryTestFilterer) WatchLogNamedDecimalUint(opts *bind.WatchOpts, sink chan<- *CoreRegistryTestLogNamedDecimalUint) (event.Subscription, error) {

	logs, sub, err := _CoreRegistryTest.contract.WatchLogs(opts, "log_named_decimal_uint")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CoreRegistryTestLogNamedDecimalUint)
				if err := _CoreRegistryTest.contract.UnpackLog(event, "log_named_decimal_uint", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedDecimalUint is a log parse operation binding the contract event 0xeb8ba43ced7537421946bd43e828b8b2b8428927aa8f801c13d934bf11aca57b.
//
// Solidity: event log_named_decimal_uint(string key, uint256 val, uint256 decimals)
func (_CoreRegistryTest *CoreRegistryTestFilterer) ParseLogNamedDecimalUint(log types.Log) (*CoreRegistryTestLogNamedDecimalUint, error) {
	event := new(CoreRegistryTestLogNamedDecimalUint)
	if err := _CoreRegistryTest.contract.UnpackLog(event, "log_named_decimal_uint", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CoreRegistryTestLogNamedIntIterator is returned from FilterLogNamedInt and is used to iterate over the raw logs and unpacked data for LogNamedInt events raised by the CoreRegistryTest contract.
type CoreRegistryTestLogNamedIntIterator struct {
	Event *CoreRegistryTestLogNamedInt // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CoreRegistryTestLogNamedIntIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CoreRegistryTestLogNamedInt)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CoreRegistryTestLogNamedInt)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CoreRegistryTestLogNamedIntIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CoreRegistryTestLogNamedIntIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CoreRegistryTestLogNamedInt represents a LogNamedInt event raised by the CoreRegistryTest contract.
type CoreRegistryTestLogNamedInt struct {
	Key string
	Val *big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedInt is a free log retrieval operation binding the contract event 0x2fe632779174374378442a8e978bccfbdcc1d6b2b0d81f7e8eb776ab2286f168.
//
// Solidity: event log_named_int(string key, int256 val)
func (_CoreRegistryTest *CoreRegistryTestFilterer) FilterLogNamedInt(opts *bind.FilterOpts) (*CoreRegistryTestLogNamedIntIterator, error) {

	logs, sub, err := _CoreRegistryTest.contract.FilterLogs(opts, "log_named_int")
	if err != nil {
		return nil, err
	}
	return &CoreRegistryTestLogNamedIntIterator{contract: _CoreRegistryTest.contract, event: "log_named_int", logs: logs, sub: sub}, nil
}

// WatchLogNamedInt is a free log subscription operation binding the contract event 0x2fe632779174374378442a8e978bccfbdcc1d6b2b0d81f7e8eb776ab2286f168.
//
// Solidity: event log_named_int(string key, int256 val)
func (_CoreRegistryTest *CoreRegistryTestFilterer) WatchLogNamedInt(opts *bind.WatchOpts, sink chan<- *CoreRegistryTestLogNamedInt) (event.Subscription, error) {

	logs, sub, err := _CoreRegistryTest.contract.WatchLogs(opts, "log_named_int")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CoreRegistryTestLogNamedInt)
				if err := _CoreRegistryTest.contract.UnpackLog(event, "log_named_int", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedInt is a log parse operation binding the contract event 0x2fe632779174374378442a8e978bccfbdcc1d6b2b0d81f7e8eb776ab2286f168.
//
// Solidity: event log_named_int(string key, int256 val)
func (_CoreRegistryTest *CoreRegistryTestFilterer) ParseLogNamedInt(log types.Log) (*CoreRegistryTestLogNamedInt, error) {
	event := new(CoreRegistryTestLogNamedInt)
	if err := _CoreRegistryTest.contract.UnpackLog(event, "log_named_int", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CoreRegistryTestLogNamedStringIterator is returned from FilterLogNamedString and is used to iterate over the raw logs and unpacked data for LogNamedString events raised by the CoreRegistryTest contract.
type CoreRegistryTestLogNamedStringIterator struct {
	Event *CoreRegistryTestLogNamedString // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CoreRegistryTestLogNamedStringIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CoreRegistryTestLogNamedString)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CoreRegistryTestLogNamedString)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CoreRegistryTestLogNamedStringIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CoreRegistryTestLogNamedStringIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CoreRegistryTestLogNamedString represents a LogNamedString event raised by the CoreRegistryTest contract.
type CoreRegistryTestLogNamedString struct {
	Key string
	Val string
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedString is a free log retrieval operation binding the contract event 0x280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf3583.
//
// Solidity: event log_named_string(string key, string val)
func (_CoreRegistryTest *CoreRegistryTestFilterer) FilterLogNamedString(opts *bind.FilterOpts) (*CoreRegistryTestLogNamedStringIterator, error) {

	logs, sub, err := _CoreRegistryTest.contract.FilterLogs(opts, "log_named_string")
	if err != nil {
		return nil, err
	}
	return &CoreRegistryTestLogNamedStringIterator{contract: _CoreRegistryTest.contract, event: "log_named_string", logs: logs, sub: sub}, nil
}

// WatchLogNamedString is a free log subscription operation binding the contract event 0x280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf3583.
//
// Solidity: event log_named_string(string key, string val)
func (_CoreRegistryTest *CoreRegistryTestFilterer) WatchLogNamedString(opts *bind.WatchOpts, sink chan<- *CoreRegistryTestLogNamedString) (event.Subscription, error) {

	logs, sub, err := _CoreRegistryTest.contract.WatchLogs(opts, "log_named_string")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CoreRegistryTestLogNamedString)
				if err := _CoreRegistryTest.contract.UnpackLog(event, "log_named_string", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedString is a log parse operation binding the contract event 0x280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf3583.
//
// Solidity: event log_named_string(string key, string val)
func (_CoreRegistryTest *CoreRegistryTestFilterer) ParseLogNamedString(log types.Log) (*CoreRegistryTestLogNamedString, error) {
	event := new(CoreRegistryTestLogNamedString)
	if err := _CoreRegistryTest.contract.UnpackLog(event, "log_named_string", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CoreRegistryTestLogNamedUintIterator is returned from FilterLogNamedUint and is used to iterate over the raw logs and unpacked data for LogNamedUint events raised by the CoreRegistryTest contract.
type CoreRegistryTestLogNamedUintIterator struct {
	Event *CoreRegistryTestLogNamedUint // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CoreRegistryTestLogNamedUintIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CoreRegistryTestLogNamedUint)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CoreRegistryTestLogNamedUint)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CoreRegistryTestLogNamedUintIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CoreRegistryTestLogNamedUintIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CoreRegistryTestLogNamedUint represents a LogNamedUint event raised by the CoreRegistryTest contract.
type CoreRegistryTestLogNamedUint struct {
	Key string
	Val *big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedUint is a free log retrieval operation binding the contract event 0xb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a8.
//
// Solidity: event log_named_uint(string key, uint256 val)
func (_CoreRegistryTest *CoreRegistryTestFilterer) FilterLogNamedUint(opts *bind.FilterOpts) (*CoreRegistryTestLogNamedUintIterator, error) {

	logs, sub, err := _CoreRegistryTest.contract.FilterLogs(opts, "log_named_uint")
	if err != nil {
		return nil, err
	}
	return &CoreRegistryTestLogNamedUintIterator{contract: _CoreRegistryTest.contract, event: "log_named_uint", logs: logs, sub: sub}, nil
}

// WatchLogNamedUint is a free log subscription operation binding the contract event 0xb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a8.
//
// Solidity: event log_named_uint(string key, uint256 val)
func (_CoreRegistryTest *CoreRegistryTestFilterer) WatchLogNamedUint(opts *bind.WatchOpts, sink chan<- *CoreRegistryTestLogNamedUint) (event.Subscription, error) {

	logs, sub, err := _CoreRegistryTest.contract.WatchLogs(opts, "log_named_uint")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CoreRegistryTestLogNamedUint)
				if err := _CoreRegistryTest.contract.UnpackLog(event, "log_named_uint", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedUint is a log parse operation binding the contract event 0xb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a8.
//
// Solidity: event log_named_uint(string key, uint256 val)
func (_CoreRegistryTest *CoreRegistryTestFilterer) ParseLogNamedUint(log types.Log) (*CoreRegistryTestLogNamedUint, error) {
	event := new(CoreRegistryTestLogNamedUint)
	if err := _CoreRegistryTest.contract.UnpackLog(event, "log_named_uint", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CoreRegistryTestLogStringIterator is returned from FilterLogString and is used to iterate over the raw logs and unpacked data for LogString events raised by the CoreRegistryTest contract.
type CoreRegistryTestLogStringIterator struct {
	Event *CoreRegistryTestLogString // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CoreRegistryTestLogStringIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CoreRegistryTestLogString)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CoreRegistryTestLogString)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CoreRegistryTestLogStringIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CoreRegistryTestLogStringIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CoreRegistryTestLogString represents a LogString event raised by the CoreRegistryTest contract.
type CoreRegistryTestLogString struct {
	Arg0 string
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogString is a free log retrieval operation binding the contract event 0x0b2e13ff20ac7b474198655583edf70dedd2c1dc980e329c4fbb2fc0748b796b.
//
// Solidity: event log_string(string arg0)
func (_CoreRegistryTest *CoreRegistryTestFilterer) FilterLogString(opts *bind.FilterOpts) (*CoreRegistryTestLogStringIterator, error) {

	logs, sub, err := _CoreRegistryTest.contract.FilterLogs(opts, "log_string")
	if err != nil {
		return nil, err
	}
	return &CoreRegistryTestLogStringIterator{contract: _CoreRegistryTest.contract, event: "log_string", logs: logs, sub: sub}, nil
}

// WatchLogString is a free log subscription operation binding the contract event 0x0b2e13ff20ac7b474198655583edf70dedd2c1dc980e329c4fbb2fc0748b796b.
//
// Solidity: event log_string(string arg0)
func (_CoreRegistryTest *CoreRegistryTestFilterer) WatchLogString(opts *bind.WatchOpts, sink chan<- *CoreRegistryTestLogString) (event.Subscription, error) {

	logs, sub, err := _CoreRegistryTest.contract.WatchLogs(opts, "log_string")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CoreRegistryTestLogString)
				if err := _CoreRegistryTest.contract.UnpackLog(event, "log_string", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogString is a log parse operation binding the contract event 0x0b2e13ff20ac7b474198655583edf70dedd2c1dc980e329c4fbb2fc0748b796b.
//
// Solidity: event log_string(string arg0)
func (_CoreRegistryTest *CoreRegistryTestFilterer) ParseLogString(log types.Log) (*CoreRegistryTestLogString, error) {
	event := new(CoreRegistryTestLogString)
	if err := _CoreRegistryTest.contract.UnpackLog(event, "log_string", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CoreRegistryTestLogUintIterator is returned from FilterLogUint and is used to iterate over the raw logs and unpacked data for LogUint events raised by the CoreRegistryTest contract.
type CoreRegistryTestLogUintIterator struct {
	Event *CoreRegistryTestLogUint // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CoreRegistryTestLogUintIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CoreRegistryTestLogUint)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CoreRegistryTestLogUint)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CoreRegistryTestLogUintIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CoreRegistryTestLogUintIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CoreRegistryTestLogUint represents a LogUint event raised by the CoreRegistryTest contract.
type CoreRegistryTestLogUint struct {
	Arg0 *big.Int
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogUint is a free log retrieval operation binding the contract event 0x2cab9790510fd8bdfbd2115288db33fec66691d476efc5427cfd4c0969301755.
//
// Solidity: event log_uint(uint256 arg0)
func (_CoreRegistryTest *CoreRegistryTestFilterer) FilterLogUint(opts *bind.FilterOpts) (*CoreRegistryTestLogUintIterator, error) {

	logs, sub, err := _CoreRegistryTest.contract.FilterLogs(opts, "log_uint")
	if err != nil {
		return nil, err
	}
	return &CoreRegistryTestLogUintIterator{contract: _CoreRegistryTest.contract, event: "log_uint", logs: logs, sub: sub}, nil
}

// WatchLogUint is a free log subscription operation binding the contract event 0x2cab9790510fd8bdfbd2115288db33fec66691d476efc5427cfd4c0969301755.
//
// Solidity: event log_uint(uint256 arg0)
func (_CoreRegistryTest *CoreRegistryTestFilterer) WatchLogUint(opts *bind.WatchOpts, sink chan<- *CoreRegistryTestLogUint) (event.Subscription, error) {

	logs, sub, err := _CoreRegistryTest.contract.WatchLogs(opts, "log_uint")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CoreRegistryTestLogUint)
				if err := _CoreRegistryTest.contract.UnpackLog(event, "log_uint", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogUint is a log parse operation binding the contract event 0x2cab9790510fd8bdfbd2115288db33fec66691d476efc5427cfd4c0969301755.
//
// Solidity: event log_uint(uint256 arg0)
func (_CoreRegistryTest *CoreRegistryTestFilterer) ParseLogUint(log types.Log) (*CoreRegistryTestLogUint, error) {
	event := new(CoreRegistryTestLogUint)
	if err := _CoreRegistryTest.contract.UnpackLog(event, "log_uint", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CoreRegistryTestLogsIterator is returned from FilterLogs and is used to iterate over the raw logs and unpacked data for Logs events raised by the CoreRegistryTest contract.
type CoreRegistryTestLogsIterator struct {
	Event *CoreRegistryTestLogs // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CoreRegistryTestLogsIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CoreRegistryTestLogs)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CoreRegistryTestLogs)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CoreRegistryTestLogsIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CoreRegistryTestLogsIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CoreRegistryTestLogs represents a Logs event raised by the CoreRegistryTest contract.
type CoreRegistryTestLogs struct {
	Arg0 []byte
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogs is a free log retrieval operation binding the contract event 0xe7950ede0394b9f2ce4a5a1bf5a7e1852411f7e6661b4308c913c4bfd11027e4.
//
// Solidity: event logs(bytes arg0)
func (_CoreRegistryTest *CoreRegistryTestFilterer) FilterLogs(opts *bind.FilterOpts) (*CoreRegistryTestLogsIterator, error) {

	logs, sub, err := _CoreRegistryTest.contract.FilterLogs(opts, "logs")
	if err != nil {
		return nil, err
	}
	return &CoreRegistryTestLogsIterator{contract: _CoreRegistryTest.contract, event: "logs", logs: logs, sub: sub}, nil
}

// WatchLogs is a free log subscription operation binding the contract event 0xe7950ede0394b9f2ce4a5a1bf5a7e1852411f7e6661b4308c913c4bfd11027e4.
//
// Solidity: event logs(bytes arg0)
func (_CoreRegistryTest *CoreRegistryTestFilterer) WatchLogs(opts *bind.WatchOpts, sink chan<- *CoreRegistryTestLogs) (event.Subscription, error) {

	logs, sub, err := _CoreRegistryTest.contract.WatchLogs(opts, "logs")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CoreRegistryTestLogs)
				if err := _CoreRegistryTest.contract.UnpackLog(event, "logs", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogs is a log parse operation binding the contract event 0xe7950ede0394b9f2ce4a5a1bf5a7e1852411f7e6661b4308c913c4bfd11027e4.
//
// Solidity: event logs(bytes arg0)
func (_CoreRegistryTest *CoreRegistryTestFilterer) ParseLogs(log types.Log) (*CoreRegistryTestLogs, error) {
	event := new(CoreRegistryTestLogs)
	if err := _CoreRegistryTest.contract.UnpackLog(event, "logs", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
