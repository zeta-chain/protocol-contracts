// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package coreregistry

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// CoreRegistryMetaData contains all meta data concerning the CoreRegistry contract.
var CoreRegistryMetaData = &bind.MetaData{
	ABI: "[{\"type\":\"constructor\",\"inputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"CROSS_CHAIN_GAS_LIMIT\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"DEFAULT_ADMIN_ROLE\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"PAUSER_ROLE\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"REGISTRY_MANAGER_ROLE\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"UPGRADE_INTERFACE_VERSION\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\",\"internalType\":\"string\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"_activeChains\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"changeChainStatus\",\"inputs\":[{\"name\":\"chainId\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"gasZRC20\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"registry\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"activation\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"gatewayZEVM\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractIGatewayZEVM\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getActiveChains\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\",\"internalType\":\"uint256[]\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getChainMetadata\",\"inputs\":[{\"name\":\"chainId\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"key\",\"type\":\"string\",\"internalType\":\"string\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getContractConfiguration\",\"inputs\":[{\"name\":\"chainId\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"contractType\",\"type\":\"string\",\"internalType\":\"string\"},{\"name\":\"key\",\"type\":\"string\",\"internalType\":\"string\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getContractInfo\",\"inputs\":[{\"name\":\"chainId\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"contractType\",\"type\":\"string\",\"internalType\":\"string\"}],\"outputs\":[{\"name\":\"active\",\"type\":\"bool\",\"internalType\":\"bool\"},{\"name\":\"address_\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getRoleAdmin\",\"inputs\":[{\"name\":\"role\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getZRC20AddressByForeignAsset\",\"inputs\":[{\"name\":\"originChainId\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"originAddress\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getZRC20TokenInfo\",\"inputs\":[{\"name\":\"address_\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"active\",\"type\":\"bool\",\"internalType\":\"bool\"},{\"name\":\"symbol\",\"type\":\"string\",\"internalType\":\"string\"},{\"name\":\"originChainId\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"originAddress\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"coinType\",\"type\":\"string\",\"internalType\":\"string\"},{\"name\":\"decimals\",\"type\":\"uint8\",\"internalType\":\"uint8\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"grantRole\",\"inputs\":[{\"name\":\"role\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"hasRole\",\"inputs\":[{\"name\":\"role\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"initialize\",\"inputs\":[{\"name\":\"admin_\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"registryManager_\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"gatewayZEVM_\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"pause\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"paused\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"proxiableUUID\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"registerContract\",\"inputs\":[{\"name\":\"chainId\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"address_\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"contractType\",\"type\":\"string\",\"internalType\":\"string\"},{\"name\":\"addressBytes\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"registerZRC20Token\",\"inputs\":[{\"name\":\"address_\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"symbol\",\"type\":\"string\",\"internalType\":\"string\"},{\"name\":\"originChainId\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"originAddress\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"coinType\",\"type\":\"string\",\"internalType\":\"string\"},{\"name\":\"decimals\",\"type\":\"uint8\",\"internalType\":\"uint8\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"renounceRole\",\"inputs\":[{\"name\":\"role\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"callerConfirmation\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"revokeRole\",\"inputs\":[{\"name\":\"role\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setContractActive\",\"inputs\":[{\"name\":\"chainId\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"contractType\",\"type\":\"string\",\"internalType\":\"string\"},{\"name\":\"active\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"supportsInterface\",\"inputs\":[{\"name\":\"interfaceId\",\"type\":\"bytes4\",\"internalType\":\"bytes4\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"unpause\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"updateChainMetadata\",\"inputs\":[{\"name\":\"chainId\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"key\",\"type\":\"string\",\"internalType\":\"string\"},{\"name\":\"value\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"updateContractConfiguration\",\"inputs\":[{\"name\":\"chainId\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"contractType\",\"type\":\"string\",\"internalType\":\"string\"},{\"name\":\"key\",\"type\":\"string\",\"internalType\":\"string\"},{\"name\":\"value\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"updateZRC20Token\",\"inputs\":[{\"name\":\"address_\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"active\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"upgradeToAndCall\",\"inputs\":[{\"name\":\"newImplementation\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"data\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[],\"stateMutability\":\"payable\"},{\"type\":\"event\",\"name\":\"ChainStatusChanged\",\"inputs\":[{\"name\":\"chainId\",\"type\":\"uint256\",\"indexed\":true,\"internalType\":\"uint256\"},{\"name\":\"oldStatus\",\"type\":\"bool\",\"indexed\":false,\"internalType\":\"bool\"},{\"name\":\"newStatus\",\"type\":\"bool\",\"indexed\":false,\"internalType\":\"bool\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"ContractRegistered\",\"inputs\":[{\"name\":\"chainId\",\"type\":\"uint256\",\"indexed\":true,\"internalType\":\"uint256\"},{\"name\":\"contractType\",\"type\":\"string\",\"indexed\":true,\"internalType\":\"string\"},{\"name\":\"addressBytes\",\"type\":\"bytes\",\"indexed\":false,\"internalType\":\"bytes\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"ContractStatusChanged\",\"inputs\":[{\"name\":\"addressBytes\",\"type\":\"bytes\",\"indexed\":false,\"internalType\":\"bytes\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Initialized\",\"inputs\":[{\"name\":\"version\",\"type\":\"uint64\",\"indexed\":false,\"internalType\":\"uint64\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"NewChainMetadata\",\"inputs\":[{\"name\":\"chainId\",\"type\":\"uint256\",\"indexed\":true,\"internalType\":\"uint256\"},{\"name\":\"key\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"value\",\"type\":\"bytes\",\"indexed\":false,\"internalType\":\"bytes\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"NewContractConfiguration\",\"inputs\":[{\"name\":\"chainId\",\"type\":\"uint256\",\"indexed\":true,\"internalType\":\"uint256\"},{\"name\":\"contractType\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"key\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"value\",\"type\":\"bytes\",\"indexed\":false,\"internalType\":\"bytes\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Paused\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"RoleAdminChanged\",\"inputs\":[{\"name\":\"role\",\"type\":\"bytes32\",\"indexed\":true,\"internalType\":\"bytes32\"},{\"name\":\"previousAdminRole\",\"type\":\"bytes32\",\"indexed\":true,\"internalType\":\"bytes32\"},{\"name\":\"newAdminRole\",\"type\":\"bytes32\",\"indexed\":true,\"internalType\":\"bytes32\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"RoleGranted\",\"inputs\":[{\"name\":\"role\",\"type\":\"bytes32\",\"indexed\":true,\"internalType\":\"bytes32\"},{\"name\":\"account\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"sender\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"RoleRevoked\",\"inputs\":[{\"name\":\"role\",\"type\":\"bytes32\",\"indexed\":true,\"internalType\":\"bytes32\"},{\"name\":\"account\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"sender\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Unpaused\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Upgraded\",\"inputs\":[{\"name\":\"implementation\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"ZRC20TokenRegistered\",\"inputs\":[{\"name\":\"originAddress\",\"type\":\"bytes\",\"indexed\":true,\"internalType\":\"bytes\"},{\"name\":\"address_\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"decimals\",\"type\":\"uint8\",\"indexed\":false,\"internalType\":\"uint8\"},{\"name\":\"originChainId\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"},{\"name\":\"symbol\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"ZRC20TokenUpdated\",\"inputs\":[{\"name\":\"address_\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"},{\"name\":\"active\",\"type\":\"bool\",\"indexed\":false,\"internalType\":\"bool\"}],\"anonymous\":false},{\"type\":\"error\",\"name\":\"AccessControlBadConfirmation\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"AccessControlUnauthorizedAccount\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"neededRole\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}]},{\"type\":\"error\",\"name\":\"AddressEmptyCode\",\"inputs\":[{\"name\":\"target\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"ChainActive\",\"inputs\":[{\"name\":\"chainId\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"type\":\"error\",\"name\":\"ChainNonActive\",\"inputs\":[{\"name\":\"chainId\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"type\":\"error\",\"name\":\"ContractAlreadyRegistered\",\"inputs\":[{\"name\":\"chainId\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"contractType\",\"type\":\"string\",\"internalType\":\"string\"},{\"name\":\"addressBytes\",\"type\":\"bytes\",\"internalType\":\"bytes\"}]},{\"type\":\"error\",\"name\":\"ContractNotFound\",\"inputs\":[{\"name\":\"chainId\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"contractType\",\"type\":\"string\",\"internalType\":\"string\"}]},{\"type\":\"error\",\"name\":\"ERC1967InvalidImplementation\",\"inputs\":[{\"name\":\"implementation\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"ERC1967NonPayable\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"EnforcedPause\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"ExpectedPause\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"FailedInnerCall\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidContractType\",\"inputs\":[{\"name\":\"message\",\"type\":\"string\",\"internalType\":\"string\"}]},{\"type\":\"error\",\"name\":\"InvalidInitialization\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"NotInitializing\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"UUPSUnauthorizedCallContext\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"UUPSUnsupportedProxiableUUID\",\"inputs\":[{\"name\":\"slot\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}]},{\"type\":\"error\",\"name\":\"ZRC20AlreadyRegistered\",\"inputs\":[{\"name\":\"address_\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"ZRC20SymbolAlreadyInUse\",\"inputs\":[{\"name\":\"symbol\",\"type\":\"string\",\"internalType\":\"string\"}]},{\"type\":\"error\",\"name\":\"ZeroAddress\",\"inputs\":[]}]",
	Bin: "0x60a06040523060805234801561001457600080fd5b5061001d610022565b6100d4565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000900460ff16156100725760405163f92ee8a960e01b815260040160405180910390fd5b80546001600160401b03908116146100d15780546001600160401b0319166001600160401b0390811782556040519081527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50565b608051613fe96100fd600039600081816124a6015281816124cf01526126820152613fe96000f3fe6080604052600436106101e35760003560e01c806394cc868311610102578063c0b0387111610095578063d547741f11610064578063d547741f14610659578063e63ab1e914610679578063e9d6c5ba146106ad578063f354b31f146106df57600080fd5b8063c0b03871146105d9578063c0c53b8b146105f9578063cc5ad8b614610619578063d3523ea21461063957600080fd5b8063aa808c06116100d1578063aa808c0614610504578063ad3cb1cc1461053c578063b8aa5c7d14610585578063bd8fde1c146105a557600080fd5b806394cc868314610496578063a217fddf146104b8578063a3ebd14c146104cd578063a8f2cb96146104e457600080fd5b80634f1ef2861161017a5780636e9e2d3f116101495780636e9e2d3f146103cf5780637066b18d146103ef5780638456cb591461041c57806391d148541461043157600080fd5b80634f1ef2861461033157806352d1902d146103445780635c975abb146103595780635cf92c9f1461039057600080fd5b80632f2ff15d116101b65780632f2ff15d146102bc5780633584767a146102dc57806336568abe146102fc5780633f4ba83a1461031c57600080fd5b806301ffc9a7146101e857806310d29b9e1461021d5780632259e9e51461023f578063248a9ca31461025f575b600080fd5b3480156101f457600080fd5b506102086102033660046130c9565b6106ff565b60405190151581526020015b60405180910390f35b34801561022957600080fd5b5061023d610238366004613162565b610798565b005b34801561024b57600080fd5b5061023d61025a3660046131c1565b610995565b34801561026b57600080fd5b506102ae61027a366004613240565b60009081527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800602052604090206001015490565b604051908152602001610214565b3480156102c857600080fd5b5061023d6102d736600461326e565b610aa9565b3480156102e857600080fd5b506102ae6102f7366004613240565b610af3565b34801561030857600080fd5b5061023d61031736600461326e565b610b14565b34801561032857600080fd5b5061023d610b65565b61023d61033f3660046132cd565b610b9a565b34801561035057600080fd5b506102ae610bb9565b34801561036557600080fd5b507fcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f033005460ff16610208565b34801561039c57600080fd5b506103b06103ab36600461339a565b610be8565b6040805192151583526001600160a01b03909116602083015201610214565b3480156103db57600080fd5b5061023d6103ea3660046133e6565b610c6d565b3480156103fb57600080fd5b5061040f61040a36600461339a565b611074565b6040516102149190613511565b34801561042857600080fd5b5061023d61113d565b34801561043d57600080fd5b5061020861044c36600461326e565b60009182527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800602090815260408084206001600160a01b0393909316845291905290205460ff1690565b3480156104a257600080fd5b506104ab61116f565b6040516102149190613524565b3480156104c457600080fd5b506102ae600081565b3480156104d957600080fd5b506102ae620493e081565b3480156104f057600080fd5b5061023d6104ff366004613567565b6111c7565b34801561051057600080fd5b5061052461051f36600461339a565b6113de565b6040516001600160a01b039091168152602001610214565b34801561054857600080fd5b5061040f6040518060400160405280600581526020017f352e302e3000000000000000000000000000000000000000000000000000000081525081565b34801561059157600080fd5b5061023d6105a03660046135db565b61141e565b3480156105b157600080fd5b506102ae7ff7a450ef335e1892cb42c8ca72e7242359d7711924b75db5717410da3f614aa381565b3480156105e557600080fd5b5061023d6105f436600461366c565b611719565b34801561060557600080fd5b5061023d61061436600461369a565b611886565b34801561062557600080fd5b50600054610524906001600160a01b031681565b34801561064557600080fd5b5061040f6106543660046131c1565b611bdf565b34801561066557600080fd5b5061023d61067436600461326e565b611cc7565b34801561068557600080fd5b506102ae7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b3480156106b957600080fd5b506106cd6106c83660046136e5565b611d0b565b60405161021496959493929190613702565b3480156106eb57600080fd5b5061023d6106fa366004613760565b611f5d565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b00000000000000000000000000000000000000000000000000000000148061079257507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b7ff7a450ef335e1892cb42c8ca72e7242359d7711924b75db5717410da3f614aa36107c281612143565b6107ca61214d565b60008581526002602052604090205460ff1661081a576040517f8e6feba5000000000000000000000000000000000000000000000000000000008152600481018690526024015b60405180910390fd5b60008390036108585783836040517ec10cfd00000000000000000000000000000000000000000000000000000000815260040161081192919061383b565b6000858152600360205260409081902090516108779086908690613857565b9081526020016040518091039020600101805461089390613867565b90506000036108d4578484846040517f2b4f9c86000000000000000000000000000000000000000000000000000000008152600401610811939291906138ba565b816003600087815260200190815260200160002085856040516108f8929190613857565b908152604051908190036020019020805491151560ff19909216919091179055610924858585856121ab565b7f6db122b2555e642c944e09ae6d733a3f7600404765f612912f72b3c921c0b88c600360008781526020019081526020016000208585604051610968929190613857565b90815260200160405180910390206001016040516109869190613957565b60405180910390a15050505050565b7ff7a450ef335e1892cb42c8ca72e7242359d7711924b75db5717410da3f614aa36109bf81612143565b6109c761214d565b60008681526002602052604090205460ff16610a12576040517f8e6feba500000000000000000000000000000000000000000000000000000000815260048101879052602401610811565b8282600260008981526020019081526020016000206004018787604051610a3a929190613857565b90815260200160405180910390209182610a559291906139b1565b50610a63868686868661222e565b857fa274ec62326b7df2ece1add0babcb0f90b87b6d4a7e144f8d0b9b9057c039dc186868686604051610a999493929190613aad565b60405180910390a2505050505050565b60008281527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b6268006020526040902060010154610ae381612143565b610aed83836122b4565b50505050565b60018181548110610b0357600080fd5b600091825260209091200154905081565b6001600160a01b0381163314610b56576040517f6697b23200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610b608282612383565b505050565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a610b8f81612143565b610b97612429565b50565b610ba261249b565b610bab8261256b565b610bb58282612576565b5050565b6000610bc3612677565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b6000838152600360205260408082209051829190610c099086908690613857565b908152604080519182900360209081018320546000898152600390925291902060ff909116935090610c3e9086908690613857565b908152602001604051809103902060000160019054906101000a90046001600160a01b03169050935093915050565b7ff7a450ef335e1892cb42c8ca72e7242359d7711924b75db5717410da3f614aa3610c9781612143565b610c9f61214d565b6001600160a01b038a16610cdf576040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000889003610d49576040517ec10cfd00000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f53796d626f6c2063616e6e6f7420626520656d707479000000000000000000006044820152606401610811565b6000859003610db3576040517ec10cfd00000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f4f726967696e20616464726573732063616e6e6f7420626520656d70747900006044820152606401610811565b6001600160a01b038a811660009081526004602052604090205461010090041615610e15576040517f63f4ee1f0000000000000000000000000000000000000000000000000000000081526001600160a01b038b166004820152602401610811565b60006001600160a01b031660058a8a604051610e32929190613857565b908152604051908190036020019020546001600160a01b031614610e865788886040517fb295cac900000000000000000000000000000000000000000000000000000000815260040161081192919061383b565b6001600160a01b038a166000818152600460205260409020805460017fffffffffffffffffffffff000000000000000000000000000000000000000000909116610100909302929092178217815501610ee08688836139b1565b506001600160a01b038a16600090815260046020526040902060028101889055600301610f0e898b836139b1565b506001600160a01b038a16600090815260046020819052604090912060058101805460ff191660ff861617905501610f478486836139b1565b5089600660008981526020019081526020016000208787604051610f6c929190613857565b908152602001604051809103902060006101000a8154816001600160a01b0302191690836001600160a01b031602179055508960058a8a604051610fb1929190613857565b90815260405190819003602001902080546001600160a01b03929092167fffffffffffffffffffffffff00000000000000000000000000000000000000009092169190911790556110098a8a8a8a8a8a8a8a8a6126d9565b896001600160a01b03168686604051611023929190613857565b60405180910390207fa9edd2fd29fc8cab6015c2725afa5bc5f3b8d709a02d9e89990ef20fd781e367848a8d8d6040516110609493929190613adf565b60405180910390a350505050505050505050565b606060026000858152602001908152602001600020600401838360405161109c929190613857565b908152602001604051809103902080546110b590613867565b80601f01602080910402602001604051908101604052809291908181526020018280546110e190613867565b801561112e5780601f106111035761010080835404028352916020019161112e565b820191906000526020600020905b81548152906001019060200180831161111157829003601f168201915b505050505090505b9392505050565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a61116781612143565b610b9761276b565b606060018054806020026020016040519081016040528092919081815260200182805480156111bd57602002820191906000526020600020905b8154815260200190600101908083116111a9575b5050505050905090565b7ff7a450ef335e1892cb42c8ca72e7242359d7711924b75db5717410da3f614aa36111f181612143565b6111f961214d565b82158061120d57506001600160a01b038516155b15611244576040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008681526002602052604090205460ff16801561125f5750815b15611299576040517fa1452cb000000000000000000000000000000000000000000000000000000000815260048101879052602401610811565b60008681526002602052604090205460ff161580156112b6575081155b156112f0576040517f8e6feba500000000000000000000000000000000000000000000000000000000815260048101879052602401610811565b6000868152600260208190526040909120805460ff191684151517815590810180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03881617905560030161134f8486836139b1565b50811561138f576001805480820182556000919091527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf601869055611398565b611398866127c6565b6113a58686868686612873565b60408051831580825215602082015287917f8ec58cc2d2754b6fd6c4941a30811cb0dbcdad24de12c2aae8a1e9e48e1d04e79101610a99565b60008381526006602052604080822090516113fc9085908590613857565b908152604051908190036020019020546001600160a01b031690509392505050565b7ff7a450ef335e1892cb42c8ca72e7242359d7711924b75db5717410da3f614aa361144881612143565b61145061214d565b60008781526002602052604090205460ff1661149b576040517f8e6feba500000000000000000000000000000000000000000000000000000000815260048101889052602401610811565b60008490036114d95784846040517ec10cfd00000000000000000000000000000000000000000000000000000000815260040161081192919061383b565b6000829003611514576040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008781526003602052604080822090516115329088908890613857565b9081526020016040518091039020600101805461154e90613867565b905011156115925786858585856040517f2b192eab000000000000000000000000000000000000000000000000000000008152600401610811959493929190613b0c565b60016003600089815260200190815260200160002086866040516115b7929190613857565b9081526040805160209281900383018120805460ff19169415159490941790935560008a81526003909252902087916115f39088908890613857565b908152602001604051809103902060000160016101000a8154816001600160a01b0302191690836001600160a01b031602179055508282600360008a8152602001908152602001600020878760405161164d929190613857565b9081526020016040518091039020600101918261166b9291906139b1565b508484600360008a81526020019081526020016000208787604051611691929190613857565b908152602001604051809103902060020191826116af9291906139b1565b506116be8787878787876128f1565b84846040516116ce929190613857565b6040518091039020877f20319e67335097991b9d6add94a71632118372c1a0b5650654f069668dce2581858560405161170892919061383b565b60405180910390a350505050505050565b7ff7a450ef335e1892cb42c8ca72e7242359d7711924b75db5717410da3f614aa361174381612143565b61174b61214d565b6001600160a01b03831661178b576040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b03838116600090815260046020526040902054610100900416611810576040517ec10cfd00000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5a52433230206e6f7420726567697374657265640000000000000000000000006044820152606401610811565b6001600160a01b0383166000908152600460205260409020805460ff191683151517905561183e838361297a565b604080516001600160a01b038516815283151560208201527f9542d02d4224477c9e9b53628bf5eae8b59520ea6bf2809cec7f24f76bba8ff8910160405180910390a1505050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000810460ff16159067ffffffffffffffff166000811580156118d15750825b905060008267ffffffffffffffff1660011480156118ee5750303b155b9050811580156118fc575080155b15611933576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b84547fffffffffffffffffffffffffffffffffffffffffffffffff000000000000000016600117855583156119945784547fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffff16680100000000000000001785555b6001600160a01b03881615806119b157506001600160a01b038716155b806119c357506001600160a01b038616155b156119fa576040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611a026129fd565b611a0a6129fd565b611a12612a05565b611a1d6000896122b4565b50611a487ff7a450ef335e1892cb42c8ca72e7242359d7711924b75db5717410da3f614aa3886122b4565b50611a737f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a886122b4565b50611a9e7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a896122b4565b50600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03881617815546808252600260208181526040808520805460ff1916600117815581517fffffffffffffffffffffffffffffffffffffffff0000000000000000000000003060601b1681850152825180820360140181526034909101909252939094525260030190611b3e9082613b45565b50600180548082018255600091909152467fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6909101558315611bd55784547fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffff168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b5050505050505050565b6060600360008781526020019081526020016000208585604051611c04929190613857565b90815260200160405180910390206003018383604051611c25929190613857565b90815260200160405180910390208054611c3e90613867565b80601f0160208091040260200160405190810160405280929190818152602001828054611c6a90613867565b8015611cb75780601f10611c8c57610100808354040283529160200191611cb7565b820191906000526020600020905b815481529060010190602001808311611c9a57829003601f168201915b5050505050905095945050505050565b60008281527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b6268006020526040902060010154611d0181612143565b610aed8383612383565b6001600160a01b038082166000908152600460209081526040808320815160e081018352815460ff81161515825261010090049095169285019290925260018201805493946060948694869485948794859490939284019190611d6d90613867565b80601f0160208091040260200160405190810160405280929190818152602001828054611d9990613867565b8015611de65780601f10611dbb57610100808354040283529160200191611de6565b820191906000526020600020905b815481529060010190602001808311611dc957829003601f168201915b5050505050815260200160028201548152602001600382018054611e0990613867565b80601f0160208091040260200160405190810160405280929190818152602001828054611e3590613867565b8015611e825780601f10611e5757610100808354040283529160200191611e82565b820191906000526020600020905b815481529060010190602001808311611e6557829003601f168201915b50505050508152602001600482018054611e9b90613867565b80601f0160208091040260200160405190810160405280929190818152602001828054611ec790613867565b8015611f145780601f10611ee957610100808354040283529160200191611f14565b820191906000526020600020905b815481529060010190602001808311611ef757829003601f168201915b50505091835250506005919091015460ff16602090910152805160808201516060830151604084015160a085015160c090950151939d929c50909a509850919650945092505050565b7ff7a450ef335e1892cb42c8ca72e7242359d7711924b75db5717410da3f614aa3611f8781612143565b611f8f61214d565b60008881526002602052604090205460ff16611fda576040517f8e6feba500000000000000000000000000000000000000000000000000000000815260048101899052602401610811565b60008690036120185786866040517ec10cfd00000000000000000000000000000000000000000000000000000000815260040161081192919061383b565b6000888152600360205260409081902090516120379089908990613857565b9081526040519081900360200190205460ff16612086578787876040517f2b4f9c86000000000000000000000000000000000000000000000000000000008152600401610811939291906138ba565b8282600360008b815260200190815260200160002089896040516120ab929190613857565b908152602001604051809103902060030187876040516120cc929190613857565b908152602001604051809103902091826120e79291906139b1565b506120f788888888888888612a38565b877f9453d408be9167c029f60b137dddf03dd0d2ff9f51d834c1b2238f335bd96f9b88888888888860405161213196959493929190613c40565b60405180910390a25050505050505050565b610b978133612aba565b7fcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f033005460ff16156121a9576040517fd93c066500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b6000848484846040516024016121c49493929190613c89565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f10d29b9e00000000000000000000000000000000000000000000000000000000179052905061222781612b47565b5050505050565b60008585858585604051602401612249959493929190613b0c565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f2259e9e50000000000000000000000000000000000000000000000000000000017905290506122ac81612b47565b505050505050565b60008281527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800602081815260408084206001600160a01b038616855290915282205460ff16612379576000848152602082815260408083206001600160a01b03871684529091529020805460ff1916600117905561232f3390565b6001600160a01b0316836001600160a01b0316857f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a46001915050610792565b6000915050610792565b60008281527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800602081815260408084206001600160a01b038616855290915282205460ff1615612379576000848152602082815260408083206001600160a01b0387168085529252808320805460ff1916905551339287917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a46001915050610792565b612431612ba7565b7fcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300805460ff191681557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a150565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148061253457507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166125287f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b031614155b156121a9576040517fe07c8dba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610bb581612143565b816001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156125d0575060408051601f3d908101601f191682019092526125cd91810190613cb6565b60015b612611576040517f4c9c8ce30000000000000000000000000000000000000000000000000000000081526001600160a01b0383166004820152602401610811565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc811461266d576040517faa1d49a400000000000000000000000000000000000000000000000000000000815260048101829052602401610811565b610b608383612c02565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146121a9576040517fe07c8dba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008989898989898989896040516024016126fc99989796959493929190613ccf565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f6e9e2d3f00000000000000000000000000000000000000000000000000000000179052905061275f81612b47565b50505050505050505050565b61277361214d565b7fcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300805460ff191660011781557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2583361247d565b60005b600154811015610bb55781600182815481106127e7576127e7613d3a565b90600052602060002001540361286b5760018054612806908290613d69565b8154811061281657612816613d3a565b90600052602060002001546001828154811061283457612834613d3a565b600091825260209091200155600180548061285157612851613da3565b600190038181906000526020600020016000905590555050565b6001016127c9565b6000858585858560405160240161288e959493929190613dd2565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa8f2cb960000000000000000000000000000000000000000000000000000000017905290506122ac81612b47565b600086868686868660405160240161290e96959493929190613e0f565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fb8aa5c7d00000000000000000000000000000000000000000000000000000000179052905061297181612b47565b50505050505050565b6040516001600160a01b0383166024820152811515604482015260009060640160408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fc0b03871000000000000000000000000000000000000000000000000000000001790529050610b6081612b47565b6121a9612c58565b612a0d612c58565b7fcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300805460ff19169055565b600087878787878787604051602401612a579796959493929190613e4b565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167ff354b31f000000000000000000000000000000000000000000000000000000001790529050611bd581612b47565b60008281527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800602090815260408083206001600160a01b038516845290915290205460ff16610bb5576040517fe2517d3f0000000000000000000000000000000000000000000000000000000081526001600160a01b038216600482015260248101839052604401610811565b60005b600154811015610bb5574660018281548110612b6857612b68613d3a565b906000526020600020015414612b9f57612b9f60018281548110612b8e57612b8e613d3a565b906000526020600020015483612cbf565b600101612b4a565b7fcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f033005460ff166121a9576040517f8dfc202b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b612c0b82612ebc565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a2805115612c5057610b608282612f64565b610bb5612fda565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a005468010000000000000000900460ff166121a9576040517fd7e6bcf800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b604080518082018252620493e081526001602080830191909152825160a081018452600080825291810182905292830181905260608084015260808301529060008481526002602081905260408083209091015490517ffc5fecd5000000000000000000000000000000000000000000000000000000008152620493e060048201526001600160a01b039091169190829063fc5fecd5906024016040805180830381865afa158015612d75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d999190613e9b565b6000546040517f095ea7b30000000000000000000000000000000000000000000000000000000081526001600160a01b039182166004820152602481018390529193508416915063095ea7b3906044016020604051808303816000875af1158015612e08573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e2c9190613ec9565b5060008054878252600260205260409182902091517f06cb89830000000000000000000000000000000000000000000000000000000081526001600160a01b03909116916306cb898391612e8e916003019086908a908a908a90600401613ee6565b600060405180830381600087803b158015612ea857600080fd5b505af115801561275f573d6000803e3d6000fd5b806001600160a01b03163b600003612f0b576040517f4c9c8ce30000000000000000000000000000000000000000000000000000000081526001600160a01b0382166004820152602401610811565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b6060600080846001600160a01b031684604051612f819190613f97565b600060405180830381855af49150503d8060008114612fbc576040519150601f19603f3d011682016040523d82523d6000602084013e612fc1565b606091505b5091509150612fd1858383613012565b95945050505050565b34156121a9576040517fb398979f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6060826130275761302282613087565b611136565b815115801561303e57506001600160a01b0384163b155b15613080576040517f9996b3150000000000000000000000000000000000000000000000000000000081526001600160a01b0385166004820152602401610811565b5080611136565b8051156130975780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000602082840312156130db57600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461113657600080fd5b60008083601f84011261311d57600080fd5b50813567ffffffffffffffff81111561313557600080fd5b60208301915083602082850101111561314d57600080fd5b9250929050565b8015158114610b9757600080fd5b6000806000806060858703121561317857600080fd5b84359350602085013567ffffffffffffffff81111561319657600080fd5b6131a28782880161310b565b90945092505060408501356131b681613154565b939692955090935050565b6000806000806000606086880312156131d957600080fd5b85359450602086013567ffffffffffffffff8111156131f757600080fd5b6132038882890161310b565b909550935050604086013567ffffffffffffffff81111561322357600080fd5b61322f8882890161310b565b969995985093965092949392505050565b60006020828403121561325257600080fd5b5035919050565b6001600160a01b0381168114610b9757600080fd5b6000806040838503121561328157600080fd5b82359150602083013561329381613259565b809150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080604083850312156132e057600080fd5b82356132eb81613259565b9150602083013567ffffffffffffffff81111561330757600080fd5b8301601f8101851361331857600080fd5b803567ffffffffffffffff8111156133325761333261329e565b604051601f19603f601f19601f8501160116810181811067ffffffffffffffff821117156133625761336261329e565b60405281815282820160200187101561337a57600080fd5b816020840160208301376000602083830101528093505050509250929050565b6000806000604084860312156133af57600080fd5b83359250602084013567ffffffffffffffff8111156133cd57600080fd5b6133d98682870161310b565b9497909650939450505050565b600080600080600080600080600060c08a8c03121561340457600080fd5b893561340f81613259565b985060208a013567ffffffffffffffff81111561342b57600080fd5b6134378c828d0161310b565b90995097505060408a0135955060608a013567ffffffffffffffff81111561345e57600080fd5b61346a8c828d0161310b565b90965094505060808a013567ffffffffffffffff81111561348a57600080fd5b6134968c828d0161310b565b90945092505060a08a013560ff811681146134b057600080fd5b809150509295985092959850929598565b60005b838110156134dc5781810151838201526020016134c4565b50506000910152565b600081518084526134fd8160208601602086016134c1565b601f01601f19169290920160200192915050565b60208152600061113660208301846134e5565b602080825282518282018190526000918401906040840190835b8181101561355c57835183526020938401939092019160010161353e565b509095945050505050565b60008060008060006080868803121561357f57600080fd5b85359450602086013561359181613259565b9350604086013567ffffffffffffffff8111156135ad57600080fd5b6135b98882890161310b565b90945092505060608601356135cd81613154565b809150509295509295909350565b600080600080600080608087890312156135f457600080fd5b86359550602087013561360681613259565b9450604087013567ffffffffffffffff81111561362257600080fd5b61362e89828a0161310b565b909550935050606087013567ffffffffffffffff81111561364e57600080fd5b61365a89828a0161310b565b979a9699509497509295939492505050565b6000806040838503121561367f57600080fd5b823561368a81613259565b9150602083013561329381613154565b6000806000606084860312156136af57600080fd5b83356136ba81613259565b925060208401356136ca81613259565b915060408401356136da81613259565b809150509250925092565b6000602082840312156136f757600080fd5b813561113681613259565b861515815260c06020820152600061371d60c08301886134e5565b866040840152828103606084015261373581876134e5565b9050828103608084015261374981866134e5565b91505060ff831660a0830152979650505050505050565b60008060008060008060006080888a03121561377b57600080fd5b87359650602088013567ffffffffffffffff81111561379957600080fd5b6137a58a828b0161310b565b909750955050604088013567ffffffffffffffff8111156137c557600080fd5b6137d18a828b0161310b565b909550935050606088013567ffffffffffffffff8111156137f157600080fd5b6137fd8a828b0161310b565b989b979a50959850939692959293505050565b818352818160208501375060006020828401015260006020601f19601f840116840101905092915050565b60208152600061384f602083018486613810565b949350505050565b8183823760009101908152919050565b600181811c9082168061387b57607f821691505b6020821081036138b4577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b838152604060208201526000612fd1604083018486613810565b600081546138e181613867565b8085526001821680156138fb57600181146139175761394e565b60ff1983166020870152602082151560051b870101935061394e565b84600052602060002060005b838110156139455781546020828a010152600182019150602081019050613923565b87016020019450505b50505092915050565b60208152600061113660208301846138d4565b601f821115610b6057806000526020600020601f840160051c810160208510156139915750805b601f840160051c820191505b81811015612227576000815560010161399d565b67ffffffffffffffff8311156139c9576139c961329e565b6139dd836139d78354613867565b8361396a565b6000601f841160018114613a2f57600085156139f95750838201355b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600387901b1c1916600186901b178355612227565b600083815260209020601f19861690835b82811015613a605786850135825560209485019460019092019101613a40565b5086821015613a9b577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88860031b161c19848701351681555b505060018560011b0183555050505050565b604081526000613ac1604083018688613810565b8281036020840152613ad4818587613810565b979650505050505050565b60ff85168152836020820152606060408201526000613b02606083018486613810565b9695505050505050565b858152606060208201526000613b26606083018688613810565b8281036040840152613b39818587613810565b98975050505050505050565b815167ffffffffffffffff811115613b5f57613b5f61329e565b613b7381613b6d8454613867565b8461396a565b6020601f821160018114613bc55760008315613b8f5750848201515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600385901b1c1916600184901b178455612227565b600084815260208120601f198516915b82811015613bf55787850151825560209485019460019092019101613bd5565b5084821015613c3157868401517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600387901b60f8161c191681555b50505050600190811b01905550565b606081526000613c5460608301888a613810565b8281036020840152613c67818789613810565b90508281036040840152613c7c818587613810565b9998505050505050505050565b848152606060208201526000613ca3606083018587613810565b9050821515604083015295945050505050565b600060208284031215613cc857600080fd5b5051919050565b6001600160a01b038a16815260c060208201526000613cf260c083018a8c613810565b8860408401528281036060840152613d0b81888a613810565b90508281036080840152613d20818688613810565b91505060ff831660a08301529a9950505050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b81810381811115610792577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b8581526001600160a01b0385166020820152608060408201526000613dfb608083018587613810565b905082151560608301529695505050505050565b8681526001600160a01b0386166020820152608060408201526000613e38608083018688613810565b8281036060840152613c7c818587613810565b878152608060208201526000613e6560808301888a613810565b8281036040840152613e78818789613810565b90508281036060840152613e8d818587613810565b9a9950505050505050505050565b60008060408385031215613eae57600080fd5b8251613eb981613259565b6020939093015192949293505050565b600060208284031215613edb57600080fd5b815161113681613154565b60c081526000613ef960c08301886138d4565b6001600160a01b03871660208401528281036040840152613f1a81876134e5565b90508451606084015260208501511515608084015282810360a08401526001600160a01b0384511681526020840151151560208201526001600160a01b036040850151166040820152606084015160a06060830152613f7c60a08301826134e5565b90506080850151608083015280925050509695505050505050565b60008251613fa98184602087016134c1565b919091019291505056fea264697066735822122059cc7acf362719c06bf994d9e1be29debb49213a0c0b8f4c6d4300a640270cb664736f6c634300081a0033",
}

// CoreRegistryABI is the input ABI used to generate the binding from.
// Deprecated: Use CoreRegistryMetaData.ABI instead.
var CoreRegistryABI = CoreRegistryMetaData.ABI

// CoreRegistryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use CoreRegistryMetaData.Bin instead.
var CoreRegistryBin = CoreRegistryMetaData.Bin

// DeployCoreRegistry deploys a new Ethereum contract, binding an instance of CoreRegistry to it.
func DeployCoreRegistry(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *CoreRegistry, error) {
	parsed, err := CoreRegistryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(CoreRegistryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &CoreRegistry{CoreRegistryCaller: CoreRegistryCaller{contract: contract}, CoreRegistryTransactor: CoreRegistryTransactor{contract: contract}, CoreRegistryFilterer: CoreRegistryFilterer{contract: contract}}, nil
}

// CoreRegistry is an auto generated Go binding around an Ethereum contract.
type CoreRegistry struct {
	CoreRegistryCaller     // Read-only binding to the contract
	CoreRegistryTransactor // Write-only binding to the contract
	CoreRegistryFilterer   // Log filterer for contract events
}

// CoreRegistryCaller is an auto generated read-only Go binding around an Ethereum contract.
type CoreRegistryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CoreRegistryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type CoreRegistryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CoreRegistryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type CoreRegistryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CoreRegistrySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type CoreRegistrySession struct {
	Contract     *CoreRegistry     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// CoreRegistryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type CoreRegistryCallerSession struct {
	Contract *CoreRegistryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// CoreRegistryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type CoreRegistryTransactorSession struct {
	Contract     *CoreRegistryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// CoreRegistryRaw is an auto generated low-level Go binding around an Ethereum contract.
type CoreRegistryRaw struct {
	Contract *CoreRegistry // Generic contract binding to access the raw methods on
}

// CoreRegistryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type CoreRegistryCallerRaw struct {
	Contract *CoreRegistryCaller // Generic read-only contract binding to access the raw methods on
}

// CoreRegistryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type CoreRegistryTransactorRaw struct {
	Contract *CoreRegistryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewCoreRegistry creates a new instance of CoreRegistry, bound to a specific deployed contract.
func NewCoreRegistry(address common.Address, backend bind.ContractBackend) (*CoreRegistry, error) {
	contract, err := bindCoreRegistry(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &CoreRegistry{CoreRegistryCaller: CoreRegistryCaller{contract: contract}, CoreRegistryTransactor: CoreRegistryTransactor{contract: contract}, CoreRegistryFilterer: CoreRegistryFilterer{contract: contract}}, nil
}

// NewCoreRegistryCaller creates a new read-only instance of CoreRegistry, bound to a specific deployed contract.
func NewCoreRegistryCaller(address common.Address, caller bind.ContractCaller) (*CoreRegistryCaller, error) {
	contract, err := bindCoreRegistry(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &CoreRegistryCaller{contract: contract}, nil
}

// NewCoreRegistryTransactor creates a new write-only instance of CoreRegistry, bound to a specific deployed contract.
func NewCoreRegistryTransactor(address common.Address, transactor bind.ContractTransactor) (*CoreRegistryTransactor, error) {
	contract, err := bindCoreRegistry(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &CoreRegistryTransactor{contract: contract}, nil
}

// NewCoreRegistryFilterer creates a new log filterer instance of CoreRegistry, bound to a specific deployed contract.
func NewCoreRegistryFilterer(address common.Address, filterer bind.ContractFilterer) (*CoreRegistryFilterer, error) {
	contract, err := bindCoreRegistry(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &CoreRegistryFilterer{contract: contract}, nil
}

// bindCoreRegistry binds a generic wrapper to an already deployed contract.
func bindCoreRegistry(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := CoreRegistryMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_CoreRegistry *CoreRegistryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CoreRegistry.Contract.CoreRegistryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_CoreRegistry *CoreRegistryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CoreRegistry.Contract.CoreRegistryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_CoreRegistry *CoreRegistryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CoreRegistry.Contract.CoreRegistryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_CoreRegistry *CoreRegistryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CoreRegistry.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_CoreRegistry *CoreRegistryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CoreRegistry.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_CoreRegistry *CoreRegistryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CoreRegistry.Contract.contract.Transact(opts, method, params...)
}

// CROSSCHAINGASLIMIT is a free data retrieval call binding the contract method 0xa3ebd14c.
//
// Solidity: function CROSS_CHAIN_GAS_LIMIT() view returns(uint256)
func (_CoreRegistry *CoreRegistryCaller) CROSSCHAINGASLIMIT(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _CoreRegistry.contract.Call(opts, &out, "CROSS_CHAIN_GAS_LIMIT")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CROSSCHAINGASLIMIT is a free data retrieval call binding the contract method 0xa3ebd14c.
//
// Solidity: function CROSS_CHAIN_GAS_LIMIT() view returns(uint256)
func (_CoreRegistry *CoreRegistrySession) CROSSCHAINGASLIMIT() (*big.Int, error) {
	return _CoreRegistry.Contract.CROSSCHAINGASLIMIT(&_CoreRegistry.CallOpts)
}

// CROSSCHAINGASLIMIT is a free data retrieval call binding the contract method 0xa3ebd14c.
//
// Solidity: function CROSS_CHAIN_GAS_LIMIT() view returns(uint256)
func (_CoreRegistry *CoreRegistryCallerSession) CROSSCHAINGASLIMIT() (*big.Int, error) {
	return _CoreRegistry.Contract.CROSSCHAINGASLIMIT(&_CoreRegistry.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_CoreRegistry *CoreRegistryCaller) DEFAULTADMINROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _CoreRegistry.contract.Call(opts, &out, "DEFAULT_ADMIN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_CoreRegistry *CoreRegistrySession) DEFAULTADMINROLE() ([32]byte, error) {
	return _CoreRegistry.Contract.DEFAULTADMINROLE(&_CoreRegistry.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_CoreRegistry *CoreRegistryCallerSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _CoreRegistry.Contract.DEFAULTADMINROLE(&_CoreRegistry.CallOpts)
}

// PAUSERROLE is a free data retrieval call binding the contract method 0xe63ab1e9.
//
// Solidity: function PAUSER_ROLE() view returns(bytes32)
func (_CoreRegistry *CoreRegistryCaller) PAUSERROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _CoreRegistry.contract.Call(opts, &out, "PAUSER_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// PAUSERROLE is a free data retrieval call binding the contract method 0xe63ab1e9.
//
// Solidity: function PAUSER_ROLE() view returns(bytes32)
func (_CoreRegistry *CoreRegistrySession) PAUSERROLE() ([32]byte, error) {
	return _CoreRegistry.Contract.PAUSERROLE(&_CoreRegistry.CallOpts)
}

// PAUSERROLE is a free data retrieval call binding the contract method 0xe63ab1e9.
//
// Solidity: function PAUSER_ROLE() view returns(bytes32)
func (_CoreRegistry *CoreRegistryCallerSession) PAUSERROLE() ([32]byte, error) {
	return _CoreRegistry.Contract.PAUSERROLE(&_CoreRegistry.CallOpts)
}

// REGISTRYMANAGERROLE is a free data retrieval call binding the contract method 0xbd8fde1c.
//
// Solidity: function REGISTRY_MANAGER_ROLE() view returns(bytes32)
func (_CoreRegistry *CoreRegistryCaller) REGISTRYMANAGERROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _CoreRegistry.contract.Call(opts, &out, "REGISTRY_MANAGER_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// REGISTRYMANAGERROLE is a free data retrieval call binding the contract method 0xbd8fde1c.
//
// Solidity: function REGISTRY_MANAGER_ROLE() view returns(bytes32)
func (_CoreRegistry *CoreRegistrySession) REGISTRYMANAGERROLE() ([32]byte, error) {
	return _CoreRegistry.Contract.REGISTRYMANAGERROLE(&_CoreRegistry.CallOpts)
}

// REGISTRYMANAGERROLE is a free data retrieval call binding the contract method 0xbd8fde1c.
//
// Solidity: function REGISTRY_MANAGER_ROLE() view returns(bytes32)
func (_CoreRegistry *CoreRegistryCallerSession) REGISTRYMANAGERROLE() ([32]byte, error) {
	return _CoreRegistry.Contract.REGISTRYMANAGERROLE(&_CoreRegistry.CallOpts)
}

// UPGRADEINTERFACEVERSION is a free data retrieval call binding the contract method 0xad3cb1cc.
//
// Solidity: function UPGRADE_INTERFACE_VERSION() view returns(string)
func (_CoreRegistry *CoreRegistryCaller) UPGRADEINTERFACEVERSION(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _CoreRegistry.contract.Call(opts, &out, "UPGRADE_INTERFACE_VERSION")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// UPGRADEINTERFACEVERSION is a free data retrieval call binding the contract method 0xad3cb1cc.
//
// Solidity: function UPGRADE_INTERFACE_VERSION() view returns(string)
func (_CoreRegistry *CoreRegistrySession) UPGRADEINTERFACEVERSION() (string, error) {
	return _CoreRegistry.Contract.UPGRADEINTERFACEVERSION(&_CoreRegistry.CallOpts)
}

// UPGRADEINTERFACEVERSION is a free data retrieval call binding the contract method 0xad3cb1cc.
//
// Solidity: function UPGRADE_INTERFACE_VERSION() view returns(string)
func (_CoreRegistry *CoreRegistryCallerSession) UPGRADEINTERFACEVERSION() (string, error) {
	return _CoreRegistry.Contract.UPGRADEINTERFACEVERSION(&_CoreRegistry.CallOpts)
}

// ActiveChains is a free data retrieval call binding the contract method 0x3584767a.
//
// Solidity: function _activeChains(uint256 ) view returns(uint256)
func (_CoreRegistry *CoreRegistryCaller) ActiveChains(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _CoreRegistry.contract.Call(opts, &out, "_activeChains", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ActiveChains is a free data retrieval call binding the contract method 0x3584767a.
//
// Solidity: function _activeChains(uint256 ) view returns(uint256)
func (_CoreRegistry *CoreRegistrySession) ActiveChains(arg0 *big.Int) (*big.Int, error) {
	return _CoreRegistry.Contract.ActiveChains(&_CoreRegistry.CallOpts, arg0)
}

// ActiveChains is a free data retrieval call binding the contract method 0x3584767a.
//
// Solidity: function _activeChains(uint256 ) view returns(uint256)
func (_CoreRegistry *CoreRegistryCallerSession) ActiveChains(arg0 *big.Int) (*big.Int, error) {
	return _CoreRegistry.Contract.ActiveChains(&_CoreRegistry.CallOpts, arg0)
}

// GatewayZEVM is a free data retrieval call binding the contract method 0xcc5ad8b6.
//
// Solidity: function gatewayZEVM() view returns(address)
func (_CoreRegistry *CoreRegistryCaller) GatewayZEVM(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _CoreRegistry.contract.Call(opts, &out, "gatewayZEVM")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GatewayZEVM is a free data retrieval call binding the contract method 0xcc5ad8b6.
//
// Solidity: function gatewayZEVM() view returns(address)
func (_CoreRegistry *CoreRegistrySession) GatewayZEVM() (common.Address, error) {
	return _CoreRegistry.Contract.GatewayZEVM(&_CoreRegistry.CallOpts)
}

// GatewayZEVM is a free data retrieval call binding the contract method 0xcc5ad8b6.
//
// Solidity: function gatewayZEVM() view returns(address)
func (_CoreRegistry *CoreRegistryCallerSession) GatewayZEVM() (common.Address, error) {
	return _CoreRegistry.Contract.GatewayZEVM(&_CoreRegistry.CallOpts)
}

// GetActiveChains is a free data retrieval call binding the contract method 0x94cc8683.
//
// Solidity: function getActiveChains() view returns(uint256[])
func (_CoreRegistry *CoreRegistryCaller) GetActiveChains(opts *bind.CallOpts) ([]*big.Int, error) {
	var out []interface{}
	err := _CoreRegistry.contract.Call(opts, &out, "getActiveChains")

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// GetActiveChains is a free data retrieval call binding the contract method 0x94cc8683.
//
// Solidity: function getActiveChains() view returns(uint256[])
func (_CoreRegistry *CoreRegistrySession) GetActiveChains() ([]*big.Int, error) {
	return _CoreRegistry.Contract.GetActiveChains(&_CoreRegistry.CallOpts)
}

// GetActiveChains is a free data retrieval call binding the contract method 0x94cc8683.
//
// Solidity: function getActiveChains() view returns(uint256[])
func (_CoreRegistry *CoreRegistryCallerSession) GetActiveChains() ([]*big.Int, error) {
	return _CoreRegistry.Contract.GetActiveChains(&_CoreRegistry.CallOpts)
}

// GetChainMetadata is a free data retrieval call binding the contract method 0x7066b18d.
//
// Solidity: function getChainMetadata(uint256 chainId, string key) view returns(bytes)
func (_CoreRegistry *CoreRegistryCaller) GetChainMetadata(opts *bind.CallOpts, chainId *big.Int, key string) ([]byte, error) {
	var out []interface{}
	err := _CoreRegistry.contract.Call(opts, &out, "getChainMetadata", chainId, key)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// GetChainMetadata is a free data retrieval call binding the contract method 0x7066b18d.
//
// Solidity: function getChainMetadata(uint256 chainId, string key) view returns(bytes)
func (_CoreRegistry *CoreRegistrySession) GetChainMetadata(chainId *big.Int, key string) ([]byte, error) {
	return _CoreRegistry.Contract.GetChainMetadata(&_CoreRegistry.CallOpts, chainId, key)
}

// GetChainMetadata is a free data retrieval call binding the contract method 0x7066b18d.
//
// Solidity: function getChainMetadata(uint256 chainId, string key) view returns(bytes)
func (_CoreRegistry *CoreRegistryCallerSession) GetChainMetadata(chainId *big.Int, key string) ([]byte, error) {
	return _CoreRegistry.Contract.GetChainMetadata(&_CoreRegistry.CallOpts, chainId, key)
}

// GetContractConfiguration is a free data retrieval call binding the contract method 0xd3523ea2.
//
// Solidity: function getContractConfiguration(uint256 chainId, string contractType, string key) view returns(bytes)
func (_CoreRegistry *CoreRegistryCaller) GetContractConfiguration(opts *bind.CallOpts, chainId *big.Int, contractType string, key string) ([]byte, error) {
	var out []interface{}
	err := _CoreRegistry.contract.Call(opts, &out, "getContractConfiguration", chainId, contractType, key)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// GetContractConfiguration is a free data retrieval call binding the contract method 0xd3523ea2.
//
// Solidity: function getContractConfiguration(uint256 chainId, string contractType, string key) view returns(bytes)
func (_CoreRegistry *CoreRegistrySession) GetContractConfiguration(chainId *big.Int, contractType string, key string) ([]byte, error) {
	return _CoreRegistry.Contract.GetContractConfiguration(&_CoreRegistry.CallOpts, chainId, contractType, key)
}

// GetContractConfiguration is a free data retrieval call binding the contract method 0xd3523ea2.
//
// Solidity: function getContractConfiguration(uint256 chainId, string contractType, string key) view returns(bytes)
func (_CoreRegistry *CoreRegistryCallerSession) GetContractConfiguration(chainId *big.Int, contractType string, key string) ([]byte, error) {
	return _CoreRegistry.Contract.GetContractConfiguration(&_CoreRegistry.CallOpts, chainId, contractType, key)
}

// GetContractInfo is a free data retrieval call binding the contract method 0x5cf92c9f.
//
// Solidity: function getContractInfo(uint256 chainId, string contractType) view returns(bool active, address address_)
func (_CoreRegistry *CoreRegistryCaller) GetContractInfo(opts *bind.CallOpts, chainId *big.Int, contractType string) (struct {
	Active  bool
	Address common.Address
}, error) {
	var out []interface{}
	err := _CoreRegistry.contract.Call(opts, &out, "getContractInfo", chainId, contractType)

	outstruct := new(struct {
		Active  bool
		Address common.Address
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Active = *abi.ConvertType(out[0], new(bool)).(*bool)
	outstruct.Address = *abi.ConvertType(out[1], new(common.Address)).(*common.Address)

	return *outstruct, err

}

// GetContractInfo is a free data retrieval call binding the contract method 0x5cf92c9f.
//
// Solidity: function getContractInfo(uint256 chainId, string contractType) view returns(bool active, address address_)
func (_CoreRegistry *CoreRegistrySession) GetContractInfo(chainId *big.Int, contractType string) (struct {
	Active  bool
	Address common.Address
}, error) {
	return _CoreRegistry.Contract.GetContractInfo(&_CoreRegistry.CallOpts, chainId, contractType)
}

// GetContractInfo is a free data retrieval call binding the contract method 0x5cf92c9f.
//
// Solidity: function getContractInfo(uint256 chainId, string contractType) view returns(bool active, address address_)
func (_CoreRegistry *CoreRegistryCallerSession) GetContractInfo(chainId *big.Int, contractType string) (struct {
	Active  bool
	Address common.Address
}, error) {
	return _CoreRegistry.Contract.GetContractInfo(&_CoreRegistry.CallOpts, chainId, contractType)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_CoreRegistry *CoreRegistryCaller) GetRoleAdmin(opts *bind.CallOpts, role [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _CoreRegistry.contract.Call(opts, &out, "getRoleAdmin", role)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_CoreRegistry *CoreRegistrySession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _CoreRegistry.Contract.GetRoleAdmin(&_CoreRegistry.CallOpts, role)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_CoreRegistry *CoreRegistryCallerSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _CoreRegistry.Contract.GetRoleAdmin(&_CoreRegistry.CallOpts, role)
}

// GetZRC20AddressByForeignAsset is a free data retrieval call binding the contract method 0xaa808c06.
//
// Solidity: function getZRC20AddressByForeignAsset(uint256 originChainId, bytes originAddress) view returns(address)
func (_CoreRegistry *CoreRegistryCaller) GetZRC20AddressByForeignAsset(opts *bind.CallOpts, originChainId *big.Int, originAddress []byte) (common.Address, error) {
	var out []interface{}
	err := _CoreRegistry.contract.Call(opts, &out, "getZRC20AddressByForeignAsset", originChainId, originAddress)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetZRC20AddressByForeignAsset is a free data retrieval call binding the contract method 0xaa808c06.
//
// Solidity: function getZRC20AddressByForeignAsset(uint256 originChainId, bytes originAddress) view returns(address)
func (_CoreRegistry *CoreRegistrySession) GetZRC20AddressByForeignAsset(originChainId *big.Int, originAddress []byte) (common.Address, error) {
	return _CoreRegistry.Contract.GetZRC20AddressByForeignAsset(&_CoreRegistry.CallOpts, originChainId, originAddress)
}

// GetZRC20AddressByForeignAsset is a free data retrieval call binding the contract method 0xaa808c06.
//
// Solidity: function getZRC20AddressByForeignAsset(uint256 originChainId, bytes originAddress) view returns(address)
func (_CoreRegistry *CoreRegistryCallerSession) GetZRC20AddressByForeignAsset(originChainId *big.Int, originAddress []byte) (common.Address, error) {
	return _CoreRegistry.Contract.GetZRC20AddressByForeignAsset(&_CoreRegistry.CallOpts, originChainId, originAddress)
}

// GetZRC20TokenInfo is a free data retrieval call binding the contract method 0xe9d6c5ba.
//
// Solidity: function getZRC20TokenInfo(address address_) view returns(bool active, string symbol, uint256 originChainId, bytes originAddress, string coinType, uint8 decimals)
func (_CoreRegistry *CoreRegistryCaller) GetZRC20TokenInfo(opts *bind.CallOpts, address_ common.Address) (struct {
	Active        bool
	Symbol        string
	OriginChainId *big.Int
	OriginAddress []byte
	CoinType      string
	Decimals      uint8
}, error) {
	var out []interface{}
	err := _CoreRegistry.contract.Call(opts, &out, "getZRC20TokenInfo", address_)

	outstruct := new(struct {
		Active        bool
		Symbol        string
		OriginChainId *big.Int
		OriginAddress []byte
		CoinType      string
		Decimals      uint8
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Active = *abi.ConvertType(out[0], new(bool)).(*bool)
	outstruct.Symbol = *abi.ConvertType(out[1], new(string)).(*string)
	outstruct.OriginChainId = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.OriginAddress = *abi.ConvertType(out[3], new([]byte)).(*[]byte)
	outstruct.CoinType = *abi.ConvertType(out[4], new(string)).(*string)
	outstruct.Decimals = *abi.ConvertType(out[5], new(uint8)).(*uint8)

	return *outstruct, err

}

// GetZRC20TokenInfo is a free data retrieval call binding the contract method 0xe9d6c5ba.
//
// Solidity: function getZRC20TokenInfo(address address_) view returns(bool active, string symbol, uint256 originChainId, bytes originAddress, string coinType, uint8 decimals)
func (_CoreRegistry *CoreRegistrySession) GetZRC20TokenInfo(address_ common.Address) (struct {
	Active        bool
	Symbol        string
	OriginChainId *big.Int
	OriginAddress []byte
	CoinType      string
	Decimals      uint8
}, error) {
	return _CoreRegistry.Contract.GetZRC20TokenInfo(&_CoreRegistry.CallOpts, address_)
}

// GetZRC20TokenInfo is a free data retrieval call binding the contract method 0xe9d6c5ba.
//
// Solidity: function getZRC20TokenInfo(address address_) view returns(bool active, string symbol, uint256 originChainId, bytes originAddress, string coinType, uint8 decimals)
func (_CoreRegistry *CoreRegistryCallerSession) GetZRC20TokenInfo(address_ common.Address) (struct {
	Active        bool
	Symbol        string
	OriginChainId *big.Int
	OriginAddress []byte
	CoinType      string
	Decimals      uint8
}, error) {
	return _CoreRegistry.Contract.GetZRC20TokenInfo(&_CoreRegistry.CallOpts, address_)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_CoreRegistry *CoreRegistryCaller) HasRole(opts *bind.CallOpts, role [32]byte, account common.Address) (bool, error) {
	var out []interface{}
	err := _CoreRegistry.contract.Call(opts, &out, "hasRole", role, account)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_CoreRegistry *CoreRegistrySession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _CoreRegistry.Contract.HasRole(&_CoreRegistry.CallOpts, role, account)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_CoreRegistry *CoreRegistryCallerSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _CoreRegistry.Contract.HasRole(&_CoreRegistry.CallOpts, role, account)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_CoreRegistry *CoreRegistryCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _CoreRegistry.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_CoreRegistry *CoreRegistrySession) Paused() (bool, error) {
	return _CoreRegistry.Contract.Paused(&_CoreRegistry.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_CoreRegistry *CoreRegistryCallerSession) Paused() (bool, error) {
	return _CoreRegistry.Contract.Paused(&_CoreRegistry.CallOpts)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_CoreRegistry *CoreRegistryCaller) ProxiableUUID(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _CoreRegistry.contract.Call(opts, &out, "proxiableUUID")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_CoreRegistry *CoreRegistrySession) ProxiableUUID() ([32]byte, error) {
	return _CoreRegistry.Contract.ProxiableUUID(&_CoreRegistry.CallOpts)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_CoreRegistry *CoreRegistryCallerSession) ProxiableUUID() ([32]byte, error) {
	return _CoreRegistry.Contract.ProxiableUUID(&_CoreRegistry.CallOpts)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_CoreRegistry *CoreRegistryCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _CoreRegistry.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_CoreRegistry *CoreRegistrySession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _CoreRegistry.Contract.SupportsInterface(&_CoreRegistry.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_CoreRegistry *CoreRegistryCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _CoreRegistry.Contract.SupportsInterface(&_CoreRegistry.CallOpts, interfaceId)
}

// ChangeChainStatus is a paid mutator transaction binding the contract method 0xa8f2cb96.
//
// Solidity: function changeChainStatus(uint256 chainId, address gasZRC20, bytes registry, bool activation) returns()
func (_CoreRegistry *CoreRegistryTransactor) ChangeChainStatus(opts *bind.TransactOpts, chainId *big.Int, gasZRC20 common.Address, registry []byte, activation bool) (*types.Transaction, error) {
	return _CoreRegistry.contract.Transact(opts, "changeChainStatus", chainId, gasZRC20, registry, activation)
}

// ChangeChainStatus is a paid mutator transaction binding the contract method 0xa8f2cb96.
//
// Solidity: function changeChainStatus(uint256 chainId, address gasZRC20, bytes registry, bool activation) returns()
func (_CoreRegistry *CoreRegistrySession) ChangeChainStatus(chainId *big.Int, gasZRC20 common.Address, registry []byte, activation bool) (*types.Transaction, error) {
	return _CoreRegistry.Contract.ChangeChainStatus(&_CoreRegistry.TransactOpts, chainId, gasZRC20, registry, activation)
}

// ChangeChainStatus is a paid mutator transaction binding the contract method 0xa8f2cb96.
//
// Solidity: function changeChainStatus(uint256 chainId, address gasZRC20, bytes registry, bool activation) returns()
func (_CoreRegistry *CoreRegistryTransactorSession) ChangeChainStatus(chainId *big.Int, gasZRC20 common.Address, registry []byte, activation bool) (*types.Transaction, error) {
	return _CoreRegistry.Contract.ChangeChainStatus(&_CoreRegistry.TransactOpts, chainId, gasZRC20, registry, activation)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_CoreRegistry *CoreRegistryTransactor) GrantRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _CoreRegistry.contract.Transact(opts, "grantRole", role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_CoreRegistry *CoreRegistrySession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _CoreRegistry.Contract.GrantRole(&_CoreRegistry.TransactOpts, role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_CoreRegistry *CoreRegistryTransactorSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _CoreRegistry.Contract.GrantRole(&_CoreRegistry.TransactOpts, role, account)
}

// Initialize is a paid mutator transaction binding the contract method 0xc0c53b8b.
//
// Solidity: function initialize(address admin_, address registryManager_, address gatewayZEVM_) returns()
func (_CoreRegistry *CoreRegistryTransactor) Initialize(opts *bind.TransactOpts, admin_ common.Address, registryManager_ common.Address, gatewayZEVM_ common.Address) (*types.Transaction, error) {
	return _CoreRegistry.contract.Transact(opts, "initialize", admin_, registryManager_, gatewayZEVM_)
}

// Initialize is a paid mutator transaction binding the contract method 0xc0c53b8b.
//
// Solidity: function initialize(address admin_, address registryManager_, address gatewayZEVM_) returns()
func (_CoreRegistry *CoreRegistrySession) Initialize(admin_ common.Address, registryManager_ common.Address, gatewayZEVM_ common.Address) (*types.Transaction, error) {
	return _CoreRegistry.Contract.Initialize(&_CoreRegistry.TransactOpts, admin_, registryManager_, gatewayZEVM_)
}

// Initialize is a paid mutator transaction binding the contract method 0xc0c53b8b.
//
// Solidity: function initialize(address admin_, address registryManager_, address gatewayZEVM_) returns()
func (_CoreRegistry *CoreRegistryTransactorSession) Initialize(admin_ common.Address, registryManager_ common.Address, gatewayZEVM_ common.Address) (*types.Transaction, error) {
	return _CoreRegistry.Contract.Initialize(&_CoreRegistry.TransactOpts, admin_, registryManager_, gatewayZEVM_)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_CoreRegistry *CoreRegistryTransactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CoreRegistry.contract.Transact(opts, "pause")
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_CoreRegistry *CoreRegistrySession) Pause() (*types.Transaction, error) {
	return _CoreRegistry.Contract.Pause(&_CoreRegistry.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_CoreRegistry *CoreRegistryTransactorSession) Pause() (*types.Transaction, error) {
	return _CoreRegistry.Contract.Pause(&_CoreRegistry.TransactOpts)
}

// RegisterContract is a paid mutator transaction binding the contract method 0xb8aa5c7d.
//
// Solidity: function registerContract(uint256 chainId, address address_, string contractType, bytes addressBytes) returns()
func (_CoreRegistry *CoreRegistryTransactor) RegisterContract(opts *bind.TransactOpts, chainId *big.Int, address_ common.Address, contractType string, addressBytes []byte) (*types.Transaction, error) {
	return _CoreRegistry.contract.Transact(opts, "registerContract", chainId, address_, contractType, addressBytes)
}

// RegisterContract is a paid mutator transaction binding the contract method 0xb8aa5c7d.
//
// Solidity: function registerContract(uint256 chainId, address address_, string contractType, bytes addressBytes) returns()
func (_CoreRegistry *CoreRegistrySession) RegisterContract(chainId *big.Int, address_ common.Address, contractType string, addressBytes []byte) (*types.Transaction, error) {
	return _CoreRegistry.Contract.RegisterContract(&_CoreRegistry.TransactOpts, chainId, address_, contractType, addressBytes)
}

// RegisterContract is a paid mutator transaction binding the contract method 0xb8aa5c7d.
//
// Solidity: function registerContract(uint256 chainId, address address_, string contractType, bytes addressBytes) returns()
func (_CoreRegistry *CoreRegistryTransactorSession) RegisterContract(chainId *big.Int, address_ common.Address, contractType string, addressBytes []byte) (*types.Transaction, error) {
	return _CoreRegistry.Contract.RegisterContract(&_CoreRegistry.TransactOpts, chainId, address_, contractType, addressBytes)
}

// RegisterZRC20Token is a paid mutator transaction binding the contract method 0x6e9e2d3f.
//
// Solidity: function registerZRC20Token(address address_, string symbol, uint256 originChainId, bytes originAddress, string coinType, uint8 decimals) returns()
func (_CoreRegistry *CoreRegistryTransactor) RegisterZRC20Token(opts *bind.TransactOpts, address_ common.Address, symbol string, originChainId *big.Int, originAddress []byte, coinType string, decimals uint8) (*types.Transaction, error) {
	return _CoreRegistry.contract.Transact(opts, "registerZRC20Token", address_, symbol, originChainId, originAddress, coinType, decimals)
}

// RegisterZRC20Token is a paid mutator transaction binding the contract method 0x6e9e2d3f.
//
// Solidity: function registerZRC20Token(address address_, string symbol, uint256 originChainId, bytes originAddress, string coinType, uint8 decimals) returns()
func (_CoreRegistry *CoreRegistrySession) RegisterZRC20Token(address_ common.Address, symbol string, originChainId *big.Int, originAddress []byte, coinType string, decimals uint8) (*types.Transaction, error) {
	return _CoreRegistry.Contract.RegisterZRC20Token(&_CoreRegistry.TransactOpts, address_, symbol, originChainId, originAddress, coinType, decimals)
}

// RegisterZRC20Token is a paid mutator transaction binding the contract method 0x6e9e2d3f.
//
// Solidity: function registerZRC20Token(address address_, string symbol, uint256 originChainId, bytes originAddress, string coinType, uint8 decimals) returns()
func (_CoreRegistry *CoreRegistryTransactorSession) RegisterZRC20Token(address_ common.Address, symbol string, originChainId *big.Int, originAddress []byte, coinType string, decimals uint8) (*types.Transaction, error) {
	return _CoreRegistry.Contract.RegisterZRC20Token(&_CoreRegistry.TransactOpts, address_, symbol, originChainId, originAddress, coinType, decimals)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address callerConfirmation) returns()
func (_CoreRegistry *CoreRegistryTransactor) RenounceRole(opts *bind.TransactOpts, role [32]byte, callerConfirmation common.Address) (*types.Transaction, error) {
	return _CoreRegistry.contract.Transact(opts, "renounceRole", role, callerConfirmation)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address callerConfirmation) returns()
func (_CoreRegistry *CoreRegistrySession) RenounceRole(role [32]byte, callerConfirmation common.Address) (*types.Transaction, error) {
	return _CoreRegistry.Contract.RenounceRole(&_CoreRegistry.TransactOpts, role, callerConfirmation)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address callerConfirmation) returns()
func (_CoreRegistry *CoreRegistryTransactorSession) RenounceRole(role [32]byte, callerConfirmation common.Address) (*types.Transaction, error) {
	return _CoreRegistry.Contract.RenounceRole(&_CoreRegistry.TransactOpts, role, callerConfirmation)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_CoreRegistry *CoreRegistryTransactor) RevokeRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _CoreRegistry.contract.Transact(opts, "revokeRole", role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_CoreRegistry *CoreRegistrySession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _CoreRegistry.Contract.RevokeRole(&_CoreRegistry.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_CoreRegistry *CoreRegistryTransactorSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _CoreRegistry.Contract.RevokeRole(&_CoreRegistry.TransactOpts, role, account)
}

// SetContractActive is a paid mutator transaction binding the contract method 0x10d29b9e.
//
// Solidity: function setContractActive(uint256 chainId, string contractType, bool active) returns()
func (_CoreRegistry *CoreRegistryTransactor) SetContractActive(opts *bind.TransactOpts, chainId *big.Int, contractType string, active bool) (*types.Transaction, error) {
	return _CoreRegistry.contract.Transact(opts, "setContractActive", chainId, contractType, active)
}

// SetContractActive is a paid mutator transaction binding the contract method 0x10d29b9e.
//
// Solidity: function setContractActive(uint256 chainId, string contractType, bool active) returns()
func (_CoreRegistry *CoreRegistrySession) SetContractActive(chainId *big.Int, contractType string, active bool) (*types.Transaction, error) {
	return _CoreRegistry.Contract.SetContractActive(&_CoreRegistry.TransactOpts, chainId, contractType, active)
}

// SetContractActive is a paid mutator transaction binding the contract method 0x10d29b9e.
//
// Solidity: function setContractActive(uint256 chainId, string contractType, bool active) returns()
func (_CoreRegistry *CoreRegistryTransactorSession) SetContractActive(chainId *big.Int, contractType string, active bool) (*types.Transaction, error) {
	return _CoreRegistry.Contract.SetContractActive(&_CoreRegistry.TransactOpts, chainId, contractType, active)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_CoreRegistry *CoreRegistryTransactor) Unpause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CoreRegistry.contract.Transact(opts, "unpause")
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_CoreRegistry *CoreRegistrySession) Unpause() (*types.Transaction, error) {
	return _CoreRegistry.Contract.Unpause(&_CoreRegistry.TransactOpts)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_CoreRegistry *CoreRegistryTransactorSession) Unpause() (*types.Transaction, error) {
	return _CoreRegistry.Contract.Unpause(&_CoreRegistry.TransactOpts)
}

// UpdateChainMetadata is a paid mutator transaction binding the contract method 0x2259e9e5.
//
// Solidity: function updateChainMetadata(uint256 chainId, string key, bytes value) returns()
func (_CoreRegistry *CoreRegistryTransactor) UpdateChainMetadata(opts *bind.TransactOpts, chainId *big.Int, key string, value []byte) (*types.Transaction, error) {
	return _CoreRegistry.contract.Transact(opts, "updateChainMetadata", chainId, key, value)
}

// UpdateChainMetadata is a paid mutator transaction binding the contract method 0x2259e9e5.
//
// Solidity: function updateChainMetadata(uint256 chainId, string key, bytes value) returns()
func (_CoreRegistry *CoreRegistrySession) UpdateChainMetadata(chainId *big.Int, key string, value []byte) (*types.Transaction, error) {
	return _CoreRegistry.Contract.UpdateChainMetadata(&_CoreRegistry.TransactOpts, chainId, key, value)
}

// UpdateChainMetadata is a paid mutator transaction binding the contract method 0x2259e9e5.
//
// Solidity: function updateChainMetadata(uint256 chainId, string key, bytes value) returns()
func (_CoreRegistry *CoreRegistryTransactorSession) UpdateChainMetadata(chainId *big.Int, key string, value []byte) (*types.Transaction, error) {
	return _CoreRegistry.Contract.UpdateChainMetadata(&_CoreRegistry.TransactOpts, chainId, key, value)
}

// UpdateContractConfiguration is a paid mutator transaction binding the contract method 0xf354b31f.
//
// Solidity: function updateContractConfiguration(uint256 chainId, string contractType, string key, bytes value) returns()
func (_CoreRegistry *CoreRegistryTransactor) UpdateContractConfiguration(opts *bind.TransactOpts, chainId *big.Int, contractType string, key string, value []byte) (*types.Transaction, error) {
	return _CoreRegistry.contract.Transact(opts, "updateContractConfiguration", chainId, contractType, key, value)
}

// UpdateContractConfiguration is a paid mutator transaction binding the contract method 0xf354b31f.
//
// Solidity: function updateContractConfiguration(uint256 chainId, string contractType, string key, bytes value) returns()
func (_CoreRegistry *CoreRegistrySession) UpdateContractConfiguration(chainId *big.Int, contractType string, key string, value []byte) (*types.Transaction, error) {
	return _CoreRegistry.Contract.UpdateContractConfiguration(&_CoreRegistry.TransactOpts, chainId, contractType, key, value)
}

// UpdateContractConfiguration is a paid mutator transaction binding the contract method 0xf354b31f.
//
// Solidity: function updateContractConfiguration(uint256 chainId, string contractType, string key, bytes value) returns()
func (_CoreRegistry *CoreRegistryTransactorSession) UpdateContractConfiguration(chainId *big.Int, contractType string, key string, value []byte) (*types.Transaction, error) {
	return _CoreRegistry.Contract.UpdateContractConfiguration(&_CoreRegistry.TransactOpts, chainId, contractType, key, value)
}

// UpdateZRC20Token is a paid mutator transaction binding the contract method 0xc0b03871.
//
// Solidity: function updateZRC20Token(address address_, bool active) returns()
func (_CoreRegistry *CoreRegistryTransactor) UpdateZRC20Token(opts *bind.TransactOpts, address_ common.Address, active bool) (*types.Transaction, error) {
	return _CoreRegistry.contract.Transact(opts, "updateZRC20Token", address_, active)
}

// UpdateZRC20Token is a paid mutator transaction binding the contract method 0xc0b03871.
//
// Solidity: function updateZRC20Token(address address_, bool active) returns()
func (_CoreRegistry *CoreRegistrySession) UpdateZRC20Token(address_ common.Address, active bool) (*types.Transaction, error) {
	return _CoreRegistry.Contract.UpdateZRC20Token(&_CoreRegistry.TransactOpts, address_, active)
}

// UpdateZRC20Token is a paid mutator transaction binding the contract method 0xc0b03871.
//
// Solidity: function updateZRC20Token(address address_, bool active) returns()
func (_CoreRegistry *CoreRegistryTransactorSession) UpdateZRC20Token(address_ common.Address, active bool) (*types.Transaction, error) {
	return _CoreRegistry.Contract.UpdateZRC20Token(&_CoreRegistry.TransactOpts, address_, active)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_CoreRegistry *CoreRegistryTransactor) UpgradeToAndCall(opts *bind.TransactOpts, newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _CoreRegistry.contract.Transact(opts, "upgradeToAndCall", newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_CoreRegistry *CoreRegistrySession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _CoreRegistry.Contract.UpgradeToAndCall(&_CoreRegistry.TransactOpts, newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_CoreRegistry *CoreRegistryTransactorSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _CoreRegistry.Contract.UpgradeToAndCall(&_CoreRegistry.TransactOpts, newImplementation, data)
}

// CoreRegistryChainStatusChangedIterator is returned from FilterChainStatusChanged and is used to iterate over the raw logs and unpacked data for ChainStatusChanged events raised by the CoreRegistry contract.
type CoreRegistryChainStatusChangedIterator struct {
	Event *CoreRegistryChainStatusChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CoreRegistryChainStatusChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CoreRegistryChainStatusChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CoreRegistryChainStatusChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CoreRegistryChainStatusChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CoreRegistryChainStatusChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CoreRegistryChainStatusChanged represents a ChainStatusChanged event raised by the CoreRegistry contract.
type CoreRegistryChainStatusChanged struct {
	ChainId   *big.Int
	OldStatus bool
	NewStatus bool
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterChainStatusChanged is a free log retrieval operation binding the contract event 0x8ec58cc2d2754b6fd6c4941a30811cb0dbcdad24de12c2aae8a1e9e48e1d04e7.
//
// Solidity: event ChainStatusChanged(uint256 indexed chainId, bool oldStatus, bool newStatus)
func (_CoreRegistry *CoreRegistryFilterer) FilterChainStatusChanged(opts *bind.FilterOpts, chainId []*big.Int) (*CoreRegistryChainStatusChangedIterator, error) {

	var chainIdRule []interface{}
	for _, chainIdItem := range chainId {
		chainIdRule = append(chainIdRule, chainIdItem)
	}

	logs, sub, err := _CoreRegistry.contract.FilterLogs(opts, "ChainStatusChanged", chainIdRule)
	if err != nil {
		return nil, err
	}
	return &CoreRegistryChainStatusChangedIterator{contract: _CoreRegistry.contract, event: "ChainStatusChanged", logs: logs, sub: sub}, nil
}

// WatchChainStatusChanged is a free log subscription operation binding the contract event 0x8ec58cc2d2754b6fd6c4941a30811cb0dbcdad24de12c2aae8a1e9e48e1d04e7.
//
// Solidity: event ChainStatusChanged(uint256 indexed chainId, bool oldStatus, bool newStatus)
func (_CoreRegistry *CoreRegistryFilterer) WatchChainStatusChanged(opts *bind.WatchOpts, sink chan<- *CoreRegistryChainStatusChanged, chainId []*big.Int) (event.Subscription, error) {

	var chainIdRule []interface{}
	for _, chainIdItem := range chainId {
		chainIdRule = append(chainIdRule, chainIdItem)
	}

	logs, sub, err := _CoreRegistry.contract.WatchLogs(opts, "ChainStatusChanged", chainIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CoreRegistryChainStatusChanged)
				if err := _CoreRegistry.contract.UnpackLog(event, "ChainStatusChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseChainStatusChanged is a log parse operation binding the contract event 0x8ec58cc2d2754b6fd6c4941a30811cb0dbcdad24de12c2aae8a1e9e48e1d04e7.
//
// Solidity: event ChainStatusChanged(uint256 indexed chainId, bool oldStatus, bool newStatus)
func (_CoreRegistry *CoreRegistryFilterer) ParseChainStatusChanged(log types.Log) (*CoreRegistryChainStatusChanged, error) {
	event := new(CoreRegistryChainStatusChanged)
	if err := _CoreRegistry.contract.UnpackLog(event, "ChainStatusChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CoreRegistryContractRegisteredIterator is returned from FilterContractRegistered and is used to iterate over the raw logs and unpacked data for ContractRegistered events raised by the CoreRegistry contract.
type CoreRegistryContractRegisteredIterator struct {
	Event *CoreRegistryContractRegistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CoreRegistryContractRegisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CoreRegistryContractRegistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CoreRegistryContractRegistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CoreRegistryContractRegisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CoreRegistryContractRegisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CoreRegistryContractRegistered represents a ContractRegistered event raised by the CoreRegistry contract.
type CoreRegistryContractRegistered struct {
	ChainId      *big.Int
	ContractType common.Hash
	AddressBytes []byte
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterContractRegistered is a free log retrieval operation binding the contract event 0x20319e67335097991b9d6add94a71632118372c1a0b5650654f069668dce2581.
//
// Solidity: event ContractRegistered(uint256 indexed chainId, string indexed contractType, bytes addressBytes)
func (_CoreRegistry *CoreRegistryFilterer) FilterContractRegistered(opts *bind.FilterOpts, chainId []*big.Int, contractType []string) (*CoreRegistryContractRegisteredIterator, error) {

	var chainIdRule []interface{}
	for _, chainIdItem := range chainId {
		chainIdRule = append(chainIdRule, chainIdItem)
	}
	var contractTypeRule []interface{}
	for _, contractTypeItem := range contractType {
		contractTypeRule = append(contractTypeRule, contractTypeItem)
	}

	logs, sub, err := _CoreRegistry.contract.FilterLogs(opts, "ContractRegistered", chainIdRule, contractTypeRule)
	if err != nil {
		return nil, err
	}
	return &CoreRegistryContractRegisteredIterator{contract: _CoreRegistry.contract, event: "ContractRegistered", logs: logs, sub: sub}, nil
}

// WatchContractRegistered is a free log subscription operation binding the contract event 0x20319e67335097991b9d6add94a71632118372c1a0b5650654f069668dce2581.
//
// Solidity: event ContractRegistered(uint256 indexed chainId, string indexed contractType, bytes addressBytes)
func (_CoreRegistry *CoreRegistryFilterer) WatchContractRegistered(opts *bind.WatchOpts, sink chan<- *CoreRegistryContractRegistered, chainId []*big.Int, contractType []string) (event.Subscription, error) {

	var chainIdRule []interface{}
	for _, chainIdItem := range chainId {
		chainIdRule = append(chainIdRule, chainIdItem)
	}
	var contractTypeRule []interface{}
	for _, contractTypeItem := range contractType {
		contractTypeRule = append(contractTypeRule, contractTypeItem)
	}

	logs, sub, err := _CoreRegistry.contract.WatchLogs(opts, "ContractRegistered", chainIdRule, contractTypeRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CoreRegistryContractRegistered)
				if err := _CoreRegistry.contract.UnpackLog(event, "ContractRegistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseContractRegistered is a log parse operation binding the contract event 0x20319e67335097991b9d6add94a71632118372c1a0b5650654f069668dce2581.
//
// Solidity: event ContractRegistered(uint256 indexed chainId, string indexed contractType, bytes addressBytes)
func (_CoreRegistry *CoreRegistryFilterer) ParseContractRegistered(log types.Log) (*CoreRegistryContractRegistered, error) {
	event := new(CoreRegistryContractRegistered)
	if err := _CoreRegistry.contract.UnpackLog(event, "ContractRegistered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CoreRegistryContractStatusChangedIterator is returned from FilterContractStatusChanged and is used to iterate over the raw logs and unpacked data for ContractStatusChanged events raised by the CoreRegistry contract.
type CoreRegistryContractStatusChangedIterator struct {
	Event *CoreRegistryContractStatusChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CoreRegistryContractStatusChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CoreRegistryContractStatusChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CoreRegistryContractStatusChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CoreRegistryContractStatusChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CoreRegistryContractStatusChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CoreRegistryContractStatusChanged represents a ContractStatusChanged event raised by the CoreRegistry contract.
type CoreRegistryContractStatusChanged struct {
	AddressBytes []byte
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterContractStatusChanged is a free log retrieval operation binding the contract event 0x6db122b2555e642c944e09ae6d733a3f7600404765f612912f72b3c921c0b88c.
//
// Solidity: event ContractStatusChanged(bytes addressBytes)
func (_CoreRegistry *CoreRegistryFilterer) FilterContractStatusChanged(opts *bind.FilterOpts) (*CoreRegistryContractStatusChangedIterator, error) {

	logs, sub, err := _CoreRegistry.contract.FilterLogs(opts, "ContractStatusChanged")
	if err != nil {
		return nil, err
	}
	return &CoreRegistryContractStatusChangedIterator{contract: _CoreRegistry.contract, event: "ContractStatusChanged", logs: logs, sub: sub}, nil
}

// WatchContractStatusChanged is a free log subscription operation binding the contract event 0x6db122b2555e642c944e09ae6d733a3f7600404765f612912f72b3c921c0b88c.
//
// Solidity: event ContractStatusChanged(bytes addressBytes)
func (_CoreRegistry *CoreRegistryFilterer) WatchContractStatusChanged(opts *bind.WatchOpts, sink chan<- *CoreRegistryContractStatusChanged) (event.Subscription, error) {

	logs, sub, err := _CoreRegistry.contract.WatchLogs(opts, "ContractStatusChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CoreRegistryContractStatusChanged)
				if err := _CoreRegistry.contract.UnpackLog(event, "ContractStatusChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseContractStatusChanged is a log parse operation binding the contract event 0x6db122b2555e642c944e09ae6d733a3f7600404765f612912f72b3c921c0b88c.
//
// Solidity: event ContractStatusChanged(bytes addressBytes)
func (_CoreRegistry *CoreRegistryFilterer) ParseContractStatusChanged(log types.Log) (*CoreRegistryContractStatusChanged, error) {
	event := new(CoreRegistryContractStatusChanged)
	if err := _CoreRegistry.contract.UnpackLog(event, "ContractStatusChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CoreRegistryInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the CoreRegistry contract.
type CoreRegistryInitializedIterator struct {
	Event *CoreRegistryInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CoreRegistryInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CoreRegistryInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CoreRegistryInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CoreRegistryInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CoreRegistryInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CoreRegistryInitialized represents a Initialized event raised by the CoreRegistry contract.
type CoreRegistryInitialized struct {
	Version uint64
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2.
//
// Solidity: event Initialized(uint64 version)
func (_CoreRegistry *CoreRegistryFilterer) FilterInitialized(opts *bind.FilterOpts) (*CoreRegistryInitializedIterator, error) {

	logs, sub, err := _CoreRegistry.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &CoreRegistryInitializedIterator{contract: _CoreRegistry.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2.
//
// Solidity: event Initialized(uint64 version)
func (_CoreRegistry *CoreRegistryFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *CoreRegistryInitialized) (event.Subscription, error) {

	logs, sub, err := _CoreRegistry.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CoreRegistryInitialized)
				if err := _CoreRegistry.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2.
//
// Solidity: event Initialized(uint64 version)
func (_CoreRegistry *CoreRegistryFilterer) ParseInitialized(log types.Log) (*CoreRegistryInitialized, error) {
	event := new(CoreRegistryInitialized)
	if err := _CoreRegistry.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CoreRegistryNewChainMetadataIterator is returned from FilterNewChainMetadata and is used to iterate over the raw logs and unpacked data for NewChainMetadata events raised by the CoreRegistry contract.
type CoreRegistryNewChainMetadataIterator struct {
	Event *CoreRegistryNewChainMetadata // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CoreRegistryNewChainMetadataIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CoreRegistryNewChainMetadata)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CoreRegistryNewChainMetadata)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CoreRegistryNewChainMetadataIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CoreRegistryNewChainMetadataIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CoreRegistryNewChainMetadata represents a NewChainMetadata event raised by the CoreRegistry contract.
type CoreRegistryNewChainMetadata struct {
	ChainId *big.Int
	Key     string
	Value   []byte
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterNewChainMetadata is a free log retrieval operation binding the contract event 0xa274ec62326b7df2ece1add0babcb0f90b87b6d4a7e144f8d0b9b9057c039dc1.
//
// Solidity: event NewChainMetadata(uint256 indexed chainId, string key, bytes value)
func (_CoreRegistry *CoreRegistryFilterer) FilterNewChainMetadata(opts *bind.FilterOpts, chainId []*big.Int) (*CoreRegistryNewChainMetadataIterator, error) {

	var chainIdRule []interface{}
	for _, chainIdItem := range chainId {
		chainIdRule = append(chainIdRule, chainIdItem)
	}

	logs, sub, err := _CoreRegistry.contract.FilterLogs(opts, "NewChainMetadata", chainIdRule)
	if err != nil {
		return nil, err
	}
	return &CoreRegistryNewChainMetadataIterator{contract: _CoreRegistry.contract, event: "NewChainMetadata", logs: logs, sub: sub}, nil
}

// WatchNewChainMetadata is a free log subscription operation binding the contract event 0xa274ec62326b7df2ece1add0babcb0f90b87b6d4a7e144f8d0b9b9057c039dc1.
//
// Solidity: event NewChainMetadata(uint256 indexed chainId, string key, bytes value)
func (_CoreRegistry *CoreRegistryFilterer) WatchNewChainMetadata(opts *bind.WatchOpts, sink chan<- *CoreRegistryNewChainMetadata, chainId []*big.Int) (event.Subscription, error) {

	var chainIdRule []interface{}
	for _, chainIdItem := range chainId {
		chainIdRule = append(chainIdRule, chainIdItem)
	}

	logs, sub, err := _CoreRegistry.contract.WatchLogs(opts, "NewChainMetadata", chainIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CoreRegistryNewChainMetadata)
				if err := _CoreRegistry.contract.UnpackLog(event, "NewChainMetadata", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewChainMetadata is a log parse operation binding the contract event 0xa274ec62326b7df2ece1add0babcb0f90b87b6d4a7e144f8d0b9b9057c039dc1.
//
// Solidity: event NewChainMetadata(uint256 indexed chainId, string key, bytes value)
func (_CoreRegistry *CoreRegistryFilterer) ParseNewChainMetadata(log types.Log) (*CoreRegistryNewChainMetadata, error) {
	event := new(CoreRegistryNewChainMetadata)
	if err := _CoreRegistry.contract.UnpackLog(event, "NewChainMetadata", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CoreRegistryNewContractConfigurationIterator is returned from FilterNewContractConfiguration and is used to iterate over the raw logs and unpacked data for NewContractConfiguration events raised by the CoreRegistry contract.
type CoreRegistryNewContractConfigurationIterator struct {
	Event *CoreRegistryNewContractConfiguration // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CoreRegistryNewContractConfigurationIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CoreRegistryNewContractConfiguration)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CoreRegistryNewContractConfiguration)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CoreRegistryNewContractConfigurationIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CoreRegistryNewContractConfigurationIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CoreRegistryNewContractConfiguration represents a NewContractConfiguration event raised by the CoreRegistry contract.
type CoreRegistryNewContractConfiguration struct {
	ChainId      *big.Int
	ContractType string
	Key          string
	Value        []byte
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterNewContractConfiguration is a free log retrieval operation binding the contract event 0x9453d408be9167c029f60b137dddf03dd0d2ff9f51d834c1b2238f335bd96f9b.
//
// Solidity: event NewContractConfiguration(uint256 indexed chainId, string contractType, string key, bytes value)
func (_CoreRegistry *CoreRegistryFilterer) FilterNewContractConfiguration(opts *bind.FilterOpts, chainId []*big.Int) (*CoreRegistryNewContractConfigurationIterator, error) {

	var chainIdRule []interface{}
	for _, chainIdItem := range chainId {
		chainIdRule = append(chainIdRule, chainIdItem)
	}

	logs, sub, err := _CoreRegistry.contract.FilterLogs(opts, "NewContractConfiguration", chainIdRule)
	if err != nil {
		return nil, err
	}
	return &CoreRegistryNewContractConfigurationIterator{contract: _CoreRegistry.contract, event: "NewContractConfiguration", logs: logs, sub: sub}, nil
}

// WatchNewContractConfiguration is a free log subscription operation binding the contract event 0x9453d408be9167c029f60b137dddf03dd0d2ff9f51d834c1b2238f335bd96f9b.
//
// Solidity: event NewContractConfiguration(uint256 indexed chainId, string contractType, string key, bytes value)
func (_CoreRegistry *CoreRegistryFilterer) WatchNewContractConfiguration(opts *bind.WatchOpts, sink chan<- *CoreRegistryNewContractConfiguration, chainId []*big.Int) (event.Subscription, error) {

	var chainIdRule []interface{}
	for _, chainIdItem := range chainId {
		chainIdRule = append(chainIdRule, chainIdItem)
	}

	logs, sub, err := _CoreRegistry.contract.WatchLogs(opts, "NewContractConfiguration", chainIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CoreRegistryNewContractConfiguration)
				if err := _CoreRegistry.contract.UnpackLog(event, "NewContractConfiguration", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewContractConfiguration is a log parse operation binding the contract event 0x9453d408be9167c029f60b137dddf03dd0d2ff9f51d834c1b2238f335bd96f9b.
//
// Solidity: event NewContractConfiguration(uint256 indexed chainId, string contractType, string key, bytes value)
func (_CoreRegistry *CoreRegistryFilterer) ParseNewContractConfiguration(log types.Log) (*CoreRegistryNewContractConfiguration, error) {
	event := new(CoreRegistryNewContractConfiguration)
	if err := _CoreRegistry.contract.UnpackLog(event, "NewContractConfiguration", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CoreRegistryPausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the CoreRegistry contract.
type CoreRegistryPausedIterator struct {
	Event *CoreRegistryPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CoreRegistryPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CoreRegistryPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CoreRegistryPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CoreRegistryPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CoreRegistryPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CoreRegistryPaused represents a Paused event raised by the CoreRegistry contract.
type CoreRegistryPaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_CoreRegistry *CoreRegistryFilterer) FilterPaused(opts *bind.FilterOpts) (*CoreRegistryPausedIterator, error) {

	logs, sub, err := _CoreRegistry.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &CoreRegistryPausedIterator{contract: _CoreRegistry.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_CoreRegistry *CoreRegistryFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *CoreRegistryPaused) (event.Subscription, error) {

	logs, sub, err := _CoreRegistry.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CoreRegistryPaused)
				if err := _CoreRegistry.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_CoreRegistry *CoreRegistryFilterer) ParsePaused(log types.Log) (*CoreRegistryPaused, error) {
	event := new(CoreRegistryPaused)
	if err := _CoreRegistry.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CoreRegistryRoleAdminChangedIterator is returned from FilterRoleAdminChanged and is used to iterate over the raw logs and unpacked data for RoleAdminChanged events raised by the CoreRegistry contract.
type CoreRegistryRoleAdminChangedIterator struct {
	Event *CoreRegistryRoleAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CoreRegistryRoleAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CoreRegistryRoleAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CoreRegistryRoleAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CoreRegistryRoleAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CoreRegistryRoleAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CoreRegistryRoleAdminChanged represents a RoleAdminChanged event raised by the CoreRegistry contract.
type CoreRegistryRoleAdminChanged struct {
	Role              [32]byte
	PreviousAdminRole [32]byte
	NewAdminRole      [32]byte
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterRoleAdminChanged is a free log retrieval operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_CoreRegistry *CoreRegistryFilterer) FilterRoleAdminChanged(opts *bind.FilterOpts, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (*CoreRegistryRoleAdminChangedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _CoreRegistry.contract.FilterLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return &CoreRegistryRoleAdminChangedIterator{contract: _CoreRegistry.contract, event: "RoleAdminChanged", logs: logs, sub: sub}, nil
}

// WatchRoleAdminChanged is a free log subscription operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_CoreRegistry *CoreRegistryFilterer) WatchRoleAdminChanged(opts *bind.WatchOpts, sink chan<- *CoreRegistryRoleAdminChanged, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _CoreRegistry.contract.WatchLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CoreRegistryRoleAdminChanged)
				if err := _CoreRegistry.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleAdminChanged is a log parse operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_CoreRegistry *CoreRegistryFilterer) ParseRoleAdminChanged(log types.Log) (*CoreRegistryRoleAdminChanged, error) {
	event := new(CoreRegistryRoleAdminChanged)
	if err := _CoreRegistry.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CoreRegistryRoleGrantedIterator is returned from FilterRoleGranted and is used to iterate over the raw logs and unpacked data for RoleGranted events raised by the CoreRegistry contract.
type CoreRegistryRoleGrantedIterator struct {
	Event *CoreRegistryRoleGranted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CoreRegistryRoleGrantedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CoreRegistryRoleGranted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CoreRegistryRoleGranted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CoreRegistryRoleGrantedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CoreRegistryRoleGrantedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CoreRegistryRoleGranted represents a RoleGranted event raised by the CoreRegistry contract.
type CoreRegistryRoleGranted struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleGranted is a free log retrieval operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_CoreRegistry *CoreRegistryFilterer) FilterRoleGranted(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*CoreRegistryRoleGrantedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _CoreRegistry.contract.FilterLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &CoreRegistryRoleGrantedIterator{contract: _CoreRegistry.contract, event: "RoleGranted", logs: logs, sub: sub}, nil
}

// WatchRoleGranted is a free log subscription operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_CoreRegistry *CoreRegistryFilterer) WatchRoleGranted(opts *bind.WatchOpts, sink chan<- *CoreRegistryRoleGranted, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _CoreRegistry.contract.WatchLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CoreRegistryRoleGranted)
				if err := _CoreRegistry.contract.UnpackLog(event, "RoleGranted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleGranted is a log parse operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_CoreRegistry *CoreRegistryFilterer) ParseRoleGranted(log types.Log) (*CoreRegistryRoleGranted, error) {
	event := new(CoreRegistryRoleGranted)
	if err := _CoreRegistry.contract.UnpackLog(event, "RoleGranted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CoreRegistryRoleRevokedIterator is returned from FilterRoleRevoked and is used to iterate over the raw logs and unpacked data for RoleRevoked events raised by the CoreRegistry contract.
type CoreRegistryRoleRevokedIterator struct {
	Event *CoreRegistryRoleRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CoreRegistryRoleRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CoreRegistryRoleRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CoreRegistryRoleRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CoreRegistryRoleRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CoreRegistryRoleRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CoreRegistryRoleRevoked represents a RoleRevoked event raised by the CoreRegistry contract.
type CoreRegistryRoleRevoked struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleRevoked is a free log retrieval operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_CoreRegistry *CoreRegistryFilterer) FilterRoleRevoked(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*CoreRegistryRoleRevokedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _CoreRegistry.contract.FilterLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &CoreRegistryRoleRevokedIterator{contract: _CoreRegistry.contract, event: "RoleRevoked", logs: logs, sub: sub}, nil
}

// WatchRoleRevoked is a free log subscription operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_CoreRegistry *CoreRegistryFilterer) WatchRoleRevoked(opts *bind.WatchOpts, sink chan<- *CoreRegistryRoleRevoked, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _CoreRegistry.contract.WatchLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CoreRegistryRoleRevoked)
				if err := _CoreRegistry.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleRevoked is a log parse operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_CoreRegistry *CoreRegistryFilterer) ParseRoleRevoked(log types.Log) (*CoreRegistryRoleRevoked, error) {
	event := new(CoreRegistryRoleRevoked)
	if err := _CoreRegistry.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CoreRegistryUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the CoreRegistry contract.
type CoreRegistryUnpausedIterator struct {
	Event *CoreRegistryUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CoreRegistryUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CoreRegistryUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CoreRegistryUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CoreRegistryUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CoreRegistryUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CoreRegistryUnpaused represents a Unpaused event raised by the CoreRegistry contract.
type CoreRegistryUnpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_CoreRegistry *CoreRegistryFilterer) FilterUnpaused(opts *bind.FilterOpts) (*CoreRegistryUnpausedIterator, error) {

	logs, sub, err := _CoreRegistry.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &CoreRegistryUnpausedIterator{contract: _CoreRegistry.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_CoreRegistry *CoreRegistryFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *CoreRegistryUnpaused) (event.Subscription, error) {

	logs, sub, err := _CoreRegistry.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CoreRegistryUnpaused)
				if err := _CoreRegistry.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_CoreRegistry *CoreRegistryFilterer) ParseUnpaused(log types.Log) (*CoreRegistryUnpaused, error) {
	event := new(CoreRegistryUnpaused)
	if err := _CoreRegistry.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CoreRegistryUpgradedIterator is returned from FilterUpgraded and is used to iterate over the raw logs and unpacked data for Upgraded events raised by the CoreRegistry contract.
type CoreRegistryUpgradedIterator struct {
	Event *CoreRegistryUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CoreRegistryUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CoreRegistryUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CoreRegistryUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CoreRegistryUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CoreRegistryUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CoreRegistryUpgraded represents a Upgraded event raised by the CoreRegistry contract.
type CoreRegistryUpgraded struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgraded is a free log retrieval operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_CoreRegistry *CoreRegistryFilterer) FilterUpgraded(opts *bind.FilterOpts, implementation []common.Address) (*CoreRegistryUpgradedIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _CoreRegistry.contract.FilterLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return &CoreRegistryUpgradedIterator{contract: _CoreRegistry.contract, event: "Upgraded", logs: logs, sub: sub}, nil
}

// WatchUpgraded is a free log subscription operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_CoreRegistry *CoreRegistryFilterer) WatchUpgraded(opts *bind.WatchOpts, sink chan<- *CoreRegistryUpgraded, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _CoreRegistry.contract.WatchLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CoreRegistryUpgraded)
				if err := _CoreRegistry.contract.UnpackLog(event, "Upgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgraded is a log parse operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_CoreRegistry *CoreRegistryFilterer) ParseUpgraded(log types.Log) (*CoreRegistryUpgraded, error) {
	event := new(CoreRegistryUpgraded)
	if err := _CoreRegistry.contract.UnpackLog(event, "Upgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CoreRegistryZRC20TokenRegisteredIterator is returned from FilterZRC20TokenRegistered and is used to iterate over the raw logs and unpacked data for ZRC20TokenRegistered events raised by the CoreRegistry contract.
type CoreRegistryZRC20TokenRegisteredIterator struct {
	Event *CoreRegistryZRC20TokenRegistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CoreRegistryZRC20TokenRegisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CoreRegistryZRC20TokenRegistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CoreRegistryZRC20TokenRegistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CoreRegistryZRC20TokenRegisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CoreRegistryZRC20TokenRegisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CoreRegistryZRC20TokenRegistered represents a ZRC20TokenRegistered event raised by the CoreRegistry contract.
type CoreRegistryZRC20TokenRegistered struct {
	OriginAddress common.Hash
	Address       common.Address
	Decimals      uint8
	OriginChainId *big.Int
	Symbol        string
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterZRC20TokenRegistered is a free log retrieval operation binding the contract event 0xa9edd2fd29fc8cab6015c2725afa5bc5f3b8d709a02d9e89990ef20fd781e367.
//
// Solidity: event ZRC20TokenRegistered(bytes indexed originAddress, address indexed address_, uint8 decimals, uint256 originChainId, string symbol)
func (_CoreRegistry *CoreRegistryFilterer) FilterZRC20TokenRegistered(opts *bind.FilterOpts, originAddress [][]byte, address_ []common.Address) (*CoreRegistryZRC20TokenRegisteredIterator, error) {

	var originAddressRule []interface{}
	for _, originAddressItem := range originAddress {
		originAddressRule = append(originAddressRule, originAddressItem)
	}
	var address_Rule []interface{}
	for _, address_Item := range address_ {
		address_Rule = append(address_Rule, address_Item)
	}

	logs, sub, err := _CoreRegistry.contract.FilterLogs(opts, "ZRC20TokenRegistered", originAddressRule, address_Rule)
	if err != nil {
		return nil, err
	}
	return &CoreRegistryZRC20TokenRegisteredIterator{contract: _CoreRegistry.contract, event: "ZRC20TokenRegistered", logs: logs, sub: sub}, nil
}

// WatchZRC20TokenRegistered is a free log subscription operation binding the contract event 0xa9edd2fd29fc8cab6015c2725afa5bc5f3b8d709a02d9e89990ef20fd781e367.
//
// Solidity: event ZRC20TokenRegistered(bytes indexed originAddress, address indexed address_, uint8 decimals, uint256 originChainId, string symbol)
func (_CoreRegistry *CoreRegistryFilterer) WatchZRC20TokenRegistered(opts *bind.WatchOpts, sink chan<- *CoreRegistryZRC20TokenRegistered, originAddress [][]byte, address_ []common.Address) (event.Subscription, error) {

	var originAddressRule []interface{}
	for _, originAddressItem := range originAddress {
		originAddressRule = append(originAddressRule, originAddressItem)
	}
	var address_Rule []interface{}
	for _, address_Item := range address_ {
		address_Rule = append(address_Rule, address_Item)
	}

	logs, sub, err := _CoreRegistry.contract.WatchLogs(opts, "ZRC20TokenRegistered", originAddressRule, address_Rule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CoreRegistryZRC20TokenRegistered)
				if err := _CoreRegistry.contract.UnpackLog(event, "ZRC20TokenRegistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseZRC20TokenRegistered is a log parse operation binding the contract event 0xa9edd2fd29fc8cab6015c2725afa5bc5f3b8d709a02d9e89990ef20fd781e367.
//
// Solidity: event ZRC20TokenRegistered(bytes indexed originAddress, address indexed address_, uint8 decimals, uint256 originChainId, string symbol)
func (_CoreRegistry *CoreRegistryFilterer) ParseZRC20TokenRegistered(log types.Log) (*CoreRegistryZRC20TokenRegistered, error) {
	event := new(CoreRegistryZRC20TokenRegistered)
	if err := _CoreRegistry.contract.UnpackLog(event, "ZRC20TokenRegistered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CoreRegistryZRC20TokenUpdatedIterator is returned from FilterZRC20TokenUpdated and is used to iterate over the raw logs and unpacked data for ZRC20TokenUpdated events raised by the CoreRegistry contract.
type CoreRegistryZRC20TokenUpdatedIterator struct {
	Event *CoreRegistryZRC20TokenUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CoreRegistryZRC20TokenUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CoreRegistryZRC20TokenUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CoreRegistryZRC20TokenUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CoreRegistryZRC20TokenUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CoreRegistryZRC20TokenUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CoreRegistryZRC20TokenUpdated represents a ZRC20TokenUpdated event raised by the CoreRegistry contract.
type CoreRegistryZRC20TokenUpdated struct {
	Address common.Address
	Active  bool
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterZRC20TokenUpdated is a free log retrieval operation binding the contract event 0x9542d02d4224477c9e9b53628bf5eae8b59520ea6bf2809cec7f24f76bba8ff8.
//
// Solidity: event ZRC20TokenUpdated(address address_, bool active)
func (_CoreRegistry *CoreRegistryFilterer) FilterZRC20TokenUpdated(opts *bind.FilterOpts) (*CoreRegistryZRC20TokenUpdatedIterator, error) {

	logs, sub, err := _CoreRegistry.contract.FilterLogs(opts, "ZRC20TokenUpdated")
	if err != nil {
		return nil, err
	}
	return &CoreRegistryZRC20TokenUpdatedIterator{contract: _CoreRegistry.contract, event: "ZRC20TokenUpdated", logs: logs, sub: sub}, nil
}

// WatchZRC20TokenUpdated is a free log subscription operation binding the contract event 0x9542d02d4224477c9e9b53628bf5eae8b59520ea6bf2809cec7f24f76bba8ff8.
//
// Solidity: event ZRC20TokenUpdated(address address_, bool active)
func (_CoreRegistry *CoreRegistryFilterer) WatchZRC20TokenUpdated(opts *bind.WatchOpts, sink chan<- *CoreRegistryZRC20TokenUpdated) (event.Subscription, error) {

	logs, sub, err := _CoreRegistry.contract.WatchLogs(opts, "ZRC20TokenUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CoreRegistryZRC20TokenUpdated)
				if err := _CoreRegistry.contract.UnpackLog(event, "ZRC20TokenUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseZRC20TokenUpdated is a log parse operation binding the contract event 0x9542d02d4224477c9e9b53628bf5eae8b59520ea6bf2809cec7f24f76bba8ff8.
//
// Solidity: event ZRC20TokenUpdated(address address_, bool active)
func (_CoreRegistry *CoreRegistryFilterer) ParseZRC20TokenUpdated(log types.Log) (*CoreRegistryZRC20TokenUpdated, error) {
	event := new(CoreRegistryZRC20TokenUpdated)
	if err := _CoreRegistry.contract.UnpackLog(event, "ZRC20TokenUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
