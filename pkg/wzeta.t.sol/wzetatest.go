// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package wzeta

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// StdInvariantFuzzArtifactSelector is an auto generated low-level Go binding around an user-defined struct.
type StdInvariantFuzzArtifactSelector struct {
	Artifact  string
	Selectors [][4]byte
}

// StdInvariantFuzzInterface is an auto generated low-level Go binding around an user-defined struct.
type StdInvariantFuzzInterface struct {
	Addr      common.Address
	Artifacts []string
}

// StdInvariantFuzzSelector is an auto generated low-level Go binding around an user-defined struct.
type StdInvariantFuzzSelector struct {
	Addr      common.Address
	Selectors [][4]byte
}

// WZETATestMetaData contains all meta data concerning the WZETATest contract.
var WZETATestMetaData = &bind.MetaData{
	ABI: "[{\"type\":\"function\",\"name\":\"IS_TEST\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"excludeArtifacts\",\"inputs\":[],\"outputs\":[{\"name\":\"excludedArtifacts_\",\"type\":\"string[]\",\"internalType\":\"string[]\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"excludeContracts\",\"inputs\":[],\"outputs\":[{\"name\":\"excludedContracts_\",\"type\":\"address[]\",\"internalType\":\"address[]\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"excludeSelectors\",\"inputs\":[],\"outputs\":[{\"name\":\"excludedSelectors_\",\"type\":\"tuple[]\",\"internalType\":\"structStdInvariant.FuzzSelector[]\",\"components\":[{\"name\":\"addr\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"selectors\",\"type\":\"bytes4[]\",\"internalType\":\"bytes4[]\"}]}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"excludeSenders\",\"inputs\":[],\"outputs\":[{\"name\":\"excludedSenders_\",\"type\":\"address[]\",\"internalType\":\"address[]\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"failed\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"setUp\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"targetArtifactSelectors\",\"inputs\":[],\"outputs\":[{\"name\":\"targetedArtifactSelectors_\",\"type\":\"tuple[]\",\"internalType\":\"structStdInvariant.FuzzArtifactSelector[]\",\"components\":[{\"name\":\"artifact\",\"type\":\"string\",\"internalType\":\"string\"},{\"name\":\"selectors\",\"type\":\"bytes4[]\",\"internalType\":\"bytes4[]\"}]}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"targetArtifacts\",\"inputs\":[],\"outputs\":[{\"name\":\"targetedArtifacts_\",\"type\":\"string[]\",\"internalType\":\"string[]\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"targetContracts\",\"inputs\":[],\"outputs\":[{\"name\":\"targetedContracts_\",\"type\":\"address[]\",\"internalType\":\"address[]\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"targetInterfaces\",\"inputs\":[],\"outputs\":[{\"name\":\"targetedInterfaces_\",\"type\":\"tuple[]\",\"internalType\":\"structStdInvariant.FuzzInterface[]\",\"components\":[{\"name\":\"addr\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"artifacts\",\"type\":\"string[]\",\"internalType\":\"string[]\"}]}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"targetSelectors\",\"inputs\":[],\"outputs\":[{\"name\":\"targetedSelectors_\",\"type\":\"tuple[]\",\"internalType\":\"structStdInvariant.FuzzSelector[]\",\"components\":[{\"name\":\"addr\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"selectors\",\"type\":\"bytes4[]\",\"internalType\":\"bytes4[]\"}]}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"targetSenders\",\"inputs\":[],\"outputs\":[{\"name\":\"targetedSenders_\",\"type\":\"address[]\",\"internalType\":\"address[]\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"testApproveAndTransferFrom\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testDeposit\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testDepositAndReceiveFallback\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testTotalSupply\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testTransfer\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testTransferFromRevertsIfInsufficientAllowance\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testTransferRevertsIfInsufficientBalance\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testWithdraw\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testWithdrawRevertsIfInsufficientBalance\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"event\",\"name\":\"log\",\"inputs\":[{\"name\":\"\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_address\",\"inputs\":[{\"name\":\"\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_array\",\"inputs\":[{\"name\":\"val\",\"type\":\"uint256[]\",\"indexed\":false,\"internalType\":\"uint256[]\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_array\",\"inputs\":[{\"name\":\"val\",\"type\":\"int256[]\",\"indexed\":false,\"internalType\":\"int256[]\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_array\",\"inputs\":[{\"name\":\"val\",\"type\":\"address[]\",\"indexed\":false,\"internalType\":\"address[]\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_bytes\",\"inputs\":[{\"name\":\"\",\"type\":\"bytes\",\"indexed\":false,\"internalType\":\"bytes\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_bytes32\",\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"indexed\":false,\"internalType\":\"bytes32\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_int\",\"inputs\":[{\"name\":\"\",\"type\":\"int256\",\"indexed\":false,\"internalType\":\"int256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_named_address\",\"inputs\":[{\"name\":\"key\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"val\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_named_array\",\"inputs\":[{\"name\":\"key\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"val\",\"type\":\"uint256[]\",\"indexed\":false,\"internalType\":\"uint256[]\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_named_array\",\"inputs\":[{\"name\":\"key\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"val\",\"type\":\"int256[]\",\"indexed\":false,\"internalType\":\"int256[]\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_named_array\",\"inputs\":[{\"name\":\"key\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"val\",\"type\":\"address[]\",\"indexed\":false,\"internalType\":\"address[]\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_named_bytes\",\"inputs\":[{\"name\":\"key\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"val\",\"type\":\"bytes\",\"indexed\":false,\"internalType\":\"bytes\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_named_bytes32\",\"inputs\":[{\"name\":\"key\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"val\",\"type\":\"bytes32\",\"indexed\":false,\"internalType\":\"bytes32\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_named_decimal_int\",\"inputs\":[{\"name\":\"key\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"val\",\"type\":\"int256\",\"indexed\":false,\"internalType\":\"int256\"},{\"name\":\"decimals\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_named_decimal_uint\",\"inputs\":[{\"name\":\"key\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"val\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"},{\"name\":\"decimals\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_named_int\",\"inputs\":[{\"name\":\"key\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"val\",\"type\":\"int256\",\"indexed\":false,\"internalType\":\"int256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_named_string\",\"inputs\":[{\"name\":\"key\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"val\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_named_uint\",\"inputs\":[{\"name\":\"key\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"val\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_string\",\"inputs\":[{\"name\":\"\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_uint\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"logs\",\"inputs\":[{\"name\":\"\",\"type\":\"bytes\",\"indexed\":false,\"internalType\":\"bytes\"}],\"anonymous\":false}]",
	Bin: "0x6080604052600c805460ff199081166001908117909255601f80549091169091179055602080546001600160a01b0319908116610abc1790915560218054909116610def1790553480156050575f80fd5b5061351b8061005e5f395ff3fe608060405234801561000f575f80fd5b5060043610610179575f3560e01c8063916a17c6116100d2578063d509b16c11610088578063eb7492d111610063578063eb7492d114610271578063fa7626d414610279578063fbf7e23814610286575f80fd5b8063d509b16c14610259578063d591221f14610261578063e20c9f7114610269575f80fd5b8063b5508aa9116100b8578063b5508aa914610231578063ba414fa614610239578063c133a5f014610251575f80fd5b8063916a17c614610214578063b0464fdc14610229575f80fd5b80633f7286f41161013257806366d9a9a01161010d57806366d9a9a0146101e25780637f924c4e146101f757806385226c81146101ff575f80fd5b80633f7286f4146101ca578063537e0a5c146101d25780635ecf1d8d146101da575f80fd5b80631ed7831c116101625780631ed7831c1461018f5780632ade3880146101ad5780633e5e3c23146101c2575f80fd5b8063013946e71461017d5780630a9254e414610187575b5f80fd5b61018561028e565b005b610185610474565b6101976105f1565b6040516101a491906125b0565b60405180910390f35b6101b5610651565b6040516101a49190612647565b61019761078d565b6101976107eb565b610185610849565b610185610d80565b6101ea611176565b6040516101a491906127a8565b6101856112ef565b61020761148b565b6040516101a49190612844565b61021c611556565b6040516101a491906128b9565b61021c61164c565b610207611742565b61024161180d565b60405190151581526020016101a4565b6101856118dd565b610185611b16565b610185611cfb565b610197611f38565b610185611f96565b601f546102419060ff1681565b6101856122e2565b6020546040517fca669fa70000000000000000000000000000000000000000000000000000000081526001600160a01b039091166004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ca669fa7906024015f604051808303815f87803b1580156102fd575f80fd5b505af115801561030f573d5f803e3d5ffd5b5050601f546040515f93506101009091046001600160a01b03169150670de0b6b3a7640000908381818185875af1925050503d805f811461036b576040519150601f19603f3d011682016040523d82523d5f602084013e610370565b606091505b5050905061037d816124a4565b601f546020546040517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b03918216600482015261041d926101009004909116906370a08231906024015b602060405180830381865afa1580156103eb573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061040f919061294e565b670de0b6b3a7640000612520565b610471601f60019054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103eb573d5f803e3d5ffd5b50565b604051610480906125a3565b604051809103905ff080158015610499573d5f803e3d5ffd5b50601f80547fffffffffffffffffffffff0000000000000000000000000000000000000000ff166101006001600160a01b03938416021790556020546040517fc88a5e6d00000000000000000000000000000000000000000000000000000000815291166004820152678ac7230489e800006024820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063c88a5e6d906044015f604051808303815f87803b158015610546575f80fd5b505af1158015610558573d5f803e3d5ffd5b50506021546040517fc88a5e6d0000000000000000000000000000000000000000000000000000000081526001600160a01b039091166004820152678ac7230489e800006024820152737109709ecfa91a80626ff3989d68f67f5b1dd12d925063c88a5e6d91506044015f604051808303815f87803b1580156105d9575f80fd5b505af11580156105eb573d5f803e3d5ffd5b50505050565b6060601680548060200260200160405190810160405280929190818152602001828054801561064757602002820191905f5260205f20905b81546001600160a01b03168152600190910190602001808311610629575b5050505050905090565b6060601e805480602002602001604051908101604052809291908181526020015f905b82821015610784575f84815260208082206040805180820182526002870290920180546001600160a01b03168352600181018054835181870281018701909452808452939591948681019491929084015b8282101561076d578382905f5260205f200180546106e290612965565b80601f016020809104026020016040519081016040528092919081815260200182805461070e90612965565b80156107595780601f1061073057610100808354040283529160200191610759565b820191905f5260205f20905b81548152906001019060200180831161073c57829003601f168201915b5050505050815260200190600101906106c5565b505050508152505081526020019060010190610674565b50505050905090565b6060601880548060200260200160405190810160405280929190818152602001828054801561064757602002820191905f5260205f209081546001600160a01b03168152600190910190602001808311610629575050505050905090565b6060601780548060200260200160405190810160405280929190818152602001828054801561064757602002820191905f5260205f209081546001600160a01b03168152600190910190602001808311610629575050505050905090565b6020546040517f06447d560000000000000000000000000000000000000000000000000000000081526001600160a01b039091166004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d906306447d56906024015f604051808303815f87803b1580156108b8575f80fd5b505af11580156108ca573d5f803e3d5ffd5b50505050601f60019054906101000a90046001600160a01b03166001600160a01b031663d0e30db0671bc16d674ec800006040518263ffffffff1660e01b81526004015f604051808303818588803b158015610924575f80fd5b505af1158015610936573d5f803e3d5ffd5b5050601f546021546040517f095ea7b30000000000000000000000000000000000000000000000000000000081526001600160a01b039182166004820152670de0b6b3a7640000602482015261010090920416935063095ea7b3925060440190506020604051808303815f875af11580156109b3573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109d791906129b6565b50601f546020546021546040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081526001600160a01b0392831660048201529082166024820152610a3a9261010090049091169063dd62ed3e906044016103d0565b7f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d5f1c6001600160a01b03166390c5013b6040518163ffffffff1660e01b81526004015f604051808303815f87803b158015610a94575f80fd5b505af1158015610aa6573d5f803e3d5ffd5b50506021546040517f06447d560000000000000000000000000000000000000000000000000000000081526001600160a01b039091166004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d92506306447d5691506024015f604051808303815f87803b158015610b19575f80fd5b505af1158015610b2b573d5f803e3d5ffd5b5050601f546020546021546040517f23b872dd0000000000000000000000000000000000000000000000000000000081526001600160a01b0392831660048201529082166024820152670de0b6b3a764000060448201526101009092041692506323b872dd91506064016020604051808303815f875af1158015610bb1573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610bd591906129b6565b50601f546020546040517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b039182166004820152610c2d926101009004909116906370a08231906024016103d0565b601f546021546040517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b039182166004820152610c84926101009004909116906370a08231906024016103d0565b601f546020546021546040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081526001600160a01b0392831660048201529082166024820152610d269261010090049091169063dd62ed3e90604401602060405180830381865afa158015610cfc573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610d20919061294e565b5f612520565b7f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d5f1c6001600160a01b03166390c5013b6040518163ffffffff1660e01b81526004015f604051808303815f87803b1580156105d9575f80fd5b6020546040517f06447d560000000000000000000000000000000000000000000000000000000081526001600160a01b039091166004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d906306447d56906024015f604051808303815f87803b158015610def575f80fd5b505af1158015610e01573d5f803e3d5ffd5b50505050601f60019054906101000a90046001600160a01b03166001600160a01b031663d0e30db0670de0b6b3a76400006040518263ffffffff1660e01b81526004015f604051808303818588803b158015610e5b575f80fd5b505af1158015610e6d573d5f803e3d5ffd5b5050601f546021546040517f095ea7b30000000000000000000000000000000000000000000000000000000081526001600160a01b0391821660048201526706f05b59d3b20000602482015261010090920416935063095ea7b3925060440190506020604051808303815f875af1158015610eea573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610f0e91906129b6565b507f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d5f1c6001600160a01b03166390c5013b6040518163ffffffff1660e01b81526004015f604051808303815f87803b158015610f69575f80fd5b505af1158015610f7b573d5f803e3d5ffd5b50506021546040517f06447d560000000000000000000000000000000000000000000000000000000081526001600160a01b039091166004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d92506306447d5691506024015f604051808303815f87803b158015610fee575f80fd5b505af1158015611000573d5f803e3d5ffd5b505050507f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d5f1c6001600160a01b031663f48448146040518163ffffffff1660e01b81526004015f604051808303815f87803b15801561105e575f80fd5b505af1158015611070573d5f803e3d5ffd5b5050601f546020546021546040517f23b872dd0000000000000000000000000000000000000000000000000000000081526001600160a01b0392831660048201529082166024820152670de0b6b3a764000060448201526101009092041692506323b872dd91506064015b6020604051808303815f875af11580156110f7573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061111b91906129b6565b507f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d5f1c6001600160a01b03166390c5013b6040518163ffffffff1660e01b81526004015f604051808303815f87803b1580156105d9575f80fd5b6060601b805480602002602001604051908101604052809291908181526020015f905b82821015610784578382905f5260205f2090600202016040518060400160405290815f820180546111c990612965565b80601f01602080910402602001604051908101604052809291908181526020018280546111f590612965565b80156112405780601f1061121757610100808354040283529160200191611240565b820191905f5260205f20905b81548152906001019060200180831161122357829003601f168201915b50505050508152602001600182018054806020026020016040519081016040528092919081815260200182805480156112d757602002820191905f5260205f20905f905b82829054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190600401906020826003010492830192600103820291508084116112845790505b50505050508152505081526020019060010190611199565b6020546040517f06447d560000000000000000000000000000000000000000000000000000000081526001600160a01b039091166004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d906306447d56906024015f604051808303815f87803b15801561135e575f80fd5b505af1158015611370573d5f803e3d5ffd5b50505050601f60019054906101000a90046001600160a01b03166001600160a01b031663d0e30db0670de0b6b3a76400006040518263ffffffff1660e01b81526004015f604051808303818588803b1580156113ca575f80fd5b505af11580156113dc573d5f803e3d5ffd5b5050601f546020546040517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b03918216600482015261143795506101009092041692506370a0823191506024016103d0565b610d26601f60019054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103eb573d5f803e3d5ffd5b6060601a805480602002602001604051908101604052809291908181526020015f905b82821015610784578382905f5260205f200180546114cb90612965565b80601f01602080910402602001604051908101604052809291908181526020018280546114f790612965565b80156115425780601f1061151957610100808354040283529160200191611542565b820191905f5260205f20905b81548152906001019060200180831161152557829003601f168201915b5050505050815260200190600101906114ae565b6060601d805480602002602001604051908101604052809291908181526020015f905b82821015610784575f8481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561163457602002820191905f5260205f20905f905b82829054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190600401906020826003010492830192600103820291508084116115e15790505b50505050508152505081526020019060010190611579565b6060601c805480602002602001604051908101604052809291908181526020015f905b82821015610784575f8481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561172a57602002820191905f5260205f20905f905b82829054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190600401906020826003010492830192600103820291508084116116d75790505b5050505050815250508152602001906001019061166f565b60606019805480602002602001604051908101604052809291908181526020015f905b82821015610784578382905f5260205f2001805461178290612965565b80601f01602080910402602001604051908101604052809291908181526020018280546117ae90612965565b80156117f95780601f106117d0576101008083540402835291602001916117f9565b820191905f5260205f20905b8154815290600101906020018083116117dc57829003601f168201915b505050505081526020019060010190611765565b6008545f9060ff1615611824575060085460ff1690565b6040517f667f9d70000000000000000000000000000000000000000000000000000000008152737109709ecfa91a80626ff3989d68f67f5b1dd12d600482018190527f6661696c6564000000000000000000000000000000000000000000000000000060248301525f9163667f9d7090604401602060405180830381865afa1580156118b2573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906118d6919061294e565b1415905090565b6020546040517f06447d560000000000000000000000000000000000000000000000000000000081526001600160a01b039091166004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d906306447d56906024015f604051808303815f87803b15801561194c575f80fd5b505af115801561195e573d5f803e3d5ffd5b50505050601f60019054906101000a90046001600160a01b03166001600160a01b031663d0e30db0670de0b6b3a76400006040518263ffffffff1660e01b81526004015f604051808303818588803b1580156119b8575f80fd5b505af11580156119ca573d5f803e3d5ffd5b50505050507f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d5f1c6001600160a01b031663f48448146040518163ffffffff1660e01b81526004015f604051808303815f87803b158015611a29575f80fd5b505af1158015611a3b573d5f803e3d5ffd5b5050601f546040517f2e1a7d4d000000000000000000000000000000000000000000000000000000008152671bc16d674ec8000060048201526101009091046001600160a01b03169250632e1a7d4d91506024015f604051808303815f87803b158015611aa6575f80fd5b505af1158015611ab8573d5f803e3d5ffd5b505050507f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d5f1c6001600160a01b03166390c5013b6040518163ffffffff1660e01b81526004015f604051808303815f87803b1580156105d9575f80fd5b6020546040517f06447d560000000000000000000000000000000000000000000000000000000081526001600160a01b039091166004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d906306447d56906024015f604051808303815f87803b158015611b85575f80fd5b505af1158015611b97573d5f803e3d5ffd5b50505050601f60019054906101000a90046001600160a01b03166001600160a01b031663d0e30db0671bc16d674ec800006040518263ffffffff1660e01b81526004015f604051808303818588803b158015611bf1575f80fd5b505af1158015611c03573d5f803e3d5ffd5b5050601f546040517f2e1a7d4d000000000000000000000000000000000000000000000000000000008152670de0b6b3a764000060048201526101009091046001600160a01b03169350632e1a7d4d925060240190505f604051808303815f87803b158015611c70575f80fd5b505af1158015611c82573d5f803e3d5ffd5b5050601f546020546040517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b039182166004820152611cdc94506101009092041691506370a08231906024016103d0565b602054611437906001600160a01b031631677ce66c50e2840000612520565b6020546040517f06447d560000000000000000000000000000000000000000000000000000000081526001600160a01b039091166004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d906306447d56906024015f604051808303815f87803b158015611d6a575f80fd5b505af1158015611d7c573d5f803e3d5ffd5b50505050601f60019054906101000a90046001600160a01b03166001600160a01b031663d0e30db0671bc16d674ec800006040518263ffffffff1660e01b81526004015f604051808303818588803b158015611dd6575f80fd5b505af1158015611de8573d5f803e3d5ffd5b5050601f546021546040517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b039182166004820152670de0b6b3a7640000602482015261010090920416935063a9059cbb925060440190506020604051808303815f875af1158015611e65573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611e8991906129b6565b50601f546020546040517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b039182166004820152611ee1926101009004909116906370a08231906024016103d0565b601f546021546040517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b039182166004820152610d26926101009004909116906370a08231906024016103d0565b6060601580548060200260200160405190810160405280929190818152602001828054801561064757602002820191905f5260205f209081546001600160a01b03168152600190910190602001808311610629575050505050905090565b6020546040517f06447d560000000000000000000000000000000000000000000000000000000081526001600160a01b039091166004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d906306447d56906024015f604051808303815f87803b158015612005575f80fd5b505af1158015612017573d5f803e3d5ffd5b50505050601f60019054906101000a90046001600160a01b03166001600160a01b031663d0e30db0670de0b6b3a76400006040518263ffffffff1660e01b81526004015f604051808303818588803b158015612071575f80fd5b505af1158015612083573d5f803e3d5ffd5b50505050507f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d5f1c6001600160a01b03166390c5013b6040518163ffffffff1660e01b81526004015f604051808303815f87803b1580156120e2575f80fd5b505af11580156120f4573d5f803e3d5ffd5b50506021546040517f06447d560000000000000000000000000000000000000000000000000000000081526001600160a01b039091166004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d92506306447d5691506024015f604051808303815f87803b158015612167575f80fd5b505af1158015612179573d5f803e3d5ffd5b50505050601f60019054906101000a90046001600160a01b03166001600160a01b031663d0e30db0671bc16d674ec800006040518263ffffffff1660e01b81526004015f604051808303818588803b1580156121d3575f80fd5b505af11580156121e5573d5f803e3d5ffd5b50505050507f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d5f1c6001600160a01b03166390c5013b6040518163ffffffff1660e01b81526004015f604051808303815f87803b158015612244575f80fd5b505af1158015612256573d5f803e3d5ffd5b505050506122e0601f60019054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156122ae573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906122d2919061294e565b6729a2241af62c0000612520565b565b6020546040517f06447d560000000000000000000000000000000000000000000000000000000081526001600160a01b039091166004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d906306447d56906024015f604051808303815f87803b158015612351575f80fd5b505af1158015612363573d5f803e3d5ffd5b50505050601f60019054906101000a90046001600160a01b03166001600160a01b031663d0e30db0670de0b6b3a76400006040518263ffffffff1660e01b81526004015f604051808303818588803b1580156123bd575f80fd5b505af11580156123cf573d5f803e3d5ffd5b50505050507f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d5f1c6001600160a01b031663f48448146040518163ffffffff1660e01b81526004015f604051808303815f87803b15801561242e575f80fd5b505af1158015612440573d5f803e3d5ffd5b5050601f546021546040517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b039182166004820152671bc16d674ec80000602482015261010090920416925063a9059cbb91506044016110db565b6040517f0c9fd5810000000000000000000000000000000000000000000000000000000081528115156004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d90630c9fd581906024015f6040518083038186803b158015612507575f80fd5b505afa158015612519573d5f803e3d5ffd5b5050505050565b6040517f98296c540000000000000000000000000000000000000000000000000000000081526004810183905260248101829052737109709ecfa91a80626ff3989d68f67f5b1dd12d906398296c54906044015f6040518083038186803b158015612589575f80fd5b505afa15801561259b573d5f803e3d5ffd5b505050505050565b610b09806129dd83390190565b602080825282518282018190525f918401906040840190835b818110156125f05783516001600160a01b03168352602093840193909201916001016125c9565b509095945050505050565b5f81518084528060208401602086015e5f6020828601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011685010191505092915050565b5f602082016020835280845180835260408501915060408160051b8601019250602086015f5b82811015612740577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0878603018452815180516001600160a01b03168652602090810151604082880181905281519088018190529101906060600582901b8801810191908801905f5b81811015612726577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa08a85030183526127108486516125fb565b60209586019590945092909201916001016126d6565b50919750505060209485019492909201915060010161266d565b50929695505050505050565b5f8151808452602084019350602083015f5b8281101561279e5781517fffffffff000000000000000000000000000000000000000000000000000000001686526020958601959091019060010161275e565b5093949350505050565b5f602082016020835280845180835260408501915060408160051b8601019250602086015f5b82811015612740577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0878603018452815180516040875261281260408801826125fb565b905060208201519150868103602088015261282d818361274c565b9650505060209384019391909101906001016127ce565b5f602082016020835280845180835260408501915060408160051b8601019250602086015f5b82811015612740577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08786030184526128a48583516125fb565b9450602093840193919091019060010161286a565b5f602082016020835280845180835260408501915060408160051b8601019250602086015f5b82811015612740577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc087860301845281516001600160a01b0381511686526020810151905060406020870152612938604087018261274c565b95505060209384019391909101906001016128df565b5f6020828403121561295e575f80fd5b5051919050565b600181811c9082168061297957607f821691505b6020821081036129b0577f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b50919050565b5f602082840312156129c6575f80fd5b815180151581146129d5575f80fd5b939250505056fe60c0604052600d60809081526c2bb930b83832b21022ba3432b960991b60a0525f9061002b908261010b565b506040805180820190915260048152630ae8aa8960e31b6020820152600190610054908261010b565b506002805460ff1916601217905534801561006d575f80fd5b506101c5565b634e487b7160e01b5f52604160045260245ffd5b600181811c9082168061009b57607f821691505b6020821081036100b957634e487b7160e01b5f52602260045260245ffd5b50919050565b601f82111561010657805f5260205f20601f840160051c810160208510156100e45750805b601f840160051c820191505b81811015610103575f81556001016100f0565b50505b505050565b81516001600160401b0381111561012457610124610073565b610138816101328454610087565b846100bf565b6020601f82116001811461016a575f83156101535750848201515b5f19600385901b1c1916600184901b178455610103565b5f84815260208120601f198516915b828110156101995787850151825560209485019460019092019101610179565b50848210156101b657868401515f19600387901b60f8161c191681555b50505050600190811b01905550565b610937806101d25f395ff3fe6080604052600436106100bb575f3560e01c8063313ce56711610071578063a9059cbb1161004c578063a9059cbb146101eb578063d0e30db01461020a578063dd62ed3e14610212575f80fd5b8063313ce5671461018157806370a08231146101ac57806395d89b41146101d7575f80fd5b806318160ddd116100a157806318160ddd1461012757806323b872dd146101435780632e1a7d4d14610162575f80fd5b806306fdde03146100ce578063095ea7b3146100f8575f80fd5b366100ca576100c8610248565b005b5f80fd5b3480156100d9575f80fd5b506100e26102a2565b6040516100ef919061071f565b60405180910390f35b348015610103575f80fd5b5061011761011236600461079a565b61032d565b60405190151581526020016100ef565b348015610132575f80fd5b50475b6040519081526020016100ef565b34801561014e575f80fd5b5061011761015d3660046107c2565b6103a6565b34801561016d575f80fd5b506100c861017c3660046107fc565b610628565b34801561018c575f80fd5b5060025461019a9060ff1681565b60405160ff90911681526020016100ef565b3480156101b7575f80fd5b506101356101c6366004610813565b60036020525f908152604090205481565b3480156101e2575f80fd5b506100e26106ff565b3480156101f6575f80fd5b5061011761020536600461079a565b61070c565b6100c8610248565b34801561021d575f80fd5b5061013561022c36600461082c565b600460209081525f928352604080842090915290825290205481565b335f908152600360205260408120805434929061026690849061088a565b909155505060405134815233907fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c9060200160405180910390a2565b5f80546102ae9061089d565b80601f01602080910402602001604051908101604052809291908181526020018280546102da9061089d565b80156103255780601f106102fc57610100808354040283529160200191610325565b820191905f5260205f20905b81548152906001019060200180831161030857829003601f168201915b505050505081565b335f81815260046020908152604080832073ffffffffffffffffffffffffffffffffffffffff8716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906103949086815260200190565b60405180910390a35060015b92915050565b73ffffffffffffffffffffffffffffffffffffffff83165f90815260036020526040812054821115610412576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201525f60248201526044015b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff84163314801590610487575073ffffffffffffffffffffffffffffffffffffffff84165f9081526004602090815260408083203384529091529020547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff14155b156105435773ffffffffffffffffffffffffffffffffffffffff84165f9081526004602090815260408083203384529091529020548211156104fe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201525f6024820152604401610409565b73ffffffffffffffffffffffffffffffffffffffff84165f9081526004602090815260408083203384529091528120805484929061053d9084906108ee565b90915550505b73ffffffffffffffffffffffffffffffffffffffff84165f90815260036020526040812080548492906105779084906108ee565b909155505073ffffffffffffffffffffffffffffffffffffffff83165f90815260036020526040812080548492906105b090849061088a565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161061691815260200190565b60405180910390a35060019392505050565b335f90815260036020526040902054811115610679576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201525f6024820152604401610409565b335f90815260036020526040812080548392906106979084906108ee565b9091555050604051339082156108fc029083905f818181858888f193505050501580156106c6573d5f803e3d5ffd5b5060405181815233907f7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b659060200160405180910390a250565b600180546102ae9061089d565b5f6107183384846103a6565b9392505050565b602081525f82518060208401528060208501604085015e5f6040828501015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011684010191505092915050565b803573ffffffffffffffffffffffffffffffffffffffff81168114610795575f80fd5b919050565b5f80604083850312156107ab575f80fd5b6107b483610772565b946020939093013593505050565b5f805f606084860312156107d4575f80fd5b6107dd84610772565b92506107eb60208501610772565b929592945050506040919091013590565b5f6020828403121561080c575f80fd5b5035919050565b5f60208284031215610823575f80fd5b61071882610772565b5f806040838503121561083d575f80fd5b61084683610772565b915061085460208401610772565b90509250929050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b808201808211156103a0576103a061085d565b600181811c908216806108b157607f821691505b6020821081036108e8577f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b50919050565b818103818111156103a0576103a061085d56fea26469706673582212201a7e2768526903699ff63848395f5a59703b30791d800801933ea0642d2df2bc64736f6c634300081a0033a26469706673582212207c3ba5c510e72e947300157d2d1153a274c6c6f428bc488a83ffe3d44eaf1e2664736f6c634300081a0033",
}

// WZETATestABI is the input ABI used to generate the binding from.
// Deprecated: Use WZETATestMetaData.ABI instead.
var WZETATestABI = WZETATestMetaData.ABI

// WZETATestBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use WZETATestMetaData.Bin instead.
var WZETATestBin = WZETATestMetaData.Bin

// DeployWZETATest deploys a new Ethereum contract, binding an instance of WZETATest to it.
func DeployWZETATest(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *WZETATest, error) {
	parsed, err := WZETATestMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(WZETATestBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &WZETATest{WZETATestCaller: WZETATestCaller{contract: contract}, WZETATestTransactor: WZETATestTransactor{contract: contract}, WZETATestFilterer: WZETATestFilterer{contract: contract}}, nil
}

// WZETATest is an auto generated Go binding around an Ethereum contract.
type WZETATest struct {
	WZETATestCaller     // Read-only binding to the contract
	WZETATestTransactor // Write-only binding to the contract
	WZETATestFilterer   // Log filterer for contract events
}

// WZETATestCaller is an auto generated read-only Go binding around an Ethereum contract.
type WZETATestCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// WZETATestTransactor is an auto generated write-only Go binding around an Ethereum contract.
type WZETATestTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// WZETATestFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type WZETATestFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// WZETATestSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type WZETATestSession struct {
	Contract     *WZETATest        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// WZETATestCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type WZETATestCallerSession struct {
	Contract *WZETATestCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// WZETATestTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type WZETATestTransactorSession struct {
	Contract     *WZETATestTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// WZETATestRaw is an auto generated low-level Go binding around an Ethereum contract.
type WZETATestRaw struct {
	Contract *WZETATest // Generic contract binding to access the raw methods on
}

// WZETATestCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type WZETATestCallerRaw struct {
	Contract *WZETATestCaller // Generic read-only contract binding to access the raw methods on
}

// WZETATestTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type WZETATestTransactorRaw struct {
	Contract *WZETATestTransactor // Generic write-only contract binding to access the raw methods on
}

// NewWZETATest creates a new instance of WZETATest, bound to a specific deployed contract.
func NewWZETATest(address common.Address, backend bind.ContractBackend) (*WZETATest, error) {
	contract, err := bindWZETATest(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &WZETATest{WZETATestCaller: WZETATestCaller{contract: contract}, WZETATestTransactor: WZETATestTransactor{contract: contract}, WZETATestFilterer: WZETATestFilterer{contract: contract}}, nil
}

// NewWZETATestCaller creates a new read-only instance of WZETATest, bound to a specific deployed contract.
func NewWZETATestCaller(address common.Address, caller bind.ContractCaller) (*WZETATestCaller, error) {
	contract, err := bindWZETATest(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &WZETATestCaller{contract: contract}, nil
}

// NewWZETATestTransactor creates a new write-only instance of WZETATest, bound to a specific deployed contract.
func NewWZETATestTransactor(address common.Address, transactor bind.ContractTransactor) (*WZETATestTransactor, error) {
	contract, err := bindWZETATest(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &WZETATestTransactor{contract: contract}, nil
}

// NewWZETATestFilterer creates a new log filterer instance of WZETATest, bound to a specific deployed contract.
func NewWZETATestFilterer(address common.Address, filterer bind.ContractFilterer) (*WZETATestFilterer, error) {
	contract, err := bindWZETATest(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &WZETATestFilterer{contract: contract}, nil
}

// bindWZETATest binds a generic wrapper to an already deployed contract.
func bindWZETATest(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := WZETATestMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_WZETATest *WZETATestRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _WZETATest.Contract.WZETATestCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_WZETATest *WZETATestRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _WZETATest.Contract.WZETATestTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_WZETATest *WZETATestRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _WZETATest.Contract.WZETATestTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_WZETATest *WZETATestCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _WZETATest.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_WZETATest *WZETATestTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _WZETATest.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_WZETATest *WZETATestTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _WZETATest.Contract.contract.Transact(opts, method, params...)
}

// ISTEST is a free data retrieval call binding the contract method 0xfa7626d4.
//
// Solidity: function IS_TEST() view returns(bool)
func (_WZETATest *WZETATestCaller) ISTEST(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _WZETATest.contract.Call(opts, &out, "IS_TEST")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ISTEST is a free data retrieval call binding the contract method 0xfa7626d4.
//
// Solidity: function IS_TEST() view returns(bool)
func (_WZETATest *WZETATestSession) ISTEST() (bool, error) {
	return _WZETATest.Contract.ISTEST(&_WZETATest.CallOpts)
}

// ISTEST is a free data retrieval call binding the contract method 0xfa7626d4.
//
// Solidity: function IS_TEST() view returns(bool)
func (_WZETATest *WZETATestCallerSession) ISTEST() (bool, error) {
	return _WZETATest.Contract.ISTEST(&_WZETATest.CallOpts)
}

// ExcludeArtifacts is a free data retrieval call binding the contract method 0xb5508aa9.
//
// Solidity: function excludeArtifacts() view returns(string[] excludedArtifacts_)
func (_WZETATest *WZETATestCaller) ExcludeArtifacts(opts *bind.CallOpts) ([]string, error) {
	var out []interface{}
	err := _WZETATest.contract.Call(opts, &out, "excludeArtifacts")

	if err != nil {
		return *new([]string), err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)

	return out0, err

}

// ExcludeArtifacts is a free data retrieval call binding the contract method 0xb5508aa9.
//
// Solidity: function excludeArtifacts() view returns(string[] excludedArtifacts_)
func (_WZETATest *WZETATestSession) ExcludeArtifacts() ([]string, error) {
	return _WZETATest.Contract.ExcludeArtifacts(&_WZETATest.CallOpts)
}

// ExcludeArtifacts is a free data retrieval call binding the contract method 0xb5508aa9.
//
// Solidity: function excludeArtifacts() view returns(string[] excludedArtifacts_)
func (_WZETATest *WZETATestCallerSession) ExcludeArtifacts() ([]string, error) {
	return _WZETATest.Contract.ExcludeArtifacts(&_WZETATest.CallOpts)
}

// ExcludeContracts is a free data retrieval call binding the contract method 0xe20c9f71.
//
// Solidity: function excludeContracts() view returns(address[] excludedContracts_)
func (_WZETATest *WZETATestCaller) ExcludeContracts(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _WZETATest.contract.Call(opts, &out, "excludeContracts")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// ExcludeContracts is a free data retrieval call binding the contract method 0xe20c9f71.
//
// Solidity: function excludeContracts() view returns(address[] excludedContracts_)
func (_WZETATest *WZETATestSession) ExcludeContracts() ([]common.Address, error) {
	return _WZETATest.Contract.ExcludeContracts(&_WZETATest.CallOpts)
}

// ExcludeContracts is a free data retrieval call binding the contract method 0xe20c9f71.
//
// Solidity: function excludeContracts() view returns(address[] excludedContracts_)
func (_WZETATest *WZETATestCallerSession) ExcludeContracts() ([]common.Address, error) {
	return _WZETATest.Contract.ExcludeContracts(&_WZETATest.CallOpts)
}

// ExcludeSelectors is a free data retrieval call binding the contract method 0xb0464fdc.
//
// Solidity: function excludeSelectors() view returns((address,bytes4[])[] excludedSelectors_)
func (_WZETATest *WZETATestCaller) ExcludeSelectors(opts *bind.CallOpts) ([]StdInvariantFuzzSelector, error) {
	var out []interface{}
	err := _WZETATest.contract.Call(opts, &out, "excludeSelectors")

	if err != nil {
		return *new([]StdInvariantFuzzSelector), err
	}

	out0 := *abi.ConvertType(out[0], new([]StdInvariantFuzzSelector)).(*[]StdInvariantFuzzSelector)

	return out0, err

}

// ExcludeSelectors is a free data retrieval call binding the contract method 0xb0464fdc.
//
// Solidity: function excludeSelectors() view returns((address,bytes4[])[] excludedSelectors_)
func (_WZETATest *WZETATestSession) ExcludeSelectors() ([]StdInvariantFuzzSelector, error) {
	return _WZETATest.Contract.ExcludeSelectors(&_WZETATest.CallOpts)
}

// ExcludeSelectors is a free data retrieval call binding the contract method 0xb0464fdc.
//
// Solidity: function excludeSelectors() view returns((address,bytes4[])[] excludedSelectors_)
func (_WZETATest *WZETATestCallerSession) ExcludeSelectors() ([]StdInvariantFuzzSelector, error) {
	return _WZETATest.Contract.ExcludeSelectors(&_WZETATest.CallOpts)
}

// ExcludeSenders is a free data retrieval call binding the contract method 0x1ed7831c.
//
// Solidity: function excludeSenders() view returns(address[] excludedSenders_)
func (_WZETATest *WZETATestCaller) ExcludeSenders(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _WZETATest.contract.Call(opts, &out, "excludeSenders")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// ExcludeSenders is a free data retrieval call binding the contract method 0x1ed7831c.
//
// Solidity: function excludeSenders() view returns(address[] excludedSenders_)
func (_WZETATest *WZETATestSession) ExcludeSenders() ([]common.Address, error) {
	return _WZETATest.Contract.ExcludeSenders(&_WZETATest.CallOpts)
}

// ExcludeSenders is a free data retrieval call binding the contract method 0x1ed7831c.
//
// Solidity: function excludeSenders() view returns(address[] excludedSenders_)
func (_WZETATest *WZETATestCallerSession) ExcludeSenders() ([]common.Address, error) {
	return _WZETATest.Contract.ExcludeSenders(&_WZETATest.CallOpts)
}

// Failed is a free data retrieval call binding the contract method 0xba414fa6.
//
// Solidity: function failed() view returns(bool)
func (_WZETATest *WZETATestCaller) Failed(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _WZETATest.contract.Call(opts, &out, "failed")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Failed is a free data retrieval call binding the contract method 0xba414fa6.
//
// Solidity: function failed() view returns(bool)
func (_WZETATest *WZETATestSession) Failed() (bool, error) {
	return _WZETATest.Contract.Failed(&_WZETATest.CallOpts)
}

// Failed is a free data retrieval call binding the contract method 0xba414fa6.
//
// Solidity: function failed() view returns(bool)
func (_WZETATest *WZETATestCallerSession) Failed() (bool, error) {
	return _WZETATest.Contract.Failed(&_WZETATest.CallOpts)
}

// TargetArtifactSelectors is a free data retrieval call binding the contract method 0x66d9a9a0.
//
// Solidity: function targetArtifactSelectors() view returns((string,bytes4[])[] targetedArtifactSelectors_)
func (_WZETATest *WZETATestCaller) TargetArtifactSelectors(opts *bind.CallOpts) ([]StdInvariantFuzzArtifactSelector, error) {
	var out []interface{}
	err := _WZETATest.contract.Call(opts, &out, "targetArtifactSelectors")

	if err != nil {
		return *new([]StdInvariantFuzzArtifactSelector), err
	}

	out0 := *abi.ConvertType(out[0], new([]StdInvariantFuzzArtifactSelector)).(*[]StdInvariantFuzzArtifactSelector)

	return out0, err

}

// TargetArtifactSelectors is a free data retrieval call binding the contract method 0x66d9a9a0.
//
// Solidity: function targetArtifactSelectors() view returns((string,bytes4[])[] targetedArtifactSelectors_)
func (_WZETATest *WZETATestSession) TargetArtifactSelectors() ([]StdInvariantFuzzArtifactSelector, error) {
	return _WZETATest.Contract.TargetArtifactSelectors(&_WZETATest.CallOpts)
}

// TargetArtifactSelectors is a free data retrieval call binding the contract method 0x66d9a9a0.
//
// Solidity: function targetArtifactSelectors() view returns((string,bytes4[])[] targetedArtifactSelectors_)
func (_WZETATest *WZETATestCallerSession) TargetArtifactSelectors() ([]StdInvariantFuzzArtifactSelector, error) {
	return _WZETATest.Contract.TargetArtifactSelectors(&_WZETATest.CallOpts)
}

// TargetArtifacts is a free data retrieval call binding the contract method 0x85226c81.
//
// Solidity: function targetArtifacts() view returns(string[] targetedArtifacts_)
func (_WZETATest *WZETATestCaller) TargetArtifacts(opts *bind.CallOpts) ([]string, error) {
	var out []interface{}
	err := _WZETATest.contract.Call(opts, &out, "targetArtifacts")

	if err != nil {
		return *new([]string), err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)

	return out0, err

}

// TargetArtifacts is a free data retrieval call binding the contract method 0x85226c81.
//
// Solidity: function targetArtifacts() view returns(string[] targetedArtifacts_)
func (_WZETATest *WZETATestSession) TargetArtifacts() ([]string, error) {
	return _WZETATest.Contract.TargetArtifacts(&_WZETATest.CallOpts)
}

// TargetArtifacts is a free data retrieval call binding the contract method 0x85226c81.
//
// Solidity: function targetArtifacts() view returns(string[] targetedArtifacts_)
func (_WZETATest *WZETATestCallerSession) TargetArtifacts() ([]string, error) {
	return _WZETATest.Contract.TargetArtifacts(&_WZETATest.CallOpts)
}

// TargetContracts is a free data retrieval call binding the contract method 0x3f7286f4.
//
// Solidity: function targetContracts() view returns(address[] targetedContracts_)
func (_WZETATest *WZETATestCaller) TargetContracts(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _WZETATest.contract.Call(opts, &out, "targetContracts")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// TargetContracts is a free data retrieval call binding the contract method 0x3f7286f4.
//
// Solidity: function targetContracts() view returns(address[] targetedContracts_)
func (_WZETATest *WZETATestSession) TargetContracts() ([]common.Address, error) {
	return _WZETATest.Contract.TargetContracts(&_WZETATest.CallOpts)
}

// TargetContracts is a free data retrieval call binding the contract method 0x3f7286f4.
//
// Solidity: function targetContracts() view returns(address[] targetedContracts_)
func (_WZETATest *WZETATestCallerSession) TargetContracts() ([]common.Address, error) {
	return _WZETATest.Contract.TargetContracts(&_WZETATest.CallOpts)
}

// TargetInterfaces is a free data retrieval call binding the contract method 0x2ade3880.
//
// Solidity: function targetInterfaces() view returns((address,string[])[] targetedInterfaces_)
func (_WZETATest *WZETATestCaller) TargetInterfaces(opts *bind.CallOpts) ([]StdInvariantFuzzInterface, error) {
	var out []interface{}
	err := _WZETATest.contract.Call(opts, &out, "targetInterfaces")

	if err != nil {
		return *new([]StdInvariantFuzzInterface), err
	}

	out0 := *abi.ConvertType(out[0], new([]StdInvariantFuzzInterface)).(*[]StdInvariantFuzzInterface)

	return out0, err

}

// TargetInterfaces is a free data retrieval call binding the contract method 0x2ade3880.
//
// Solidity: function targetInterfaces() view returns((address,string[])[] targetedInterfaces_)
func (_WZETATest *WZETATestSession) TargetInterfaces() ([]StdInvariantFuzzInterface, error) {
	return _WZETATest.Contract.TargetInterfaces(&_WZETATest.CallOpts)
}

// TargetInterfaces is a free data retrieval call binding the contract method 0x2ade3880.
//
// Solidity: function targetInterfaces() view returns((address,string[])[] targetedInterfaces_)
func (_WZETATest *WZETATestCallerSession) TargetInterfaces() ([]StdInvariantFuzzInterface, error) {
	return _WZETATest.Contract.TargetInterfaces(&_WZETATest.CallOpts)
}

// TargetSelectors is a free data retrieval call binding the contract method 0x916a17c6.
//
// Solidity: function targetSelectors() view returns((address,bytes4[])[] targetedSelectors_)
func (_WZETATest *WZETATestCaller) TargetSelectors(opts *bind.CallOpts) ([]StdInvariantFuzzSelector, error) {
	var out []interface{}
	err := _WZETATest.contract.Call(opts, &out, "targetSelectors")

	if err != nil {
		return *new([]StdInvariantFuzzSelector), err
	}

	out0 := *abi.ConvertType(out[0], new([]StdInvariantFuzzSelector)).(*[]StdInvariantFuzzSelector)

	return out0, err

}

// TargetSelectors is a free data retrieval call binding the contract method 0x916a17c6.
//
// Solidity: function targetSelectors() view returns((address,bytes4[])[] targetedSelectors_)
func (_WZETATest *WZETATestSession) TargetSelectors() ([]StdInvariantFuzzSelector, error) {
	return _WZETATest.Contract.TargetSelectors(&_WZETATest.CallOpts)
}

// TargetSelectors is a free data retrieval call binding the contract method 0x916a17c6.
//
// Solidity: function targetSelectors() view returns((address,bytes4[])[] targetedSelectors_)
func (_WZETATest *WZETATestCallerSession) TargetSelectors() ([]StdInvariantFuzzSelector, error) {
	return _WZETATest.Contract.TargetSelectors(&_WZETATest.CallOpts)
}

// TargetSenders is a free data retrieval call binding the contract method 0x3e5e3c23.
//
// Solidity: function targetSenders() view returns(address[] targetedSenders_)
func (_WZETATest *WZETATestCaller) TargetSenders(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _WZETATest.contract.Call(opts, &out, "targetSenders")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// TargetSenders is a free data retrieval call binding the contract method 0x3e5e3c23.
//
// Solidity: function targetSenders() view returns(address[] targetedSenders_)
func (_WZETATest *WZETATestSession) TargetSenders() ([]common.Address, error) {
	return _WZETATest.Contract.TargetSenders(&_WZETATest.CallOpts)
}

// TargetSenders is a free data retrieval call binding the contract method 0x3e5e3c23.
//
// Solidity: function targetSenders() view returns(address[] targetedSenders_)
func (_WZETATest *WZETATestCallerSession) TargetSenders() ([]common.Address, error) {
	return _WZETATest.Contract.TargetSenders(&_WZETATest.CallOpts)
}

// SetUp is a paid mutator transaction binding the contract method 0x0a9254e4.
//
// Solidity: function setUp() returns()
func (_WZETATest *WZETATestTransactor) SetUp(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _WZETATest.contract.Transact(opts, "setUp")
}

// SetUp is a paid mutator transaction binding the contract method 0x0a9254e4.
//
// Solidity: function setUp() returns()
func (_WZETATest *WZETATestSession) SetUp() (*types.Transaction, error) {
	return _WZETATest.Contract.SetUp(&_WZETATest.TransactOpts)
}

// SetUp is a paid mutator transaction binding the contract method 0x0a9254e4.
//
// Solidity: function setUp() returns()
func (_WZETATest *WZETATestTransactorSession) SetUp() (*types.Transaction, error) {
	return _WZETATest.Contract.SetUp(&_WZETATest.TransactOpts)
}

// TestApproveAndTransferFrom is a paid mutator transaction binding the contract method 0x537e0a5c.
//
// Solidity: function testApproveAndTransferFrom() returns()
func (_WZETATest *WZETATestTransactor) TestApproveAndTransferFrom(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _WZETATest.contract.Transact(opts, "testApproveAndTransferFrom")
}

// TestApproveAndTransferFrom is a paid mutator transaction binding the contract method 0x537e0a5c.
//
// Solidity: function testApproveAndTransferFrom() returns()
func (_WZETATest *WZETATestSession) TestApproveAndTransferFrom() (*types.Transaction, error) {
	return _WZETATest.Contract.TestApproveAndTransferFrom(&_WZETATest.TransactOpts)
}

// TestApproveAndTransferFrom is a paid mutator transaction binding the contract method 0x537e0a5c.
//
// Solidity: function testApproveAndTransferFrom() returns()
func (_WZETATest *WZETATestTransactorSession) TestApproveAndTransferFrom() (*types.Transaction, error) {
	return _WZETATest.Contract.TestApproveAndTransferFrom(&_WZETATest.TransactOpts)
}

// TestDeposit is a paid mutator transaction binding the contract method 0x7f924c4e.
//
// Solidity: function testDeposit() returns()
func (_WZETATest *WZETATestTransactor) TestDeposit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _WZETATest.contract.Transact(opts, "testDeposit")
}

// TestDeposit is a paid mutator transaction binding the contract method 0x7f924c4e.
//
// Solidity: function testDeposit() returns()
func (_WZETATest *WZETATestSession) TestDeposit() (*types.Transaction, error) {
	return _WZETATest.Contract.TestDeposit(&_WZETATest.TransactOpts)
}

// TestDeposit is a paid mutator transaction binding the contract method 0x7f924c4e.
//
// Solidity: function testDeposit() returns()
func (_WZETATest *WZETATestTransactorSession) TestDeposit() (*types.Transaction, error) {
	return _WZETATest.Contract.TestDeposit(&_WZETATest.TransactOpts)
}

// TestDepositAndReceiveFallback is a paid mutator transaction binding the contract method 0x013946e7.
//
// Solidity: function testDepositAndReceiveFallback() returns()
func (_WZETATest *WZETATestTransactor) TestDepositAndReceiveFallback(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _WZETATest.contract.Transact(opts, "testDepositAndReceiveFallback")
}

// TestDepositAndReceiveFallback is a paid mutator transaction binding the contract method 0x013946e7.
//
// Solidity: function testDepositAndReceiveFallback() returns()
func (_WZETATest *WZETATestSession) TestDepositAndReceiveFallback() (*types.Transaction, error) {
	return _WZETATest.Contract.TestDepositAndReceiveFallback(&_WZETATest.TransactOpts)
}

// TestDepositAndReceiveFallback is a paid mutator transaction binding the contract method 0x013946e7.
//
// Solidity: function testDepositAndReceiveFallback() returns()
func (_WZETATest *WZETATestTransactorSession) TestDepositAndReceiveFallback() (*types.Transaction, error) {
	return _WZETATest.Contract.TestDepositAndReceiveFallback(&_WZETATest.TransactOpts)
}

// TestTotalSupply is a paid mutator transaction binding the contract method 0xeb7492d1.
//
// Solidity: function testTotalSupply() returns()
func (_WZETATest *WZETATestTransactor) TestTotalSupply(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _WZETATest.contract.Transact(opts, "testTotalSupply")
}

// TestTotalSupply is a paid mutator transaction binding the contract method 0xeb7492d1.
//
// Solidity: function testTotalSupply() returns()
func (_WZETATest *WZETATestSession) TestTotalSupply() (*types.Transaction, error) {
	return _WZETATest.Contract.TestTotalSupply(&_WZETATest.TransactOpts)
}

// TestTotalSupply is a paid mutator transaction binding the contract method 0xeb7492d1.
//
// Solidity: function testTotalSupply() returns()
func (_WZETATest *WZETATestTransactorSession) TestTotalSupply() (*types.Transaction, error) {
	return _WZETATest.Contract.TestTotalSupply(&_WZETATest.TransactOpts)
}

// TestTransfer is a paid mutator transaction binding the contract method 0xd591221f.
//
// Solidity: function testTransfer() returns()
func (_WZETATest *WZETATestTransactor) TestTransfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _WZETATest.contract.Transact(opts, "testTransfer")
}

// TestTransfer is a paid mutator transaction binding the contract method 0xd591221f.
//
// Solidity: function testTransfer() returns()
func (_WZETATest *WZETATestSession) TestTransfer() (*types.Transaction, error) {
	return _WZETATest.Contract.TestTransfer(&_WZETATest.TransactOpts)
}

// TestTransfer is a paid mutator transaction binding the contract method 0xd591221f.
//
// Solidity: function testTransfer() returns()
func (_WZETATest *WZETATestTransactorSession) TestTransfer() (*types.Transaction, error) {
	return _WZETATest.Contract.TestTransfer(&_WZETATest.TransactOpts)
}

// TestTransferFromRevertsIfInsufficientAllowance is a paid mutator transaction binding the contract method 0x5ecf1d8d.
//
// Solidity: function testTransferFromRevertsIfInsufficientAllowance() returns()
func (_WZETATest *WZETATestTransactor) TestTransferFromRevertsIfInsufficientAllowance(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _WZETATest.contract.Transact(opts, "testTransferFromRevertsIfInsufficientAllowance")
}

// TestTransferFromRevertsIfInsufficientAllowance is a paid mutator transaction binding the contract method 0x5ecf1d8d.
//
// Solidity: function testTransferFromRevertsIfInsufficientAllowance() returns()
func (_WZETATest *WZETATestSession) TestTransferFromRevertsIfInsufficientAllowance() (*types.Transaction, error) {
	return _WZETATest.Contract.TestTransferFromRevertsIfInsufficientAllowance(&_WZETATest.TransactOpts)
}

// TestTransferFromRevertsIfInsufficientAllowance is a paid mutator transaction binding the contract method 0x5ecf1d8d.
//
// Solidity: function testTransferFromRevertsIfInsufficientAllowance() returns()
func (_WZETATest *WZETATestTransactorSession) TestTransferFromRevertsIfInsufficientAllowance() (*types.Transaction, error) {
	return _WZETATest.Contract.TestTransferFromRevertsIfInsufficientAllowance(&_WZETATest.TransactOpts)
}

// TestTransferRevertsIfInsufficientBalance is a paid mutator transaction binding the contract method 0xfbf7e238.
//
// Solidity: function testTransferRevertsIfInsufficientBalance() returns()
func (_WZETATest *WZETATestTransactor) TestTransferRevertsIfInsufficientBalance(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _WZETATest.contract.Transact(opts, "testTransferRevertsIfInsufficientBalance")
}

// TestTransferRevertsIfInsufficientBalance is a paid mutator transaction binding the contract method 0xfbf7e238.
//
// Solidity: function testTransferRevertsIfInsufficientBalance() returns()
func (_WZETATest *WZETATestSession) TestTransferRevertsIfInsufficientBalance() (*types.Transaction, error) {
	return _WZETATest.Contract.TestTransferRevertsIfInsufficientBalance(&_WZETATest.TransactOpts)
}

// TestTransferRevertsIfInsufficientBalance is a paid mutator transaction binding the contract method 0xfbf7e238.
//
// Solidity: function testTransferRevertsIfInsufficientBalance() returns()
func (_WZETATest *WZETATestTransactorSession) TestTransferRevertsIfInsufficientBalance() (*types.Transaction, error) {
	return _WZETATest.Contract.TestTransferRevertsIfInsufficientBalance(&_WZETATest.TransactOpts)
}

// TestWithdraw is a paid mutator transaction binding the contract method 0xd509b16c.
//
// Solidity: function testWithdraw() returns()
func (_WZETATest *WZETATestTransactor) TestWithdraw(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _WZETATest.contract.Transact(opts, "testWithdraw")
}

// TestWithdraw is a paid mutator transaction binding the contract method 0xd509b16c.
//
// Solidity: function testWithdraw() returns()
func (_WZETATest *WZETATestSession) TestWithdraw() (*types.Transaction, error) {
	return _WZETATest.Contract.TestWithdraw(&_WZETATest.TransactOpts)
}

// TestWithdraw is a paid mutator transaction binding the contract method 0xd509b16c.
//
// Solidity: function testWithdraw() returns()
func (_WZETATest *WZETATestTransactorSession) TestWithdraw() (*types.Transaction, error) {
	return _WZETATest.Contract.TestWithdraw(&_WZETATest.TransactOpts)
}

// TestWithdrawRevertsIfInsufficientBalance is a paid mutator transaction binding the contract method 0xc133a5f0.
//
// Solidity: function testWithdrawRevertsIfInsufficientBalance() returns()
func (_WZETATest *WZETATestTransactor) TestWithdrawRevertsIfInsufficientBalance(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _WZETATest.contract.Transact(opts, "testWithdrawRevertsIfInsufficientBalance")
}

// TestWithdrawRevertsIfInsufficientBalance is a paid mutator transaction binding the contract method 0xc133a5f0.
//
// Solidity: function testWithdrawRevertsIfInsufficientBalance() returns()
func (_WZETATest *WZETATestSession) TestWithdrawRevertsIfInsufficientBalance() (*types.Transaction, error) {
	return _WZETATest.Contract.TestWithdrawRevertsIfInsufficientBalance(&_WZETATest.TransactOpts)
}

// TestWithdrawRevertsIfInsufficientBalance is a paid mutator transaction binding the contract method 0xc133a5f0.
//
// Solidity: function testWithdrawRevertsIfInsufficientBalance() returns()
func (_WZETATest *WZETATestTransactorSession) TestWithdrawRevertsIfInsufficientBalance() (*types.Transaction, error) {
	return _WZETATest.Contract.TestWithdrawRevertsIfInsufficientBalance(&_WZETATest.TransactOpts)
}

// WZETATestLogIterator is returned from FilterLog and is used to iterate over the raw logs and unpacked data for Log events raised by the WZETATest contract.
type WZETATestLogIterator struct {
	Event *WZETATestLog // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WZETATestLogIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WZETATestLog)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WZETATestLog)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WZETATestLogIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WZETATestLogIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WZETATestLog represents a Log event raised by the WZETATest contract.
type WZETATestLog struct {
	Arg0 string
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLog is a free log retrieval operation binding the contract event 0x41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50.
//
// Solidity: event log(string arg0)
func (_WZETATest *WZETATestFilterer) FilterLog(opts *bind.FilterOpts) (*WZETATestLogIterator, error) {

	logs, sub, err := _WZETATest.contract.FilterLogs(opts, "log")
	if err != nil {
		return nil, err
	}
	return &WZETATestLogIterator{contract: _WZETATest.contract, event: "log", logs: logs, sub: sub}, nil
}

// WatchLog is a free log subscription operation binding the contract event 0x41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50.
//
// Solidity: event log(string arg0)
func (_WZETATest *WZETATestFilterer) WatchLog(opts *bind.WatchOpts, sink chan<- *WZETATestLog) (event.Subscription, error) {

	logs, sub, err := _WZETATest.contract.WatchLogs(opts, "log")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WZETATestLog)
				if err := _WZETATest.contract.UnpackLog(event, "log", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLog is a log parse operation binding the contract event 0x41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50.
//
// Solidity: event log(string arg0)
func (_WZETATest *WZETATestFilterer) ParseLog(log types.Log) (*WZETATestLog, error) {
	event := new(WZETATestLog)
	if err := _WZETATest.contract.UnpackLog(event, "log", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// WZETATestLogAddressIterator is returned from FilterLogAddress and is used to iterate over the raw logs and unpacked data for LogAddress events raised by the WZETATest contract.
type WZETATestLogAddressIterator struct {
	Event *WZETATestLogAddress // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WZETATestLogAddressIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WZETATestLogAddress)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WZETATestLogAddress)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WZETATestLogAddressIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WZETATestLogAddressIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WZETATestLogAddress represents a LogAddress event raised by the WZETATest contract.
type WZETATestLogAddress struct {
	Arg0 common.Address
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogAddress is a free log retrieval operation binding the contract event 0x7ae74c527414ae135fd97047b12921a5ec3911b804197855d67e25c7b75ee6f3.
//
// Solidity: event log_address(address arg0)
func (_WZETATest *WZETATestFilterer) FilterLogAddress(opts *bind.FilterOpts) (*WZETATestLogAddressIterator, error) {

	logs, sub, err := _WZETATest.contract.FilterLogs(opts, "log_address")
	if err != nil {
		return nil, err
	}
	return &WZETATestLogAddressIterator{contract: _WZETATest.contract, event: "log_address", logs: logs, sub: sub}, nil
}

// WatchLogAddress is a free log subscription operation binding the contract event 0x7ae74c527414ae135fd97047b12921a5ec3911b804197855d67e25c7b75ee6f3.
//
// Solidity: event log_address(address arg0)
func (_WZETATest *WZETATestFilterer) WatchLogAddress(opts *bind.WatchOpts, sink chan<- *WZETATestLogAddress) (event.Subscription, error) {

	logs, sub, err := _WZETATest.contract.WatchLogs(opts, "log_address")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WZETATestLogAddress)
				if err := _WZETATest.contract.UnpackLog(event, "log_address", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogAddress is a log parse operation binding the contract event 0x7ae74c527414ae135fd97047b12921a5ec3911b804197855d67e25c7b75ee6f3.
//
// Solidity: event log_address(address arg0)
func (_WZETATest *WZETATestFilterer) ParseLogAddress(log types.Log) (*WZETATestLogAddress, error) {
	event := new(WZETATestLogAddress)
	if err := _WZETATest.contract.UnpackLog(event, "log_address", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// WZETATestLogArrayIterator is returned from FilterLogArray and is used to iterate over the raw logs and unpacked data for LogArray events raised by the WZETATest contract.
type WZETATestLogArrayIterator struct {
	Event *WZETATestLogArray // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WZETATestLogArrayIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WZETATestLogArray)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WZETATestLogArray)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WZETATestLogArrayIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WZETATestLogArrayIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WZETATestLogArray represents a LogArray event raised by the WZETATest contract.
type WZETATestLogArray struct {
	Val []*big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogArray is a free log retrieval operation binding the contract event 0xfb102865d50addddf69da9b5aa1bced66c80cf869a5c8d0471a467e18ce9cab1.
//
// Solidity: event log_array(uint256[] val)
func (_WZETATest *WZETATestFilterer) FilterLogArray(opts *bind.FilterOpts) (*WZETATestLogArrayIterator, error) {

	logs, sub, err := _WZETATest.contract.FilterLogs(opts, "log_array")
	if err != nil {
		return nil, err
	}
	return &WZETATestLogArrayIterator{contract: _WZETATest.contract, event: "log_array", logs: logs, sub: sub}, nil
}

// WatchLogArray is a free log subscription operation binding the contract event 0xfb102865d50addddf69da9b5aa1bced66c80cf869a5c8d0471a467e18ce9cab1.
//
// Solidity: event log_array(uint256[] val)
func (_WZETATest *WZETATestFilterer) WatchLogArray(opts *bind.WatchOpts, sink chan<- *WZETATestLogArray) (event.Subscription, error) {

	logs, sub, err := _WZETATest.contract.WatchLogs(opts, "log_array")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WZETATestLogArray)
				if err := _WZETATest.contract.UnpackLog(event, "log_array", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogArray is a log parse operation binding the contract event 0xfb102865d50addddf69da9b5aa1bced66c80cf869a5c8d0471a467e18ce9cab1.
//
// Solidity: event log_array(uint256[] val)
func (_WZETATest *WZETATestFilterer) ParseLogArray(log types.Log) (*WZETATestLogArray, error) {
	event := new(WZETATestLogArray)
	if err := _WZETATest.contract.UnpackLog(event, "log_array", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// WZETATestLogArray0Iterator is returned from FilterLogArray0 and is used to iterate over the raw logs and unpacked data for LogArray0 events raised by the WZETATest contract.
type WZETATestLogArray0Iterator struct {
	Event *WZETATestLogArray0 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WZETATestLogArray0Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WZETATestLogArray0)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WZETATestLogArray0)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WZETATestLogArray0Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WZETATestLogArray0Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WZETATestLogArray0 represents a LogArray0 event raised by the WZETATest contract.
type WZETATestLogArray0 struct {
	Val []*big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogArray0 is a free log retrieval operation binding the contract event 0x890a82679b470f2bd82816ed9b161f97d8b967f37fa3647c21d5bf39749e2dd5.
//
// Solidity: event log_array(int256[] val)
func (_WZETATest *WZETATestFilterer) FilterLogArray0(opts *bind.FilterOpts) (*WZETATestLogArray0Iterator, error) {

	logs, sub, err := _WZETATest.contract.FilterLogs(opts, "log_array0")
	if err != nil {
		return nil, err
	}
	return &WZETATestLogArray0Iterator{contract: _WZETATest.contract, event: "log_array0", logs: logs, sub: sub}, nil
}

// WatchLogArray0 is a free log subscription operation binding the contract event 0x890a82679b470f2bd82816ed9b161f97d8b967f37fa3647c21d5bf39749e2dd5.
//
// Solidity: event log_array(int256[] val)
func (_WZETATest *WZETATestFilterer) WatchLogArray0(opts *bind.WatchOpts, sink chan<- *WZETATestLogArray0) (event.Subscription, error) {

	logs, sub, err := _WZETATest.contract.WatchLogs(opts, "log_array0")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WZETATestLogArray0)
				if err := _WZETATest.contract.UnpackLog(event, "log_array0", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogArray0 is a log parse operation binding the contract event 0x890a82679b470f2bd82816ed9b161f97d8b967f37fa3647c21d5bf39749e2dd5.
//
// Solidity: event log_array(int256[] val)
func (_WZETATest *WZETATestFilterer) ParseLogArray0(log types.Log) (*WZETATestLogArray0, error) {
	event := new(WZETATestLogArray0)
	if err := _WZETATest.contract.UnpackLog(event, "log_array0", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// WZETATestLogArray1Iterator is returned from FilterLogArray1 and is used to iterate over the raw logs and unpacked data for LogArray1 events raised by the WZETATest contract.
type WZETATestLogArray1Iterator struct {
	Event *WZETATestLogArray1 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WZETATestLogArray1Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WZETATestLogArray1)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WZETATestLogArray1)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WZETATestLogArray1Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WZETATestLogArray1Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WZETATestLogArray1 represents a LogArray1 event raised by the WZETATest contract.
type WZETATestLogArray1 struct {
	Val []common.Address
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogArray1 is a free log retrieval operation binding the contract event 0x40e1840f5769073d61bd01372d9b75baa9842d5629a0c99ff103be1178a8e9e2.
//
// Solidity: event log_array(address[] val)
func (_WZETATest *WZETATestFilterer) FilterLogArray1(opts *bind.FilterOpts) (*WZETATestLogArray1Iterator, error) {

	logs, sub, err := _WZETATest.contract.FilterLogs(opts, "log_array1")
	if err != nil {
		return nil, err
	}
	return &WZETATestLogArray1Iterator{contract: _WZETATest.contract, event: "log_array1", logs: logs, sub: sub}, nil
}

// WatchLogArray1 is a free log subscription operation binding the contract event 0x40e1840f5769073d61bd01372d9b75baa9842d5629a0c99ff103be1178a8e9e2.
//
// Solidity: event log_array(address[] val)
func (_WZETATest *WZETATestFilterer) WatchLogArray1(opts *bind.WatchOpts, sink chan<- *WZETATestLogArray1) (event.Subscription, error) {

	logs, sub, err := _WZETATest.contract.WatchLogs(opts, "log_array1")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WZETATestLogArray1)
				if err := _WZETATest.contract.UnpackLog(event, "log_array1", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogArray1 is a log parse operation binding the contract event 0x40e1840f5769073d61bd01372d9b75baa9842d5629a0c99ff103be1178a8e9e2.
//
// Solidity: event log_array(address[] val)
func (_WZETATest *WZETATestFilterer) ParseLogArray1(log types.Log) (*WZETATestLogArray1, error) {
	event := new(WZETATestLogArray1)
	if err := _WZETATest.contract.UnpackLog(event, "log_array1", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// WZETATestLogBytesIterator is returned from FilterLogBytes and is used to iterate over the raw logs and unpacked data for LogBytes events raised by the WZETATest contract.
type WZETATestLogBytesIterator struct {
	Event *WZETATestLogBytes // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WZETATestLogBytesIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WZETATestLogBytes)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WZETATestLogBytes)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WZETATestLogBytesIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WZETATestLogBytesIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WZETATestLogBytes represents a LogBytes event raised by the WZETATest contract.
type WZETATestLogBytes struct {
	Arg0 []byte
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogBytes is a free log retrieval operation binding the contract event 0x23b62ad0584d24a75f0bf3560391ef5659ec6db1269c56e11aa241d637f19b20.
//
// Solidity: event log_bytes(bytes arg0)
func (_WZETATest *WZETATestFilterer) FilterLogBytes(opts *bind.FilterOpts) (*WZETATestLogBytesIterator, error) {

	logs, sub, err := _WZETATest.contract.FilterLogs(opts, "log_bytes")
	if err != nil {
		return nil, err
	}
	return &WZETATestLogBytesIterator{contract: _WZETATest.contract, event: "log_bytes", logs: logs, sub: sub}, nil
}

// WatchLogBytes is a free log subscription operation binding the contract event 0x23b62ad0584d24a75f0bf3560391ef5659ec6db1269c56e11aa241d637f19b20.
//
// Solidity: event log_bytes(bytes arg0)
func (_WZETATest *WZETATestFilterer) WatchLogBytes(opts *bind.WatchOpts, sink chan<- *WZETATestLogBytes) (event.Subscription, error) {

	logs, sub, err := _WZETATest.contract.WatchLogs(opts, "log_bytes")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WZETATestLogBytes)
				if err := _WZETATest.contract.UnpackLog(event, "log_bytes", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogBytes is a log parse operation binding the contract event 0x23b62ad0584d24a75f0bf3560391ef5659ec6db1269c56e11aa241d637f19b20.
//
// Solidity: event log_bytes(bytes arg0)
func (_WZETATest *WZETATestFilterer) ParseLogBytes(log types.Log) (*WZETATestLogBytes, error) {
	event := new(WZETATestLogBytes)
	if err := _WZETATest.contract.UnpackLog(event, "log_bytes", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// WZETATestLogBytes32Iterator is returned from FilterLogBytes32 and is used to iterate over the raw logs and unpacked data for LogBytes32 events raised by the WZETATest contract.
type WZETATestLogBytes32Iterator struct {
	Event *WZETATestLogBytes32 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WZETATestLogBytes32Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WZETATestLogBytes32)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WZETATestLogBytes32)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WZETATestLogBytes32Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WZETATestLogBytes32Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WZETATestLogBytes32 represents a LogBytes32 event raised by the WZETATest contract.
type WZETATestLogBytes32 struct {
	Arg0 [32]byte
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogBytes32 is a free log retrieval operation binding the contract event 0xe81699b85113eea1c73e10588b2b035e55893369632173afd43feb192fac64e3.
//
// Solidity: event log_bytes32(bytes32 arg0)
func (_WZETATest *WZETATestFilterer) FilterLogBytes32(opts *bind.FilterOpts) (*WZETATestLogBytes32Iterator, error) {

	logs, sub, err := _WZETATest.contract.FilterLogs(opts, "log_bytes32")
	if err != nil {
		return nil, err
	}
	return &WZETATestLogBytes32Iterator{contract: _WZETATest.contract, event: "log_bytes32", logs: logs, sub: sub}, nil
}

// WatchLogBytes32 is a free log subscription operation binding the contract event 0xe81699b85113eea1c73e10588b2b035e55893369632173afd43feb192fac64e3.
//
// Solidity: event log_bytes32(bytes32 arg0)
func (_WZETATest *WZETATestFilterer) WatchLogBytes32(opts *bind.WatchOpts, sink chan<- *WZETATestLogBytes32) (event.Subscription, error) {

	logs, sub, err := _WZETATest.contract.WatchLogs(opts, "log_bytes32")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WZETATestLogBytes32)
				if err := _WZETATest.contract.UnpackLog(event, "log_bytes32", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogBytes32 is a log parse operation binding the contract event 0xe81699b85113eea1c73e10588b2b035e55893369632173afd43feb192fac64e3.
//
// Solidity: event log_bytes32(bytes32 arg0)
func (_WZETATest *WZETATestFilterer) ParseLogBytes32(log types.Log) (*WZETATestLogBytes32, error) {
	event := new(WZETATestLogBytes32)
	if err := _WZETATest.contract.UnpackLog(event, "log_bytes32", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// WZETATestLogIntIterator is returned from FilterLogInt and is used to iterate over the raw logs and unpacked data for LogInt events raised by the WZETATest contract.
type WZETATestLogIntIterator struct {
	Event *WZETATestLogInt // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WZETATestLogIntIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WZETATestLogInt)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WZETATestLogInt)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WZETATestLogIntIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WZETATestLogIntIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WZETATestLogInt represents a LogInt event raised by the WZETATest contract.
type WZETATestLogInt struct {
	Arg0 *big.Int
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogInt is a free log retrieval operation binding the contract event 0x0eb5d52624c8d28ada9fc55a8c502ed5aa3fbe2fb6e91b71b5f376882b1d2fb8.
//
// Solidity: event log_int(int256 arg0)
func (_WZETATest *WZETATestFilterer) FilterLogInt(opts *bind.FilterOpts) (*WZETATestLogIntIterator, error) {

	logs, sub, err := _WZETATest.contract.FilterLogs(opts, "log_int")
	if err != nil {
		return nil, err
	}
	return &WZETATestLogIntIterator{contract: _WZETATest.contract, event: "log_int", logs: logs, sub: sub}, nil
}

// WatchLogInt is a free log subscription operation binding the contract event 0x0eb5d52624c8d28ada9fc55a8c502ed5aa3fbe2fb6e91b71b5f376882b1d2fb8.
//
// Solidity: event log_int(int256 arg0)
func (_WZETATest *WZETATestFilterer) WatchLogInt(opts *bind.WatchOpts, sink chan<- *WZETATestLogInt) (event.Subscription, error) {

	logs, sub, err := _WZETATest.contract.WatchLogs(opts, "log_int")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WZETATestLogInt)
				if err := _WZETATest.contract.UnpackLog(event, "log_int", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogInt is a log parse operation binding the contract event 0x0eb5d52624c8d28ada9fc55a8c502ed5aa3fbe2fb6e91b71b5f376882b1d2fb8.
//
// Solidity: event log_int(int256 arg0)
func (_WZETATest *WZETATestFilterer) ParseLogInt(log types.Log) (*WZETATestLogInt, error) {
	event := new(WZETATestLogInt)
	if err := _WZETATest.contract.UnpackLog(event, "log_int", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// WZETATestLogNamedAddressIterator is returned from FilterLogNamedAddress and is used to iterate over the raw logs and unpacked data for LogNamedAddress events raised by the WZETATest contract.
type WZETATestLogNamedAddressIterator struct {
	Event *WZETATestLogNamedAddress // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WZETATestLogNamedAddressIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WZETATestLogNamedAddress)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WZETATestLogNamedAddress)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WZETATestLogNamedAddressIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WZETATestLogNamedAddressIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WZETATestLogNamedAddress represents a LogNamedAddress event raised by the WZETATest contract.
type WZETATestLogNamedAddress struct {
	Key string
	Val common.Address
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedAddress is a free log retrieval operation binding the contract event 0x9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f.
//
// Solidity: event log_named_address(string key, address val)
func (_WZETATest *WZETATestFilterer) FilterLogNamedAddress(opts *bind.FilterOpts) (*WZETATestLogNamedAddressIterator, error) {

	logs, sub, err := _WZETATest.contract.FilterLogs(opts, "log_named_address")
	if err != nil {
		return nil, err
	}
	return &WZETATestLogNamedAddressIterator{contract: _WZETATest.contract, event: "log_named_address", logs: logs, sub: sub}, nil
}

// WatchLogNamedAddress is a free log subscription operation binding the contract event 0x9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f.
//
// Solidity: event log_named_address(string key, address val)
func (_WZETATest *WZETATestFilterer) WatchLogNamedAddress(opts *bind.WatchOpts, sink chan<- *WZETATestLogNamedAddress) (event.Subscription, error) {

	logs, sub, err := _WZETATest.contract.WatchLogs(opts, "log_named_address")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WZETATestLogNamedAddress)
				if err := _WZETATest.contract.UnpackLog(event, "log_named_address", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedAddress is a log parse operation binding the contract event 0x9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f.
//
// Solidity: event log_named_address(string key, address val)
func (_WZETATest *WZETATestFilterer) ParseLogNamedAddress(log types.Log) (*WZETATestLogNamedAddress, error) {
	event := new(WZETATestLogNamedAddress)
	if err := _WZETATest.contract.UnpackLog(event, "log_named_address", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// WZETATestLogNamedArrayIterator is returned from FilterLogNamedArray and is used to iterate over the raw logs and unpacked data for LogNamedArray events raised by the WZETATest contract.
type WZETATestLogNamedArrayIterator struct {
	Event *WZETATestLogNamedArray // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WZETATestLogNamedArrayIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WZETATestLogNamedArray)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WZETATestLogNamedArray)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WZETATestLogNamedArrayIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WZETATestLogNamedArrayIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WZETATestLogNamedArray represents a LogNamedArray event raised by the WZETATest contract.
type WZETATestLogNamedArray struct {
	Key string
	Val []*big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedArray is a free log retrieval operation binding the contract event 0x00aaa39c9ffb5f567a4534380c737075702e1f7f14107fc95328e3b56c0325fb.
//
// Solidity: event log_named_array(string key, uint256[] val)
func (_WZETATest *WZETATestFilterer) FilterLogNamedArray(opts *bind.FilterOpts) (*WZETATestLogNamedArrayIterator, error) {

	logs, sub, err := _WZETATest.contract.FilterLogs(opts, "log_named_array")
	if err != nil {
		return nil, err
	}
	return &WZETATestLogNamedArrayIterator{contract: _WZETATest.contract, event: "log_named_array", logs: logs, sub: sub}, nil
}

// WatchLogNamedArray is a free log subscription operation binding the contract event 0x00aaa39c9ffb5f567a4534380c737075702e1f7f14107fc95328e3b56c0325fb.
//
// Solidity: event log_named_array(string key, uint256[] val)
func (_WZETATest *WZETATestFilterer) WatchLogNamedArray(opts *bind.WatchOpts, sink chan<- *WZETATestLogNamedArray) (event.Subscription, error) {

	logs, sub, err := _WZETATest.contract.WatchLogs(opts, "log_named_array")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WZETATestLogNamedArray)
				if err := _WZETATest.contract.UnpackLog(event, "log_named_array", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedArray is a log parse operation binding the contract event 0x00aaa39c9ffb5f567a4534380c737075702e1f7f14107fc95328e3b56c0325fb.
//
// Solidity: event log_named_array(string key, uint256[] val)
func (_WZETATest *WZETATestFilterer) ParseLogNamedArray(log types.Log) (*WZETATestLogNamedArray, error) {
	event := new(WZETATestLogNamedArray)
	if err := _WZETATest.contract.UnpackLog(event, "log_named_array", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// WZETATestLogNamedArray0Iterator is returned from FilterLogNamedArray0 and is used to iterate over the raw logs and unpacked data for LogNamedArray0 events raised by the WZETATest contract.
type WZETATestLogNamedArray0Iterator struct {
	Event *WZETATestLogNamedArray0 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WZETATestLogNamedArray0Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WZETATestLogNamedArray0)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WZETATestLogNamedArray0)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WZETATestLogNamedArray0Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WZETATestLogNamedArray0Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WZETATestLogNamedArray0 represents a LogNamedArray0 event raised by the WZETATest contract.
type WZETATestLogNamedArray0 struct {
	Key string
	Val []*big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedArray0 is a free log retrieval operation binding the contract event 0xa73eda09662f46dde729be4611385ff34fe6c44fbbc6f7e17b042b59a3445b57.
//
// Solidity: event log_named_array(string key, int256[] val)
func (_WZETATest *WZETATestFilterer) FilterLogNamedArray0(opts *bind.FilterOpts) (*WZETATestLogNamedArray0Iterator, error) {

	logs, sub, err := _WZETATest.contract.FilterLogs(opts, "log_named_array0")
	if err != nil {
		return nil, err
	}
	return &WZETATestLogNamedArray0Iterator{contract: _WZETATest.contract, event: "log_named_array0", logs: logs, sub: sub}, nil
}

// WatchLogNamedArray0 is a free log subscription operation binding the contract event 0xa73eda09662f46dde729be4611385ff34fe6c44fbbc6f7e17b042b59a3445b57.
//
// Solidity: event log_named_array(string key, int256[] val)
func (_WZETATest *WZETATestFilterer) WatchLogNamedArray0(opts *bind.WatchOpts, sink chan<- *WZETATestLogNamedArray0) (event.Subscription, error) {

	logs, sub, err := _WZETATest.contract.WatchLogs(opts, "log_named_array0")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WZETATestLogNamedArray0)
				if err := _WZETATest.contract.UnpackLog(event, "log_named_array0", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedArray0 is a log parse operation binding the contract event 0xa73eda09662f46dde729be4611385ff34fe6c44fbbc6f7e17b042b59a3445b57.
//
// Solidity: event log_named_array(string key, int256[] val)
func (_WZETATest *WZETATestFilterer) ParseLogNamedArray0(log types.Log) (*WZETATestLogNamedArray0, error) {
	event := new(WZETATestLogNamedArray0)
	if err := _WZETATest.contract.UnpackLog(event, "log_named_array0", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// WZETATestLogNamedArray1Iterator is returned from FilterLogNamedArray1 and is used to iterate over the raw logs and unpacked data for LogNamedArray1 events raised by the WZETATest contract.
type WZETATestLogNamedArray1Iterator struct {
	Event *WZETATestLogNamedArray1 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WZETATestLogNamedArray1Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WZETATestLogNamedArray1)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WZETATestLogNamedArray1)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WZETATestLogNamedArray1Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WZETATestLogNamedArray1Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WZETATestLogNamedArray1 represents a LogNamedArray1 event raised by the WZETATest contract.
type WZETATestLogNamedArray1 struct {
	Key string
	Val []common.Address
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedArray1 is a free log retrieval operation binding the contract event 0x3bcfb2ae2e8d132dd1fce7cf278a9a19756a9fceabe470df3bdabb4bc577d1bd.
//
// Solidity: event log_named_array(string key, address[] val)
func (_WZETATest *WZETATestFilterer) FilterLogNamedArray1(opts *bind.FilterOpts) (*WZETATestLogNamedArray1Iterator, error) {

	logs, sub, err := _WZETATest.contract.FilterLogs(opts, "log_named_array1")
	if err != nil {
		return nil, err
	}
	return &WZETATestLogNamedArray1Iterator{contract: _WZETATest.contract, event: "log_named_array1", logs: logs, sub: sub}, nil
}

// WatchLogNamedArray1 is a free log subscription operation binding the contract event 0x3bcfb2ae2e8d132dd1fce7cf278a9a19756a9fceabe470df3bdabb4bc577d1bd.
//
// Solidity: event log_named_array(string key, address[] val)
func (_WZETATest *WZETATestFilterer) WatchLogNamedArray1(opts *bind.WatchOpts, sink chan<- *WZETATestLogNamedArray1) (event.Subscription, error) {

	logs, sub, err := _WZETATest.contract.WatchLogs(opts, "log_named_array1")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WZETATestLogNamedArray1)
				if err := _WZETATest.contract.UnpackLog(event, "log_named_array1", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedArray1 is a log parse operation binding the contract event 0x3bcfb2ae2e8d132dd1fce7cf278a9a19756a9fceabe470df3bdabb4bc577d1bd.
//
// Solidity: event log_named_array(string key, address[] val)
func (_WZETATest *WZETATestFilterer) ParseLogNamedArray1(log types.Log) (*WZETATestLogNamedArray1, error) {
	event := new(WZETATestLogNamedArray1)
	if err := _WZETATest.contract.UnpackLog(event, "log_named_array1", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// WZETATestLogNamedBytesIterator is returned from FilterLogNamedBytes and is used to iterate over the raw logs and unpacked data for LogNamedBytes events raised by the WZETATest contract.
type WZETATestLogNamedBytesIterator struct {
	Event *WZETATestLogNamedBytes // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WZETATestLogNamedBytesIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WZETATestLogNamedBytes)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WZETATestLogNamedBytes)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WZETATestLogNamedBytesIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WZETATestLogNamedBytesIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WZETATestLogNamedBytes represents a LogNamedBytes event raised by the WZETATest contract.
type WZETATestLogNamedBytes struct {
	Key string
	Val []byte
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedBytes is a free log retrieval operation binding the contract event 0xd26e16cad4548705e4c9e2d94f98ee91c289085ee425594fd5635fa2964ccf18.
//
// Solidity: event log_named_bytes(string key, bytes val)
func (_WZETATest *WZETATestFilterer) FilterLogNamedBytes(opts *bind.FilterOpts) (*WZETATestLogNamedBytesIterator, error) {

	logs, sub, err := _WZETATest.contract.FilterLogs(opts, "log_named_bytes")
	if err != nil {
		return nil, err
	}
	return &WZETATestLogNamedBytesIterator{contract: _WZETATest.contract, event: "log_named_bytes", logs: logs, sub: sub}, nil
}

// WatchLogNamedBytes is a free log subscription operation binding the contract event 0xd26e16cad4548705e4c9e2d94f98ee91c289085ee425594fd5635fa2964ccf18.
//
// Solidity: event log_named_bytes(string key, bytes val)
func (_WZETATest *WZETATestFilterer) WatchLogNamedBytes(opts *bind.WatchOpts, sink chan<- *WZETATestLogNamedBytes) (event.Subscription, error) {

	logs, sub, err := _WZETATest.contract.WatchLogs(opts, "log_named_bytes")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WZETATestLogNamedBytes)
				if err := _WZETATest.contract.UnpackLog(event, "log_named_bytes", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedBytes is a log parse operation binding the contract event 0xd26e16cad4548705e4c9e2d94f98ee91c289085ee425594fd5635fa2964ccf18.
//
// Solidity: event log_named_bytes(string key, bytes val)
func (_WZETATest *WZETATestFilterer) ParseLogNamedBytes(log types.Log) (*WZETATestLogNamedBytes, error) {
	event := new(WZETATestLogNamedBytes)
	if err := _WZETATest.contract.UnpackLog(event, "log_named_bytes", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// WZETATestLogNamedBytes32Iterator is returned from FilterLogNamedBytes32 and is used to iterate over the raw logs and unpacked data for LogNamedBytes32 events raised by the WZETATest contract.
type WZETATestLogNamedBytes32Iterator struct {
	Event *WZETATestLogNamedBytes32 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WZETATestLogNamedBytes32Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WZETATestLogNamedBytes32)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WZETATestLogNamedBytes32)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WZETATestLogNamedBytes32Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WZETATestLogNamedBytes32Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WZETATestLogNamedBytes32 represents a LogNamedBytes32 event raised by the WZETATest contract.
type WZETATestLogNamedBytes32 struct {
	Key string
	Val [32]byte
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedBytes32 is a free log retrieval operation binding the contract event 0xafb795c9c61e4fe7468c386f925d7a5429ecad9c0495ddb8d38d690614d32f99.
//
// Solidity: event log_named_bytes32(string key, bytes32 val)
func (_WZETATest *WZETATestFilterer) FilterLogNamedBytes32(opts *bind.FilterOpts) (*WZETATestLogNamedBytes32Iterator, error) {

	logs, sub, err := _WZETATest.contract.FilterLogs(opts, "log_named_bytes32")
	if err != nil {
		return nil, err
	}
	return &WZETATestLogNamedBytes32Iterator{contract: _WZETATest.contract, event: "log_named_bytes32", logs: logs, sub: sub}, nil
}

// WatchLogNamedBytes32 is a free log subscription operation binding the contract event 0xafb795c9c61e4fe7468c386f925d7a5429ecad9c0495ddb8d38d690614d32f99.
//
// Solidity: event log_named_bytes32(string key, bytes32 val)
func (_WZETATest *WZETATestFilterer) WatchLogNamedBytes32(opts *bind.WatchOpts, sink chan<- *WZETATestLogNamedBytes32) (event.Subscription, error) {

	logs, sub, err := _WZETATest.contract.WatchLogs(opts, "log_named_bytes32")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WZETATestLogNamedBytes32)
				if err := _WZETATest.contract.UnpackLog(event, "log_named_bytes32", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedBytes32 is a log parse operation binding the contract event 0xafb795c9c61e4fe7468c386f925d7a5429ecad9c0495ddb8d38d690614d32f99.
//
// Solidity: event log_named_bytes32(string key, bytes32 val)
func (_WZETATest *WZETATestFilterer) ParseLogNamedBytes32(log types.Log) (*WZETATestLogNamedBytes32, error) {
	event := new(WZETATestLogNamedBytes32)
	if err := _WZETATest.contract.UnpackLog(event, "log_named_bytes32", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// WZETATestLogNamedDecimalIntIterator is returned from FilterLogNamedDecimalInt and is used to iterate over the raw logs and unpacked data for LogNamedDecimalInt events raised by the WZETATest contract.
type WZETATestLogNamedDecimalIntIterator struct {
	Event *WZETATestLogNamedDecimalInt // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WZETATestLogNamedDecimalIntIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WZETATestLogNamedDecimalInt)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WZETATestLogNamedDecimalInt)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WZETATestLogNamedDecimalIntIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WZETATestLogNamedDecimalIntIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WZETATestLogNamedDecimalInt represents a LogNamedDecimalInt event raised by the WZETATest contract.
type WZETATestLogNamedDecimalInt struct {
	Key      string
	Val      *big.Int
	Decimals *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterLogNamedDecimalInt is a free log retrieval operation binding the contract event 0x5da6ce9d51151ba10c09a559ef24d520b9dac5c5b8810ae8434e4d0d86411a95.
//
// Solidity: event log_named_decimal_int(string key, int256 val, uint256 decimals)
func (_WZETATest *WZETATestFilterer) FilterLogNamedDecimalInt(opts *bind.FilterOpts) (*WZETATestLogNamedDecimalIntIterator, error) {

	logs, sub, err := _WZETATest.contract.FilterLogs(opts, "log_named_decimal_int")
	if err != nil {
		return nil, err
	}
	return &WZETATestLogNamedDecimalIntIterator{contract: _WZETATest.contract, event: "log_named_decimal_int", logs: logs, sub: sub}, nil
}

// WatchLogNamedDecimalInt is a free log subscription operation binding the contract event 0x5da6ce9d51151ba10c09a559ef24d520b9dac5c5b8810ae8434e4d0d86411a95.
//
// Solidity: event log_named_decimal_int(string key, int256 val, uint256 decimals)
func (_WZETATest *WZETATestFilterer) WatchLogNamedDecimalInt(opts *bind.WatchOpts, sink chan<- *WZETATestLogNamedDecimalInt) (event.Subscription, error) {

	logs, sub, err := _WZETATest.contract.WatchLogs(opts, "log_named_decimal_int")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WZETATestLogNamedDecimalInt)
				if err := _WZETATest.contract.UnpackLog(event, "log_named_decimal_int", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedDecimalInt is a log parse operation binding the contract event 0x5da6ce9d51151ba10c09a559ef24d520b9dac5c5b8810ae8434e4d0d86411a95.
//
// Solidity: event log_named_decimal_int(string key, int256 val, uint256 decimals)
func (_WZETATest *WZETATestFilterer) ParseLogNamedDecimalInt(log types.Log) (*WZETATestLogNamedDecimalInt, error) {
	event := new(WZETATestLogNamedDecimalInt)
	if err := _WZETATest.contract.UnpackLog(event, "log_named_decimal_int", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// WZETATestLogNamedDecimalUintIterator is returned from FilterLogNamedDecimalUint and is used to iterate over the raw logs and unpacked data for LogNamedDecimalUint events raised by the WZETATest contract.
type WZETATestLogNamedDecimalUintIterator struct {
	Event *WZETATestLogNamedDecimalUint // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WZETATestLogNamedDecimalUintIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WZETATestLogNamedDecimalUint)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WZETATestLogNamedDecimalUint)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WZETATestLogNamedDecimalUintIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WZETATestLogNamedDecimalUintIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WZETATestLogNamedDecimalUint represents a LogNamedDecimalUint event raised by the WZETATest contract.
type WZETATestLogNamedDecimalUint struct {
	Key      string
	Val      *big.Int
	Decimals *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterLogNamedDecimalUint is a free log retrieval operation binding the contract event 0xeb8ba43ced7537421946bd43e828b8b2b8428927aa8f801c13d934bf11aca57b.
//
// Solidity: event log_named_decimal_uint(string key, uint256 val, uint256 decimals)
func (_WZETATest *WZETATestFilterer) FilterLogNamedDecimalUint(opts *bind.FilterOpts) (*WZETATestLogNamedDecimalUintIterator, error) {

	logs, sub, err := _WZETATest.contract.FilterLogs(opts, "log_named_decimal_uint")
	if err != nil {
		return nil, err
	}
	return &WZETATestLogNamedDecimalUintIterator{contract: _WZETATest.contract, event: "log_named_decimal_uint", logs: logs, sub: sub}, nil
}

// WatchLogNamedDecimalUint is a free log subscription operation binding the contract event 0xeb8ba43ced7537421946bd43e828b8b2b8428927aa8f801c13d934bf11aca57b.
//
// Solidity: event log_named_decimal_uint(string key, uint256 val, uint256 decimals)
func (_WZETATest *WZETATestFilterer) WatchLogNamedDecimalUint(opts *bind.WatchOpts, sink chan<- *WZETATestLogNamedDecimalUint) (event.Subscription, error) {

	logs, sub, err := _WZETATest.contract.WatchLogs(opts, "log_named_decimal_uint")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WZETATestLogNamedDecimalUint)
				if err := _WZETATest.contract.UnpackLog(event, "log_named_decimal_uint", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedDecimalUint is a log parse operation binding the contract event 0xeb8ba43ced7537421946bd43e828b8b2b8428927aa8f801c13d934bf11aca57b.
//
// Solidity: event log_named_decimal_uint(string key, uint256 val, uint256 decimals)
func (_WZETATest *WZETATestFilterer) ParseLogNamedDecimalUint(log types.Log) (*WZETATestLogNamedDecimalUint, error) {
	event := new(WZETATestLogNamedDecimalUint)
	if err := _WZETATest.contract.UnpackLog(event, "log_named_decimal_uint", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// WZETATestLogNamedIntIterator is returned from FilterLogNamedInt and is used to iterate over the raw logs and unpacked data for LogNamedInt events raised by the WZETATest contract.
type WZETATestLogNamedIntIterator struct {
	Event *WZETATestLogNamedInt // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WZETATestLogNamedIntIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WZETATestLogNamedInt)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WZETATestLogNamedInt)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WZETATestLogNamedIntIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WZETATestLogNamedIntIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WZETATestLogNamedInt represents a LogNamedInt event raised by the WZETATest contract.
type WZETATestLogNamedInt struct {
	Key string
	Val *big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedInt is a free log retrieval operation binding the contract event 0x2fe632779174374378442a8e978bccfbdcc1d6b2b0d81f7e8eb776ab2286f168.
//
// Solidity: event log_named_int(string key, int256 val)
func (_WZETATest *WZETATestFilterer) FilterLogNamedInt(opts *bind.FilterOpts) (*WZETATestLogNamedIntIterator, error) {

	logs, sub, err := _WZETATest.contract.FilterLogs(opts, "log_named_int")
	if err != nil {
		return nil, err
	}
	return &WZETATestLogNamedIntIterator{contract: _WZETATest.contract, event: "log_named_int", logs: logs, sub: sub}, nil
}

// WatchLogNamedInt is a free log subscription operation binding the contract event 0x2fe632779174374378442a8e978bccfbdcc1d6b2b0d81f7e8eb776ab2286f168.
//
// Solidity: event log_named_int(string key, int256 val)
func (_WZETATest *WZETATestFilterer) WatchLogNamedInt(opts *bind.WatchOpts, sink chan<- *WZETATestLogNamedInt) (event.Subscription, error) {

	logs, sub, err := _WZETATest.contract.WatchLogs(opts, "log_named_int")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WZETATestLogNamedInt)
				if err := _WZETATest.contract.UnpackLog(event, "log_named_int", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedInt is a log parse operation binding the contract event 0x2fe632779174374378442a8e978bccfbdcc1d6b2b0d81f7e8eb776ab2286f168.
//
// Solidity: event log_named_int(string key, int256 val)
func (_WZETATest *WZETATestFilterer) ParseLogNamedInt(log types.Log) (*WZETATestLogNamedInt, error) {
	event := new(WZETATestLogNamedInt)
	if err := _WZETATest.contract.UnpackLog(event, "log_named_int", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// WZETATestLogNamedStringIterator is returned from FilterLogNamedString and is used to iterate over the raw logs and unpacked data for LogNamedString events raised by the WZETATest contract.
type WZETATestLogNamedStringIterator struct {
	Event *WZETATestLogNamedString // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WZETATestLogNamedStringIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WZETATestLogNamedString)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WZETATestLogNamedString)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WZETATestLogNamedStringIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WZETATestLogNamedStringIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WZETATestLogNamedString represents a LogNamedString event raised by the WZETATest contract.
type WZETATestLogNamedString struct {
	Key string
	Val string
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedString is a free log retrieval operation binding the contract event 0x280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf3583.
//
// Solidity: event log_named_string(string key, string val)
func (_WZETATest *WZETATestFilterer) FilterLogNamedString(opts *bind.FilterOpts) (*WZETATestLogNamedStringIterator, error) {

	logs, sub, err := _WZETATest.contract.FilterLogs(opts, "log_named_string")
	if err != nil {
		return nil, err
	}
	return &WZETATestLogNamedStringIterator{contract: _WZETATest.contract, event: "log_named_string", logs: logs, sub: sub}, nil
}

// WatchLogNamedString is a free log subscription operation binding the contract event 0x280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf3583.
//
// Solidity: event log_named_string(string key, string val)
func (_WZETATest *WZETATestFilterer) WatchLogNamedString(opts *bind.WatchOpts, sink chan<- *WZETATestLogNamedString) (event.Subscription, error) {

	logs, sub, err := _WZETATest.contract.WatchLogs(opts, "log_named_string")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WZETATestLogNamedString)
				if err := _WZETATest.contract.UnpackLog(event, "log_named_string", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedString is a log parse operation binding the contract event 0x280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf3583.
//
// Solidity: event log_named_string(string key, string val)
func (_WZETATest *WZETATestFilterer) ParseLogNamedString(log types.Log) (*WZETATestLogNamedString, error) {
	event := new(WZETATestLogNamedString)
	if err := _WZETATest.contract.UnpackLog(event, "log_named_string", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// WZETATestLogNamedUintIterator is returned from FilterLogNamedUint and is used to iterate over the raw logs and unpacked data for LogNamedUint events raised by the WZETATest contract.
type WZETATestLogNamedUintIterator struct {
	Event *WZETATestLogNamedUint // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WZETATestLogNamedUintIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WZETATestLogNamedUint)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WZETATestLogNamedUint)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WZETATestLogNamedUintIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WZETATestLogNamedUintIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WZETATestLogNamedUint represents a LogNamedUint event raised by the WZETATest contract.
type WZETATestLogNamedUint struct {
	Key string
	Val *big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedUint is a free log retrieval operation binding the contract event 0xb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a8.
//
// Solidity: event log_named_uint(string key, uint256 val)
func (_WZETATest *WZETATestFilterer) FilterLogNamedUint(opts *bind.FilterOpts) (*WZETATestLogNamedUintIterator, error) {

	logs, sub, err := _WZETATest.contract.FilterLogs(opts, "log_named_uint")
	if err != nil {
		return nil, err
	}
	return &WZETATestLogNamedUintIterator{contract: _WZETATest.contract, event: "log_named_uint", logs: logs, sub: sub}, nil
}

// WatchLogNamedUint is a free log subscription operation binding the contract event 0xb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a8.
//
// Solidity: event log_named_uint(string key, uint256 val)
func (_WZETATest *WZETATestFilterer) WatchLogNamedUint(opts *bind.WatchOpts, sink chan<- *WZETATestLogNamedUint) (event.Subscription, error) {

	logs, sub, err := _WZETATest.contract.WatchLogs(opts, "log_named_uint")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WZETATestLogNamedUint)
				if err := _WZETATest.contract.UnpackLog(event, "log_named_uint", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedUint is a log parse operation binding the contract event 0xb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a8.
//
// Solidity: event log_named_uint(string key, uint256 val)
func (_WZETATest *WZETATestFilterer) ParseLogNamedUint(log types.Log) (*WZETATestLogNamedUint, error) {
	event := new(WZETATestLogNamedUint)
	if err := _WZETATest.contract.UnpackLog(event, "log_named_uint", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// WZETATestLogStringIterator is returned from FilterLogString and is used to iterate over the raw logs and unpacked data for LogString events raised by the WZETATest contract.
type WZETATestLogStringIterator struct {
	Event *WZETATestLogString // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WZETATestLogStringIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WZETATestLogString)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WZETATestLogString)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WZETATestLogStringIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WZETATestLogStringIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WZETATestLogString represents a LogString event raised by the WZETATest contract.
type WZETATestLogString struct {
	Arg0 string
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogString is a free log retrieval operation binding the contract event 0x0b2e13ff20ac7b474198655583edf70dedd2c1dc980e329c4fbb2fc0748b796b.
//
// Solidity: event log_string(string arg0)
func (_WZETATest *WZETATestFilterer) FilterLogString(opts *bind.FilterOpts) (*WZETATestLogStringIterator, error) {

	logs, sub, err := _WZETATest.contract.FilterLogs(opts, "log_string")
	if err != nil {
		return nil, err
	}
	return &WZETATestLogStringIterator{contract: _WZETATest.contract, event: "log_string", logs: logs, sub: sub}, nil
}

// WatchLogString is a free log subscription operation binding the contract event 0x0b2e13ff20ac7b474198655583edf70dedd2c1dc980e329c4fbb2fc0748b796b.
//
// Solidity: event log_string(string arg0)
func (_WZETATest *WZETATestFilterer) WatchLogString(opts *bind.WatchOpts, sink chan<- *WZETATestLogString) (event.Subscription, error) {

	logs, sub, err := _WZETATest.contract.WatchLogs(opts, "log_string")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WZETATestLogString)
				if err := _WZETATest.contract.UnpackLog(event, "log_string", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogString is a log parse operation binding the contract event 0x0b2e13ff20ac7b474198655583edf70dedd2c1dc980e329c4fbb2fc0748b796b.
//
// Solidity: event log_string(string arg0)
func (_WZETATest *WZETATestFilterer) ParseLogString(log types.Log) (*WZETATestLogString, error) {
	event := new(WZETATestLogString)
	if err := _WZETATest.contract.UnpackLog(event, "log_string", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// WZETATestLogUintIterator is returned from FilterLogUint and is used to iterate over the raw logs and unpacked data for LogUint events raised by the WZETATest contract.
type WZETATestLogUintIterator struct {
	Event *WZETATestLogUint // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WZETATestLogUintIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WZETATestLogUint)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WZETATestLogUint)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WZETATestLogUintIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WZETATestLogUintIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WZETATestLogUint represents a LogUint event raised by the WZETATest contract.
type WZETATestLogUint struct {
	Arg0 *big.Int
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogUint is a free log retrieval operation binding the contract event 0x2cab9790510fd8bdfbd2115288db33fec66691d476efc5427cfd4c0969301755.
//
// Solidity: event log_uint(uint256 arg0)
func (_WZETATest *WZETATestFilterer) FilterLogUint(opts *bind.FilterOpts) (*WZETATestLogUintIterator, error) {

	logs, sub, err := _WZETATest.contract.FilterLogs(opts, "log_uint")
	if err != nil {
		return nil, err
	}
	return &WZETATestLogUintIterator{contract: _WZETATest.contract, event: "log_uint", logs: logs, sub: sub}, nil
}

// WatchLogUint is a free log subscription operation binding the contract event 0x2cab9790510fd8bdfbd2115288db33fec66691d476efc5427cfd4c0969301755.
//
// Solidity: event log_uint(uint256 arg0)
func (_WZETATest *WZETATestFilterer) WatchLogUint(opts *bind.WatchOpts, sink chan<- *WZETATestLogUint) (event.Subscription, error) {

	logs, sub, err := _WZETATest.contract.WatchLogs(opts, "log_uint")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WZETATestLogUint)
				if err := _WZETATest.contract.UnpackLog(event, "log_uint", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogUint is a log parse operation binding the contract event 0x2cab9790510fd8bdfbd2115288db33fec66691d476efc5427cfd4c0969301755.
//
// Solidity: event log_uint(uint256 arg0)
func (_WZETATest *WZETATestFilterer) ParseLogUint(log types.Log) (*WZETATestLogUint, error) {
	event := new(WZETATestLogUint)
	if err := _WZETATest.contract.UnpackLog(event, "log_uint", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// WZETATestLogsIterator is returned from FilterLogs and is used to iterate over the raw logs and unpacked data for Logs events raised by the WZETATest contract.
type WZETATestLogsIterator struct {
	Event *WZETATestLogs // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WZETATestLogsIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WZETATestLogs)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WZETATestLogs)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WZETATestLogsIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WZETATestLogsIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WZETATestLogs represents a Logs event raised by the WZETATest contract.
type WZETATestLogs struct {
	Arg0 []byte
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogs is a free log retrieval operation binding the contract event 0xe7950ede0394b9f2ce4a5a1bf5a7e1852411f7e6661b4308c913c4bfd11027e4.
//
// Solidity: event logs(bytes arg0)
func (_WZETATest *WZETATestFilterer) FilterLogs(opts *bind.FilterOpts) (*WZETATestLogsIterator, error) {

	logs, sub, err := _WZETATest.contract.FilterLogs(opts, "logs")
	if err != nil {
		return nil, err
	}
	return &WZETATestLogsIterator{contract: _WZETATest.contract, event: "logs", logs: logs, sub: sub}, nil
}

// WatchLogs is a free log subscription operation binding the contract event 0xe7950ede0394b9f2ce4a5a1bf5a7e1852411f7e6661b4308c913c4bfd11027e4.
//
// Solidity: event logs(bytes arg0)
func (_WZETATest *WZETATestFilterer) WatchLogs(opts *bind.WatchOpts, sink chan<- *WZETATestLogs) (event.Subscription, error) {

	logs, sub, err := _WZETATest.contract.WatchLogs(opts, "logs")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WZETATestLogs)
				if err := _WZETATest.contract.UnpackLog(event, "logs", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogs is a log parse operation binding the contract event 0xe7950ede0394b9f2ce4a5a1bf5a7e1852411f7e6661b4308c913c4bfd11027e4.
//
// Solidity: event logs(bytes arg0)
func (_WZETATest *WZETATestFilterer) ParseLogs(log types.Log) (*WZETATestLogs, error) {
	event := new(WZETATestLogs)
	if err := _WZETATest.contract.UnpackLog(event, "logs", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
