// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package zrc20

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// StdInvariantFuzzArtifactSelector is an auto generated low-level Go binding around an user-defined struct.
type StdInvariantFuzzArtifactSelector struct {
	Artifact  string
	Selectors [][4]byte
}

// StdInvariantFuzzInterface is an auto generated low-level Go binding around an user-defined struct.
type StdInvariantFuzzInterface struct {
	Addr      common.Address
	Artifacts []string
}

// StdInvariantFuzzSelector is an auto generated low-level Go binding around an user-defined struct.
type StdInvariantFuzzSelector struct {
	Addr      common.Address
	Selectors [][4]byte
}

// ZRC20TestMetaData contains all meta data concerning the ZRC20Test contract.
var ZRC20TestMetaData = &bind.MetaData{
	ABI: "[{\"type\":\"function\",\"name\":\"IS_TEST\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"excludeArtifacts\",\"inputs\":[],\"outputs\":[{\"name\":\"excludedArtifacts_\",\"type\":\"string[]\",\"internalType\":\"string[]\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"excludeContracts\",\"inputs\":[],\"outputs\":[{\"name\":\"excludedContracts_\",\"type\":\"address[]\",\"internalType\":\"address[]\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"excludeSelectors\",\"inputs\":[],\"outputs\":[{\"name\":\"excludedSelectors_\",\"type\":\"tuple[]\",\"internalType\":\"structStdInvariant.FuzzSelector[]\",\"components\":[{\"name\":\"addr\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"selectors\",\"type\":\"bytes4[]\",\"internalType\":\"bytes4[]\"}]}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"excludeSenders\",\"inputs\":[],\"outputs\":[{\"name\":\"excludedSenders_\",\"type\":\"address[]\",\"internalType\":\"address[]\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"failed\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"setUp\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"targetArtifactSelectors\",\"inputs\":[],\"outputs\":[{\"name\":\"targetedArtifactSelectors_\",\"type\":\"tuple[]\",\"internalType\":\"structStdInvariant.FuzzArtifactSelector[]\",\"components\":[{\"name\":\"artifact\",\"type\":\"string\",\"internalType\":\"string\"},{\"name\":\"selectors\",\"type\":\"bytes4[]\",\"internalType\":\"bytes4[]\"}]}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"targetArtifacts\",\"inputs\":[],\"outputs\":[{\"name\":\"targetedArtifacts_\",\"type\":\"string[]\",\"internalType\":\"string[]\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"targetContracts\",\"inputs\":[],\"outputs\":[{\"name\":\"targetedContracts_\",\"type\":\"address[]\",\"internalType\":\"address[]\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"targetInterfaces\",\"inputs\":[],\"outputs\":[{\"name\":\"targetedInterfaces_\",\"type\":\"tuple[]\",\"internalType\":\"structStdInvariant.FuzzInterface[]\",\"components\":[{\"name\":\"addr\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"artifacts\",\"type\":\"string[]\",\"internalType\":\"string[]\"}]}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"targetSelectors\",\"inputs\":[],\"outputs\":[{\"name\":\"targetedSelectors_\",\"type\":\"tuple[]\",\"internalType\":\"structStdInvariant.FuzzSelector[]\",\"components\":[{\"name\":\"addr\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"selectors\",\"type\":\"bytes4[]\",\"internalType\":\"bytes4[]\"}]}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"targetSenders\",\"inputs\":[],\"outputs\":[{\"name\":\"targetedSenders_\",\"type\":\"address[]\",\"internalType\":\"address[]\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"testApproveFailsIfRecipientIsZeroAddress\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testBurn\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testBurnFailsIfNoBalance\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testDeposit\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testDepositFailsIfRecipientIsZeroAddress\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testDepositFailsIfSenderIsNotGateway\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testTransfer\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testTransferFailsIfNoBalance\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testTransferFailsIfRecipientIsZeroAddress\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testTransferFrom\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testTransferFromFailsIfNoAllowance\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testTransferFromFailsIfNoBalance\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testTransferFromFailsIfRecipientIsZeroAddress\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testTransferFromFailsIfSenderIsZeroAddress\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testUpdateGasLimit\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testUpdateGasLimitFailsIfSenderIsNotProtocol\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testUpdateGatewayAddress\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testUpdateGatewayAddressFailsIfSenderIsNotProtocol\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testUpdateGatewayAddressFailsIfZeroAddress\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testUpdateNameAndSymbol\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testUpdateNameAndSymbolFailsIfSenderIsNotProtocol\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testUpdateProtocolFlatFee\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testUpdateProtocolFlatFeeFailsIfSenderIsNotProtocol\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testUpdateSystemContractAddress\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testUpdateSystemContractAddressFailsIfSenderIsNotProtocol\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testUpdateSystemContractAddressFailsIfZeroAddress\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testWithdraw\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testWithdrawFailsIfNoAllowance\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testWithdrawFailsIfNoBalance\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testWithdrawGasFee\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testWithdrawGasFeeFailsIfGasCoinNotSetForChainId\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testWithdrawGasFeeFailsIfGasPriceNotSetForChainId\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testZRC20BasicInfo\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"event\",\"name\":\"log\",\"inputs\":[{\"name\":\"\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_address\",\"inputs\":[{\"name\":\"\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_array\",\"inputs\":[{\"name\":\"val\",\"type\":\"uint256[]\",\"indexed\":false,\"internalType\":\"uint256[]\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_array\",\"inputs\":[{\"name\":\"val\",\"type\":\"int256[]\",\"indexed\":false,\"internalType\":\"int256[]\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_array\",\"inputs\":[{\"name\":\"val\",\"type\":\"address[]\",\"indexed\":false,\"internalType\":\"address[]\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_bytes\",\"inputs\":[{\"name\":\"\",\"type\":\"bytes\",\"indexed\":false,\"internalType\":\"bytes\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_bytes32\",\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"indexed\":false,\"internalType\":\"bytes32\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_int\",\"inputs\":[{\"name\":\"\",\"type\":\"int256\",\"indexed\":false,\"internalType\":\"int256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_named_address\",\"inputs\":[{\"name\":\"key\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"val\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_named_array\",\"inputs\":[{\"name\":\"key\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"val\",\"type\":\"uint256[]\",\"indexed\":false,\"internalType\":\"uint256[]\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_named_array\",\"inputs\":[{\"name\":\"key\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"val\",\"type\":\"int256[]\",\"indexed\":false,\"internalType\":\"int256[]\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_named_array\",\"inputs\":[{\"name\":\"key\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"val\",\"type\":\"address[]\",\"indexed\":false,\"internalType\":\"address[]\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_named_bytes\",\"inputs\":[{\"name\":\"key\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"val\",\"type\":\"bytes\",\"indexed\":false,\"internalType\":\"bytes\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_named_bytes32\",\"inputs\":[{\"name\":\"key\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"val\",\"type\":\"bytes32\",\"indexed\":false,\"internalType\":\"bytes32\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_named_decimal_int\",\"inputs\":[{\"name\":\"key\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"val\",\"type\":\"int256\",\"indexed\":false,\"internalType\":\"int256\"},{\"name\":\"decimals\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_named_decimal_uint\",\"inputs\":[{\"name\":\"key\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"val\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"},{\"name\":\"decimals\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_named_int\",\"inputs\":[{\"name\":\"key\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"val\",\"type\":\"int256\",\"indexed\":false,\"internalType\":\"int256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_named_string\",\"inputs\":[{\"name\":\"key\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"val\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_named_uint\",\"inputs\":[{\"name\":\"key\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"val\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_string\",\"inputs\":[{\"name\":\"\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_uint\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"logs\",\"inputs\":[{\"name\":\"\",\"type\":\"bytes\",\"indexed\":false,\"internalType\":\"bytes\"}],\"anonymous\":false},{\"type\":\"error\",\"name\":\"CallerIsNotFungibleModule\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"GasFeeTransferFailed\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidSender\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"LowAllowance\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"LowBalance\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"ZeroAddress\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"ZeroGasCoin\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"ZeroGasPrice\",\"inputs\":[]}]",
	Bin: "0x6080604052600c8054600160ff199182168117909255601f80549091169091179055348015602b575f80fd5b5061e50d806100395f395ff3fe608060405234801561000f575f80fd5b50600436106102f9575f3560e01c80638ce7ef0511610192578063d1fd3291116100e8578063dfbdf60011610093578063f1f87f401161006e578063f1f87f40146104b1578063f2413096146104b9578063fa7626d4146104c1575f80fd5b8063dfbdf60014610499578063e13aba48146104a1578063e20c9f71146104a9575f80fd5b8063d591221f116100c3578063d591221f14610481578063d97136a214610489578063dcba486a14610491575f80fd5b8063d1fd329114610469578063d27b042714610471578063d509b16c14610479575f80fd5b8063b0464fdc11610148578063ba414fa611610123578063ba414fa614610441578063c35f9d1d14610459578063d04cda9814610461575f80fd5b8063b0464fdc14610429578063b5508aa914610431578063b79cad0914610439575f80fd5b806392a68b8d1161017857806392a68b8d14610411578063a4aa6c7c14610419578063ae9687dc14610421575f80fd5b80638ce7ef05146103f4578063916a17c6146103fc575f80fd5b80633f7286f4116102525780636ff45850116101fd5780637f924c4e116101d85780637f924c4e146103cf57806380326680146103d757806385226c81146103df575f80fd5b80636ff45850146103b757806370557298146103bf5780637ee68316146103c7575f80fd5b80635539d92e1161022d5780635539d92e146103925780635f01db7e1461039a57806366d9a9a0146103a2575f80fd5b80633f7286f41461037a5780634cfc0aaa14610382578063513999621461038a575f80fd5b806328438826116102b2578063367e31231161028d578063367e3123146103625780633be9ec801461036a5780633e5e3c2314610372575f80fd5b8063284388261461033d5780632ade3880146103455780632f6254fc1461035a575f80fd5b80630ea7e563116102e25780630ea7e5631461030f5780631142744e146103175780631ed7831c1461031f575f80fd5b80630809dfef146102fd5780630a9254e414610307575b5f80fd5b6103056104ce565b005b61030561064e565b610305610d1a565b610305610dfb565b610327610eda565b604051610334919061946c565b60405180910390f35b610305610f3a565b61034d611175565b60405161033491906194e5565b6103056112b1565b610305611416565b6103056114e3565b6103276116bf565b61032761171d565b61030561177b565b61030561184e565b610305611bad565b610305611dcb565b6103aa611f2c565b6040516103349190619646565b6103056120a5565b6103056122a9565b6103056124ec565b61030561295c565b610305612b6e565b6103e7612c3d565b60405161033491906196e2565b610305612d08565b610404612efc565b6040516103349190619757565b610305612ff2565b6103056130c0565b610305613269565b610404613532565b6103e7613628565b6103056136f3565b610449613a69565b6040519015158152602001610334565b610305613b39565b610305613c06565b610305613d3e565b610305613e76565b610305613fae565b610305614616565b6103056146f6565b610305614873565b610305614adf565b610305614c16565b610327614eb1565b610305614f0f565b61030561504a565b601f546104499060ff1681565b60225460405163ca669fa760e01b81526001600160a01b039091166004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ca669fa7906024015f604051808303815f87803b158015610524575f80fd5b505af1158015610536573d5f803e3d5ffd5b5050604051630618f58760e51b81527fd92e233d000000000000000000000000000000000000000000000000000000006004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d925063c31eb0e091506024015f604051808303815f87803b1580156105a3575f80fd5b505af11580156105b5573d5f803e3d5ffd5b5050601f546040517f47e7ef240000000000000000000000000000000000000000000000000000000081525f6004820152620186a060248201526101009091046001600160a01b031692506347e7ef2491506044015b6020604051808303815f875af1158015610627573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061064b91906197ec565b50565b602480547fffffffffffffffffffffffff000000000000000000000000000000000000000090811630179091556025805490911661123417905560405161069490619397565b604051809103905ff0801580156106ad573d5f803e3d5ffd5b50602380547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03928316908117909155604080518082018252600f81527f476174657761795a45564d2e736f6c000000000000000000000000000000000060208201526024805492519081019390935292166044820152610791919060640160408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f485cc95500000000000000000000000000000000000000000000000000000000179052615296565b602280546001600160a01b03929092167fffffffffffffffffffffffff00000000000000000000000000000000000000009283168117909155602180549092168117909155604080517f2722feee0000000000000000000000000000000000000000000000000000000081529051632722feee916004808201926020929091908290030181865afa158015610828573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061084c9190619826565b602680547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b039290921691821790556040517f06447d560000000000000000000000000000000000000000000000000000000081526004810191909152737109709ecfa91a80626ff3989d68f67f5b1dd12d906306447d56906024015f604051808303815f87803b1580156108e7575f80fd5b505af11580156108f9573d5f803e3d5ffd5b505050505f805f60405161090c906193a4565b6001600160a01b03938416815291831660208301529091166040820152606001604051809103905ff080158015610945573d5f803e3d5ffd5b50602080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392831690811790915560215460405160129360019384935f939192169061099a906193b1565b6109a99695949392919061983f565b604051809103905ff0801580156109c2573d5f803e3d5ffd5b50601f80547fffffffffffffffffffffff0000000000000000000000000000000000000000ff166101006001600160a01b03938416810291909117918290556020546040517fee2815ba00000000000000000000000000000000000000000000000000000000815260016004820152919092048316602482015291169063ee2815ba906044015f604051808303815f87803b158015610a5f575f80fd5b505af1158015610a71573d5f803e3d5ffd5b50506020546040517fa7cb050700000000000000000000000000000000000000000000000000000000815260016004820181905260248201526001600160a01b03909116925063a7cb050791506044015f604051808303815f87803b158015610ad8575f80fd5b505af1158015610aea573d5f803e3d5ffd5b50506026546040517fc88a5e6d0000000000000000000000000000000000000000000000000000000081526001600160a01b039091166004820152633b9aca006024820152737109709ecfa91a80626ff3989d68f67f5b1dd12d925063c88a5e6d91506044015f604051808303815f87803b158015610b67575f80fd5b505af1158015610b79573d5f803e3d5ffd5b50506022546040517fc88a5e6d0000000000000000000000000000000000000000000000000000000081526001600160a01b039091166004820152633b9aca006024820152737109709ecfa91a80626ff3989d68f67f5b1dd12d925063c88a5e6d91506044015f604051808303815f87803b158015610bf6575f80fd5b505af1158015610c08573d5f803e3d5ffd5b5050601f54602480546040517f47e7ef240000000000000000000000000000000000000000000000000000000081526001600160a01b039182166004820152620186a09281019290925261010090920490911692506347e7ef2491506044016020604051808303815f875af1158015610c83573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610ca791906197ec565b507f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d5f1c6001600160a01b03166390c5013b6040518163ffffffff1660e01b81526004015f604051808303815f87803b158015610d02575f80fd5b505af1158015610d14573d5f803e3d5ffd5b50505050565b604051630618f58760e51b81527f2b2add3d000000000000000000000000000000000000000000000000000000006004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063c31eb0e0906024015f604051808303815f87803b158015610d83575f80fd5b505af1158015610d95573d5f803e3d5ffd5b5050601f546040517fc835d7cc00000000000000000000000000000000000000000000000000000000815261321160048201526101009091046001600160a01b0316925063c835d7cc91506024015b5f604051808303815f87803b158015610d02575f80fd5b604051630618f58760e51b81527fddb5de5e000000000000000000000000000000000000000000000000000000006004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063c31eb0e0906024015f604051808303815f87803b158015610e64575f80fd5b505af1158015610e76573d5f803e3d5ffd5b5050601f54602480546040517f47e7ef240000000000000000000000000000000000000000000000000000000081526001600160a01b039182166004820152620186a09281019290925261010090920490911692506347e7ef24915060440161060b565b60606016805480602002602001604051908101604052809291908181526020018280548015610f3057602002820191905f5260205f20905b81546001600160a01b03168152600190910190602001808311610f12575b5050505050905090565b601f546025546040516370a0823160e01b81526001600160a01b0391821660048201525f926101009004909116906370a0823190602401602060405180830381865afa158015610f8c573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610fb09190619931565b9050610fbc5f826152b4565b601f54602480546040517f095ea7b30000000000000000000000000000000000000000000000000000000081526001600160a01b0391821660048201526207a12092810183905291926101009004169063095ea7b3906044016020604051808303815f875af1158015611031573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061105591906197ec565b50604051630618f58760e51b81527fd92e233d000000000000000000000000000000000000000000000000000000006004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063c31eb0e0906024015f604051808303815f87803b1580156110bf575f80fd5b505af11580156110d1573d5f803e3d5ffd5b5050601f546025546040517f23b872dd0000000000000000000000000000000000000000000000000000000081525f60048201526001600160a01b039182166024820152604481018690526101009092041692506323b872dd91506064015b6020604051808303815f875af115801561114c573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061117091906197ec565b505050565b6060601e805480602002602001604051908101604052809291908181526020015f905b828210156112a8575f84815260208082206040805180820182526002870290920180546001600160a01b03168352600181018054835181870281018701909452808452939591948681019491929084015b82821015611291578382905f5260205f2001805461120690619948565b80601f016020809104026020016040519081016040528092919081815260200182805461123290619948565b801561127d5780601f106112545761010080835404028352916020019161127d565b820191905f5260205f20905b81548152906001019060200180831161126057829003601f168201915b5050505050815260200190600101906111e9565b505050508152505081526020019060010190611198565b50505050905090565b60265460405163ca669fa760e01b81526001600160a01b039091166004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ca669fa7906024015f604051808303815f87803b158015611307575f80fd5b505af1158015611319573d5f803e3d5ffd5b5050601f546040517fc835d7cc00000000000000000000000000000000000000000000000000000000815261321160048201526101009091046001600160a01b0316925063c835d7cc91506024015f604051808303815f87803b15801561137e575f80fd5b505af1158015611390573d5f803e3d5ffd5b50505050611414601f60019054906101000a90046001600160a01b03166001600160a01b031663f2441b326040518163ffffffff1660e01b8152600401602060405180830381865afa1580156113e8573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061140c9190619826565b613211615338565b565b604051630618f58760e51b81527f2b2add3d000000000000000000000000000000000000000000000000000000006004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063c31eb0e0906024015f604051808303815f87803b15801561147f575f80fd5b505af1158015611491573d5f803e3d5ffd5b5050601f546040517feddeb123000000000000000000000000000000000000000000000000000000008152600a60048201526101009091046001600160a01b0316925063eddeb1239150602401610de4565b60265460405163ca669fa760e01b81526001600160a01b039091166004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ca669fa7906024015f604051808303815f87803b158015611539575f80fd5b505af115801561154b573d5f803e3d5ffd5b50506020546040517fa7cb0507000000000000000000000000000000000000000000000000000000008152600160048201525f60248201526001600160a01b03909116925063a7cb050791506044015f604051808303815f87803b1580156115b1575f80fd5b505af11580156115c3573d5f803e3d5ffd5b5050604051630618f58760e51b81527fe661aed0000000000000000000000000000000000000000000000000000000006004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d925063c31eb0e091506024015b5f604051808303815f87803b158015611631575f80fd5b505af1158015611643573d5f803e3d5ffd5b50505050601f60019054906101000a90046001600160a01b03166001600160a01b031663d9eeebed6040518163ffffffff1660e01b81526004016040805180830381865afa158015611697573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906116bb9190619993565b5050565b60606018805480602002602001604051908101604052809291908181526020018280548015610f3057602002820191905f5260205f209081546001600160a01b03168152600190910190602001808311610f12575050505050905090565b60606017805480602002602001604051908101604052809291908181526020018280548015610f3057602002820191905f5260205f209081546001600160a01b03168152600190910190602001808311610f12575050505050905090565b604051630618f58760e51b81527fd92e233d000000000000000000000000000000000000000000000000000000006004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063c31eb0e0906024015f604051808303815f87803b1580156117e4575f80fd5b505af11580156117f6573d5f803e3d5ffd5b5050601f546040517f095ea7b30000000000000000000000000000000000000000000000000000000081525f6004820152600a60248201526101009091046001600160a01b0316925063095ea7b3915060440161060b565b60265460405163ca669fa760e01b81526001600160a01b039091166004820152600a908190737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ca669fa7906024015f604051808303815f87803b1580156118a9575f80fd5b505af11580156118bb573d5f803e3d5ffd5b5050601f546040517ff687d12a000000000000000000000000000000000000000000000000000000008152600481018690526101009091046001600160a01b0316925063f687d12a91506024015f604051808303815f87803b15801561191f575f80fd5b505af1158015611931573d5f803e3d5ffd5b505060265460405163ca669fa760e01b81526001600160a01b039091166004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d925063ca669fa791506024015f604051808303815f87803b15801561198b575f80fd5b505af115801561199d573d5f803e3d5ffd5b5050601f546040517feddeb123000000000000000000000000000000000000000000000000000000008152600481018590526101009091046001600160a01b0316925063eddeb12391506024015f604051808303815f87803b158015611a01575f80fd5b505af1158015611a13573d5f803e3d5ffd5b5050601f546040517f095ea7b30000000000000000000000000000000000000000000000000000000081526101009091046001600160a01b0316600482018190525f6024830152925063095ea7b391506044016020604051808303815f875af1158015611a82573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611aa691906197ec565b507f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d5f1c6001600160a01b031663f48448146040518163ffffffff1660e01b81526004015f604051808303815f87803b158015611b01575f80fd5b505af1158015611b13573d5f803e3d5ffd5b5050601f546025546040805160609290921b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001660208301528051601481840301815260348301918290527fc7012626000000000000000000000000000000000000000000000000000000009091526001600160a01b0361010090930492909216935063c7012626925061113091906001906038016199bd565b604051630618f58760e51b81527f2b2add3d000000000000000000000000000000000000000000000000000000006004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063c31eb0e0906024015f604051808303815f87803b158015611c16575f80fd5b505af1158015611c28573d5f803e3d5ffd5b5050601f546040517fc47f002700000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f544f4b454e32000000000000000000000000000000000000000000000000000060448201526101009091046001600160a01b0316925063c47f002791506064015f604051808303815f87803b158015611cb9575f80fd5b505af1158015611ccb573d5f803e3d5ffd5b5050604051630618f58760e51b81527f2b2add3d000000000000000000000000000000000000000000000000000000006004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d925063c31eb0e091506024015f604051808303815f87803b158015611d38575f80fd5b505af1158015611d4a573d5f803e3d5ffd5b5050601f546040517fb84c8246000000000000000000000000000000000000000000000000000000008152602060048083019190915260248201527f544b4e320000000000000000000000000000000000000000000000000000000060448201526101009091046001600160a01b0316925063b84c82469150606401610de4565b60265460405163ca669fa760e01b81526001600160a01b039091166004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ca669fa7906024015f604051808303815f87803b158015611e21575f80fd5b505af1158015611e33573d5f803e3d5ffd5b5050601f546040517ff687d12a000000000000000000000000000000000000000000000000000000008152600a60048201526101009091046001600160a01b0316925063f687d12a91506024015f604051808303815f87803b158015611e97575f80fd5b505af1158015611ea9573d5f803e3d5ffd5b50505050611414600a601f60019054906101000a90046001600160a01b03166001600160a01b031663091d27886040518163ffffffff1660e01b8152600401602060405180830381865afa158015611f03573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611f279190619931565b6152b4565b6060601b805480602002602001604051908101604052809291908181526020015f905b828210156112a8578382905f5260205f2090600202016040518060400160405290815f82018054611f7f90619948565b80601f0160208091040260200160405190810160405280929190818152602001828054611fab90619948565b8015611ff65780601f10611fcd57610100808354040283529160200191611ff6565b820191905f5260205f20905b815481529060010190602001808311611fd957829003601f168201915b505050505081526020016001820180548060200260200160405190810160405280929190818152602001828054801561208d57602002820191905f5260205f20905f905b82829054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001906004019060208260030104928301926001038202915080841161203a5790505b50505050508152505081526020019060010190611f4f565b601f546025546040516370a0823160e01b81526001600160a01b0391821660048201525f926101009004909116906370a0823190602401602060405180830381865afa1580156120f7573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061211b9190619931565b90506121275f826152b4565b601f54602480546040517f095ea7b30000000000000000000000000000000000000000000000000000000081526001600160a01b0391821660048201526207a12092810183905291926101009004169063095ea7b3906044016020604051808303815f875af115801561219c573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906121c091906197ec565b50604051630618f58760e51b81527ffe382aa7000000000000000000000000000000000000000000000000000000006004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063c31eb0e0906024015f604051808303815f87803b15801561222a575f80fd5b505af115801561223c573d5f803e3d5ffd5b5050601f54602480546025546040517f23b872dd0000000000000000000000000000000000000000000000000000000081526001600160a01b039283166004820152908216928101929092526044820186905261010090920490911692506323b872dd9150606401611130565b601f546025546040516370a0823160e01b81526001600160a01b0391821660048201525f926101009004909116906370a0823190602401602060405180830381865afa1580156122fb573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061231f9190619931565b905061232b5f826152b4565b601f54602480546040517f095ea7b30000000000000000000000000000000000000000000000000000000081526001600160a01b03918216600482015261c35092810183905291926101009004169063095ea7b3906044016020604051808303815f875af115801561239f573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906123c391906197ec565b50601f54602480546025546040517f23b872dd0000000000000000000000000000000000000000000000000000000081526001600160a01b0392831660048201529082169281019290925260448201849052610100909204909116906323b872dd906064015b6020604051808303815f875af1158015612445573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061246991906197ec565b50601f546025546040516370a0823160e01b81526001600160a01b0391821660048201525f926101009004909116906370a0823190602401602060405180830381865afa1580156124bc573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906124e09190619931565b905061117082826152b4565b6125a16040518060400160405280600581526020017f544f4b454e000000000000000000000000000000000000000000000000000000815250601f60019054906101000a90046001600160a01b03166001600160a01b03166306fdde036040518163ffffffff1660e01b81526004015f60405180830381865afa158015612575573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f1916820160405261259c9190810190619aab565b615399565b61262a6040518060400160405280600381526020017f544b4e0000000000000000000000000000000000000000000000000000000000815250601f60019054906101000a90046001600160a01b03166001600160a01b03166395d89b416040518163ffffffff1660e01b81526004015f60405180830381865afa158015612575573d5f803e3d5ffd5b60265460405163ca669fa760e01b81526001600160a01b039091166004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ca669fa7906024015f604051808303815f87803b158015612680575f80fd5b505af1158015612692573d5f803e3d5ffd5b5050601f546040517fc47f002700000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f544f4b454e32000000000000000000000000000000000000000000000000000060448201526101009091046001600160a01b0316925063c47f002791506064015f604051808303815f87803b158015612723575f80fd5b505af1158015612735573d5f803e3d5ffd5b505060265460405163ca669fa760e01b81526001600160a01b039091166004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d925063ca669fa791506024015f604051808303815f87803b15801561278f575f80fd5b505af11580156127a1573d5f803e3d5ffd5b5050601f546040517fb84c8246000000000000000000000000000000000000000000000000000000008152602060048083019190915260248201527f544b4e320000000000000000000000000000000000000000000000000000000060448201526101009091046001600160a01b0316925063b84c824691506064015f604051808303815f87803b158015612834575f80fd5b505af1158015612846573d5f803e3d5ffd5b505050506128d36040518060400160405280600681526020017f544f4b454e320000000000000000000000000000000000000000000000000000815250601f60019054906101000a90046001600160a01b03166001600160a01b03166306fdde036040518163ffffffff1660e01b81526004015f60405180830381865afa158015612575573d5f803e3d5ffd5b6114146040518060400160405280600481526020017f544b4e3200000000000000000000000000000000000000000000000000000000815250601f60019054906101000a90046001600160a01b03166001600160a01b03166395d89b416040518163ffffffff1660e01b81526004015f60405180830381865afa158015612575573d5f803e3d5ffd5b5f601f60019054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156129ae573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906129d29190619931565b90506129e1620186a0826152b4565b60225460405163ca669fa760e01b81526001600160a01b039091166004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ca669fa7906024015f604051808303815f87803b158015612a37575f80fd5b505af1158015612a49573d5f803e3d5ffd5b5050601f54602480546040517f47e7ef240000000000000000000000000000000000000000000000000000000081526001600160a01b039182166004820152620186a09281019290925261010090920490911692506347e7ef2491506044016020604051808303815f875af1158015612ac4573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612ae891906197ec565b505f601f60019054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612b3b573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612b5f9190619931565b90506116bb62030d40826152b4565b604051630618f58760e51b81527ffe382aa7000000000000000000000000000000000000000000000000000000006004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063c31eb0e0906024015f604051808303815f87803b158015612bd7575f80fd5b505af1158015612be9573d5f803e3d5ffd5b5050601f546040517f42966c68000000000000000000000000000000000000000000000000000000008152620249f060048201526101009091046001600160a01b031692506342966c68915060240161060b565b6060601a805480602002602001604051908101604052809291908181526020015f905b828210156112a8578382905f5260205f20018054612c7d90619948565b80601f0160208091040260200160405190810160405280929190818152602001828054612ca990619948565b8015612cf45780601f10612ccb57610100808354040283529160200191612cf4565b820191905f5260205f20905b815481529060010190602001808311612cd757829003601f168201915b505050505081526020019060010190612c60565b601f546025546040516370a0823160e01b81526001600160a01b0391821660048201525f926101009004909116906370a0823190602401602060405180830381865afa158015612d5a573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612d7e9190619931565b9050612d8a5f826152b4565b601f54602480546040517f095ea7b30000000000000000000000000000000000000000000000000000000081526001600160a01b0391821660048201526207a12092810183905291926101009004169063095ea7b3906044016020604051808303815f875af1158015612dff573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612e2391906197ec565b50604051630618f58760e51b81527ffe382aa7000000000000000000000000000000000000000000000000000000006004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063c31eb0e0906024015f604051808303815f87803b158015612e8d575f80fd5b505af1158015612e9f573d5f803e3d5ffd5b5050601f546025546040517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b0391821660048201526024810186905261010090920416925063a9059cbb9150604401611130565b6060601d805480602002602001604051908101604052809291908181526020015f905b828210156112a8575f8481526020908190206040805180820182526002860290920180546001600160a01b03168352600181018054835181870281018701909452808452939491938583019392830182828015612fda57602002820191905f5260205f20905f905b82829054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020019060040190602082600301049283019260010382029150808411612f875790505b50505050508152505081526020019060010190612f1f565b604051630618f58760e51b81527f2b2add3d000000000000000000000000000000000000000000000000000000006004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063c31eb0e0906024015f604051808303815f87803b15801561305b575f80fd5b505af115801561306d573d5f803e3d5ffd5b5050601f546040517fccc7759900000000000000000000000000000000000000000000000000000000815261321160048201526101009091046001600160a01b0316925063ccc775999150602401610de4565b601f54602480546040517f095ea7b30000000000000000000000000000000000000000000000000000000081526001600160a01b0391821660048201526207a12092810183905291926101009004169063095ea7b3906044016020604051808303815f875af1158015613135573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061315991906197ec565b50604051630618f58760e51b81527fd92e233d000000000000000000000000000000000000000000000000000000006004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063c31eb0e0906024015f604051808303815f87803b1580156131c3575f80fd5b505af11580156131d5573d5f803e3d5ffd5b5050601f546040517fa9059cbb0000000000000000000000000000000000000000000000000000000081525f6004820152602481018590526101009091046001600160a01b0316925063a9059cbb91506044015b6020604051808303815f875af1158015613245573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906116bb91906197ec565b601f80546001600160a01b03610100808304821681027fffffffffffffffffffffff0000000000000000000000000000000000000000ff9093169290921792839055604080517f06fdde0300000000000000000000000000000000000000000000000000000000815290515f9493909304909116916306fdde039160048082019286929091908290030181865afa158015613306573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f1916820160405261332d9190810190619aab565b905061336e6040518060400160405280600581526020017f544f4b454e00000000000000000000000000000000000000000000000000000081525082615399565b5f601f60019054906101000a90046001600160a01b03166001600160a01b03166395d89b416040518163ffffffff1660e01b81526004015f60405180830381865afa1580156133bf573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526133e69190810190619aab565b90506134276040518060400160405280600381526020017f544b4e000000000000000000000000000000000000000000000000000000000081525082615399565b5f601f60019054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015613479573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061349d9190619af0565b90506134ad60128260ff166152b4565b5f601f60019054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156134ff573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906135239190619931565b9050610d14620186a0826152b4565b6060601c805480602002602001604051908101604052809291908181526020015f905b828210156112a8575f8481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561361057602002820191905f5260205f20905f905b82829054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190600401906020826003010492830192600103820291508084116135bd5790505b50505050508152505081526020019060010190613555565b60606019805480602002602001604051908101604052809291908181526020015f905b828210156112a8578382905f5260205f2001805461366890619948565b80601f016020809104026020016040519081016040528092919081815260200182805461369490619948565b80156136df5780601f106136b6576101008083540402835291602001916136df565b820191905f5260205f20905b8154815290600101906020018083116136c257829003601f168201915b50505050508152602001906001019061364b565b60265460405163ca669fa760e01b81526001600160a01b039091166004820152600a906305f5e10090737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ca669fa7906024015f604051808303815f87803b158015613752575f80fd5b505af1158015613764573d5f803e3d5ffd5b5050601f546040517ff687d12a000000000000000000000000000000000000000000000000000000008152600481018690526101009091046001600160a01b0316925063f687d12a91506024015f604051808303815f87803b1580156137c8575f80fd5b505af11580156137da573d5f803e3d5ffd5b505060265460405163ca669fa760e01b81526001600160a01b039091166004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d925063ca669fa791506024015f604051808303815f87803b158015613834575f80fd5b505af1158015613846573d5f803e3d5ffd5b5050601f546040517feddeb123000000000000000000000000000000000000000000000000000000008152600481018590526101009091046001600160a01b0316925063eddeb12391506024015f604051808303815f87803b1580156138aa575f80fd5b505af11580156138bc573d5f803e3d5ffd5b5050601f546040517f095ea7b30000000000000000000000000000000000000000000000000000000081526101009091046001600160a01b031660048201819052630bebc2006024830152925063095ea7b391506044016020604051808303815f875af115801561392f573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061395391906197ec565b50604051630618f58760e51b81527ffe382aa7000000000000000000000000000000000000000000000000000000006004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063c31eb0e0906024015f604051808303815f87803b1580156139bd575f80fd5b505af11580156139cf573d5f803e3d5ffd5b5050601f546025546040805160609290921b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001660208301528051601481840301815260348301918290527fc7012626000000000000000000000000000000000000000000000000000000009091526001600160a01b0361010090930492909216935063c7012626925061113091906064906038016199bd565b6008545f9060ff1615613a80575060085460ff1690565b6040517f667f9d70000000000000000000000000000000000000000000000000000000008152737109709ecfa91a80626ff3989d68f67f5b1dd12d600482018190527f6661696c6564000000000000000000000000000000000000000000000000000060248301525f9163667f9d7090604401602060405180830381865afa158015613b0e573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190613b329190619931565b1415905090565b604051630618f58760e51b81527f2b2add3d000000000000000000000000000000000000000000000000000000006004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063c31eb0e0906024015f604051808303815f87803b158015613ba2575f80fd5b505af1158015613bb4573d5f803e3d5ffd5b5050601f546040517ff687d12a000000000000000000000000000000000000000000000000000000008152600a60048201526101009091046001600160a01b0316925063f687d12a9150602401610de4565b60265460405163ca669fa760e01b81526001600160a01b039091166004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ca669fa7906024015f604051808303815f87803b158015613c5c575f80fd5b505af1158015613c6e573d5f803e3d5ffd5b5050601f546040517feddeb123000000000000000000000000000000000000000000000000000000008152600a60048201526101009091046001600160a01b0316925063eddeb12391506024015f604051808303815f87803b158015613cd2575f80fd5b505af1158015613ce4573d5f803e3d5ffd5b50505050611414600a601f60019054906101000a90046001600160a01b03166001600160a01b0316634d8943bb6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611f03573d5f803e3d5ffd5b60265460405163ca669fa760e01b81526001600160a01b039091166004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ca669fa7906024015f604051808303815f87803b158015613d94575f80fd5b505af1158015613da6573d5f803e3d5ffd5b5050604051630618f58760e51b81527fd92e233d000000000000000000000000000000000000000000000000000000006004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d925063c31eb0e091506024015f604051808303815f87803b158015613e13575f80fd5b505af1158015613e25573d5f803e3d5ffd5b5050601f546040517fccc775990000000000000000000000000000000000000000000000000000000081525f60048201526101009091046001600160a01b0316925063ccc775999150602401610de4565b60265460405163ca669fa760e01b81526001600160a01b039091166004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ca669fa7906024015f604051808303815f87803b158015613ecc575f80fd5b505af1158015613ede573d5f803e3d5ffd5b5050604051630618f58760e51b81527fd92e233d000000000000000000000000000000000000000000000000000000006004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d925063c31eb0e091506024015f604051808303815f87803b158015613f4b575f80fd5b505af1158015613f5d573d5f803e3d5ffd5b5050601f546040517fc835d7cc0000000000000000000000000000000000000000000000000000000081525f60048201526101009091046001600160a01b0316925063c835d7cc9150602401610de4565b60265460405163ca669fa760e01b81526001600160a01b039091166004820152600a908190737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ca669fa7906024015f604051808303815f87803b158015614009575f80fd5b505af115801561401b573d5f803e3d5ffd5b5050601f546040517ff687d12a000000000000000000000000000000000000000000000000000000008152600481018690526101009091046001600160a01b0316925063f687d12a91506024015f604051808303815f87803b15801561407f575f80fd5b505af1158015614091573d5f803e3d5ffd5b505060265460405163ca669fa760e01b81526001600160a01b039091166004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d925063ca669fa791506024015f604051808303815f87803b1580156140eb575f80fd5b505af11580156140fd573d5f803e3d5ffd5b5050601f546040517feddeb123000000000000000000000000000000000000000000000000000000008152600481018590526101009091046001600160a01b0316925063eddeb12391506024015f604051808303815f87803b158015614161575f80fd5b505af1158015614173573d5f803e3d5ffd5b5050601f54602480546040516370a0823160e01b81526001600160a01b0391821660048201525f95506101009093041692506370a082319101602060405180830381865afa1580156141c7573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906141eb9190619931565b90506141fa620186a0826152b4565b5f601f60019054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561424c573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906142709190619931565b905061427f620186a0826152b4565b601f546026546040516370a0823160e01b81526001600160a01b0391821660048201525f926101009004909116906370a0823190602401602060405180830381865afa1580156142d1573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906142f59190619931565b601f546040517f095ea7b30000000000000000000000000000000000000000000000000000000081526101009091046001600160a01b03166004820181905261c350602483015291925063095ea7b3906044016020604051808303815f875af1158015614364573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061438891906197ec565b50601f546025546040805160609290921b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001660208301528051601481840301815260348301918290527fc7012626000000000000000000000000000000000000000000000000000000009091526001600160a01b03610100909304929092169163c701262691614420919061c350906038016199bd565b6020604051808303815f875af115801561443c573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061446091906197ec565b50601f546026546040516370a0823160e01b81526001600160a01b0391821660048201525f926101009004909116906370a0823190602401602060405180830381865afa1580156144b3573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906144d79190619931565b90506144f7856144e78885619b3d565b6144f19190619b3d565b826152b4565b601f54602480546040516370a0823160e01b81526001600160a01b0391821660048201525f936101009004909116916370a082319101602060405180830381865afa158015614548573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061456c9190619931565b90506145888661457e8961c350619b50565b6144f19190619b50565b5f601f60019054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156145da573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906145fe9190619931565b905061460c61c350826152b4565b5050505050505050565b601f546025546040516370a0823160e01b81526001600160a01b0391821660048201525f926101009004909116906370a0823190602401602060405180830381865afa158015614668573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061468c9190619931565b90506146985f826152b4565b601f546025546040517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b03918216600482015261c350602482018190529261010090049091169063a9059cbb90604401612429565b601f54602480546040517f095ea7b30000000000000000000000000000000000000000000000000000000081526001600160a01b0391821660048201526207a12092810183905291926101009004169063095ea7b3906044016020604051808303815f875af115801561476b573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061478f91906197ec565b50604051630618f58760e51b81527fd92e233d000000000000000000000000000000000000000000000000000000006004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063c31eb0e0906024015f604051808303815f87803b1580156147f9575f80fd5b505af115801561480b573d5f803e3d5ffd5b5050601f54602480546040517f23b872dd0000000000000000000000000000000000000000000000000000000081526001600160a01b0391821660048201525f928101929092526044820186905261010090920490911692506323b872dd9150606401613229565b60265460405163ca669fa760e01b81526001600160a01b039091166004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ca669fa7906024015f604051808303815f87803b1580156148c9575f80fd5b505af11580156148db573d5f803e3d5ffd5b5050601f546040517ff687d12a000000000000000000000000000000000000000000000000000000008152600a6004820181905293508392506101009091046001600160a01b03169063f687d12a906024015f604051808303815f87803b158015614944575f80fd5b505af1158015614956573d5f803e3d5ffd5b505060265460405163ca669fa760e01b81526001600160a01b039091166004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d925063ca669fa791506024015f604051808303815f87803b1580156149b0575f80fd5b505af11580156149c2573d5f803e3d5ffd5b5050601f546040517feddeb123000000000000000000000000000000000000000000000000000000008152600a60048201526101009091046001600160a01b0316925063eddeb12391506024015f604051808303815f87803b158015614a26575f80fd5b505af1158015614a38573d5f803e3d5ffd5b505050505f80601f60019054906101000a90046001600160a01b03166001600160a01b031663d9eeebed6040518163ffffffff1660e01b81526004016040805180830381865afa158015614a8e573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190614ab29190619993565b601f549193509150614ad29061010090046001600160a01b031683615338565b610d146144f18486619b3d565b60265460405163ca669fa760e01b81526001600160a01b039091166004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ca669fa7906024015f604051808303815f87803b158015614b35575f80fd5b505af1158015614b47573d5f803e3d5ffd5b5050601f546040517fccc7759900000000000000000000000000000000000000000000000000000000815261321160048201526101009091046001600160a01b0316925063ccc7759991506024015f604051808303815f87803b158015614bac575f80fd5b505af1158015614bbe573d5f803e3d5ffd5b50505050611414601f60019054906101000a90046001600160a01b03166001600160a01b0316638b851b956040518163ffffffff1660e01b8152600401602060405180830381865afa1580156113e8573d5f803e3d5ffd5b601f54602480546040516370a0823160e01b81526001600160a01b0391821660048201525f936101009004909116916370a082319101602060405180830381865afa158015614c67573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190614c8b9190619931565b9050614c9a620186a0826152b4565b5f601f60019054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015614cec573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190614d109190619931565b9050614d1f620186a0826152b4565b601f546040517f42966c6800000000000000000000000000000000000000000000000000000000815261c35060048201526101009091046001600160a01b0316906342966c68906024016020604051808303815f875af1158015614d85573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190614da991906197ec565b50601f54602480546040516370a0823160e01b81526001600160a01b0391821660048201525f936101009004909116916370a082319101602060405180830381865afa158015614dfb573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190614e1f9190619931565b9050614e2d61c350826152b4565b5f601f60019054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015614e7f573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190614ea39190619931565b9050610d1461c350826152b4565b60606015805480602002602001604051908101604052809291908181526020018280548015610f3057602002820191905f5260205f209081546001600160a01b03168152600190910190602001808311610f12575050505050905090565b60265460405163ca669fa760e01b81526001600160a01b039091166004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ca669fa7906024015f604051808303815f87803b158015614f65575f80fd5b505af1158015614f77573d5f803e3d5ffd5b50506020546040517fee2815ba000000000000000000000000000000000000000000000000000000008152600160048201525f60248201526001600160a01b03909116925063ee2815ba91506044015f604051808303815f87803b158015614fdd575f80fd5b505af1158015614fef573d5f803e3d5ffd5b5050604051630618f58760e51b81527f78fff396000000000000000000000000000000000000000000000000000000006004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d925063c31eb0e0915060240161161a565b601f546025546040516370a0823160e01b81526001600160a01b0391821660048201525f926101009004909116906370a0823190602401602060405180830381865afa15801561509c573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906150c09190619931565b90506150cc5f826152b4565b601f54602480546040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081526001600160a01b0391821660048201819052928101929092525f926101009004169063dd62ed3e90604401602060405180830381865afa15801561513f573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906151639190619931565b905061516f5f826152b4565b604051630618f58760e51b81527f10bad14700000000000000000000000000000000000000000000000000000000600482015261c35090737109709ecfa91a80626ff3989d68f67f5b1dd12d9063c31eb0e0906024015f604051808303815f87803b1580156151dc575f80fd5b505af11580156151ee573d5f803e3d5ffd5b5050601f54602480546025546040517f23b872dd0000000000000000000000000000000000000000000000000000000081526001600160a01b039283166004820152908216928101929092526044820186905261010090920490911692506323b872dd91506064016020604051808303815f875af1158015615272573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610d1491906197ec565b5f61529f6193be565b6152aa8484836153eb565b9150505b92915050565b6040517f98296c540000000000000000000000000000000000000000000000000000000081526004810183905260248101829052737109709ecfa91a80626ff3989d68f67f5b1dd12d906398296c54906044015b5f6040518083038186803b15801561531e575f80fd5b505afa158015615330573d5f803e3d5ffd5b505050505050565b6040517f515361f60000000000000000000000000000000000000000000000000000000081526001600160a01b03808416600483015282166024820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063515361f690604401615308565b6040517ff320d963000000000000000000000000000000000000000000000000000000008152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063f320d963906153089085908590600401619b63565b5f806153f78584615465565b905061545a6040518060400160405280601d81526020017f4552433139363750726f78792e736f6c3a4552433139363750726f78790000008152508286604051602001615445929190619b87565b60405160208183030381529060405285615470565b9150505b9392505050565b5f61545e838361549d565b60c0810151515f90156154935761548c84848460c001516154b7565b905061545e565b61548c8484615655565b5f6154a8838361573a565b61545e83836020015184615470565b5f806154c1615745565b90505f6154ce8683615814565b90505f6154e48260600151836020015185615c9d565b90505f6154f383838989615eaa565b90505f6154ff82616d16565b602081015181519192509060030b1561557257898260400151604051602001615529929190619bbf565b60408051601f19818403018152908290527f08c379a000000000000000000000000000000000000000000000000000000000825261556991600401619c20565b60405180910390fd5b5f6155b46040518060400160405280601581526020017f4465706c6f79656420746f20616464726573733a200000000000000000000000815250836001616ed7565b6040517fc6ce059d000000000000000000000000000000000000000000000000000000008152909150737109709ecfa91a80626ff3989d68f67f5b1dd12d9063c6ce059d90615607908490600401619c20565b602060405180830381865afa158015615622573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906156469190619826565b9b9a5050505050505050505050565b6040517f8d1cc9250000000000000000000000000000000000000000000000000000000081525f908190737109709ecfa91a80626ff3989d68f67f5b1dd12d90638d1cc925906156a9908790600401619c20565b5f60405180830381865afa1580156156c3573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526156ea9190810190619c50565b90505f6157178285604051602001615703929190619c82565b6040516020818303038152906040526170c6565b90506001600160a01b0381166152aa578484604051602001615529929190619c96565b6116bb82825f6170d7565b604080518082018252600381527f6f75740000000000000000000000000000000000000000000000000000000000602082015290517fd145736c000000000000000000000000000000000000000000000000000000008152606091737109709ecfa91a80626ff3989d68f67f5b1dd12d91829063d145736c906157cc908490600401619d26565b5f60405180830381865afa1580156157e6573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f1916820160405261580d9190810190619aab565b9250505090565b6158466040518060a0016040528060608152602001606081526020016060815260200160608152602001606081525090565b5f737109709ecfa91a80626ff3989d68f67f5b1dd12d90506158906040518060a0016040528060608152602001606081526020016060815260200160608152602001606081525090565b615899856171d6565b60208201525f6158a8866175af565b90505f836001600160a01b031663d930a0e66040518163ffffffff1660e01b81526004015f60405180830381865afa1580156158e6573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f1916820160405261590d9190810190619aab565b868385602001516040516020016159279493929190619d6c565b60408051601f19818403018152908290527f60f9bb1100000000000000000000000000000000000000000000000000000000825291505f906001600160a01b038616906360f9bb119061597e908590600401619c20565b5f60405180830381865afa158015615998573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526159bf9190810190619aab565b6040517fdb4235f60000000000000000000000000000000000000000000000000000000081529091506001600160a01b0386169063db4235f690615a07908490600401619e3c565b602060405180830381865afa158015615a22573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190615a4691906197ec565b615a5b57816040516020016155299190619e8d565b6040517f49c4fac80000000000000000000000000000000000000000000000000000000081526001600160a01b038616906349c4fac890615aa0908490600401619f11565b5f60405180830381865afa158015615aba573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052615ae19190810190619aab565b84526040517fdb4235f60000000000000000000000000000000000000000000000000000000081526001600160a01b0386169063db4235f690615b28908490600401619f62565b602060405180830381865afa158015615b43573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190615b6791906197ec565b15615bf8576040517f49c4fac80000000000000000000000000000000000000000000000000000000081526001600160a01b038616906349c4fac890615bb1908490600401619f62565b5f60405180830381865afa158015615bcb573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052615bf29190810190619aab565b60408501525b846001600160a01b03166349c4fac882865f0151604051602001615c1c9190619fb3565b6040516020818303038152906040526040518363ffffffff1660e01b8152600401615c48929190619b63565b5f60405180830381865afa158015615c62573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052615c899190810190619aab565b606085015250608083015250949350505050565b60408051600480825260a082019092526060915f9190816020015b6060815260200190600190039081615cb85790505090506040518060400160405280600481526020017f6772657000000000000000000000000000000000000000000000000000000000815250815f81518110615d1757615d1761a011565b60200260200101819052506040518060400160405280600381526020017f2d726c000000000000000000000000000000000000000000000000000000000081525081600181518110615d6b57615d6b61a011565b602002602001018190525084604051602001615d87919061a03e565b60405160208183030381529060405281600281518110615da957615da961a011565b602002602001018190525082604051602001615dc5919061a09c565b60405160208183030381529060405281600381518110615de757615de761a011565b60200260200101819052505f615dfc82616d16565b602080820151604080518082018252600581527f2e6a736f6e000000000000000000000000000000000000000000000000000000818501908152825180840184525f8082529086015282518084019093529051825292810192909252919250615e8b906040805180820182525f808252602091820152815180830190925284518252808501908201529061782b565b615ea05785604051602001615529919061a0d4565b9695505050505050565b60a08101516040805180820182525f80825260209182015281518083019092528251808352928101910152606090737109709ecfa91a80626ff3989d68f67f5b1dd12d9015615ef9565b511590565b61606d57826020015115615fb5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152605860248201527f54686520606c6963656e73655479706560206f7074696f6e2063616e6e6f742060448201527f62652075736564207768656e207468652060736b6970566572696679536f757260648201527f6365436f646560206f7074696f6e206973206074727565600000000000000000608482015260a401615569565b8260c001511561606d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152605360248201527f54686520606c6963656e73655479706560206f7074696f6e2063616e6e6f742060448201527f62652075736564207768656e207468652060736b69704c6963656e736554797060648201527f6560206f7074696f6e2069732060747275656000000000000000000000000000608482015260a401615569565b6040805160ff80825261200082019092525f91816020015b60608152602001906001900390816160855790505090505f6040518060400160405280600381526020017f6e707800000000000000000000000000000000000000000000000000000000008152508282806160df9061a151565b935060ff16815181106160f4576160f461a011565b60200260200101819052506040518060400160405280600d81526020017f302e302e312d616c7068612e3700000000000000000000000000000000000000815250604051602001616145919061a16f565b6040516020818303038152906040528282806161609061a151565b935060ff16815181106161755761617561a011565b60200260200101819052506040518060400160405280600681526020017f6465706c6f7900000000000000000000000000000000000000000000000000008152508282806161c29061a151565b935060ff16815181106161d7576161d761a011565b60200260200101819052506040518060400160405280600e81526020017f2d2d636f6e74726163744e616d650000000000000000000000000000000000008152508282806162249061a151565b935060ff16815181106162395761623961a011565b602002602001018190525087602001518282806162559061a151565b935060ff168151811061626a5761626a61a011565b60200260200101819052506040518060400160405280600e81526020017f2d2d636f6e7472616374506174680000000000000000000000000000000000008152508282806162b79061a151565b935060ff16815181106162cc576162cc61a011565b6020908102919091010152875182826162e48161a151565b935060ff16815181106162f9576162f961a011565b60200260200101819052506040518060400160405280600981526020017f2d2d636861696e496400000000000000000000000000000000000000000000008152508282806163469061a151565b935060ff168151811061635b5761635b61a011565b602002602001018190525061636f46617889565b828261637a8161a151565b935060ff168151811061638f5761638f61a011565b60200260200101819052506040518060400160405280600f81526020017f2d2d6275696c64496e666f46696c6500000000000000000000000000000000008152508282806163dc9061a151565b935060ff16815181106163f1576163f161a011565b6020026020010181905250868282806164099061a151565b935060ff168151811061641e5761641e61a011565b60209081029190910101528551156165415760408051808201909152601581527f2d2d636f6e7374727563746f7242797465636f646500000000000000000000006020820152828261646f8161a151565b935060ff16815181106164845761648461a011565b60209081029190910101526040517f71aad10d0000000000000000000000000000000000000000000000000000000081526001600160a01b038416906371aad10d906164d4908990600401619c20565b5f60405180830381865afa1580156164ee573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526165159190810190619aab565b82826165208161a151565b935060ff16815181106165355761653561a011565b60200260200101819052505b8460200151156166115760408051808201909152601281527f2d2d766572696679536f75726365436f646500000000000000000000000000006020820152828261658a8161a151565b935060ff168151811061659f5761659f61a011565b60200260200101819052506040518060400160405280600581526020017f66616c73650000000000000000000000000000000000000000000000000000008152508282806165ec9061a151565b935060ff16815181106166015761660161a011565b60200260200101819052506167d6565b616648615ef48660a001516040805180820182525f8082526020918201528151808301909252825182529182019181019190915290565b6166db5760408051808201909152600d81527f2d2d6c6963656e736554797065000000000000000000000000000000000000006020820152828261668b8161a151565b935060ff16815181106166a0576166a061a011565b60200260200101819052508460a001516040516020016166c0919061a03e565b6040516020818303038152906040528282806165ec9061a151565b8460c0015115801561671d5750604080890151815180830183525f8082526020918201528251808401909352815183529081019082015261671b90511590565b155b156167d65760408051808201909152600d81527f2d2d6c6963656e73655479706500000000000000000000000000000000000000602082015282826167618161a151565b935060ff16815181106167765761677661a011565b602002602001018190525061678a88617926565b60405160200161679a919061a03e565b6040516020818303038152906040528282806167b59061a151565b935060ff16815181106167ca576167ca61a011565b60200260200101819052505b604080860151815180830183525f8082526020918201528251808401909352815183529081019082015261680990511590565b61689e5760408051808201909152600b81527f2d2d72656c6179657249640000000000000000000000000000000000000000006020820152828261684c8161a151565b935060ff16815181106168615761686161a011565b6020026020010181905250846040015182828061687d9061a151565b935060ff16815181106168925761689261a011565b60200260200101819052505b6060850151156169bb5760408051808201909152600681527f2d2d73616c740000000000000000000000000000000000000000000000000000602082015282826168e78161a151565b935060ff16815181106168fc576168fc61a011565b602090810291909101015260608501516040517fb11a19e800000000000000000000000000000000000000000000000000000000815260048101919091526001600160a01b0384169063b11a19e8906024015f60405180830381865afa158015616968573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f1916820160405261698f9190810190619aab565b828261699a8161a151565b935060ff16815181106169af576169af61a011565b60200260200101819052505b60e08501515115616a615760408051808201909152600a81527f2d2d6761734c696d69740000000000000000000000000000000000000000000060208201528282616a058161a151565b935060ff1681518110616a1a57616a1a61a011565b6020026020010181905250616a358560e001515f0151617889565b8282616a408161a151565b935060ff1681518110616a5557616a5561a011565b60200260200101819052505b60e08501516020015115616b0b5760408051808201909152600a81527f2d2d67617350726963650000000000000000000000000000000000000000000060208201528282616aae8161a151565b935060ff1681518110616ac357616ac361a011565b6020026020010181905250616adf8560e0015160200151617889565b8282616aea8161a151565b935060ff1681518110616aff57616aff61a011565b60200260200101819052505b60e08501516040015115616bb55760408051808201909152600e81527f2d2d6d617846656550657247617300000000000000000000000000000000000060208201528282616b588161a151565b935060ff1681518110616b6d57616b6d61a011565b6020026020010181905250616b898560e0015160400151617889565b8282616b948161a151565b935060ff1681518110616ba957616ba961a011565b60200260200101819052505b60e08501516060015115616c5f5760408051808201909152601681527f2d2d6d61785072696f726974794665655065724761730000000000000000000060208201528282616c028161a151565b935060ff1681518110616c1757616c1761a011565b6020026020010181905250616c338560e0015160600151617889565b8282616c3e8161a151565b935060ff1681518110616c5357616c5361a011565b60200260200101819052505b5f8160ff1667ffffffffffffffff811115616c7c57616c7c6199de565b604051908082528060200260200182016040528015616caf57816020015b6060815260200190600190039081616c9a5790505b5090505f5b8260ff168160ff161015616d0757838160ff1681518110616cd757616cd761a011565b6020026020010151828260ff1681518110616cf457616cf461a011565b6020908102919091010152600101616cb4565b5093505050505b949350505050565b616d3c60405180606001604052805f60030b815260200160608152602001606081525090565b60408051808201825260048082527f6261736800000000000000000000000000000000000000000000000000000000602083015291517fd145736c000000000000000000000000000000000000000000000000000000008152737109709ecfa91a80626ff3989d68f67f5b1dd12d925f91849163d145736c91616dc19186910161a1c6565b5f60405180830381865afa158015616ddb573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052616e029190810190619aab565b90505f616e0f8683618402565b90505f846001600160a01b031663f45c1ce7836040518263ffffffff1660e01b8152600401616e3e91906196e2565b5f604051808303815f875af1158015616e59573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052616e80919081019061a20c565b805190915060030b15801590616e995750602081015151155b8015616ea85750604081015151155b15615ea057815f81518110616ebf57616ebf61a011565b6020026020010151604051602001615529919061a2bb565b60605f616f0a856040805180820182525f8082526020918201528151808301909252825182529182019181019190915290565b6040805180820182525f80825260209182015281518083019092528651825280870190820152909150616f409082905b90618554565b15617098575f616fba82616fb484616fae616f818a6040805180820182525f8082526020918201528151808301909252825182529182019181019190915290565b6040805180820182525f808252602091820152815180830190925282518252918201519181019190915290565b9061857a565b906185d8565b604080518082018252600181527f0a000000000000000000000000000000000000000000000000000000000000006020808301918252835180850185525f808252908201528351808501909452915183529082015290915061701d908290618554565b1561708657604080518082018252600181527f0a000000000000000000000000000000000000000000000000000000000000006020808301918252835180850185525f8082529082015283518085019094529151835290820152617083905b829061865c565b90505b61708f81618681565b9250505061545e565b82156170b157848460405160200161552992919061a498565b505060408051602081019091525f815261545e565b5f808251602084015ff09392505050565b8160a00151156170e657505050565b5f6170f28484846186e6565b90505f6170fe82616d16565b602081015181519192509060030b1580156171985750604080518082018252600781527f53554343455353000000000000000000000000000000000000000000000000006020808301918252835180850185525f8082529082015283518085019094529151835290820152617198906040805180820182525f80825260209182015281518083019092528451825280850190820152616f3a565b156171a557505050505050565b604082015151156171c5578160400151604051602001615529919061a51f565b80604051602001615529919061a576565b60605f617209836040805180820182525f8082526020918201528151808301909252825182529182019181019190915290565b604080518082018252600481527f2e736f6c000000000000000000000000000000000000000000000000000000006020808301918252835180850185525f808252908201528351808501909452915183529082015290915061726d905b829061782b565b156172db57604080518082018252600481527f2e736f6c000000000000000000000000000000000000000000000000000000006020808301918252835180850185525f808252908201528351808501909452915183529082015261545e906172d6908390618c7b565b618681565b604080518082018252600181527f3a000000000000000000000000000000000000000000000000000000000000006020808301918252835180850185525f808252908201528351808501909452915183529082015261733c905b8290618d03565b60010361740757604080518082018252600181527f3a000000000000000000000000000000000000000000000000000000000000006020808301918252835180850185525f80825290820152835180850190945291518352908201526173a19061707c565b50604080518082018252600181527f3a000000000000000000000000000000000000000000000000000000000000006020808301918252835180850185525f808252908201528351808501909452915183529082015261545e906172d6905b839061865c565b604080518082018252600581527f2e6a736f6e0000000000000000000000000000000000000000000000000000006020808301918252835180850185525f808252908201528351808501909452915183529082015261746590617266565b1561759857604080518082018252600181527f2f000000000000000000000000000000000000000000000000000000000000006020808301918252835180850185525f808252908201819052845180860190955292518452830152906174cc908390618d97565b90505f81600183516174de9190619b50565b815181106174ee576174ee61a011565b6020026020010151905061758f6172d66175636040518060400160405280600581526020017f2e6a736f6e0000000000000000000000000000000000000000000000000000008152506040805180820182525f8082526020918201528151808301909252825182529182019181019190915290565b6040805180820182525f8082526020918201528151808301909252855182528086019082015290618c7b565b95945050505050565b82604051602001615529919061a5cd565b50919050565b60605f6175e2836040805180820182525f8082526020918201528151808301909252825182529182019181019190915290565b604080518082018252600481527f2e736f6c000000000000000000000000000000000000000000000000000000006020808301918252835180850185525f808252908201528351808501909452915183529082015290915061764390617266565b156176515761545e81618681565b604080518082018252600181527f3a000000000000000000000000000000000000000000000000000000000000006020808301918252835180850185525f80825290820152835180850190945291518352908201526176af90617335565b60010361771857604080518082018252600181527f3a000000000000000000000000000000000000000000000000000000000000006020808301918252835180850185525f808252908201528351808501909452915183529082015261545e906172d690617400565b604080518082018252600581527f2e6a736f6e0000000000000000000000000000000000000000000000000000006020808301918252835180850185525f808252908201528351808501909452915183529082015261777690617266565b1561759857604080518082018252600181527f2f000000000000000000000000000000000000000000000000000000000000006020808301918252835180850185525f808252908201819052845180860190955292518452830152906177dd908390618d97565b90506001815111156178195780600282516177f89190619b50565b815181106178085761780861a011565b602002602001015192505050919050565b5082604051602001615529919061a5cd565b805182515f91111561783e57505f6152ae565b8151835160208501515f929161785391619b3d565b61785d9190619b50565b9050826020015181036178745760019150506152ae565b82516020840151819020912014905092915050565b60605f61789583618e42565b60010190505f8167ffffffffffffffff8111156178b4576178b46199de565b6040519080825280601f01601f1916602001820160405280156178de576020820181803683370190505b5090508181016020015b5f19017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a85049450846178e857509392505050565b604081810151815180830183525f808252602091820181905283518085018552835181529282018383015283518085018552600a81527f554e4c4943454e53454400000000000000000000000000000000000000000000818401908152855180870187528381528401929092528451808601909552518452908301526060916179b1905b8290618f23565b156179f157505060408051808201909152600481527f4e6f6e65000000000000000000000000000000000000000000000000000000006020820152919050565b604080518082018252600981527f556e6c6963656e736500000000000000000000000000000000000000000000006020808301918252835180850185525f8082529082015283518085019094529151835290820152617a4f906179aa565b15617a8f57505060408051808201909152600981527f556e6c6963656e736500000000000000000000000000000000000000000000006020820152919050565b604080518082018252600381527f4d495400000000000000000000000000000000000000000000000000000000006020808301918252835180850185525f8082529082015283518085019094529151835290820152617aed906179aa565b15617b2d57505060408051808201909152600381527f4d495400000000000000000000000000000000000000000000000000000000006020820152919050565b604080518082018252600c81527f47504c2d322e302d6f6e6c7900000000000000000000000000000000000000006020808301918252835180850185525f8082529082015283518085019094529151835290820152617b8b906179aa565b80617bef5750604080518082018252601081527f47504c2d322e302d6f722d6c61746572000000000000000000000000000000006020808301918252835180850185525f8082529082015283518085019094529151835290820152617bef906179aa565b15617c2f57505060408051808201909152600981527f474e552047504c763200000000000000000000000000000000000000000000006020820152919050565b604080518082018252600c81527f47504c2d332e302d6f6e6c7900000000000000000000000000000000000000006020808301918252835180850185525f8082529082015283518085019094529151835290820152617c8d906179aa565b80617cf15750604080518082018252601081527f47504c2d332e302d6f722d6c61746572000000000000000000000000000000006020808301918252835180850185525f8082529082015283518085019094529151835290820152617cf1906179aa565b15617d3157505060408051808201909152600981527f474e552047504c763300000000000000000000000000000000000000000000006020820152919050565b604080518082018252600d81527f4c47504c2d322e312d6f6e6c79000000000000000000000000000000000000006020808301918252835180850185525f8082529082015283518085019094529151835290820152617d8f906179aa565b80617df35750604080518082018252601181527f4c47504c2d322e312d6f722d6c617465720000000000000000000000000000006020808301918252835180850185525f8082529082015283518085019094529151835290820152617df3906179aa565b15617e3357505060408051808201909152600c81527f474e55204c47504c76322e3100000000000000000000000000000000000000006020820152919050565b604080518082018252600d81527f4c47504c2d332e302d6f6e6c79000000000000000000000000000000000000006020808301918252835180850185525f8082529082015283518085019094529151835290820152617e91906179aa565b80617ef55750604080518082018252601181527f4c47504c2d332e302d6f722d6c617465720000000000000000000000000000006020808301918252835180850185525f8082529082015283518085019094529151835290820152617ef5906179aa565b15617f3557505060408051808201909152600a81527f474e55204c47504c7633000000000000000000000000000000000000000000006020820152919050565b604080518082018252600c81527f4253442d322d436c6175736500000000000000000000000000000000000000006020808301918252835180850185525f8082529082015283518085019094529151835290820152617f93906179aa565b15617fd357505060408051808201909152600c81527f4253442d322d436c6175736500000000000000000000000000000000000000006020820152919050565b604080518082018252600c81527f4253442d332d436c6175736500000000000000000000000000000000000000006020808301918252835180850185525f8082529082015283518085019094529151835290820152618031906179aa565b1561807157505060408051808201909152600c81527f4253442d332d436c6175736500000000000000000000000000000000000000006020820152919050565b604080518082018252600781527f4d504c2d322e30000000000000000000000000000000000000000000000000006020808301918252835180850185525f80825290820152835180850190945291518352908201526180cf906179aa565b1561810f57505060408051808201909152600781527f4d504c2d322e30000000000000000000000000000000000000000000000000006020820152919050565b604080518082018252600781527f4f534c2d332e30000000000000000000000000000000000000000000000000006020808301918252835180850185525f808252908201528351808501909452915183529082015261816d906179aa565b156181ad57505060408051808201909152600781527f4f534c2d332e30000000000000000000000000000000000000000000000000006020820152919050565b604080518082018252600a81527f4170616368652d322e30000000000000000000000000000000000000000000006020808301918252835180850185525f808252908201528351808501909452915183529082015261820b906179aa565b1561824b57505060408051808201909152600a81527f4170616368652d322e30000000000000000000000000000000000000000000006020820152919050565b604080518082018252600d81527f4147504c2d332e302d6f6e6c79000000000000000000000000000000000000006020808301918252835180850185525f80825290820152835180850190945291518352908201526182a9906179aa565b8061830d5750604080518082018252601181527f4147504c2d332e302d6f722d6c617465720000000000000000000000000000006020808301918252835180850185525f808252908201528351808501909452915183529082015261830d906179aa565b1561834d57505060408051808201909152600a81527f474e55204147504c7633000000000000000000000000000000000000000000006020820152919050565b604080518082018252600881527f4255534c2d312e310000000000000000000000000000000000000000000000006020808301918252835180850185525f80825290820152835180850190945291518352908201526183ab906179aa565b156183eb57505060408051808201909152600781527f42534c20312e31000000000000000000000000000000000000000000000000006020820152919050565b60408084015184519151615529929060200161a69d565b6060805f5b845181101561848c57818582815181106184235761842361a011565b602002602001015160405160200161843c929190619c82565b60405160208183030381529060405291506001855161845b9190619b50565b81146184845781604051602001618472919061a7eb565b60405160208183030381529060405291505b600101618407565b50604080516003808252608082019092525f91816020015b60608152602001906001900390816184a457905050905083815f815181106184ce576184ce61a011565b60200260200101819052506040518060400160405280600281526020017f2d63000000000000000000000000000000000000000000000000000000000000815250816001815181106185225761852261a011565b602002602001018190525081816002815181106185415761854161a011565b6020908102919091010152949350505050565b60208083015183518351928401515f936185719291849190618f36565b14159392505050565b604080518082019091525f80825260208201525f6185a8845f01518560200151855f01518660200151619045565b90508360200151816185ba9190619b50565b845185906185c9908390619b50565b90525060208401525090919050565b604080518082019091525f80825260208201528151835110156185fc5750816152ae565b60208083015190840151600191146186235750815160208481015190840151829020919020145b80156186545782518451859061863a908390619b50565b9052508251602085018051618650908390619b3d565b9052505b509192915050565b604080518082019091525f808252602082015261867a838383619161565b5092915050565b60605f825f015167ffffffffffffffff8111156186a0576186a06199de565b6040519080825280601f01601f1916602001820160405280156186ca576020820181803683370190505b5090505f60208201905061867a818560200151865f0151619207565b60605f6186f1615745565b6040805160ff80825261200082019092529192505f9190816020015b606081526020019060019003908161870d5790505090505f6040518060400160405280600381526020017f6e707800000000000000000000000000000000000000000000000000000000008152508282806187679061a151565b935060ff168151811061877c5761877c61a011565b60200260200101819052506040518060400160405280600781526020017f5e312e33322e33000000000000000000000000000000000000000000000000008152506040516020016187cd919061a823565b6040516020818303038152906040528282806187e89061a151565b935060ff16815181106187fd576187fd61a011565b60200260200101819052506040518060400160405280600881526020017f76616c696461746500000000000000000000000000000000000000000000000081525082828061884a9061a151565b935060ff168151811061885f5761885f61a011565b60200260200101819052508260405160200161887b919061a09c565b6040516020818303038152906040528282806188969061a151565b935060ff16815181106188ab576188ab61a011565b60200260200101819052506040518060400160405280600a81526020017f2d2d636f6e7472616374000000000000000000000000000000000000000000008152508282806188f89061a151565b935060ff168151811061890d5761890d61a011565b60200260200101819052506189228784619280565b828261892d8161a151565b935060ff16815181106189425761894261a011565b6020908102919091010152855151156189ed5760408051808201909152600b81527f2d2d7265666572656e6365000000000000000000000000000000000000000000602082015282826189948161a151565b935060ff16815181106189a9576189a961a011565b60200260200101819052506189c1865f015184619280565b82826189cc8161a151565b935060ff16815181106189e1576189e161a011565b60200260200101819052505b856080015115618a5b5760408051808201909152601881527f2d2d756e73616665536b697053746f72616765436865636b000000000000000060208201528282618a368161a151565b935060ff1681518110618a4b57618a4b61a011565b6020026020010181905250618ac1565b8415618ac15760408051808201909152601281527f2d2d726571756972655265666572656e6365000000000000000000000000000060208201528282618aa08161a151565b935060ff1681518110618ab557618ab561a011565b60200260200101819052505b60408601515115618b5d5760408051808201909152600d81527f2d2d756e73616665416c6c6f770000000000000000000000000000000000000060208201528282618b0b8161a151565b935060ff1681518110618b2057618b2061a011565b60200260200101819052508560400151828280618b3c9061a151565b935060ff1681518110618b5157618b5161a011565b60200260200101819052505b856060015115618bc75760408051808201909152601481527f2d2d756e73616665416c6c6f7752656e616d657300000000000000000000000060208201528282618ba68161a151565b935060ff1681518110618bbb57618bbb61a011565b60200260200101819052505b5f8160ff1667ffffffffffffffff811115618be457618be46199de565b604051908082528060200260200182016040528015618c1757816020015b6060815260200190600190039081618c025790505b5090505f5b8260ff168160ff161015618c6f57838160ff1681518110618c3f57618c3f61a011565b6020026020010151828260ff1681518110618c5c57618c5c61a011565b6020908102919091010152600101618c1c565b50979650505050505050565b604080518082019091525f8082526020820152815183511015618c9f5750816152ae565b8151835160208501515f9291618cb491619b3d565b618cbe9190619b50565b60208401519091506001908214618cdf575082516020840151819020908220145b8015618cfa57835185518690618cf6908390619b50565b9052505b50929392505050565b5f80825f0151618d23855f01518660200151865f01518760200151619045565b618d2d9190619b3d565b90505b83516020850151618d419190619b3d565b811161867a5781618d518161a854565b925050825f0151618d86856020015183618d6b9190619b50565b8651618d779190619b50565b83865f01518760200151619045565b618d909190619b3d565b9050618d30565b60605f618da48484618d03565b618daf906001619b3d565b67ffffffffffffffff811115618dc757618dc76199de565b604051908082528060200260200182016040528015618dfa57816020015b6060815260200190600190039081618de55790505b5090505f5b8151811015618e3a57618e156172d6868661865c565b828281518110618e2757618e2761a011565b6020908102919091010152600101618dff565b509392505050565b5f807a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310618e8a577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef81000000008310618eb6576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310618ed457662386f26fc10000830492506010015b6305f5e1008310618eec576305f5e100830492506008015b6127108310618f0057612710830492506004015b60648310618f12576064830492506002015b600a83106152ae5760010192915050565b5f618f2e83836192bf565b159392505050565b5f8085841161903b5760208411618fe7575f8415618f7f576001618f5b866020619b50565b618f6690600861a86c565b618f7190600261a966565b618f7b9190619b50565b1990505b8351811685618f8e8989619b3d565b618f989190619b50565b805190935082165b818114618fd257878411618fba5787945050505050616d0e565b83618fc48161a971565b945050828451169050618fa0565b618fdc8785619b3d565b945050505050616d0e565b838320618ff48588619b50565b618ffe9087619b3d565b91505b858210619039578482208082036190265761901c8684619b3d565b9350505050616d0e565b619031600184619b50565b925050619001565b505b5092949350505050565b5f838186851161914c57602085116190fc575f851561908f57600161906b876020619b50565b61907690600861a86c565b61908190600261a966565b61908b9190619b50565b1990505b845181165f8761909f8b8b619b3d565b6190a99190619b50565b855190915083165b8281146190ee578186106190d6576190c98b8b619b3d565b9650505050505050616d0e565b856190e08161a854565b9650508386511690506190b1565b859650505050505050616d0e565b508383205f905b61910d8689619b50565b821161914a578583208082036191295783945050505050616d0e565b619134600185619b3d565b93505081806191429061a854565b925050619103565b505b6191568787619b3d565b979650505050505050565b604080518082019091525f80825260208201525f61918f855f01518660200151865f01518760200151619045565b6020808701805191860191909152519091506191ab9082619b50565b8352845160208601516191be9190619b3d565b81036191cc575f85526191fe565b835183516191da9190619b3d565b855186906191e9908390619b50565b90525083516191f89082619b3d565b60208601525b50909392505050565b6020811061923f578151835261921e602084619b3d565b925061922b602083619b3d565b9150619238602082619b50565b9050619207565b5f19811561926d576001619254836020619b50565b6192609061010061a966565b61926a9190619b50565b90505b9151835183169219169190911790915250565b60605f61928d8484615814565b80516020808301516040519394506192a79390910161a986565b60405160208183030381529060405291505092915050565b815181515f91908111156192d1575081515b602080850151908401515f5b838110156193885782518251808214619358575f19602087101561933757600184619309896020619b50565b6193139190619b3d565b61931e90600861a86c565b61932990600261a966565b6193339190619b50565b1990505b81811683821681810391146193555797506152ae9650505050505050565b50505b619363602086619b3d565b9450619370602085619b3d565b935050506020816193819190619b3d565b90506192dd565b5084518651615ea0919061a9c1565b610b098061a9e183390190565b61102e8061b4ea83390190565b611fc08061c51883390190565b6040518060e001604052806060815260200160608152602001606081526020015f151581526020015f151581526020015f151581526020016193fe619403565b905290565b6040518061010001604052805f151581526020015f15158152602001606081526020015f801916815260200160608152602001606081526020015f151581526020016193fe60405180608001604052805f81526020015f81526020015f81526020015f81525090565b602080825282518282018190525f918401906040840190835b818110156194ac5783516001600160a01b0316835260209384019390920191600101619485565b509095945050505050565b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b5f602082016020835280845180835260408501915060408160051b8601019250602086015f5b828110156195de577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0878603018452815180516001600160a01b03168652602090810151604082880181905281519088018190529101906060600582901b8801810191908801905f5b818110156195c4577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa08a85030183526195ae8486516194b7565b6020958601959094509290920191600101619574565b50919750505060209485019492909201915060010161950b565b50929695505050505050565b5f8151808452602084019350602083015f5b8281101561963c5781517fffffffff00000000000000000000000000000000000000000000000000000000168652602095860195909101906001016195fc565b5093949350505050565b5f602082016020835280845180835260408501915060408160051b8601019250602086015f5b828110156195de577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc087860301845281518051604087526196b060408801826194b7565b90506020820151915086810360208801526196cb81836195ea565b96505050602093840193919091019060010161966c565b5f602082016020835280845180835260408501915060408160051b8601019250602086015f5b828110156195de577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08786030184526197428583516194b7565b94506020938401939190910190600101619708565b5f602082016020835280845180835260408501915060408160051b8601019250602086015f5b828110156195de577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc087860301845281516001600160a01b03815116865260208101519050604060208701526197d660408701826195ea565b955050602093840193919091019060010161977d565b5f602082840312156197fc575f80fd5b8151801515811461545e575f80fd5b80516001600160a01b0381168114619821575f80fd5b919050565b5f60208284031215619836575f80fd5b61545e8261980b565b610100815260056101008201527f544f4b454e000000000000000000000000000000000000000000000000000000610120820152610140602082015260036101408201527f544b4e00000000000000000000000000000000000000000000000000000000006101608201525f6101808201905060ff88166040830152866060830152600386106198f6577f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b8560808301528460a083015261991760c08301856001600160a01b03169052565b6001600160a01b03831660e0830152979650505050505050565b5f60208284031215619941575f80fd5b5051919050565b600181811c9082168061995c57607f821691505b6020821081036175a9577f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f80604083850312156199a4575f80fd5b6199ad8361980b565b6020939093015192949293505050565b604081525f6199cf60408301856194b7565b90508260208301529392505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6040516060810167ffffffffffffffff81118282101715619a2e57619a2e6199de565b60405290565b5f8067ffffffffffffffff841115619a4e57619a4e6199de565b50604051601f19601f85018116603f0116810181811067ffffffffffffffff82111715619a7d57619a7d6199de565b604052838152905080828401851015619a94575f80fd5b8383602083015e5f60208583010152509392505050565b5f60208284031215619abb575f80fd5b815167ffffffffffffffff811115619ad1575f80fd5b8201601f81018413619ae1575f80fd5b6152aa84825160208401619a34565b5f60208284031215619b00575f80fd5b815160ff8116811461545e575f80fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b808201808211156152ae576152ae619b10565b818103818111156152ae576152ae619b10565b604081525f619b7560408301856194b7565b828103602084015261545a81856194b7565b6001600160a01b0383168152604060208201525f616d0e60408301846194b7565b5f81518060208401855e5f93019283525090919050565b7f4661696c656420746f206465706c6f7920636f6e74726163742000000000000081525f619bf0601a830185619ba8565b7f3a20000000000000000000000000000000000000000000000000000000000000815261545a6002820185619ba8565b602081525f61545e60208301846194b7565b5f82601f830112619c41575f80fd5b61545e83835160208501619a34565b5f60208284031215619c60575f80fd5b815167ffffffffffffffff811115619c76575f80fd5b6152aa84828501619c32565b5f616d0e619c908386619ba8565b84619ba8565b7f4661696c656420746f206465706c6f7920636f6e74726163742000000000000081525f619cc7601a830185619ba8565b7f207573696e6720636f6e7374727563746f7220646174612022000000000000008152619cf76019820185619ba8565b7f2200000000000000000000000000000000000000000000000000000000000000815260010195945050505050565b60408152600b60408201527f464f554e4452595f4f55540000000000000000000000000000000000000000006060820152608060208201525f61545e60808301846194b7565b5f619d778287619ba8565b7f2f000000000000000000000000000000000000000000000000000000000000008152619da76001820187619ba8565b90507f2f000000000000000000000000000000000000000000000000000000000000008152619dd96001820186619ba8565b90507f2f000000000000000000000000000000000000000000000000000000000000008152619e0b6001820185619ba8565b7f2e6a736f6e0000000000000000000000000000000000000000000000000000008152600501979650505050505050565b604081525f619e4e60408301846194b7565b8281036020840152600481527f2e6173740000000000000000000000000000000000000000000000000000000060208201526040810191505092915050565b7f436f756c64206e6f742066696e642041535420696e206172746966616374200081525f619ebe601f830184619ba8565b7f2e205365742060617374203d20747275656020696e20666f756e6472792e746f81527f6d6c00000000000000000000000000000000000000000000000000000000000060208201526022019392505050565b604081525f619f2360408301846194b7565b8281036020840152601181527f2e6173742e6162736f6c7574655061746800000000000000000000000000000060208201526040810191505092915050565b604081525f619f7460408301846194b7565b8281036020840152600c81527f2e6173742e6c6963656e7365000000000000000000000000000000000000000060208201526040810191505092915050565b7f2e6d657461646174612e736f75726365732e5b2700000000000000000000000081525f619fe46014830184619ba8565b7f275d2e6b656363616b32353600000000000000000000000000000000000000008152600c019392505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b7f220000000000000000000000000000000000000000000000000000000000000081525f61a06f6001830184619ba8565b7f220000000000000000000000000000000000000000000000000000000000000081526001019392505050565b5f61a0a78284619ba8565b7f2f6275696c642d696e666f0000000000000000000000000000000000000000008152600b019392505050565b7f436f756c64206e6f742066696e64206275696c642d696e666f2066696c65207781527f697468206d61746368696e6720736f7572636520636f6465206861736820666f60208201527f7220636f6e74726163742000000000000000000000000000000000000000000060408201525f61545e604b830184619ba8565b5f60ff821660ff810361a1665761a166619b10565b60010192915050565b7f406f70656e7a657070656c696e2f646566656e6465722d6465706c6f792d636c81527f69656e742d636c6940000000000000000000000000000000000000000000000060208201525f61545e6029830184619ba8565b60408152601660408201527f4f50454e5a455050454c494e5f424153485f50415448000000000000000000006060820152608060208201525f61545e60808301846194b7565b5f6020828403121561a21c575f80fd5b815167ffffffffffffffff81111561a232575f80fd5b82016060818503121561a243575f80fd5b61a24b619a0b565b81518060030b811461a25b575f80fd5b8152602082015167ffffffffffffffff81111561a276575f80fd5b61a28286828501619c32565b602083015250604082015167ffffffffffffffff81111561a2a1575f80fd5b61a2ad86828501619c32565b604083015250949350505050565b7f4661696c656420746f2072756e206261736820636f6d6d616e6420776974682081527f220000000000000000000000000000000000000000000000000000000000000060208201525f61a3126021830184619ba8565b7f222e20496620796f7520617265207573696e672057696e646f77732c2073657481527f20746865204f50454e5a455050454c494e5f424153485f5041544820656e766960208201527f726f6e6d656e74207661726961626c6520746f207468652066756c6c7920717560408201527f616c69666965642070617468206f66207468652062617368206578656375746160608201527f626c652e20466f72206578616d706c652c20696620796f75206172652075736960808201527f6e672047697420666f722057696e646f77732c206164642074686520666f6c6c60a08201527f6f77696e67206c696e6520696e20746865202e656e762066696c65206f66207960c08201527f6f75722070726f6a65637420287573696e6720666f727761726420736c61736860e08201527f6573293a0a4f50454e5a455050454c494e5f424153485f504154483d22433a2f6101008201527f50726f6772616d2046696c65732f4769742f62696e2f6261736822000000000061012082015261013b019392505050565b7f4661696c656420746f2066696e64206c696e652077697468207072656669782081527f270000000000000000000000000000000000000000000000000000000000000060208201525f61a4ef6021830185619ba8565b7f2720696e206f75747075743a2000000000000000000000000000000000000000815261545a600d820185619ba8565b7f4661696c656420746f2072756e2075706772616465207361666574792076616c81527f69646174696f6e3a20000000000000000000000000000000000000000000000060208201525f61545e6029830184619ba8565b7f55706772616465207361666574792076616c69646174696f6e206661696c656481527f3a0a00000000000000000000000000000000000000000000000000000000000060208201525f61545e6022830184619ba8565b7f436f6e7472616374206e616d652000000000000000000000000000000000000081525f61a5fe600e830184619ba8565b7f206d75737420626520696e2074686520666f726d6174204d79436f6e7472616381527f742e736f6c3a4d79436f6e7472616374206f72204d79436f6e74726163742e7360208201527f6f6c206f72206f75742f4d79436f6e74726163742e736f6c2f4d79436f6e747260408201527f6163742e6a736f6e00000000000000000000000000000000000000000000000060608201526068019392505050565b7f53504458206c6963656e7365206964656e74696669657220000000000000000081525f61a6ce6018830185619ba8565b7f20696e2000000000000000000000000000000000000000000000000000000000815261a6fe6004820185619ba8565b7f20646f6573206e6f74206c6f6f6b206c696b65206120737570706f727465642081527f6c6963656e736520666f7220626c6f636b206578706c6f72657220766572696660208201527f69636174696f6e2e205573652074686520606c6963656e73655479706560206f60408201527f7074696f6e20746f20737065636966792061206c6963656e736520747970652c60608201527f206f7220736574207468652060736b69704c6963656e73655479706560206f7060808201527f74696f6e20746f2060747275656020746f20736b69702e00000000000000000060a082015260b70195945050505050565b5f61a7f68284619ba8565b7f200000000000000000000000000000000000000000000000000000000000000081526001019392505050565b7f406f70656e7a657070656c696e2f75706772616465732d636f7265400000000081525f61545e601c830184619ba8565b5f5f19820361a8655761a865619b10565b5060010190565b80820281158282048414176152ae576152ae619b10565b6001815b600184111561a8be5780850481111561a8a25761a8a2619b10565b600184161561a8b057908102905b60019390931c92800261a887565b935093915050565b5f8261a8d4575060016152ae565b8161a8e057505f6152ae565b816001811461a8f6576002811461a9005761a91c565b60019150506152ae565b60ff84111561a9115761a911619b10565b50506001821b6152ae565b5060208310610133831016604e8410600b841016171561a93f575081810a6152ae565b61a94b5f19848461a883565b805f190482111561a95e5761a95e619b10565b029392505050565b5f61545e838361a8c6565b5f8161a97f5761a97f619b10565b505f190190565b5f61a9918285619ba8565b7f3a00000000000000000000000000000000000000000000000000000000000000815261545a6001820185619ba8565b8181035f83128015838313168383128216171561867a5761867a619b1056fe60c0604052600d60809081526c2bb930b83832b21022ba3432b960991b60a0525f9061002b908261010b565b506040805180820190915260048152630ae8aa8960e31b6020820152600190610054908261010b565b506002805460ff1916601217905534801561006d575f80fd5b506101c5565b634e487b7160e01b5f52604160045260245ffd5b600181811c9082168061009b57607f821691505b6020821081036100b957634e487b7160e01b5f52602260045260245ffd5b50919050565b601f82111561010657805f5260205f20601f840160051c810160208510156100e45750805b601f840160051c820191505b81811015610103575f81556001016100f0565b50505b505050565b81516001600160401b0381111561012457610124610073565b610138816101328454610087565b846100bf565b6020601f82116001811461016a575f83156101535750848201515b5f19600385901b1c1916600184901b178455610103565b5f84815260208120601f198516915b828110156101995787850151825560209485019460019092019101610179565b50848210156101b657868401515f19600387901b60f8161c191681555b50505050600190811b01905550565b610937806101d25f395ff3fe6080604052600436106100bb575f3560e01c8063313ce56711610071578063a9059cbb1161004c578063a9059cbb146101eb578063d0e30db01461020a578063dd62ed3e14610212575f80fd5b8063313ce5671461018157806370a08231146101ac57806395d89b41146101d7575f80fd5b806318160ddd116100a157806318160ddd1461012757806323b872dd146101435780632e1a7d4d14610162575f80fd5b806306fdde03146100ce578063095ea7b3146100f8575f80fd5b366100ca576100c8610248565b005b5f80fd5b3480156100d9575f80fd5b506100e26102a2565b6040516100ef919061071f565b60405180910390f35b348015610103575f80fd5b5061011761011236600461079a565b61032d565b60405190151581526020016100ef565b348015610132575f80fd5b50475b6040519081526020016100ef565b34801561014e575f80fd5b5061011761015d3660046107c2565b6103a6565b34801561016d575f80fd5b506100c861017c3660046107fc565b610628565b34801561018c575f80fd5b5060025461019a9060ff1681565b60405160ff90911681526020016100ef565b3480156101b7575f80fd5b506101356101c6366004610813565b60036020525f908152604090205481565b3480156101e2575f80fd5b506100e26106ff565b3480156101f6575f80fd5b5061011761020536600461079a565b61070c565b6100c8610248565b34801561021d575f80fd5b5061013561022c36600461082c565b600460209081525f928352604080842090915290825290205481565b335f908152600360205260408120805434929061026690849061088a565b909155505060405134815233907fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c9060200160405180910390a2565b5f80546102ae9061089d565b80601f01602080910402602001604051908101604052809291908181526020018280546102da9061089d565b80156103255780601f106102fc57610100808354040283529160200191610325565b820191905f5260205f20905b81548152906001019060200180831161030857829003601f168201915b505050505081565b335f81815260046020908152604080832073ffffffffffffffffffffffffffffffffffffffff8716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906103949086815260200190565b60405180910390a35060015b92915050565b73ffffffffffffffffffffffffffffffffffffffff83165f90815260036020526040812054821115610412576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201525f60248201526044015b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff84163314801590610487575073ffffffffffffffffffffffffffffffffffffffff84165f9081526004602090815260408083203384529091529020547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff14155b156105435773ffffffffffffffffffffffffffffffffffffffff84165f9081526004602090815260408083203384529091529020548211156104fe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201525f6024820152604401610409565b73ffffffffffffffffffffffffffffffffffffffff84165f9081526004602090815260408083203384529091528120805484929061053d9084906108ee565b90915550505b73ffffffffffffffffffffffffffffffffffffffff84165f90815260036020526040812080548492906105779084906108ee565b909155505073ffffffffffffffffffffffffffffffffffffffff83165f90815260036020526040812080548492906105b090849061088a565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161061691815260200190565b60405180910390a35060019392505050565b335f90815260036020526040902054811115610679576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201525f6024820152604401610409565b335f90815260036020526040812080548392906106979084906108ee565b9091555050604051339082156108fc029083905f818181858888f193505050501580156106c6573d5f803e3d5ffd5b5060405181815233907f7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b659060200160405180910390a250565b600180546102ae9061089d565b5f6107183384846103a6565b9392505050565b602081525f82518060208401528060208501604085015e5f6040828501015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011684010191505092915050565b803573ffffffffffffffffffffffffffffffffffffffff81168114610795575f80fd5b919050565b5f80604083850312156107ab575f80fd5b6107b483610772565b946020939093013593505050565b5f805f606084860312156107d4575f80fd5b6107dd84610772565b92506107eb60208501610772565b929592945050506040919091013590565b5f6020828403121561080c575f80fd5b5035919050565b5f60208284031215610823575f80fd5b61071882610772565b5f806040838503121561083d575f80fd5b61084683610772565b915061085460208401610772565b90509250929050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b808201808211156103a0576103a061085d565b600181811c908216806108b157607f821691505b6020821081036108e8577f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b50919050565b818103818111156103a0576103a061085d56fea2646970667358221220f82a6621bc6ae2f40b7ff1dde0e016bd4b523e6e1df6d8c4401566e37294755f64736f6c634300081a003360c060405234801561000f575f80fd5b5060405161102e38038061102e83398101604081905261002e916100d8565b3373735b14bb79463307aacbed86daf3322b1e6226ab1461006257604051632b2add3d60e01b815260040160405180910390fd5b600380546001600160a01b0319166001600160a01b0385811691909117909155828116608052811660a0526040517f80699e81136d69cb8367ad52a994e25c722a86da654b561d0c14b61a777e7ac5905f90a1505050610118565b80516001600160a01b03811681146100d3575f80fd5b919050565b5f805f606084860312156100ea575f80fd5b6100f3846100bd565b9250610101602085016100bd565b915061010f604085016100bd565b90509250925092565b60805160a051610eee6101405f395f6101dd01525f81816102b001526104510152610eee5ff3fe608060405234801561000f575f80fd5b50600436106100f0575f3560e01c806397770dff11610093578063c63585cc11610063578063c63585cc1461026b578063d7fd7afb1461027e578063d936a012146102ab578063ee2815ba146102d2575f80fd5b806397770dff14610212578063a7cb050714610225578063c39aca3714610238578063c62178ac1461024b575f80fd5b8063513a9c05116100ce578063513a9c0514610183578063569541b9146101b8578063842da36d146101d857806391dd645f146101ff575f80fd5b80630be15547146100f45780631f0e251b146101535780633ce4a5bc14610168575b5f80fd5b610129610102366004610bb9565b60016020525f908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b610166610161366004610bf8565b6102e5565b005b61012973735b14bb79463307aacbed86daf3322b1e6226ab81565b610129610191366004610bb9565b60026020525f908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b6003546101299073ffffffffffffffffffffffffffffffffffffffff1681565b6101297f000000000000000000000000000000000000000000000000000000000000000081565b61016661020d366004610c18565b6103f9565b610166610220366004610bf8565b61051b565b610166610233366004610c42565b610628565b610166610246366004610c62565b6106c2565b6004546101299073ffffffffffffffffffffffffffffffffffffffff1681565b610129610279366004610d28565b6108b9565b61029d61028c366004610bb9565b5f6020819052908152604090205481565b60405190815260200161014a565b6101297f000000000000000000000000000000000000000000000000000000000000000081565b6101666102e0366004610c18565b6109ec565b3373735b14bb79463307aacbed86daf3322b1e6226ab14610332576040517f2b2add3d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff811661037f576040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600480547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527f3ade88e3922d64780e1bf4460d364c2970b69da813f9c0c07a1c187b5647636c906020015b60405180910390a150565b3373735b14bb79463307aacbed86daf3322b1e6226ab14610446576040517f2b2add3d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6003545f9061048d907f00000000000000000000000000000000000000000000000000000000000000009073ffffffffffffffffffffffffffffffffffffffff16846108b9565b5f8481526002602090815260409182902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff85169081179091558251878152918201529192507f0ecec485166da6139b13bb7e033e9446e2d35348e80ebf1180d4afe2dba1704e910160405180910390a1505050565b3373735b14bb79463307aacbed86daf3322b1e6226ab14610568576040517f2b2add3d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff81166105b5576040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527fdba79d534382d1a8ae108e4c8ecb27c6ae42ab8b91d44eedf88bd329f3868d5e906020016103ee565b3373735b14bb79463307aacbed86daf3322b1e6226ab14610675576040517f2b2add3d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f828152602081815260409182902083905581518481529081018390527f49f492222906ac486c3c1401fa545626df1f0c0e5a77a05597ea2ed66af9850d91015b60405180910390a15050565b3373735b14bb79463307aacbed86daf3322b1e6226ab1461070f576040517f2b2add3d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff831673735b14bb79463307aacbed86daf3322b1e6226ab148061075c575073ffffffffffffffffffffffffffffffffffffffff831630145b15610793576040517f82d5d76a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f47e7ef2400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8481166004830152602482018690528616906347e7ef24906044016020604051808303815f875af1158015610805573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906108299190610d68565b506040517fde43156e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84169063de43156e906108849089908990899088908890600401610dce565b5f604051808303815f87803b15801561089b575f80fd5b505af11580156108ad573d5f803e3d5ffd5b50505050505050505050565b5f805f6108c68585610abc565b6040517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606084811b8216602084015283901b16603482015291935091508690604801604051602081830303815290604052805190602001206040516020016109ac9291907fff00000000000000000000000000000000000000000000000000000000000000815260609290921b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000016600183015260158201527f96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f603582015260550190565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291905280516020909101209695505050505050565b3373735b14bb79463307aacbed86daf3322b1e6226ab14610a39576040517f2b2add3d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f8281526001602090815260409182902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff85169081179091558251858152918201527fd1b36d30f6248e97c473b4d1348ca164a4ef6759022f54a58ec200326c39c45d91016106b6565b5f808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603610b23576040517fcb1e7cfe00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1610610b5d578284610b60565b83835b909250905073ffffffffffffffffffffffffffffffffffffffff8216610bb2576040517f78b507da00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b9250929050565b5f60208284031215610bc9575f80fd5b5035919050565b803573ffffffffffffffffffffffffffffffffffffffff81168114610bf3575f80fd5b919050565b5f60208284031215610c08575f80fd5b610c1182610bd0565b9392505050565b5f8060408385031215610c29575f80fd5b82359150610c3960208401610bd0565b90509250929050565b5f8060408385031215610c53575f80fd5b50508035926020909101359150565b5f805f805f8060a08789031215610c77575f80fd5b863567ffffffffffffffff811115610c8d575f80fd5b87016060818a031215610c9e575f80fd5b9550610cac60208801610bd0565b945060408701359350610cc160608801610bd0565b9250608087013567ffffffffffffffff811115610cdc575f80fd5b8701601f81018913610cec575f80fd5b803567ffffffffffffffff811115610d02575f80fd5b896020828401011115610d13575f80fd5b60208201935080925050509295509295509295565b5f805f60608486031215610d3a575f80fd5b610d4384610bd0565b9250610d5160208501610bd0565b9150610d5f60408501610bd0565b90509250925092565b5f60208284031215610d78575f80fd5b81518015158114610c11575f80fd5b81835281816020850137505f602082840101525f60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b608081525f86357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1883603018112610e04575f80fd5b870160208101903567ffffffffffffffff811115610e20575f80fd5b803603821315610e2e575f80fd5b60606080850152610e4360e085018284610d87565b91505073ffffffffffffffffffffffffffffffffffffffff610e6760208a01610bd0565b1660a0840152604088013560c084015273ffffffffffffffffffffffffffffffffffffffff871660208401528560408401528281036060840152610eac818587610d87565b9897505050505050505056fea2646970667358221220b0d6a30753e802ae433306f5417965c91addfaa66cde527bc59212cb9443da5264736f6c634300081a003360c060405234801561000f575f80fd5b50604051611fc0380380611fc083398101604081905261002e916101d0565b6001600160a01b038216158061004b57506001600160a01b038116155b156100695760405163d92e233d60e01b815260040160405180910390fd5b60066100758982610315565b5060076100828882610315565b506008805460ff191660ff881617905560808590528360028111156100a9576100a96103cf565b60a08160028111156100bd576100bd6103cf565b9052506001929092555f80546001600160a01b039283166001600160a01b0319909116179055600880549190921661010002610100600160a81b0319909116179055506103e39350505050565b634e487b7160e01b5f52604160045260245ffd5b5f82601f83011261012d575f80fd5b81516001600160401b038111156101465761014661010a565b604051601f8201601f19908116603f011681016001600160401b03811182821017156101745761017461010a565b60405281815283820160200185101561018b575f80fd5b8160208501602083015e5f918101602001919091529392505050565b8051600381106101b5575f80fd5b919050565b80516001600160a01b03811681146101b5575f80fd5b5f805f805f805f80610100898b0312156101e8575f80fd5b88516001600160401b038111156101fd575f80fd5b6102098b828c0161011e565b60208b015190995090506001600160401b03811115610226575f80fd5b6102328b828c0161011e565b975050604089015160ff81168114610248575f80fd5b60608a0151909650945061025e60808a016101a7565b60a08a0151909450925061027460c08a016101ba565b915061028260e08a016101ba565b90509295985092959890939650565b600181811c908216806102a557607f821691505b6020821081036102c357634e487b7160e01b5f52602260045260245ffd5b50919050565b601f82111561031057805f5260205f20601f840160051c810160208510156102ee5750805b601f840160051c820191505b8181101561030d575f81556001016102fa565b50505b505050565b81516001600160401b0381111561032e5761032e61010a565b6103428161033c8454610291565b846102c9565b6020601f821160018114610374575f831561035d5750848201515b5f19600385901b1c1916600184901b17845561030d565b5f84815260208120601f198516915b828110156103a35787850151825560209485019460019092019101610383565b50848210156103c057868401515f19600387901b60f8161c191681555b50505050600190811b01905550565b634e487b7160e01b5f52602160045260245ffd5b60805160a051611ba06104205f395f61033901525f81816102e501528181610bbf01528181610cc201528181610ed90152610fdc0152611ba05ff3fe608060405234801561000f575f80fd5b50600436106101b0575f3560e01c806395d89b41116100f3578063ccc7759911610093578063eddeb1231161006e578063eddeb12314610455578063f2441b3214610468578063f687d12a14610487578063fc5fecd51461049a575f80fd5b8063ccc77599146103c9578063d9eeebed146103dc578063dd62ed3e14610410575f80fd5b8063b84c8246116100ce578063b84c82461461037b578063c47f002714610390578063c7012626146103a3578063c835d7cc146103b6575f80fd5b806395d89b411461032c578063a3413d0314610334578063a9059cbb14610368575f80fd5b80633ce4a5bc1161015e5780634d8943bb116101395780634d8943bb146102a257806370a08231146102ab57806385e1f4d0146102e05780638b851b9514610307575f80fd5b80633ce4a5bc1461023c57806342966c681461027c57806347e7ef241461028f575f80fd5b806318160ddd1161018e57806318160ddd1461020c57806323b872dd14610214578063313ce56714610227575f80fd5b806306fdde03146101b4578063091d2788146101d2578063095ea7b3146101e9575b5f80fd5b6101bc6104ad565b6040516101c991906115fb565b60405180910390f35b6101db60015481565b6040519081526020016101c9565b6101fc6101f7366004611638565b61053d565b60405190151581526020016101c9565b6005546101db565b6101fc610222366004611662565b610553565b60085460405160ff90911681526020016101c9565b61025773735b14bb79463307aacbed86daf3322b1e6226ab81565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101c9565b6101fc61028a3660046116a0565b6105e8565b6101fc61029d366004611638565b6105fb565b6101db60025481565b6101db6102b93660046116b7565b73ffffffffffffffffffffffffffffffffffffffff165f9081526003602052604090205490565b6101db7f000000000000000000000000000000000000000000000000000000000000000081565b60085461025790610100900473ffffffffffffffffffffffffffffffffffffffff1681565b6101bc610752565b61035b7f000000000000000000000000000000000000000000000000000000000000000081565b6040516101c991906116d2565b6101fc610376366004611638565b610761565b61038e6103893660046117d3565b61076d565b005b61038e61039e3660046117d3565b6107ca565b6101fc6103b1366004611820565b610823565b61038e6103c43660046116b7565b61096d565b61038e6103d73660046116b7565b610a80565b6103e4610b94565b6040805173ffffffffffffffffffffffffffffffffffffffff90931683526020830191909152016101c9565b6101db61041e366004611875565b73ffffffffffffffffffffffffffffffffffffffff9182165f90815260046020908152604080832093909416825291909152205490565b61038e6104633660046116a0565b610daa565b5f546102579073ffffffffffffffffffffffffffffffffffffffff1681565b61038e6104953660046116a0565b610e2c565b6103e46104a83660046116a0565b610eae565b6060600680546104bc906118ac565b80601f01602080910402602001604051908101604052809291908181526020018280546104e8906118ac565b80156105335780601f1061050a57610100808354040283529160200191610533565b820191905f5260205f20905b81548152906001019060200180831161051657829003601f168201915b5050505050905090565b5f6105493384846110c2565b5060015b92915050565b5f61055f8484846111ca565b73ffffffffffffffffffffffffffffffffffffffff84165f908152600460209081526040808320338452909152902054828110156105c9576040517f10bad14700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6105dd85336105d8868561192a565b6110c2565b506001949350505050565b5f6105f33383611383565b506001919050565b5f3373735b14bb79463307aacbed86daf3322b1e6226ab1480159061063757505f5473ffffffffffffffffffffffffffffffffffffffff163314155b80156106605750600854610100900473ffffffffffffffffffffffffffffffffffffffff163314155b15610697576040517fddb5de5e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6106a183836114c2565b6040517f735b14bb79463307aacbed86daf3322b1e6226ab000000000000000000000000602082015273ffffffffffffffffffffffffffffffffffffffff8416907f67fc7bdaed5b0ec550d8706b87d60568ab70c6b781263c70101d54cd1564aab390603401604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529082905261074191869061193d565b60405180910390a250600192915050565b6060600780546104bc906118ac565b5f6105493384846111ca565b3373735b14bb79463307aacbed86daf3322b1e6226ab146107ba576040517f2b2add3d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60076107c682826119aa565b5050565b3373735b14bb79463307aacbed86daf3322b1e6226ab14610817576040517f2b2add3d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60066107c682826119aa565b5f805f61082e610b94565b6040517f23b872dd00000000000000000000000000000000000000000000000000000000815233600482015273735b14bb79463307aacbed86daf3322b1e6226ab602482015260448101829052919350915073ffffffffffffffffffffffffffffffffffffffff8316906323b872dd906064016020604051808303815f875af11580156108bd573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906108e19190611ac1565b610917576040517f0a7cd6d600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6109213385611383565b60025460405133917f9ffbffc04a397460ee1dbe8c9503e098090567d6b7f4b3c02a8617d800b6d9559161095a91899189918791611ae0565b60405180910390a2506001949350505050565b3373735b14bb79463307aacbed86daf3322b1e6226ab146109ba576040517f2b2add3d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8116610a07576040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527fd55614e962c5fd6ece71614f6348d702468a997a394dd5e5c1677950226d97ae906020015b60405180910390a150565b3373735b14bb79463307aacbed86daf3322b1e6226ab14610acd576040517f2b2add3d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8116610b1a576040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600880547fffffffffffffffffffffff0000000000000000000000000000000000000000ff1661010073ffffffffffffffffffffffffffffffffffffffff8416908102919091179091556040519081527f88815d964e380677e86d817e7d65dea59cb7b4c3b5b7a0c8ec7ea4a74f90a38790602001610a75565b5f80546040517f0be155470000000000000000000000000000000000000000000000000000000081527f000000000000000000000000000000000000000000000000000000000000000060048201528291829173ffffffffffffffffffffffffffffffffffffffff90911690630be1554790602401602060405180830381865afa158015610c24573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610c489190611b0e565b905073ffffffffffffffffffffffffffffffffffffffff8116610c97576040517f78fff39600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f80546040517fd7fd7afb0000000000000000000000000000000000000000000000000000000081527f0000000000000000000000000000000000000000000000000000000000000000600482015273ffffffffffffffffffffffffffffffffffffffff9091169063d7fd7afb90602401602060405180830381865afa158015610d23573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610d479190611b29565b9050805f03610d82576040517fe661aed000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f60025460015483610d949190611b40565b610d9e9190611b57565b92959294509192505050565b3373735b14bb79463307aacbed86daf3322b1e6226ab14610df7576040517f2b2add3d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60028190556040518181527fef13af88e424b5d15f49c77758542c1938b08b8b95b91ed0751f98ba99000d8f90602001610a75565b3373735b14bb79463307aacbed86daf3322b1e6226ab14610e79576040517f2b2add3d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018190556040518181527fff5788270f43bfc1ca41c503606d2594aa3023a1a7547de403a3e2f146a4a80a90602001610a75565b5f80546040517f0be155470000000000000000000000000000000000000000000000000000000081527f000000000000000000000000000000000000000000000000000000000000000060048201528291829173ffffffffffffffffffffffffffffffffffffffff90911690630be1554790602401602060405180830381865afa158015610f3e573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610f629190611b0e565b905073ffffffffffffffffffffffffffffffffffffffff8116610fb1576040517f78fff39600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f80546040517fd7fd7afb0000000000000000000000000000000000000000000000000000000081527f0000000000000000000000000000000000000000000000000000000000000000600482015273ffffffffffffffffffffffffffffffffffffffff9091169063d7fd7afb90602401602060405180830381865afa15801561103d573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906110619190611b29565b9050805f0361109c576040517fe661aed000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002545f906110ab8784611b40565b6110b59190611b57565b9296929550919350505050565b73ffffffffffffffffffffffffffffffffffffffff831661110f576040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff821661115c576040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8381165f8181526004602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b73ffffffffffffffffffffffffffffffffffffffff8316611217576040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8216611264576040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff83165f90815260036020526040902054818110156112c3576040517ffe382aa700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6112cd828261192a565b73ffffffffffffffffffffffffffffffffffffffff8086165f90815260036020526040808220939093559085168152908120805484929061130f908490611b57565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161137591815260200190565b60405180910390a350505050565b73ffffffffffffffffffffffffffffffffffffffff82166113d0576040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff82165f908152600360205260409020548181101561142f576040517ffe382aa700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611439828261192a565b73ffffffffffffffffffffffffffffffffffffffff84165f908152600360205260408120919091556005805484929061147390849061192a565b90915550506040518281525f9073ffffffffffffffffffffffffffffffffffffffff8516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020016111bd565b73ffffffffffffffffffffffffffffffffffffffff821661150f576040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060055f8282546115209190611b57565b909155505073ffffffffffffffffffffffffffffffffffffffff82165f9081526003602052604081208054839290611559908490611b57565b909155505060405181815273ffffffffffffffffffffffffffffffffffffffff8316905f907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b5f81518084528060208401602086015e5f6020828601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011685010191505092915050565b602081525f61160d60208301846115af565b9392505050565b73ffffffffffffffffffffffffffffffffffffffff81168114611635575f80fd5b50565b5f8060408385031215611649575f80fd5b823561165481611614565b946020939093013593505050565b5f805f60608486031215611674575f80fd5b833561167f81611614565b9250602084013561168f81611614565b929592945050506040919091013590565b5f602082840312156116b0575f80fd5b5035919050565b5f602082840312156116c7575f80fd5b813561160d81611614565b602081016003831061170b577f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b91905290565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b5f8067ffffffffffffffff84111561175857611758611711565b506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f85018116603f0116810181811067ffffffffffffffff821117156117a5576117a5611711565b6040528381529050808284018510156117bc575f80fd5b838360208301375f60208583010152509392505050565b5f602082840312156117e3575f80fd5b813567ffffffffffffffff8111156117f9575f80fd5b8201601f81018413611809575f80fd5b6118188482356020840161173e565b949350505050565b5f8060408385031215611831575f80fd5b823567ffffffffffffffff811115611847575f80fd5b8301601f81018513611857575f80fd5b6118668582356020840161173e565b95602094909401359450505050565b5f8060408385031215611886575f80fd5b823561189181611614565b915060208301356118a181611614565b809150509250929050565b600181811c908216806118c057607f821691505b6020821081036118f7577f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b50919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b8181038181111561054d5761054d6118fd565b604081525f61194f60408301856115af565b90508260208301529392505050565b601f8211156119a557805f5260205f20601f840160051c810160208510156119835750805b601f840160051c820191505b818110156119a2575f815560010161198f565b50505b505050565b815167ffffffffffffffff8111156119c4576119c4611711565b6119d8816119d284546118ac565b8461195e565b6020601f821160018114611a29575f83156119f35750848201515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600385901b1c1916600184901b1784556119a2565b5f848152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08516915b82811015611a765787850151825560209485019460019092019101611a56565b5084821015611ab257868401517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600387901b60f8161c191681555b50505050600190811b01905550565b5f60208284031215611ad1575f80fd5b8151801515811461160d575f80fd5b608081525f611af260808301876115af565b6020830195909552506040810192909252606090910152919050565b5f60208284031215611b1e575f80fd5b815161160d81611614565b5f60208284031215611b39575f80fd5b5051919050565b808202811582820484141761054d5761054d6118fd565b8082018082111561054d5761054d6118fd56fea26469706673582212206130fb621d6dd12e8164e45fefe5a69512cd6f3f9ac39ab60f6f9d44bc45140c64736f6c634300081a0033a2646970667358221220882b98a5a66e4eaeb6ee5e2f39bda669c20dc5f83feef81ba704d51056f5a89064736f6c634300081a0033",
}

// ZRC20TestABI is the input ABI used to generate the binding from.
// Deprecated: Use ZRC20TestMetaData.ABI instead.
var ZRC20TestABI = ZRC20TestMetaData.ABI

// ZRC20TestBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ZRC20TestMetaData.Bin instead.
var ZRC20TestBin = ZRC20TestMetaData.Bin

// DeployZRC20Test deploys a new Ethereum contract, binding an instance of ZRC20Test to it.
func DeployZRC20Test(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ZRC20Test, error) {
	parsed, err := ZRC20TestMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ZRC20TestBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ZRC20Test{ZRC20TestCaller: ZRC20TestCaller{contract: contract}, ZRC20TestTransactor: ZRC20TestTransactor{contract: contract}, ZRC20TestFilterer: ZRC20TestFilterer{contract: contract}}, nil
}

// ZRC20Test is an auto generated Go binding around an Ethereum contract.
type ZRC20Test struct {
	ZRC20TestCaller     // Read-only binding to the contract
	ZRC20TestTransactor // Write-only binding to the contract
	ZRC20TestFilterer   // Log filterer for contract events
}

// ZRC20TestCaller is an auto generated read-only Go binding around an Ethereum contract.
type ZRC20TestCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ZRC20TestTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ZRC20TestTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ZRC20TestFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ZRC20TestFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ZRC20TestSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ZRC20TestSession struct {
	Contract     *ZRC20Test        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ZRC20TestCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ZRC20TestCallerSession struct {
	Contract *ZRC20TestCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// ZRC20TestTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ZRC20TestTransactorSession struct {
	Contract     *ZRC20TestTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// ZRC20TestRaw is an auto generated low-level Go binding around an Ethereum contract.
type ZRC20TestRaw struct {
	Contract *ZRC20Test // Generic contract binding to access the raw methods on
}

// ZRC20TestCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ZRC20TestCallerRaw struct {
	Contract *ZRC20TestCaller // Generic read-only contract binding to access the raw methods on
}

// ZRC20TestTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ZRC20TestTransactorRaw struct {
	Contract *ZRC20TestTransactor // Generic write-only contract binding to access the raw methods on
}

// NewZRC20Test creates a new instance of ZRC20Test, bound to a specific deployed contract.
func NewZRC20Test(address common.Address, backend bind.ContractBackend) (*ZRC20Test, error) {
	contract, err := bindZRC20Test(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ZRC20Test{ZRC20TestCaller: ZRC20TestCaller{contract: contract}, ZRC20TestTransactor: ZRC20TestTransactor{contract: contract}, ZRC20TestFilterer: ZRC20TestFilterer{contract: contract}}, nil
}

// NewZRC20TestCaller creates a new read-only instance of ZRC20Test, bound to a specific deployed contract.
func NewZRC20TestCaller(address common.Address, caller bind.ContractCaller) (*ZRC20TestCaller, error) {
	contract, err := bindZRC20Test(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ZRC20TestCaller{contract: contract}, nil
}

// NewZRC20TestTransactor creates a new write-only instance of ZRC20Test, bound to a specific deployed contract.
func NewZRC20TestTransactor(address common.Address, transactor bind.ContractTransactor) (*ZRC20TestTransactor, error) {
	contract, err := bindZRC20Test(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ZRC20TestTransactor{contract: contract}, nil
}

// NewZRC20TestFilterer creates a new log filterer instance of ZRC20Test, bound to a specific deployed contract.
func NewZRC20TestFilterer(address common.Address, filterer bind.ContractFilterer) (*ZRC20TestFilterer, error) {
	contract, err := bindZRC20Test(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ZRC20TestFilterer{contract: contract}, nil
}

// bindZRC20Test binds a generic wrapper to an already deployed contract.
func bindZRC20Test(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ZRC20TestMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ZRC20Test *ZRC20TestRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ZRC20Test.Contract.ZRC20TestCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ZRC20Test *ZRC20TestRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ZRC20Test.Contract.ZRC20TestTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ZRC20Test *ZRC20TestRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ZRC20Test.Contract.ZRC20TestTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ZRC20Test *ZRC20TestCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ZRC20Test.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ZRC20Test *ZRC20TestTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ZRC20Test.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ZRC20Test *ZRC20TestTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ZRC20Test.Contract.contract.Transact(opts, method, params...)
}

// ISTEST is a free data retrieval call binding the contract method 0xfa7626d4.
//
// Solidity: function IS_TEST() view returns(bool)
func (_ZRC20Test *ZRC20TestCaller) ISTEST(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _ZRC20Test.contract.Call(opts, &out, "IS_TEST")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ISTEST is a free data retrieval call binding the contract method 0xfa7626d4.
//
// Solidity: function IS_TEST() view returns(bool)
func (_ZRC20Test *ZRC20TestSession) ISTEST() (bool, error) {
	return _ZRC20Test.Contract.ISTEST(&_ZRC20Test.CallOpts)
}

// ISTEST is a free data retrieval call binding the contract method 0xfa7626d4.
//
// Solidity: function IS_TEST() view returns(bool)
func (_ZRC20Test *ZRC20TestCallerSession) ISTEST() (bool, error) {
	return _ZRC20Test.Contract.ISTEST(&_ZRC20Test.CallOpts)
}

// ExcludeArtifacts is a free data retrieval call binding the contract method 0xb5508aa9.
//
// Solidity: function excludeArtifacts() view returns(string[] excludedArtifacts_)
func (_ZRC20Test *ZRC20TestCaller) ExcludeArtifacts(opts *bind.CallOpts) ([]string, error) {
	var out []interface{}
	err := _ZRC20Test.contract.Call(opts, &out, "excludeArtifacts")

	if err != nil {
		return *new([]string), err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)

	return out0, err

}

// ExcludeArtifacts is a free data retrieval call binding the contract method 0xb5508aa9.
//
// Solidity: function excludeArtifacts() view returns(string[] excludedArtifacts_)
func (_ZRC20Test *ZRC20TestSession) ExcludeArtifacts() ([]string, error) {
	return _ZRC20Test.Contract.ExcludeArtifacts(&_ZRC20Test.CallOpts)
}

// ExcludeArtifacts is a free data retrieval call binding the contract method 0xb5508aa9.
//
// Solidity: function excludeArtifacts() view returns(string[] excludedArtifacts_)
func (_ZRC20Test *ZRC20TestCallerSession) ExcludeArtifacts() ([]string, error) {
	return _ZRC20Test.Contract.ExcludeArtifacts(&_ZRC20Test.CallOpts)
}

// ExcludeContracts is a free data retrieval call binding the contract method 0xe20c9f71.
//
// Solidity: function excludeContracts() view returns(address[] excludedContracts_)
func (_ZRC20Test *ZRC20TestCaller) ExcludeContracts(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _ZRC20Test.contract.Call(opts, &out, "excludeContracts")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// ExcludeContracts is a free data retrieval call binding the contract method 0xe20c9f71.
//
// Solidity: function excludeContracts() view returns(address[] excludedContracts_)
func (_ZRC20Test *ZRC20TestSession) ExcludeContracts() ([]common.Address, error) {
	return _ZRC20Test.Contract.ExcludeContracts(&_ZRC20Test.CallOpts)
}

// ExcludeContracts is a free data retrieval call binding the contract method 0xe20c9f71.
//
// Solidity: function excludeContracts() view returns(address[] excludedContracts_)
func (_ZRC20Test *ZRC20TestCallerSession) ExcludeContracts() ([]common.Address, error) {
	return _ZRC20Test.Contract.ExcludeContracts(&_ZRC20Test.CallOpts)
}

// ExcludeSelectors is a free data retrieval call binding the contract method 0xb0464fdc.
//
// Solidity: function excludeSelectors() view returns((address,bytes4[])[] excludedSelectors_)
func (_ZRC20Test *ZRC20TestCaller) ExcludeSelectors(opts *bind.CallOpts) ([]StdInvariantFuzzSelector, error) {
	var out []interface{}
	err := _ZRC20Test.contract.Call(opts, &out, "excludeSelectors")

	if err != nil {
		return *new([]StdInvariantFuzzSelector), err
	}

	out0 := *abi.ConvertType(out[0], new([]StdInvariantFuzzSelector)).(*[]StdInvariantFuzzSelector)

	return out0, err

}

// ExcludeSelectors is a free data retrieval call binding the contract method 0xb0464fdc.
//
// Solidity: function excludeSelectors() view returns((address,bytes4[])[] excludedSelectors_)
func (_ZRC20Test *ZRC20TestSession) ExcludeSelectors() ([]StdInvariantFuzzSelector, error) {
	return _ZRC20Test.Contract.ExcludeSelectors(&_ZRC20Test.CallOpts)
}

// ExcludeSelectors is a free data retrieval call binding the contract method 0xb0464fdc.
//
// Solidity: function excludeSelectors() view returns((address,bytes4[])[] excludedSelectors_)
func (_ZRC20Test *ZRC20TestCallerSession) ExcludeSelectors() ([]StdInvariantFuzzSelector, error) {
	return _ZRC20Test.Contract.ExcludeSelectors(&_ZRC20Test.CallOpts)
}

// ExcludeSenders is a free data retrieval call binding the contract method 0x1ed7831c.
//
// Solidity: function excludeSenders() view returns(address[] excludedSenders_)
func (_ZRC20Test *ZRC20TestCaller) ExcludeSenders(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _ZRC20Test.contract.Call(opts, &out, "excludeSenders")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// ExcludeSenders is a free data retrieval call binding the contract method 0x1ed7831c.
//
// Solidity: function excludeSenders() view returns(address[] excludedSenders_)
func (_ZRC20Test *ZRC20TestSession) ExcludeSenders() ([]common.Address, error) {
	return _ZRC20Test.Contract.ExcludeSenders(&_ZRC20Test.CallOpts)
}

// ExcludeSenders is a free data retrieval call binding the contract method 0x1ed7831c.
//
// Solidity: function excludeSenders() view returns(address[] excludedSenders_)
func (_ZRC20Test *ZRC20TestCallerSession) ExcludeSenders() ([]common.Address, error) {
	return _ZRC20Test.Contract.ExcludeSenders(&_ZRC20Test.CallOpts)
}

// Failed is a free data retrieval call binding the contract method 0xba414fa6.
//
// Solidity: function failed() view returns(bool)
func (_ZRC20Test *ZRC20TestCaller) Failed(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _ZRC20Test.contract.Call(opts, &out, "failed")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Failed is a free data retrieval call binding the contract method 0xba414fa6.
//
// Solidity: function failed() view returns(bool)
func (_ZRC20Test *ZRC20TestSession) Failed() (bool, error) {
	return _ZRC20Test.Contract.Failed(&_ZRC20Test.CallOpts)
}

// Failed is a free data retrieval call binding the contract method 0xba414fa6.
//
// Solidity: function failed() view returns(bool)
func (_ZRC20Test *ZRC20TestCallerSession) Failed() (bool, error) {
	return _ZRC20Test.Contract.Failed(&_ZRC20Test.CallOpts)
}

// TargetArtifactSelectors is a free data retrieval call binding the contract method 0x66d9a9a0.
//
// Solidity: function targetArtifactSelectors() view returns((string,bytes4[])[] targetedArtifactSelectors_)
func (_ZRC20Test *ZRC20TestCaller) TargetArtifactSelectors(opts *bind.CallOpts) ([]StdInvariantFuzzArtifactSelector, error) {
	var out []interface{}
	err := _ZRC20Test.contract.Call(opts, &out, "targetArtifactSelectors")

	if err != nil {
		return *new([]StdInvariantFuzzArtifactSelector), err
	}

	out0 := *abi.ConvertType(out[0], new([]StdInvariantFuzzArtifactSelector)).(*[]StdInvariantFuzzArtifactSelector)

	return out0, err

}

// TargetArtifactSelectors is a free data retrieval call binding the contract method 0x66d9a9a0.
//
// Solidity: function targetArtifactSelectors() view returns((string,bytes4[])[] targetedArtifactSelectors_)
func (_ZRC20Test *ZRC20TestSession) TargetArtifactSelectors() ([]StdInvariantFuzzArtifactSelector, error) {
	return _ZRC20Test.Contract.TargetArtifactSelectors(&_ZRC20Test.CallOpts)
}

// TargetArtifactSelectors is a free data retrieval call binding the contract method 0x66d9a9a0.
//
// Solidity: function targetArtifactSelectors() view returns((string,bytes4[])[] targetedArtifactSelectors_)
func (_ZRC20Test *ZRC20TestCallerSession) TargetArtifactSelectors() ([]StdInvariantFuzzArtifactSelector, error) {
	return _ZRC20Test.Contract.TargetArtifactSelectors(&_ZRC20Test.CallOpts)
}

// TargetArtifacts is a free data retrieval call binding the contract method 0x85226c81.
//
// Solidity: function targetArtifacts() view returns(string[] targetedArtifacts_)
func (_ZRC20Test *ZRC20TestCaller) TargetArtifacts(opts *bind.CallOpts) ([]string, error) {
	var out []interface{}
	err := _ZRC20Test.contract.Call(opts, &out, "targetArtifacts")

	if err != nil {
		return *new([]string), err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)

	return out0, err

}

// TargetArtifacts is a free data retrieval call binding the contract method 0x85226c81.
//
// Solidity: function targetArtifacts() view returns(string[] targetedArtifacts_)
func (_ZRC20Test *ZRC20TestSession) TargetArtifacts() ([]string, error) {
	return _ZRC20Test.Contract.TargetArtifacts(&_ZRC20Test.CallOpts)
}

// TargetArtifacts is a free data retrieval call binding the contract method 0x85226c81.
//
// Solidity: function targetArtifacts() view returns(string[] targetedArtifacts_)
func (_ZRC20Test *ZRC20TestCallerSession) TargetArtifacts() ([]string, error) {
	return _ZRC20Test.Contract.TargetArtifacts(&_ZRC20Test.CallOpts)
}

// TargetContracts is a free data retrieval call binding the contract method 0x3f7286f4.
//
// Solidity: function targetContracts() view returns(address[] targetedContracts_)
func (_ZRC20Test *ZRC20TestCaller) TargetContracts(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _ZRC20Test.contract.Call(opts, &out, "targetContracts")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// TargetContracts is a free data retrieval call binding the contract method 0x3f7286f4.
//
// Solidity: function targetContracts() view returns(address[] targetedContracts_)
func (_ZRC20Test *ZRC20TestSession) TargetContracts() ([]common.Address, error) {
	return _ZRC20Test.Contract.TargetContracts(&_ZRC20Test.CallOpts)
}

// TargetContracts is a free data retrieval call binding the contract method 0x3f7286f4.
//
// Solidity: function targetContracts() view returns(address[] targetedContracts_)
func (_ZRC20Test *ZRC20TestCallerSession) TargetContracts() ([]common.Address, error) {
	return _ZRC20Test.Contract.TargetContracts(&_ZRC20Test.CallOpts)
}

// TargetInterfaces is a free data retrieval call binding the contract method 0x2ade3880.
//
// Solidity: function targetInterfaces() view returns((address,string[])[] targetedInterfaces_)
func (_ZRC20Test *ZRC20TestCaller) TargetInterfaces(opts *bind.CallOpts) ([]StdInvariantFuzzInterface, error) {
	var out []interface{}
	err := _ZRC20Test.contract.Call(opts, &out, "targetInterfaces")

	if err != nil {
		return *new([]StdInvariantFuzzInterface), err
	}

	out0 := *abi.ConvertType(out[0], new([]StdInvariantFuzzInterface)).(*[]StdInvariantFuzzInterface)

	return out0, err

}

// TargetInterfaces is a free data retrieval call binding the contract method 0x2ade3880.
//
// Solidity: function targetInterfaces() view returns((address,string[])[] targetedInterfaces_)
func (_ZRC20Test *ZRC20TestSession) TargetInterfaces() ([]StdInvariantFuzzInterface, error) {
	return _ZRC20Test.Contract.TargetInterfaces(&_ZRC20Test.CallOpts)
}

// TargetInterfaces is a free data retrieval call binding the contract method 0x2ade3880.
//
// Solidity: function targetInterfaces() view returns((address,string[])[] targetedInterfaces_)
func (_ZRC20Test *ZRC20TestCallerSession) TargetInterfaces() ([]StdInvariantFuzzInterface, error) {
	return _ZRC20Test.Contract.TargetInterfaces(&_ZRC20Test.CallOpts)
}

// TargetSelectors is a free data retrieval call binding the contract method 0x916a17c6.
//
// Solidity: function targetSelectors() view returns((address,bytes4[])[] targetedSelectors_)
func (_ZRC20Test *ZRC20TestCaller) TargetSelectors(opts *bind.CallOpts) ([]StdInvariantFuzzSelector, error) {
	var out []interface{}
	err := _ZRC20Test.contract.Call(opts, &out, "targetSelectors")

	if err != nil {
		return *new([]StdInvariantFuzzSelector), err
	}

	out0 := *abi.ConvertType(out[0], new([]StdInvariantFuzzSelector)).(*[]StdInvariantFuzzSelector)

	return out0, err

}

// TargetSelectors is a free data retrieval call binding the contract method 0x916a17c6.
//
// Solidity: function targetSelectors() view returns((address,bytes4[])[] targetedSelectors_)
func (_ZRC20Test *ZRC20TestSession) TargetSelectors() ([]StdInvariantFuzzSelector, error) {
	return _ZRC20Test.Contract.TargetSelectors(&_ZRC20Test.CallOpts)
}

// TargetSelectors is a free data retrieval call binding the contract method 0x916a17c6.
//
// Solidity: function targetSelectors() view returns((address,bytes4[])[] targetedSelectors_)
func (_ZRC20Test *ZRC20TestCallerSession) TargetSelectors() ([]StdInvariantFuzzSelector, error) {
	return _ZRC20Test.Contract.TargetSelectors(&_ZRC20Test.CallOpts)
}

// TargetSenders is a free data retrieval call binding the contract method 0x3e5e3c23.
//
// Solidity: function targetSenders() view returns(address[] targetedSenders_)
func (_ZRC20Test *ZRC20TestCaller) TargetSenders(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _ZRC20Test.contract.Call(opts, &out, "targetSenders")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// TargetSenders is a free data retrieval call binding the contract method 0x3e5e3c23.
//
// Solidity: function targetSenders() view returns(address[] targetedSenders_)
func (_ZRC20Test *ZRC20TestSession) TargetSenders() ([]common.Address, error) {
	return _ZRC20Test.Contract.TargetSenders(&_ZRC20Test.CallOpts)
}

// TargetSenders is a free data retrieval call binding the contract method 0x3e5e3c23.
//
// Solidity: function targetSenders() view returns(address[] targetedSenders_)
func (_ZRC20Test *ZRC20TestCallerSession) TargetSenders() ([]common.Address, error) {
	return _ZRC20Test.Contract.TargetSenders(&_ZRC20Test.CallOpts)
}

// SetUp is a paid mutator transaction binding the contract method 0x0a9254e4.
//
// Solidity: function setUp() returns()
func (_ZRC20Test *ZRC20TestTransactor) SetUp(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ZRC20Test.contract.Transact(opts, "setUp")
}

// SetUp is a paid mutator transaction binding the contract method 0x0a9254e4.
//
// Solidity: function setUp() returns()
func (_ZRC20Test *ZRC20TestSession) SetUp() (*types.Transaction, error) {
	return _ZRC20Test.Contract.SetUp(&_ZRC20Test.TransactOpts)
}

// SetUp is a paid mutator transaction binding the contract method 0x0a9254e4.
//
// Solidity: function setUp() returns()
func (_ZRC20Test *ZRC20TestTransactorSession) SetUp() (*types.Transaction, error) {
	return _ZRC20Test.Contract.SetUp(&_ZRC20Test.TransactOpts)
}

// TestApproveFailsIfRecipientIsZeroAddress is a paid mutator transaction binding the contract method 0x4cfc0aaa.
//
// Solidity: function testApproveFailsIfRecipientIsZeroAddress() returns()
func (_ZRC20Test *ZRC20TestTransactor) TestApproveFailsIfRecipientIsZeroAddress(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ZRC20Test.contract.Transact(opts, "testApproveFailsIfRecipientIsZeroAddress")
}

// TestApproveFailsIfRecipientIsZeroAddress is a paid mutator transaction binding the contract method 0x4cfc0aaa.
//
// Solidity: function testApproveFailsIfRecipientIsZeroAddress() returns()
func (_ZRC20Test *ZRC20TestSession) TestApproveFailsIfRecipientIsZeroAddress() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestApproveFailsIfRecipientIsZeroAddress(&_ZRC20Test.TransactOpts)
}

// TestApproveFailsIfRecipientIsZeroAddress is a paid mutator transaction binding the contract method 0x4cfc0aaa.
//
// Solidity: function testApproveFailsIfRecipientIsZeroAddress() returns()
func (_ZRC20Test *ZRC20TestTransactorSession) TestApproveFailsIfRecipientIsZeroAddress() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestApproveFailsIfRecipientIsZeroAddress(&_ZRC20Test.TransactOpts)
}

// TestBurn is a paid mutator transaction binding the contract method 0xe13aba48.
//
// Solidity: function testBurn() returns()
func (_ZRC20Test *ZRC20TestTransactor) TestBurn(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ZRC20Test.contract.Transact(opts, "testBurn")
}

// TestBurn is a paid mutator transaction binding the contract method 0xe13aba48.
//
// Solidity: function testBurn() returns()
func (_ZRC20Test *ZRC20TestSession) TestBurn() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestBurn(&_ZRC20Test.TransactOpts)
}

// TestBurn is a paid mutator transaction binding the contract method 0xe13aba48.
//
// Solidity: function testBurn() returns()
func (_ZRC20Test *ZRC20TestTransactorSession) TestBurn() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestBurn(&_ZRC20Test.TransactOpts)
}

// TestBurnFailsIfNoBalance is a paid mutator transaction binding the contract method 0x80326680.
//
// Solidity: function testBurnFailsIfNoBalance() returns()
func (_ZRC20Test *ZRC20TestTransactor) TestBurnFailsIfNoBalance(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ZRC20Test.contract.Transact(opts, "testBurnFailsIfNoBalance")
}

// TestBurnFailsIfNoBalance is a paid mutator transaction binding the contract method 0x80326680.
//
// Solidity: function testBurnFailsIfNoBalance() returns()
func (_ZRC20Test *ZRC20TestSession) TestBurnFailsIfNoBalance() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestBurnFailsIfNoBalance(&_ZRC20Test.TransactOpts)
}

// TestBurnFailsIfNoBalance is a paid mutator transaction binding the contract method 0x80326680.
//
// Solidity: function testBurnFailsIfNoBalance() returns()
func (_ZRC20Test *ZRC20TestTransactorSession) TestBurnFailsIfNoBalance() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestBurnFailsIfNoBalance(&_ZRC20Test.TransactOpts)
}

// TestDeposit is a paid mutator transaction binding the contract method 0x7f924c4e.
//
// Solidity: function testDeposit() returns()
func (_ZRC20Test *ZRC20TestTransactor) TestDeposit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ZRC20Test.contract.Transact(opts, "testDeposit")
}

// TestDeposit is a paid mutator transaction binding the contract method 0x7f924c4e.
//
// Solidity: function testDeposit() returns()
func (_ZRC20Test *ZRC20TestSession) TestDeposit() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestDeposit(&_ZRC20Test.TransactOpts)
}

// TestDeposit is a paid mutator transaction binding the contract method 0x7f924c4e.
//
// Solidity: function testDeposit() returns()
func (_ZRC20Test *ZRC20TestTransactorSession) TestDeposit() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestDeposit(&_ZRC20Test.TransactOpts)
}

// TestDepositFailsIfRecipientIsZeroAddress is a paid mutator transaction binding the contract method 0x0809dfef.
//
// Solidity: function testDepositFailsIfRecipientIsZeroAddress() returns()
func (_ZRC20Test *ZRC20TestTransactor) TestDepositFailsIfRecipientIsZeroAddress(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ZRC20Test.contract.Transact(opts, "testDepositFailsIfRecipientIsZeroAddress")
}

// TestDepositFailsIfRecipientIsZeroAddress is a paid mutator transaction binding the contract method 0x0809dfef.
//
// Solidity: function testDepositFailsIfRecipientIsZeroAddress() returns()
func (_ZRC20Test *ZRC20TestSession) TestDepositFailsIfRecipientIsZeroAddress() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestDepositFailsIfRecipientIsZeroAddress(&_ZRC20Test.TransactOpts)
}

// TestDepositFailsIfRecipientIsZeroAddress is a paid mutator transaction binding the contract method 0x0809dfef.
//
// Solidity: function testDepositFailsIfRecipientIsZeroAddress() returns()
func (_ZRC20Test *ZRC20TestTransactorSession) TestDepositFailsIfRecipientIsZeroAddress() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestDepositFailsIfRecipientIsZeroAddress(&_ZRC20Test.TransactOpts)
}

// TestDepositFailsIfSenderIsNotGateway is a paid mutator transaction binding the contract method 0x1142744e.
//
// Solidity: function testDepositFailsIfSenderIsNotGateway() returns()
func (_ZRC20Test *ZRC20TestTransactor) TestDepositFailsIfSenderIsNotGateway(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ZRC20Test.contract.Transact(opts, "testDepositFailsIfSenderIsNotGateway")
}

// TestDepositFailsIfSenderIsNotGateway is a paid mutator transaction binding the contract method 0x1142744e.
//
// Solidity: function testDepositFailsIfSenderIsNotGateway() returns()
func (_ZRC20Test *ZRC20TestSession) TestDepositFailsIfSenderIsNotGateway() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestDepositFailsIfSenderIsNotGateway(&_ZRC20Test.TransactOpts)
}

// TestDepositFailsIfSenderIsNotGateway is a paid mutator transaction binding the contract method 0x1142744e.
//
// Solidity: function testDepositFailsIfSenderIsNotGateway() returns()
func (_ZRC20Test *ZRC20TestTransactorSession) TestDepositFailsIfSenderIsNotGateway() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestDepositFailsIfSenderIsNotGateway(&_ZRC20Test.TransactOpts)
}

// TestTransfer is a paid mutator transaction binding the contract method 0xd591221f.
//
// Solidity: function testTransfer() returns()
func (_ZRC20Test *ZRC20TestTransactor) TestTransfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ZRC20Test.contract.Transact(opts, "testTransfer")
}

// TestTransfer is a paid mutator transaction binding the contract method 0xd591221f.
//
// Solidity: function testTransfer() returns()
func (_ZRC20Test *ZRC20TestSession) TestTransfer() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestTransfer(&_ZRC20Test.TransactOpts)
}

// TestTransfer is a paid mutator transaction binding the contract method 0xd591221f.
//
// Solidity: function testTransfer() returns()
func (_ZRC20Test *ZRC20TestTransactorSession) TestTransfer() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestTransfer(&_ZRC20Test.TransactOpts)
}

// TestTransferFailsIfNoBalance is a paid mutator transaction binding the contract method 0x8ce7ef05.
//
// Solidity: function testTransferFailsIfNoBalance() returns()
func (_ZRC20Test *ZRC20TestTransactor) TestTransferFailsIfNoBalance(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ZRC20Test.contract.Transact(opts, "testTransferFailsIfNoBalance")
}

// TestTransferFailsIfNoBalance is a paid mutator transaction binding the contract method 0x8ce7ef05.
//
// Solidity: function testTransferFailsIfNoBalance() returns()
func (_ZRC20Test *ZRC20TestSession) TestTransferFailsIfNoBalance() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestTransferFailsIfNoBalance(&_ZRC20Test.TransactOpts)
}

// TestTransferFailsIfNoBalance is a paid mutator transaction binding the contract method 0x8ce7ef05.
//
// Solidity: function testTransferFailsIfNoBalance() returns()
func (_ZRC20Test *ZRC20TestTransactorSession) TestTransferFailsIfNoBalance() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestTransferFailsIfNoBalance(&_ZRC20Test.TransactOpts)
}

// TestTransferFailsIfRecipientIsZeroAddress is a paid mutator transaction binding the contract method 0xa4aa6c7c.
//
// Solidity: function testTransferFailsIfRecipientIsZeroAddress() returns()
func (_ZRC20Test *ZRC20TestTransactor) TestTransferFailsIfRecipientIsZeroAddress(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ZRC20Test.contract.Transact(opts, "testTransferFailsIfRecipientIsZeroAddress")
}

// TestTransferFailsIfRecipientIsZeroAddress is a paid mutator transaction binding the contract method 0xa4aa6c7c.
//
// Solidity: function testTransferFailsIfRecipientIsZeroAddress() returns()
func (_ZRC20Test *ZRC20TestSession) TestTransferFailsIfRecipientIsZeroAddress() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestTransferFailsIfRecipientIsZeroAddress(&_ZRC20Test.TransactOpts)
}

// TestTransferFailsIfRecipientIsZeroAddress is a paid mutator transaction binding the contract method 0xa4aa6c7c.
//
// Solidity: function testTransferFailsIfRecipientIsZeroAddress() returns()
func (_ZRC20Test *ZRC20TestTransactorSession) TestTransferFailsIfRecipientIsZeroAddress() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestTransferFailsIfRecipientIsZeroAddress(&_ZRC20Test.TransactOpts)
}

// TestTransferFrom is a paid mutator transaction binding the contract method 0x70557298.
//
// Solidity: function testTransferFrom() returns()
func (_ZRC20Test *ZRC20TestTransactor) TestTransferFrom(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ZRC20Test.contract.Transact(opts, "testTransferFrom")
}

// TestTransferFrom is a paid mutator transaction binding the contract method 0x70557298.
//
// Solidity: function testTransferFrom() returns()
func (_ZRC20Test *ZRC20TestSession) TestTransferFrom() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestTransferFrom(&_ZRC20Test.TransactOpts)
}

// TestTransferFrom is a paid mutator transaction binding the contract method 0x70557298.
//
// Solidity: function testTransferFrom() returns()
func (_ZRC20Test *ZRC20TestTransactorSession) TestTransferFrom() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestTransferFrom(&_ZRC20Test.TransactOpts)
}

// TestTransferFromFailsIfNoAllowance is a paid mutator transaction binding the contract method 0xf2413096.
//
// Solidity: function testTransferFromFailsIfNoAllowance() returns()
func (_ZRC20Test *ZRC20TestTransactor) TestTransferFromFailsIfNoAllowance(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ZRC20Test.contract.Transact(opts, "testTransferFromFailsIfNoAllowance")
}

// TestTransferFromFailsIfNoAllowance is a paid mutator transaction binding the contract method 0xf2413096.
//
// Solidity: function testTransferFromFailsIfNoAllowance() returns()
func (_ZRC20Test *ZRC20TestSession) TestTransferFromFailsIfNoAllowance() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestTransferFromFailsIfNoAllowance(&_ZRC20Test.TransactOpts)
}

// TestTransferFromFailsIfNoAllowance is a paid mutator transaction binding the contract method 0xf2413096.
//
// Solidity: function testTransferFromFailsIfNoAllowance() returns()
func (_ZRC20Test *ZRC20TestTransactorSession) TestTransferFromFailsIfNoAllowance() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestTransferFromFailsIfNoAllowance(&_ZRC20Test.TransactOpts)
}

// TestTransferFromFailsIfNoBalance is a paid mutator transaction binding the contract method 0x6ff45850.
//
// Solidity: function testTransferFromFailsIfNoBalance() returns()
func (_ZRC20Test *ZRC20TestTransactor) TestTransferFromFailsIfNoBalance(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ZRC20Test.contract.Transact(opts, "testTransferFromFailsIfNoBalance")
}

// TestTransferFromFailsIfNoBalance is a paid mutator transaction binding the contract method 0x6ff45850.
//
// Solidity: function testTransferFromFailsIfNoBalance() returns()
func (_ZRC20Test *ZRC20TestSession) TestTransferFromFailsIfNoBalance() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestTransferFromFailsIfNoBalance(&_ZRC20Test.TransactOpts)
}

// TestTransferFromFailsIfNoBalance is a paid mutator transaction binding the contract method 0x6ff45850.
//
// Solidity: function testTransferFromFailsIfNoBalance() returns()
func (_ZRC20Test *ZRC20TestTransactorSession) TestTransferFromFailsIfNoBalance() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestTransferFromFailsIfNoBalance(&_ZRC20Test.TransactOpts)
}

// TestTransferFromFailsIfRecipientIsZeroAddress is a paid mutator transaction binding the contract method 0xd97136a2.
//
// Solidity: function testTransferFromFailsIfRecipientIsZeroAddress() returns()
func (_ZRC20Test *ZRC20TestTransactor) TestTransferFromFailsIfRecipientIsZeroAddress(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ZRC20Test.contract.Transact(opts, "testTransferFromFailsIfRecipientIsZeroAddress")
}

// TestTransferFromFailsIfRecipientIsZeroAddress is a paid mutator transaction binding the contract method 0xd97136a2.
//
// Solidity: function testTransferFromFailsIfRecipientIsZeroAddress() returns()
func (_ZRC20Test *ZRC20TestSession) TestTransferFromFailsIfRecipientIsZeroAddress() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestTransferFromFailsIfRecipientIsZeroAddress(&_ZRC20Test.TransactOpts)
}

// TestTransferFromFailsIfRecipientIsZeroAddress is a paid mutator transaction binding the contract method 0xd97136a2.
//
// Solidity: function testTransferFromFailsIfRecipientIsZeroAddress() returns()
func (_ZRC20Test *ZRC20TestTransactorSession) TestTransferFromFailsIfRecipientIsZeroAddress() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestTransferFromFailsIfRecipientIsZeroAddress(&_ZRC20Test.TransactOpts)
}

// TestTransferFromFailsIfSenderIsZeroAddress is a paid mutator transaction binding the contract method 0x28438826.
//
// Solidity: function testTransferFromFailsIfSenderIsZeroAddress() returns()
func (_ZRC20Test *ZRC20TestTransactor) TestTransferFromFailsIfSenderIsZeroAddress(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ZRC20Test.contract.Transact(opts, "testTransferFromFailsIfSenderIsZeroAddress")
}

// TestTransferFromFailsIfSenderIsZeroAddress is a paid mutator transaction binding the contract method 0x28438826.
//
// Solidity: function testTransferFromFailsIfSenderIsZeroAddress() returns()
func (_ZRC20Test *ZRC20TestSession) TestTransferFromFailsIfSenderIsZeroAddress() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestTransferFromFailsIfSenderIsZeroAddress(&_ZRC20Test.TransactOpts)
}

// TestTransferFromFailsIfSenderIsZeroAddress is a paid mutator transaction binding the contract method 0x28438826.
//
// Solidity: function testTransferFromFailsIfSenderIsZeroAddress() returns()
func (_ZRC20Test *ZRC20TestTransactorSession) TestTransferFromFailsIfSenderIsZeroAddress() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestTransferFromFailsIfSenderIsZeroAddress(&_ZRC20Test.TransactOpts)
}

// TestUpdateGasLimit is a paid mutator transaction binding the contract method 0x5f01db7e.
//
// Solidity: function testUpdateGasLimit() returns()
func (_ZRC20Test *ZRC20TestTransactor) TestUpdateGasLimit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ZRC20Test.contract.Transact(opts, "testUpdateGasLimit")
}

// TestUpdateGasLimit is a paid mutator transaction binding the contract method 0x5f01db7e.
//
// Solidity: function testUpdateGasLimit() returns()
func (_ZRC20Test *ZRC20TestSession) TestUpdateGasLimit() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestUpdateGasLimit(&_ZRC20Test.TransactOpts)
}

// TestUpdateGasLimit is a paid mutator transaction binding the contract method 0x5f01db7e.
//
// Solidity: function testUpdateGasLimit() returns()
func (_ZRC20Test *ZRC20TestTransactorSession) TestUpdateGasLimit() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestUpdateGasLimit(&_ZRC20Test.TransactOpts)
}

// TestUpdateGasLimitFailsIfSenderIsNotProtocol is a paid mutator transaction binding the contract method 0xc35f9d1d.
//
// Solidity: function testUpdateGasLimitFailsIfSenderIsNotProtocol() returns()
func (_ZRC20Test *ZRC20TestTransactor) TestUpdateGasLimitFailsIfSenderIsNotProtocol(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ZRC20Test.contract.Transact(opts, "testUpdateGasLimitFailsIfSenderIsNotProtocol")
}

// TestUpdateGasLimitFailsIfSenderIsNotProtocol is a paid mutator transaction binding the contract method 0xc35f9d1d.
//
// Solidity: function testUpdateGasLimitFailsIfSenderIsNotProtocol() returns()
func (_ZRC20Test *ZRC20TestSession) TestUpdateGasLimitFailsIfSenderIsNotProtocol() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestUpdateGasLimitFailsIfSenderIsNotProtocol(&_ZRC20Test.TransactOpts)
}

// TestUpdateGasLimitFailsIfSenderIsNotProtocol is a paid mutator transaction binding the contract method 0xc35f9d1d.
//
// Solidity: function testUpdateGasLimitFailsIfSenderIsNotProtocol() returns()
func (_ZRC20Test *ZRC20TestTransactorSession) TestUpdateGasLimitFailsIfSenderIsNotProtocol() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestUpdateGasLimitFailsIfSenderIsNotProtocol(&_ZRC20Test.TransactOpts)
}

// TestUpdateGatewayAddress is a paid mutator transaction binding the contract method 0xdfbdf600.
//
// Solidity: function testUpdateGatewayAddress() returns()
func (_ZRC20Test *ZRC20TestTransactor) TestUpdateGatewayAddress(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ZRC20Test.contract.Transact(opts, "testUpdateGatewayAddress")
}

// TestUpdateGatewayAddress is a paid mutator transaction binding the contract method 0xdfbdf600.
//
// Solidity: function testUpdateGatewayAddress() returns()
func (_ZRC20Test *ZRC20TestSession) TestUpdateGatewayAddress() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestUpdateGatewayAddress(&_ZRC20Test.TransactOpts)
}

// TestUpdateGatewayAddress is a paid mutator transaction binding the contract method 0xdfbdf600.
//
// Solidity: function testUpdateGatewayAddress() returns()
func (_ZRC20Test *ZRC20TestTransactorSession) TestUpdateGatewayAddress() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestUpdateGatewayAddress(&_ZRC20Test.TransactOpts)
}

// TestUpdateGatewayAddressFailsIfSenderIsNotProtocol is a paid mutator transaction binding the contract method 0x92a68b8d.
//
// Solidity: function testUpdateGatewayAddressFailsIfSenderIsNotProtocol() returns()
func (_ZRC20Test *ZRC20TestTransactor) TestUpdateGatewayAddressFailsIfSenderIsNotProtocol(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ZRC20Test.contract.Transact(opts, "testUpdateGatewayAddressFailsIfSenderIsNotProtocol")
}

// TestUpdateGatewayAddressFailsIfSenderIsNotProtocol is a paid mutator transaction binding the contract method 0x92a68b8d.
//
// Solidity: function testUpdateGatewayAddressFailsIfSenderIsNotProtocol() returns()
func (_ZRC20Test *ZRC20TestSession) TestUpdateGatewayAddressFailsIfSenderIsNotProtocol() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestUpdateGatewayAddressFailsIfSenderIsNotProtocol(&_ZRC20Test.TransactOpts)
}

// TestUpdateGatewayAddressFailsIfSenderIsNotProtocol is a paid mutator transaction binding the contract method 0x92a68b8d.
//
// Solidity: function testUpdateGatewayAddressFailsIfSenderIsNotProtocol() returns()
func (_ZRC20Test *ZRC20TestTransactorSession) TestUpdateGatewayAddressFailsIfSenderIsNotProtocol() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestUpdateGatewayAddressFailsIfSenderIsNotProtocol(&_ZRC20Test.TransactOpts)
}

// TestUpdateGatewayAddressFailsIfZeroAddress is a paid mutator transaction binding the contract method 0xd1fd3291.
//
// Solidity: function testUpdateGatewayAddressFailsIfZeroAddress() returns()
func (_ZRC20Test *ZRC20TestTransactor) TestUpdateGatewayAddressFailsIfZeroAddress(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ZRC20Test.contract.Transact(opts, "testUpdateGatewayAddressFailsIfZeroAddress")
}

// TestUpdateGatewayAddressFailsIfZeroAddress is a paid mutator transaction binding the contract method 0xd1fd3291.
//
// Solidity: function testUpdateGatewayAddressFailsIfZeroAddress() returns()
func (_ZRC20Test *ZRC20TestSession) TestUpdateGatewayAddressFailsIfZeroAddress() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestUpdateGatewayAddressFailsIfZeroAddress(&_ZRC20Test.TransactOpts)
}

// TestUpdateGatewayAddressFailsIfZeroAddress is a paid mutator transaction binding the contract method 0xd1fd3291.
//
// Solidity: function testUpdateGatewayAddressFailsIfZeroAddress() returns()
func (_ZRC20Test *ZRC20TestTransactorSession) TestUpdateGatewayAddressFailsIfZeroAddress() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestUpdateGatewayAddressFailsIfZeroAddress(&_ZRC20Test.TransactOpts)
}

// TestUpdateNameAndSymbol is a paid mutator transaction binding the contract method 0x7ee68316.
//
// Solidity: function testUpdateNameAndSymbol() returns()
func (_ZRC20Test *ZRC20TestTransactor) TestUpdateNameAndSymbol(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ZRC20Test.contract.Transact(opts, "testUpdateNameAndSymbol")
}

// TestUpdateNameAndSymbol is a paid mutator transaction binding the contract method 0x7ee68316.
//
// Solidity: function testUpdateNameAndSymbol() returns()
func (_ZRC20Test *ZRC20TestSession) TestUpdateNameAndSymbol() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestUpdateNameAndSymbol(&_ZRC20Test.TransactOpts)
}

// TestUpdateNameAndSymbol is a paid mutator transaction binding the contract method 0x7ee68316.
//
// Solidity: function testUpdateNameAndSymbol() returns()
func (_ZRC20Test *ZRC20TestTransactorSession) TestUpdateNameAndSymbol() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestUpdateNameAndSymbol(&_ZRC20Test.TransactOpts)
}

// TestUpdateNameAndSymbolFailsIfSenderIsNotProtocol is a paid mutator transaction binding the contract method 0x5539d92e.
//
// Solidity: function testUpdateNameAndSymbolFailsIfSenderIsNotProtocol() returns()
func (_ZRC20Test *ZRC20TestTransactor) TestUpdateNameAndSymbolFailsIfSenderIsNotProtocol(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ZRC20Test.contract.Transact(opts, "testUpdateNameAndSymbolFailsIfSenderIsNotProtocol")
}

// TestUpdateNameAndSymbolFailsIfSenderIsNotProtocol is a paid mutator transaction binding the contract method 0x5539d92e.
//
// Solidity: function testUpdateNameAndSymbolFailsIfSenderIsNotProtocol() returns()
func (_ZRC20Test *ZRC20TestSession) TestUpdateNameAndSymbolFailsIfSenderIsNotProtocol() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestUpdateNameAndSymbolFailsIfSenderIsNotProtocol(&_ZRC20Test.TransactOpts)
}

// TestUpdateNameAndSymbolFailsIfSenderIsNotProtocol is a paid mutator transaction binding the contract method 0x5539d92e.
//
// Solidity: function testUpdateNameAndSymbolFailsIfSenderIsNotProtocol() returns()
func (_ZRC20Test *ZRC20TestTransactorSession) TestUpdateNameAndSymbolFailsIfSenderIsNotProtocol() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestUpdateNameAndSymbolFailsIfSenderIsNotProtocol(&_ZRC20Test.TransactOpts)
}

// TestUpdateProtocolFlatFee is a paid mutator transaction binding the contract method 0xd04cda98.
//
// Solidity: function testUpdateProtocolFlatFee() returns()
func (_ZRC20Test *ZRC20TestTransactor) TestUpdateProtocolFlatFee(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ZRC20Test.contract.Transact(opts, "testUpdateProtocolFlatFee")
}

// TestUpdateProtocolFlatFee is a paid mutator transaction binding the contract method 0xd04cda98.
//
// Solidity: function testUpdateProtocolFlatFee() returns()
func (_ZRC20Test *ZRC20TestSession) TestUpdateProtocolFlatFee() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestUpdateProtocolFlatFee(&_ZRC20Test.TransactOpts)
}

// TestUpdateProtocolFlatFee is a paid mutator transaction binding the contract method 0xd04cda98.
//
// Solidity: function testUpdateProtocolFlatFee() returns()
func (_ZRC20Test *ZRC20TestTransactorSession) TestUpdateProtocolFlatFee() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestUpdateProtocolFlatFee(&_ZRC20Test.TransactOpts)
}

// TestUpdateProtocolFlatFeeFailsIfSenderIsNotProtocol is a paid mutator transaction binding the contract method 0x367e3123.
//
// Solidity: function testUpdateProtocolFlatFeeFailsIfSenderIsNotProtocol() returns()
func (_ZRC20Test *ZRC20TestTransactor) TestUpdateProtocolFlatFeeFailsIfSenderIsNotProtocol(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ZRC20Test.contract.Transact(opts, "testUpdateProtocolFlatFeeFailsIfSenderIsNotProtocol")
}

// TestUpdateProtocolFlatFeeFailsIfSenderIsNotProtocol is a paid mutator transaction binding the contract method 0x367e3123.
//
// Solidity: function testUpdateProtocolFlatFeeFailsIfSenderIsNotProtocol() returns()
func (_ZRC20Test *ZRC20TestSession) TestUpdateProtocolFlatFeeFailsIfSenderIsNotProtocol() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestUpdateProtocolFlatFeeFailsIfSenderIsNotProtocol(&_ZRC20Test.TransactOpts)
}

// TestUpdateProtocolFlatFeeFailsIfSenderIsNotProtocol is a paid mutator transaction binding the contract method 0x367e3123.
//
// Solidity: function testUpdateProtocolFlatFeeFailsIfSenderIsNotProtocol() returns()
func (_ZRC20Test *ZRC20TestTransactorSession) TestUpdateProtocolFlatFeeFailsIfSenderIsNotProtocol() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestUpdateProtocolFlatFeeFailsIfSenderIsNotProtocol(&_ZRC20Test.TransactOpts)
}

// TestUpdateSystemContractAddress is a paid mutator transaction binding the contract method 0x2f6254fc.
//
// Solidity: function testUpdateSystemContractAddress() returns()
func (_ZRC20Test *ZRC20TestTransactor) TestUpdateSystemContractAddress(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ZRC20Test.contract.Transact(opts, "testUpdateSystemContractAddress")
}

// TestUpdateSystemContractAddress is a paid mutator transaction binding the contract method 0x2f6254fc.
//
// Solidity: function testUpdateSystemContractAddress() returns()
func (_ZRC20Test *ZRC20TestSession) TestUpdateSystemContractAddress() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestUpdateSystemContractAddress(&_ZRC20Test.TransactOpts)
}

// TestUpdateSystemContractAddress is a paid mutator transaction binding the contract method 0x2f6254fc.
//
// Solidity: function testUpdateSystemContractAddress() returns()
func (_ZRC20Test *ZRC20TestTransactorSession) TestUpdateSystemContractAddress() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestUpdateSystemContractAddress(&_ZRC20Test.TransactOpts)
}

// TestUpdateSystemContractAddressFailsIfSenderIsNotProtocol is a paid mutator transaction binding the contract method 0x0ea7e563.
//
// Solidity: function testUpdateSystemContractAddressFailsIfSenderIsNotProtocol() returns()
func (_ZRC20Test *ZRC20TestTransactor) TestUpdateSystemContractAddressFailsIfSenderIsNotProtocol(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ZRC20Test.contract.Transact(opts, "testUpdateSystemContractAddressFailsIfSenderIsNotProtocol")
}

// TestUpdateSystemContractAddressFailsIfSenderIsNotProtocol is a paid mutator transaction binding the contract method 0x0ea7e563.
//
// Solidity: function testUpdateSystemContractAddressFailsIfSenderIsNotProtocol() returns()
func (_ZRC20Test *ZRC20TestSession) TestUpdateSystemContractAddressFailsIfSenderIsNotProtocol() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestUpdateSystemContractAddressFailsIfSenderIsNotProtocol(&_ZRC20Test.TransactOpts)
}

// TestUpdateSystemContractAddressFailsIfSenderIsNotProtocol is a paid mutator transaction binding the contract method 0x0ea7e563.
//
// Solidity: function testUpdateSystemContractAddressFailsIfSenderIsNotProtocol() returns()
func (_ZRC20Test *ZRC20TestTransactorSession) TestUpdateSystemContractAddressFailsIfSenderIsNotProtocol() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestUpdateSystemContractAddressFailsIfSenderIsNotProtocol(&_ZRC20Test.TransactOpts)
}

// TestUpdateSystemContractAddressFailsIfZeroAddress is a paid mutator transaction binding the contract method 0xd27b0427.
//
// Solidity: function testUpdateSystemContractAddressFailsIfZeroAddress() returns()
func (_ZRC20Test *ZRC20TestTransactor) TestUpdateSystemContractAddressFailsIfZeroAddress(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ZRC20Test.contract.Transact(opts, "testUpdateSystemContractAddressFailsIfZeroAddress")
}

// TestUpdateSystemContractAddressFailsIfZeroAddress is a paid mutator transaction binding the contract method 0xd27b0427.
//
// Solidity: function testUpdateSystemContractAddressFailsIfZeroAddress() returns()
func (_ZRC20Test *ZRC20TestSession) TestUpdateSystemContractAddressFailsIfZeroAddress() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestUpdateSystemContractAddressFailsIfZeroAddress(&_ZRC20Test.TransactOpts)
}

// TestUpdateSystemContractAddressFailsIfZeroAddress is a paid mutator transaction binding the contract method 0xd27b0427.
//
// Solidity: function testUpdateSystemContractAddressFailsIfZeroAddress() returns()
func (_ZRC20Test *ZRC20TestTransactorSession) TestUpdateSystemContractAddressFailsIfZeroAddress() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestUpdateSystemContractAddressFailsIfZeroAddress(&_ZRC20Test.TransactOpts)
}

// TestWithdraw is a paid mutator transaction binding the contract method 0xd509b16c.
//
// Solidity: function testWithdraw() returns()
func (_ZRC20Test *ZRC20TestTransactor) TestWithdraw(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ZRC20Test.contract.Transact(opts, "testWithdraw")
}

// TestWithdraw is a paid mutator transaction binding the contract method 0xd509b16c.
//
// Solidity: function testWithdraw() returns()
func (_ZRC20Test *ZRC20TestSession) TestWithdraw() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestWithdraw(&_ZRC20Test.TransactOpts)
}

// TestWithdraw is a paid mutator transaction binding the contract method 0xd509b16c.
//
// Solidity: function testWithdraw() returns()
func (_ZRC20Test *ZRC20TestTransactorSession) TestWithdraw() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestWithdraw(&_ZRC20Test.TransactOpts)
}

// TestWithdrawFailsIfNoAllowance is a paid mutator transaction binding the contract method 0x51399962.
//
// Solidity: function testWithdrawFailsIfNoAllowance() returns()
func (_ZRC20Test *ZRC20TestTransactor) TestWithdrawFailsIfNoAllowance(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ZRC20Test.contract.Transact(opts, "testWithdrawFailsIfNoAllowance")
}

// TestWithdrawFailsIfNoAllowance is a paid mutator transaction binding the contract method 0x51399962.
//
// Solidity: function testWithdrawFailsIfNoAllowance() returns()
func (_ZRC20Test *ZRC20TestSession) TestWithdrawFailsIfNoAllowance() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestWithdrawFailsIfNoAllowance(&_ZRC20Test.TransactOpts)
}

// TestWithdrawFailsIfNoAllowance is a paid mutator transaction binding the contract method 0x51399962.
//
// Solidity: function testWithdrawFailsIfNoAllowance() returns()
func (_ZRC20Test *ZRC20TestTransactorSession) TestWithdrawFailsIfNoAllowance() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestWithdrawFailsIfNoAllowance(&_ZRC20Test.TransactOpts)
}

// TestWithdrawFailsIfNoBalance is a paid mutator transaction binding the contract method 0xb79cad09.
//
// Solidity: function testWithdrawFailsIfNoBalance() returns()
func (_ZRC20Test *ZRC20TestTransactor) TestWithdrawFailsIfNoBalance(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ZRC20Test.contract.Transact(opts, "testWithdrawFailsIfNoBalance")
}

// TestWithdrawFailsIfNoBalance is a paid mutator transaction binding the contract method 0xb79cad09.
//
// Solidity: function testWithdrawFailsIfNoBalance() returns()
func (_ZRC20Test *ZRC20TestSession) TestWithdrawFailsIfNoBalance() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestWithdrawFailsIfNoBalance(&_ZRC20Test.TransactOpts)
}

// TestWithdrawFailsIfNoBalance is a paid mutator transaction binding the contract method 0xb79cad09.
//
// Solidity: function testWithdrawFailsIfNoBalance() returns()
func (_ZRC20Test *ZRC20TestTransactorSession) TestWithdrawFailsIfNoBalance() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestWithdrawFailsIfNoBalance(&_ZRC20Test.TransactOpts)
}

// TestWithdrawGasFee is a paid mutator transaction binding the contract method 0xdcba486a.
//
// Solidity: function testWithdrawGasFee() returns()
func (_ZRC20Test *ZRC20TestTransactor) TestWithdrawGasFee(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ZRC20Test.contract.Transact(opts, "testWithdrawGasFee")
}

// TestWithdrawGasFee is a paid mutator transaction binding the contract method 0xdcba486a.
//
// Solidity: function testWithdrawGasFee() returns()
func (_ZRC20Test *ZRC20TestSession) TestWithdrawGasFee() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestWithdrawGasFee(&_ZRC20Test.TransactOpts)
}

// TestWithdrawGasFee is a paid mutator transaction binding the contract method 0xdcba486a.
//
// Solidity: function testWithdrawGasFee() returns()
func (_ZRC20Test *ZRC20TestTransactorSession) TestWithdrawGasFee() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestWithdrawGasFee(&_ZRC20Test.TransactOpts)
}

// TestWithdrawGasFeeFailsIfGasCoinNotSetForChainId is a paid mutator transaction binding the contract method 0xf1f87f40.
//
// Solidity: function testWithdrawGasFeeFailsIfGasCoinNotSetForChainId() returns()
func (_ZRC20Test *ZRC20TestTransactor) TestWithdrawGasFeeFailsIfGasCoinNotSetForChainId(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ZRC20Test.contract.Transact(opts, "testWithdrawGasFeeFailsIfGasCoinNotSetForChainId")
}

// TestWithdrawGasFeeFailsIfGasCoinNotSetForChainId is a paid mutator transaction binding the contract method 0xf1f87f40.
//
// Solidity: function testWithdrawGasFeeFailsIfGasCoinNotSetForChainId() returns()
func (_ZRC20Test *ZRC20TestSession) TestWithdrawGasFeeFailsIfGasCoinNotSetForChainId() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestWithdrawGasFeeFailsIfGasCoinNotSetForChainId(&_ZRC20Test.TransactOpts)
}

// TestWithdrawGasFeeFailsIfGasCoinNotSetForChainId is a paid mutator transaction binding the contract method 0xf1f87f40.
//
// Solidity: function testWithdrawGasFeeFailsIfGasCoinNotSetForChainId() returns()
func (_ZRC20Test *ZRC20TestTransactorSession) TestWithdrawGasFeeFailsIfGasCoinNotSetForChainId() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestWithdrawGasFeeFailsIfGasCoinNotSetForChainId(&_ZRC20Test.TransactOpts)
}

// TestWithdrawGasFeeFailsIfGasPriceNotSetForChainId is a paid mutator transaction binding the contract method 0x3be9ec80.
//
// Solidity: function testWithdrawGasFeeFailsIfGasPriceNotSetForChainId() returns()
func (_ZRC20Test *ZRC20TestTransactor) TestWithdrawGasFeeFailsIfGasPriceNotSetForChainId(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ZRC20Test.contract.Transact(opts, "testWithdrawGasFeeFailsIfGasPriceNotSetForChainId")
}

// TestWithdrawGasFeeFailsIfGasPriceNotSetForChainId is a paid mutator transaction binding the contract method 0x3be9ec80.
//
// Solidity: function testWithdrawGasFeeFailsIfGasPriceNotSetForChainId() returns()
func (_ZRC20Test *ZRC20TestSession) TestWithdrawGasFeeFailsIfGasPriceNotSetForChainId() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestWithdrawGasFeeFailsIfGasPriceNotSetForChainId(&_ZRC20Test.TransactOpts)
}

// TestWithdrawGasFeeFailsIfGasPriceNotSetForChainId is a paid mutator transaction binding the contract method 0x3be9ec80.
//
// Solidity: function testWithdrawGasFeeFailsIfGasPriceNotSetForChainId() returns()
func (_ZRC20Test *ZRC20TestTransactorSession) TestWithdrawGasFeeFailsIfGasPriceNotSetForChainId() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestWithdrawGasFeeFailsIfGasPriceNotSetForChainId(&_ZRC20Test.TransactOpts)
}

// TestZRC20BasicInfo is a paid mutator transaction binding the contract method 0xae9687dc.
//
// Solidity: function testZRC20BasicInfo() returns()
func (_ZRC20Test *ZRC20TestTransactor) TestZRC20BasicInfo(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ZRC20Test.contract.Transact(opts, "testZRC20BasicInfo")
}

// TestZRC20BasicInfo is a paid mutator transaction binding the contract method 0xae9687dc.
//
// Solidity: function testZRC20BasicInfo() returns()
func (_ZRC20Test *ZRC20TestSession) TestZRC20BasicInfo() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestZRC20BasicInfo(&_ZRC20Test.TransactOpts)
}

// TestZRC20BasicInfo is a paid mutator transaction binding the contract method 0xae9687dc.
//
// Solidity: function testZRC20BasicInfo() returns()
func (_ZRC20Test *ZRC20TestTransactorSession) TestZRC20BasicInfo() (*types.Transaction, error) {
	return _ZRC20Test.Contract.TestZRC20BasicInfo(&_ZRC20Test.TransactOpts)
}

// ZRC20TestLogIterator is returned from FilterLog and is used to iterate over the raw logs and unpacked data for Log events raised by the ZRC20Test contract.
type ZRC20TestLogIterator struct {
	Event *ZRC20TestLog // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZRC20TestLogIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZRC20TestLog)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZRC20TestLog)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZRC20TestLogIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZRC20TestLogIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZRC20TestLog represents a Log event raised by the ZRC20Test contract.
type ZRC20TestLog struct {
	Arg0 string
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLog is a free log retrieval operation binding the contract event 0x41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50.
//
// Solidity: event log(string arg0)
func (_ZRC20Test *ZRC20TestFilterer) FilterLog(opts *bind.FilterOpts) (*ZRC20TestLogIterator, error) {

	logs, sub, err := _ZRC20Test.contract.FilterLogs(opts, "log")
	if err != nil {
		return nil, err
	}
	return &ZRC20TestLogIterator{contract: _ZRC20Test.contract, event: "log", logs: logs, sub: sub}, nil
}

// WatchLog is a free log subscription operation binding the contract event 0x41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50.
//
// Solidity: event log(string arg0)
func (_ZRC20Test *ZRC20TestFilterer) WatchLog(opts *bind.WatchOpts, sink chan<- *ZRC20TestLog) (event.Subscription, error) {

	logs, sub, err := _ZRC20Test.contract.WatchLogs(opts, "log")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZRC20TestLog)
				if err := _ZRC20Test.contract.UnpackLog(event, "log", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLog is a log parse operation binding the contract event 0x41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50.
//
// Solidity: event log(string arg0)
func (_ZRC20Test *ZRC20TestFilterer) ParseLog(log types.Log) (*ZRC20TestLog, error) {
	event := new(ZRC20TestLog)
	if err := _ZRC20Test.contract.UnpackLog(event, "log", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZRC20TestLogAddressIterator is returned from FilterLogAddress and is used to iterate over the raw logs and unpacked data for LogAddress events raised by the ZRC20Test contract.
type ZRC20TestLogAddressIterator struct {
	Event *ZRC20TestLogAddress // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZRC20TestLogAddressIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZRC20TestLogAddress)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZRC20TestLogAddress)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZRC20TestLogAddressIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZRC20TestLogAddressIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZRC20TestLogAddress represents a LogAddress event raised by the ZRC20Test contract.
type ZRC20TestLogAddress struct {
	Arg0 common.Address
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogAddress is a free log retrieval operation binding the contract event 0x7ae74c527414ae135fd97047b12921a5ec3911b804197855d67e25c7b75ee6f3.
//
// Solidity: event log_address(address arg0)
func (_ZRC20Test *ZRC20TestFilterer) FilterLogAddress(opts *bind.FilterOpts) (*ZRC20TestLogAddressIterator, error) {

	logs, sub, err := _ZRC20Test.contract.FilterLogs(opts, "log_address")
	if err != nil {
		return nil, err
	}
	return &ZRC20TestLogAddressIterator{contract: _ZRC20Test.contract, event: "log_address", logs: logs, sub: sub}, nil
}

// WatchLogAddress is a free log subscription operation binding the contract event 0x7ae74c527414ae135fd97047b12921a5ec3911b804197855d67e25c7b75ee6f3.
//
// Solidity: event log_address(address arg0)
func (_ZRC20Test *ZRC20TestFilterer) WatchLogAddress(opts *bind.WatchOpts, sink chan<- *ZRC20TestLogAddress) (event.Subscription, error) {

	logs, sub, err := _ZRC20Test.contract.WatchLogs(opts, "log_address")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZRC20TestLogAddress)
				if err := _ZRC20Test.contract.UnpackLog(event, "log_address", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogAddress is a log parse operation binding the contract event 0x7ae74c527414ae135fd97047b12921a5ec3911b804197855d67e25c7b75ee6f3.
//
// Solidity: event log_address(address arg0)
func (_ZRC20Test *ZRC20TestFilterer) ParseLogAddress(log types.Log) (*ZRC20TestLogAddress, error) {
	event := new(ZRC20TestLogAddress)
	if err := _ZRC20Test.contract.UnpackLog(event, "log_address", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZRC20TestLogArrayIterator is returned from FilterLogArray and is used to iterate over the raw logs and unpacked data for LogArray events raised by the ZRC20Test contract.
type ZRC20TestLogArrayIterator struct {
	Event *ZRC20TestLogArray // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZRC20TestLogArrayIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZRC20TestLogArray)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZRC20TestLogArray)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZRC20TestLogArrayIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZRC20TestLogArrayIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZRC20TestLogArray represents a LogArray event raised by the ZRC20Test contract.
type ZRC20TestLogArray struct {
	Val []*big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogArray is a free log retrieval operation binding the contract event 0xfb102865d50addddf69da9b5aa1bced66c80cf869a5c8d0471a467e18ce9cab1.
//
// Solidity: event log_array(uint256[] val)
func (_ZRC20Test *ZRC20TestFilterer) FilterLogArray(opts *bind.FilterOpts) (*ZRC20TestLogArrayIterator, error) {

	logs, sub, err := _ZRC20Test.contract.FilterLogs(opts, "log_array")
	if err != nil {
		return nil, err
	}
	return &ZRC20TestLogArrayIterator{contract: _ZRC20Test.contract, event: "log_array", logs: logs, sub: sub}, nil
}

// WatchLogArray is a free log subscription operation binding the contract event 0xfb102865d50addddf69da9b5aa1bced66c80cf869a5c8d0471a467e18ce9cab1.
//
// Solidity: event log_array(uint256[] val)
func (_ZRC20Test *ZRC20TestFilterer) WatchLogArray(opts *bind.WatchOpts, sink chan<- *ZRC20TestLogArray) (event.Subscription, error) {

	logs, sub, err := _ZRC20Test.contract.WatchLogs(opts, "log_array")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZRC20TestLogArray)
				if err := _ZRC20Test.contract.UnpackLog(event, "log_array", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogArray is a log parse operation binding the contract event 0xfb102865d50addddf69da9b5aa1bced66c80cf869a5c8d0471a467e18ce9cab1.
//
// Solidity: event log_array(uint256[] val)
func (_ZRC20Test *ZRC20TestFilterer) ParseLogArray(log types.Log) (*ZRC20TestLogArray, error) {
	event := new(ZRC20TestLogArray)
	if err := _ZRC20Test.contract.UnpackLog(event, "log_array", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZRC20TestLogArray0Iterator is returned from FilterLogArray0 and is used to iterate over the raw logs and unpacked data for LogArray0 events raised by the ZRC20Test contract.
type ZRC20TestLogArray0Iterator struct {
	Event *ZRC20TestLogArray0 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZRC20TestLogArray0Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZRC20TestLogArray0)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZRC20TestLogArray0)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZRC20TestLogArray0Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZRC20TestLogArray0Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZRC20TestLogArray0 represents a LogArray0 event raised by the ZRC20Test contract.
type ZRC20TestLogArray0 struct {
	Val []*big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogArray0 is a free log retrieval operation binding the contract event 0x890a82679b470f2bd82816ed9b161f97d8b967f37fa3647c21d5bf39749e2dd5.
//
// Solidity: event log_array(int256[] val)
func (_ZRC20Test *ZRC20TestFilterer) FilterLogArray0(opts *bind.FilterOpts) (*ZRC20TestLogArray0Iterator, error) {

	logs, sub, err := _ZRC20Test.contract.FilterLogs(opts, "log_array0")
	if err != nil {
		return nil, err
	}
	return &ZRC20TestLogArray0Iterator{contract: _ZRC20Test.contract, event: "log_array0", logs: logs, sub: sub}, nil
}

// WatchLogArray0 is a free log subscription operation binding the contract event 0x890a82679b470f2bd82816ed9b161f97d8b967f37fa3647c21d5bf39749e2dd5.
//
// Solidity: event log_array(int256[] val)
func (_ZRC20Test *ZRC20TestFilterer) WatchLogArray0(opts *bind.WatchOpts, sink chan<- *ZRC20TestLogArray0) (event.Subscription, error) {

	logs, sub, err := _ZRC20Test.contract.WatchLogs(opts, "log_array0")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZRC20TestLogArray0)
				if err := _ZRC20Test.contract.UnpackLog(event, "log_array0", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogArray0 is a log parse operation binding the contract event 0x890a82679b470f2bd82816ed9b161f97d8b967f37fa3647c21d5bf39749e2dd5.
//
// Solidity: event log_array(int256[] val)
func (_ZRC20Test *ZRC20TestFilterer) ParseLogArray0(log types.Log) (*ZRC20TestLogArray0, error) {
	event := new(ZRC20TestLogArray0)
	if err := _ZRC20Test.contract.UnpackLog(event, "log_array0", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZRC20TestLogArray1Iterator is returned from FilterLogArray1 and is used to iterate over the raw logs and unpacked data for LogArray1 events raised by the ZRC20Test contract.
type ZRC20TestLogArray1Iterator struct {
	Event *ZRC20TestLogArray1 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZRC20TestLogArray1Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZRC20TestLogArray1)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZRC20TestLogArray1)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZRC20TestLogArray1Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZRC20TestLogArray1Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZRC20TestLogArray1 represents a LogArray1 event raised by the ZRC20Test contract.
type ZRC20TestLogArray1 struct {
	Val []common.Address
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogArray1 is a free log retrieval operation binding the contract event 0x40e1840f5769073d61bd01372d9b75baa9842d5629a0c99ff103be1178a8e9e2.
//
// Solidity: event log_array(address[] val)
func (_ZRC20Test *ZRC20TestFilterer) FilterLogArray1(opts *bind.FilterOpts) (*ZRC20TestLogArray1Iterator, error) {

	logs, sub, err := _ZRC20Test.contract.FilterLogs(opts, "log_array1")
	if err != nil {
		return nil, err
	}
	return &ZRC20TestLogArray1Iterator{contract: _ZRC20Test.contract, event: "log_array1", logs: logs, sub: sub}, nil
}

// WatchLogArray1 is a free log subscription operation binding the contract event 0x40e1840f5769073d61bd01372d9b75baa9842d5629a0c99ff103be1178a8e9e2.
//
// Solidity: event log_array(address[] val)
func (_ZRC20Test *ZRC20TestFilterer) WatchLogArray1(opts *bind.WatchOpts, sink chan<- *ZRC20TestLogArray1) (event.Subscription, error) {

	logs, sub, err := _ZRC20Test.contract.WatchLogs(opts, "log_array1")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZRC20TestLogArray1)
				if err := _ZRC20Test.contract.UnpackLog(event, "log_array1", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogArray1 is a log parse operation binding the contract event 0x40e1840f5769073d61bd01372d9b75baa9842d5629a0c99ff103be1178a8e9e2.
//
// Solidity: event log_array(address[] val)
func (_ZRC20Test *ZRC20TestFilterer) ParseLogArray1(log types.Log) (*ZRC20TestLogArray1, error) {
	event := new(ZRC20TestLogArray1)
	if err := _ZRC20Test.contract.UnpackLog(event, "log_array1", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZRC20TestLogBytesIterator is returned from FilterLogBytes and is used to iterate over the raw logs and unpacked data for LogBytes events raised by the ZRC20Test contract.
type ZRC20TestLogBytesIterator struct {
	Event *ZRC20TestLogBytes // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZRC20TestLogBytesIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZRC20TestLogBytes)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZRC20TestLogBytes)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZRC20TestLogBytesIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZRC20TestLogBytesIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZRC20TestLogBytes represents a LogBytes event raised by the ZRC20Test contract.
type ZRC20TestLogBytes struct {
	Arg0 []byte
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogBytes is a free log retrieval operation binding the contract event 0x23b62ad0584d24a75f0bf3560391ef5659ec6db1269c56e11aa241d637f19b20.
//
// Solidity: event log_bytes(bytes arg0)
func (_ZRC20Test *ZRC20TestFilterer) FilterLogBytes(opts *bind.FilterOpts) (*ZRC20TestLogBytesIterator, error) {

	logs, sub, err := _ZRC20Test.contract.FilterLogs(opts, "log_bytes")
	if err != nil {
		return nil, err
	}
	return &ZRC20TestLogBytesIterator{contract: _ZRC20Test.contract, event: "log_bytes", logs: logs, sub: sub}, nil
}

// WatchLogBytes is a free log subscription operation binding the contract event 0x23b62ad0584d24a75f0bf3560391ef5659ec6db1269c56e11aa241d637f19b20.
//
// Solidity: event log_bytes(bytes arg0)
func (_ZRC20Test *ZRC20TestFilterer) WatchLogBytes(opts *bind.WatchOpts, sink chan<- *ZRC20TestLogBytes) (event.Subscription, error) {

	logs, sub, err := _ZRC20Test.contract.WatchLogs(opts, "log_bytes")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZRC20TestLogBytes)
				if err := _ZRC20Test.contract.UnpackLog(event, "log_bytes", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogBytes is a log parse operation binding the contract event 0x23b62ad0584d24a75f0bf3560391ef5659ec6db1269c56e11aa241d637f19b20.
//
// Solidity: event log_bytes(bytes arg0)
func (_ZRC20Test *ZRC20TestFilterer) ParseLogBytes(log types.Log) (*ZRC20TestLogBytes, error) {
	event := new(ZRC20TestLogBytes)
	if err := _ZRC20Test.contract.UnpackLog(event, "log_bytes", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZRC20TestLogBytes32Iterator is returned from FilterLogBytes32 and is used to iterate over the raw logs and unpacked data for LogBytes32 events raised by the ZRC20Test contract.
type ZRC20TestLogBytes32Iterator struct {
	Event *ZRC20TestLogBytes32 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZRC20TestLogBytes32Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZRC20TestLogBytes32)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZRC20TestLogBytes32)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZRC20TestLogBytes32Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZRC20TestLogBytes32Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZRC20TestLogBytes32 represents a LogBytes32 event raised by the ZRC20Test contract.
type ZRC20TestLogBytes32 struct {
	Arg0 [32]byte
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogBytes32 is a free log retrieval operation binding the contract event 0xe81699b85113eea1c73e10588b2b035e55893369632173afd43feb192fac64e3.
//
// Solidity: event log_bytes32(bytes32 arg0)
func (_ZRC20Test *ZRC20TestFilterer) FilterLogBytes32(opts *bind.FilterOpts) (*ZRC20TestLogBytes32Iterator, error) {

	logs, sub, err := _ZRC20Test.contract.FilterLogs(opts, "log_bytes32")
	if err != nil {
		return nil, err
	}
	return &ZRC20TestLogBytes32Iterator{contract: _ZRC20Test.contract, event: "log_bytes32", logs: logs, sub: sub}, nil
}

// WatchLogBytes32 is a free log subscription operation binding the contract event 0xe81699b85113eea1c73e10588b2b035e55893369632173afd43feb192fac64e3.
//
// Solidity: event log_bytes32(bytes32 arg0)
func (_ZRC20Test *ZRC20TestFilterer) WatchLogBytes32(opts *bind.WatchOpts, sink chan<- *ZRC20TestLogBytes32) (event.Subscription, error) {

	logs, sub, err := _ZRC20Test.contract.WatchLogs(opts, "log_bytes32")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZRC20TestLogBytes32)
				if err := _ZRC20Test.contract.UnpackLog(event, "log_bytes32", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogBytes32 is a log parse operation binding the contract event 0xe81699b85113eea1c73e10588b2b035e55893369632173afd43feb192fac64e3.
//
// Solidity: event log_bytes32(bytes32 arg0)
func (_ZRC20Test *ZRC20TestFilterer) ParseLogBytes32(log types.Log) (*ZRC20TestLogBytes32, error) {
	event := new(ZRC20TestLogBytes32)
	if err := _ZRC20Test.contract.UnpackLog(event, "log_bytes32", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZRC20TestLogIntIterator is returned from FilterLogInt and is used to iterate over the raw logs and unpacked data for LogInt events raised by the ZRC20Test contract.
type ZRC20TestLogIntIterator struct {
	Event *ZRC20TestLogInt // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZRC20TestLogIntIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZRC20TestLogInt)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZRC20TestLogInt)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZRC20TestLogIntIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZRC20TestLogIntIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZRC20TestLogInt represents a LogInt event raised by the ZRC20Test contract.
type ZRC20TestLogInt struct {
	Arg0 *big.Int
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogInt is a free log retrieval operation binding the contract event 0x0eb5d52624c8d28ada9fc55a8c502ed5aa3fbe2fb6e91b71b5f376882b1d2fb8.
//
// Solidity: event log_int(int256 arg0)
func (_ZRC20Test *ZRC20TestFilterer) FilterLogInt(opts *bind.FilterOpts) (*ZRC20TestLogIntIterator, error) {

	logs, sub, err := _ZRC20Test.contract.FilterLogs(opts, "log_int")
	if err != nil {
		return nil, err
	}
	return &ZRC20TestLogIntIterator{contract: _ZRC20Test.contract, event: "log_int", logs: logs, sub: sub}, nil
}

// WatchLogInt is a free log subscription operation binding the contract event 0x0eb5d52624c8d28ada9fc55a8c502ed5aa3fbe2fb6e91b71b5f376882b1d2fb8.
//
// Solidity: event log_int(int256 arg0)
func (_ZRC20Test *ZRC20TestFilterer) WatchLogInt(opts *bind.WatchOpts, sink chan<- *ZRC20TestLogInt) (event.Subscription, error) {

	logs, sub, err := _ZRC20Test.contract.WatchLogs(opts, "log_int")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZRC20TestLogInt)
				if err := _ZRC20Test.contract.UnpackLog(event, "log_int", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogInt is a log parse operation binding the contract event 0x0eb5d52624c8d28ada9fc55a8c502ed5aa3fbe2fb6e91b71b5f376882b1d2fb8.
//
// Solidity: event log_int(int256 arg0)
func (_ZRC20Test *ZRC20TestFilterer) ParseLogInt(log types.Log) (*ZRC20TestLogInt, error) {
	event := new(ZRC20TestLogInt)
	if err := _ZRC20Test.contract.UnpackLog(event, "log_int", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZRC20TestLogNamedAddressIterator is returned from FilterLogNamedAddress and is used to iterate over the raw logs and unpacked data for LogNamedAddress events raised by the ZRC20Test contract.
type ZRC20TestLogNamedAddressIterator struct {
	Event *ZRC20TestLogNamedAddress // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZRC20TestLogNamedAddressIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZRC20TestLogNamedAddress)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZRC20TestLogNamedAddress)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZRC20TestLogNamedAddressIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZRC20TestLogNamedAddressIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZRC20TestLogNamedAddress represents a LogNamedAddress event raised by the ZRC20Test contract.
type ZRC20TestLogNamedAddress struct {
	Key string
	Val common.Address
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedAddress is a free log retrieval operation binding the contract event 0x9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f.
//
// Solidity: event log_named_address(string key, address val)
func (_ZRC20Test *ZRC20TestFilterer) FilterLogNamedAddress(opts *bind.FilterOpts) (*ZRC20TestLogNamedAddressIterator, error) {

	logs, sub, err := _ZRC20Test.contract.FilterLogs(opts, "log_named_address")
	if err != nil {
		return nil, err
	}
	return &ZRC20TestLogNamedAddressIterator{contract: _ZRC20Test.contract, event: "log_named_address", logs: logs, sub: sub}, nil
}

// WatchLogNamedAddress is a free log subscription operation binding the contract event 0x9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f.
//
// Solidity: event log_named_address(string key, address val)
func (_ZRC20Test *ZRC20TestFilterer) WatchLogNamedAddress(opts *bind.WatchOpts, sink chan<- *ZRC20TestLogNamedAddress) (event.Subscription, error) {

	logs, sub, err := _ZRC20Test.contract.WatchLogs(opts, "log_named_address")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZRC20TestLogNamedAddress)
				if err := _ZRC20Test.contract.UnpackLog(event, "log_named_address", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedAddress is a log parse operation binding the contract event 0x9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f.
//
// Solidity: event log_named_address(string key, address val)
func (_ZRC20Test *ZRC20TestFilterer) ParseLogNamedAddress(log types.Log) (*ZRC20TestLogNamedAddress, error) {
	event := new(ZRC20TestLogNamedAddress)
	if err := _ZRC20Test.contract.UnpackLog(event, "log_named_address", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZRC20TestLogNamedArrayIterator is returned from FilterLogNamedArray and is used to iterate over the raw logs and unpacked data for LogNamedArray events raised by the ZRC20Test contract.
type ZRC20TestLogNamedArrayIterator struct {
	Event *ZRC20TestLogNamedArray // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZRC20TestLogNamedArrayIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZRC20TestLogNamedArray)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZRC20TestLogNamedArray)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZRC20TestLogNamedArrayIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZRC20TestLogNamedArrayIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZRC20TestLogNamedArray represents a LogNamedArray event raised by the ZRC20Test contract.
type ZRC20TestLogNamedArray struct {
	Key string
	Val []*big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedArray is a free log retrieval operation binding the contract event 0x00aaa39c9ffb5f567a4534380c737075702e1f7f14107fc95328e3b56c0325fb.
//
// Solidity: event log_named_array(string key, uint256[] val)
func (_ZRC20Test *ZRC20TestFilterer) FilterLogNamedArray(opts *bind.FilterOpts) (*ZRC20TestLogNamedArrayIterator, error) {

	logs, sub, err := _ZRC20Test.contract.FilterLogs(opts, "log_named_array")
	if err != nil {
		return nil, err
	}
	return &ZRC20TestLogNamedArrayIterator{contract: _ZRC20Test.contract, event: "log_named_array", logs: logs, sub: sub}, nil
}

// WatchLogNamedArray is a free log subscription operation binding the contract event 0x00aaa39c9ffb5f567a4534380c737075702e1f7f14107fc95328e3b56c0325fb.
//
// Solidity: event log_named_array(string key, uint256[] val)
func (_ZRC20Test *ZRC20TestFilterer) WatchLogNamedArray(opts *bind.WatchOpts, sink chan<- *ZRC20TestLogNamedArray) (event.Subscription, error) {

	logs, sub, err := _ZRC20Test.contract.WatchLogs(opts, "log_named_array")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZRC20TestLogNamedArray)
				if err := _ZRC20Test.contract.UnpackLog(event, "log_named_array", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedArray is a log parse operation binding the contract event 0x00aaa39c9ffb5f567a4534380c737075702e1f7f14107fc95328e3b56c0325fb.
//
// Solidity: event log_named_array(string key, uint256[] val)
func (_ZRC20Test *ZRC20TestFilterer) ParseLogNamedArray(log types.Log) (*ZRC20TestLogNamedArray, error) {
	event := new(ZRC20TestLogNamedArray)
	if err := _ZRC20Test.contract.UnpackLog(event, "log_named_array", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZRC20TestLogNamedArray0Iterator is returned from FilterLogNamedArray0 and is used to iterate over the raw logs and unpacked data for LogNamedArray0 events raised by the ZRC20Test contract.
type ZRC20TestLogNamedArray0Iterator struct {
	Event *ZRC20TestLogNamedArray0 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZRC20TestLogNamedArray0Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZRC20TestLogNamedArray0)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZRC20TestLogNamedArray0)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZRC20TestLogNamedArray0Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZRC20TestLogNamedArray0Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZRC20TestLogNamedArray0 represents a LogNamedArray0 event raised by the ZRC20Test contract.
type ZRC20TestLogNamedArray0 struct {
	Key string
	Val []*big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedArray0 is a free log retrieval operation binding the contract event 0xa73eda09662f46dde729be4611385ff34fe6c44fbbc6f7e17b042b59a3445b57.
//
// Solidity: event log_named_array(string key, int256[] val)
func (_ZRC20Test *ZRC20TestFilterer) FilterLogNamedArray0(opts *bind.FilterOpts) (*ZRC20TestLogNamedArray0Iterator, error) {

	logs, sub, err := _ZRC20Test.contract.FilterLogs(opts, "log_named_array0")
	if err != nil {
		return nil, err
	}
	return &ZRC20TestLogNamedArray0Iterator{contract: _ZRC20Test.contract, event: "log_named_array0", logs: logs, sub: sub}, nil
}

// WatchLogNamedArray0 is a free log subscription operation binding the contract event 0xa73eda09662f46dde729be4611385ff34fe6c44fbbc6f7e17b042b59a3445b57.
//
// Solidity: event log_named_array(string key, int256[] val)
func (_ZRC20Test *ZRC20TestFilterer) WatchLogNamedArray0(opts *bind.WatchOpts, sink chan<- *ZRC20TestLogNamedArray0) (event.Subscription, error) {

	logs, sub, err := _ZRC20Test.contract.WatchLogs(opts, "log_named_array0")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZRC20TestLogNamedArray0)
				if err := _ZRC20Test.contract.UnpackLog(event, "log_named_array0", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedArray0 is a log parse operation binding the contract event 0xa73eda09662f46dde729be4611385ff34fe6c44fbbc6f7e17b042b59a3445b57.
//
// Solidity: event log_named_array(string key, int256[] val)
func (_ZRC20Test *ZRC20TestFilterer) ParseLogNamedArray0(log types.Log) (*ZRC20TestLogNamedArray0, error) {
	event := new(ZRC20TestLogNamedArray0)
	if err := _ZRC20Test.contract.UnpackLog(event, "log_named_array0", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZRC20TestLogNamedArray1Iterator is returned from FilterLogNamedArray1 and is used to iterate over the raw logs and unpacked data for LogNamedArray1 events raised by the ZRC20Test contract.
type ZRC20TestLogNamedArray1Iterator struct {
	Event *ZRC20TestLogNamedArray1 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZRC20TestLogNamedArray1Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZRC20TestLogNamedArray1)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZRC20TestLogNamedArray1)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZRC20TestLogNamedArray1Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZRC20TestLogNamedArray1Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZRC20TestLogNamedArray1 represents a LogNamedArray1 event raised by the ZRC20Test contract.
type ZRC20TestLogNamedArray1 struct {
	Key string
	Val []common.Address
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedArray1 is a free log retrieval operation binding the contract event 0x3bcfb2ae2e8d132dd1fce7cf278a9a19756a9fceabe470df3bdabb4bc577d1bd.
//
// Solidity: event log_named_array(string key, address[] val)
func (_ZRC20Test *ZRC20TestFilterer) FilterLogNamedArray1(opts *bind.FilterOpts) (*ZRC20TestLogNamedArray1Iterator, error) {

	logs, sub, err := _ZRC20Test.contract.FilterLogs(opts, "log_named_array1")
	if err != nil {
		return nil, err
	}
	return &ZRC20TestLogNamedArray1Iterator{contract: _ZRC20Test.contract, event: "log_named_array1", logs: logs, sub: sub}, nil
}

// WatchLogNamedArray1 is a free log subscription operation binding the contract event 0x3bcfb2ae2e8d132dd1fce7cf278a9a19756a9fceabe470df3bdabb4bc577d1bd.
//
// Solidity: event log_named_array(string key, address[] val)
func (_ZRC20Test *ZRC20TestFilterer) WatchLogNamedArray1(opts *bind.WatchOpts, sink chan<- *ZRC20TestLogNamedArray1) (event.Subscription, error) {

	logs, sub, err := _ZRC20Test.contract.WatchLogs(opts, "log_named_array1")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZRC20TestLogNamedArray1)
				if err := _ZRC20Test.contract.UnpackLog(event, "log_named_array1", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedArray1 is a log parse operation binding the contract event 0x3bcfb2ae2e8d132dd1fce7cf278a9a19756a9fceabe470df3bdabb4bc577d1bd.
//
// Solidity: event log_named_array(string key, address[] val)
func (_ZRC20Test *ZRC20TestFilterer) ParseLogNamedArray1(log types.Log) (*ZRC20TestLogNamedArray1, error) {
	event := new(ZRC20TestLogNamedArray1)
	if err := _ZRC20Test.contract.UnpackLog(event, "log_named_array1", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZRC20TestLogNamedBytesIterator is returned from FilterLogNamedBytes and is used to iterate over the raw logs and unpacked data for LogNamedBytes events raised by the ZRC20Test contract.
type ZRC20TestLogNamedBytesIterator struct {
	Event *ZRC20TestLogNamedBytes // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZRC20TestLogNamedBytesIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZRC20TestLogNamedBytes)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZRC20TestLogNamedBytes)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZRC20TestLogNamedBytesIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZRC20TestLogNamedBytesIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZRC20TestLogNamedBytes represents a LogNamedBytes event raised by the ZRC20Test contract.
type ZRC20TestLogNamedBytes struct {
	Key string
	Val []byte
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedBytes is a free log retrieval operation binding the contract event 0xd26e16cad4548705e4c9e2d94f98ee91c289085ee425594fd5635fa2964ccf18.
//
// Solidity: event log_named_bytes(string key, bytes val)
func (_ZRC20Test *ZRC20TestFilterer) FilterLogNamedBytes(opts *bind.FilterOpts) (*ZRC20TestLogNamedBytesIterator, error) {

	logs, sub, err := _ZRC20Test.contract.FilterLogs(opts, "log_named_bytes")
	if err != nil {
		return nil, err
	}
	return &ZRC20TestLogNamedBytesIterator{contract: _ZRC20Test.contract, event: "log_named_bytes", logs: logs, sub: sub}, nil
}

// WatchLogNamedBytes is a free log subscription operation binding the contract event 0xd26e16cad4548705e4c9e2d94f98ee91c289085ee425594fd5635fa2964ccf18.
//
// Solidity: event log_named_bytes(string key, bytes val)
func (_ZRC20Test *ZRC20TestFilterer) WatchLogNamedBytes(opts *bind.WatchOpts, sink chan<- *ZRC20TestLogNamedBytes) (event.Subscription, error) {

	logs, sub, err := _ZRC20Test.contract.WatchLogs(opts, "log_named_bytes")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZRC20TestLogNamedBytes)
				if err := _ZRC20Test.contract.UnpackLog(event, "log_named_bytes", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedBytes is a log parse operation binding the contract event 0xd26e16cad4548705e4c9e2d94f98ee91c289085ee425594fd5635fa2964ccf18.
//
// Solidity: event log_named_bytes(string key, bytes val)
func (_ZRC20Test *ZRC20TestFilterer) ParseLogNamedBytes(log types.Log) (*ZRC20TestLogNamedBytes, error) {
	event := new(ZRC20TestLogNamedBytes)
	if err := _ZRC20Test.contract.UnpackLog(event, "log_named_bytes", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZRC20TestLogNamedBytes32Iterator is returned from FilterLogNamedBytes32 and is used to iterate over the raw logs and unpacked data for LogNamedBytes32 events raised by the ZRC20Test contract.
type ZRC20TestLogNamedBytes32Iterator struct {
	Event *ZRC20TestLogNamedBytes32 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZRC20TestLogNamedBytes32Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZRC20TestLogNamedBytes32)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZRC20TestLogNamedBytes32)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZRC20TestLogNamedBytes32Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZRC20TestLogNamedBytes32Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZRC20TestLogNamedBytes32 represents a LogNamedBytes32 event raised by the ZRC20Test contract.
type ZRC20TestLogNamedBytes32 struct {
	Key string
	Val [32]byte
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedBytes32 is a free log retrieval operation binding the contract event 0xafb795c9c61e4fe7468c386f925d7a5429ecad9c0495ddb8d38d690614d32f99.
//
// Solidity: event log_named_bytes32(string key, bytes32 val)
func (_ZRC20Test *ZRC20TestFilterer) FilterLogNamedBytes32(opts *bind.FilterOpts) (*ZRC20TestLogNamedBytes32Iterator, error) {

	logs, sub, err := _ZRC20Test.contract.FilterLogs(opts, "log_named_bytes32")
	if err != nil {
		return nil, err
	}
	return &ZRC20TestLogNamedBytes32Iterator{contract: _ZRC20Test.contract, event: "log_named_bytes32", logs: logs, sub: sub}, nil
}

// WatchLogNamedBytes32 is a free log subscription operation binding the contract event 0xafb795c9c61e4fe7468c386f925d7a5429ecad9c0495ddb8d38d690614d32f99.
//
// Solidity: event log_named_bytes32(string key, bytes32 val)
func (_ZRC20Test *ZRC20TestFilterer) WatchLogNamedBytes32(opts *bind.WatchOpts, sink chan<- *ZRC20TestLogNamedBytes32) (event.Subscription, error) {

	logs, sub, err := _ZRC20Test.contract.WatchLogs(opts, "log_named_bytes32")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZRC20TestLogNamedBytes32)
				if err := _ZRC20Test.contract.UnpackLog(event, "log_named_bytes32", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedBytes32 is a log parse operation binding the contract event 0xafb795c9c61e4fe7468c386f925d7a5429ecad9c0495ddb8d38d690614d32f99.
//
// Solidity: event log_named_bytes32(string key, bytes32 val)
func (_ZRC20Test *ZRC20TestFilterer) ParseLogNamedBytes32(log types.Log) (*ZRC20TestLogNamedBytes32, error) {
	event := new(ZRC20TestLogNamedBytes32)
	if err := _ZRC20Test.contract.UnpackLog(event, "log_named_bytes32", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZRC20TestLogNamedDecimalIntIterator is returned from FilterLogNamedDecimalInt and is used to iterate over the raw logs and unpacked data for LogNamedDecimalInt events raised by the ZRC20Test contract.
type ZRC20TestLogNamedDecimalIntIterator struct {
	Event *ZRC20TestLogNamedDecimalInt // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZRC20TestLogNamedDecimalIntIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZRC20TestLogNamedDecimalInt)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZRC20TestLogNamedDecimalInt)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZRC20TestLogNamedDecimalIntIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZRC20TestLogNamedDecimalIntIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZRC20TestLogNamedDecimalInt represents a LogNamedDecimalInt event raised by the ZRC20Test contract.
type ZRC20TestLogNamedDecimalInt struct {
	Key      string
	Val      *big.Int
	Decimals *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterLogNamedDecimalInt is a free log retrieval operation binding the contract event 0x5da6ce9d51151ba10c09a559ef24d520b9dac5c5b8810ae8434e4d0d86411a95.
//
// Solidity: event log_named_decimal_int(string key, int256 val, uint256 decimals)
func (_ZRC20Test *ZRC20TestFilterer) FilterLogNamedDecimalInt(opts *bind.FilterOpts) (*ZRC20TestLogNamedDecimalIntIterator, error) {

	logs, sub, err := _ZRC20Test.contract.FilterLogs(opts, "log_named_decimal_int")
	if err != nil {
		return nil, err
	}
	return &ZRC20TestLogNamedDecimalIntIterator{contract: _ZRC20Test.contract, event: "log_named_decimal_int", logs: logs, sub: sub}, nil
}

// WatchLogNamedDecimalInt is a free log subscription operation binding the contract event 0x5da6ce9d51151ba10c09a559ef24d520b9dac5c5b8810ae8434e4d0d86411a95.
//
// Solidity: event log_named_decimal_int(string key, int256 val, uint256 decimals)
func (_ZRC20Test *ZRC20TestFilterer) WatchLogNamedDecimalInt(opts *bind.WatchOpts, sink chan<- *ZRC20TestLogNamedDecimalInt) (event.Subscription, error) {

	logs, sub, err := _ZRC20Test.contract.WatchLogs(opts, "log_named_decimal_int")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZRC20TestLogNamedDecimalInt)
				if err := _ZRC20Test.contract.UnpackLog(event, "log_named_decimal_int", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedDecimalInt is a log parse operation binding the contract event 0x5da6ce9d51151ba10c09a559ef24d520b9dac5c5b8810ae8434e4d0d86411a95.
//
// Solidity: event log_named_decimal_int(string key, int256 val, uint256 decimals)
func (_ZRC20Test *ZRC20TestFilterer) ParseLogNamedDecimalInt(log types.Log) (*ZRC20TestLogNamedDecimalInt, error) {
	event := new(ZRC20TestLogNamedDecimalInt)
	if err := _ZRC20Test.contract.UnpackLog(event, "log_named_decimal_int", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZRC20TestLogNamedDecimalUintIterator is returned from FilterLogNamedDecimalUint and is used to iterate over the raw logs and unpacked data for LogNamedDecimalUint events raised by the ZRC20Test contract.
type ZRC20TestLogNamedDecimalUintIterator struct {
	Event *ZRC20TestLogNamedDecimalUint // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZRC20TestLogNamedDecimalUintIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZRC20TestLogNamedDecimalUint)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZRC20TestLogNamedDecimalUint)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZRC20TestLogNamedDecimalUintIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZRC20TestLogNamedDecimalUintIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZRC20TestLogNamedDecimalUint represents a LogNamedDecimalUint event raised by the ZRC20Test contract.
type ZRC20TestLogNamedDecimalUint struct {
	Key      string
	Val      *big.Int
	Decimals *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterLogNamedDecimalUint is a free log retrieval operation binding the contract event 0xeb8ba43ced7537421946bd43e828b8b2b8428927aa8f801c13d934bf11aca57b.
//
// Solidity: event log_named_decimal_uint(string key, uint256 val, uint256 decimals)
func (_ZRC20Test *ZRC20TestFilterer) FilterLogNamedDecimalUint(opts *bind.FilterOpts) (*ZRC20TestLogNamedDecimalUintIterator, error) {

	logs, sub, err := _ZRC20Test.contract.FilterLogs(opts, "log_named_decimal_uint")
	if err != nil {
		return nil, err
	}
	return &ZRC20TestLogNamedDecimalUintIterator{contract: _ZRC20Test.contract, event: "log_named_decimal_uint", logs: logs, sub: sub}, nil
}

// WatchLogNamedDecimalUint is a free log subscription operation binding the contract event 0xeb8ba43ced7537421946bd43e828b8b2b8428927aa8f801c13d934bf11aca57b.
//
// Solidity: event log_named_decimal_uint(string key, uint256 val, uint256 decimals)
func (_ZRC20Test *ZRC20TestFilterer) WatchLogNamedDecimalUint(opts *bind.WatchOpts, sink chan<- *ZRC20TestLogNamedDecimalUint) (event.Subscription, error) {

	logs, sub, err := _ZRC20Test.contract.WatchLogs(opts, "log_named_decimal_uint")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZRC20TestLogNamedDecimalUint)
				if err := _ZRC20Test.contract.UnpackLog(event, "log_named_decimal_uint", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedDecimalUint is a log parse operation binding the contract event 0xeb8ba43ced7537421946bd43e828b8b2b8428927aa8f801c13d934bf11aca57b.
//
// Solidity: event log_named_decimal_uint(string key, uint256 val, uint256 decimals)
func (_ZRC20Test *ZRC20TestFilterer) ParseLogNamedDecimalUint(log types.Log) (*ZRC20TestLogNamedDecimalUint, error) {
	event := new(ZRC20TestLogNamedDecimalUint)
	if err := _ZRC20Test.contract.UnpackLog(event, "log_named_decimal_uint", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZRC20TestLogNamedIntIterator is returned from FilterLogNamedInt and is used to iterate over the raw logs and unpacked data for LogNamedInt events raised by the ZRC20Test contract.
type ZRC20TestLogNamedIntIterator struct {
	Event *ZRC20TestLogNamedInt // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZRC20TestLogNamedIntIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZRC20TestLogNamedInt)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZRC20TestLogNamedInt)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZRC20TestLogNamedIntIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZRC20TestLogNamedIntIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZRC20TestLogNamedInt represents a LogNamedInt event raised by the ZRC20Test contract.
type ZRC20TestLogNamedInt struct {
	Key string
	Val *big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedInt is a free log retrieval operation binding the contract event 0x2fe632779174374378442a8e978bccfbdcc1d6b2b0d81f7e8eb776ab2286f168.
//
// Solidity: event log_named_int(string key, int256 val)
func (_ZRC20Test *ZRC20TestFilterer) FilterLogNamedInt(opts *bind.FilterOpts) (*ZRC20TestLogNamedIntIterator, error) {

	logs, sub, err := _ZRC20Test.contract.FilterLogs(opts, "log_named_int")
	if err != nil {
		return nil, err
	}
	return &ZRC20TestLogNamedIntIterator{contract: _ZRC20Test.contract, event: "log_named_int", logs: logs, sub: sub}, nil
}

// WatchLogNamedInt is a free log subscription operation binding the contract event 0x2fe632779174374378442a8e978bccfbdcc1d6b2b0d81f7e8eb776ab2286f168.
//
// Solidity: event log_named_int(string key, int256 val)
func (_ZRC20Test *ZRC20TestFilterer) WatchLogNamedInt(opts *bind.WatchOpts, sink chan<- *ZRC20TestLogNamedInt) (event.Subscription, error) {

	logs, sub, err := _ZRC20Test.contract.WatchLogs(opts, "log_named_int")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZRC20TestLogNamedInt)
				if err := _ZRC20Test.contract.UnpackLog(event, "log_named_int", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedInt is a log parse operation binding the contract event 0x2fe632779174374378442a8e978bccfbdcc1d6b2b0d81f7e8eb776ab2286f168.
//
// Solidity: event log_named_int(string key, int256 val)
func (_ZRC20Test *ZRC20TestFilterer) ParseLogNamedInt(log types.Log) (*ZRC20TestLogNamedInt, error) {
	event := new(ZRC20TestLogNamedInt)
	if err := _ZRC20Test.contract.UnpackLog(event, "log_named_int", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZRC20TestLogNamedStringIterator is returned from FilterLogNamedString and is used to iterate over the raw logs and unpacked data for LogNamedString events raised by the ZRC20Test contract.
type ZRC20TestLogNamedStringIterator struct {
	Event *ZRC20TestLogNamedString // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZRC20TestLogNamedStringIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZRC20TestLogNamedString)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZRC20TestLogNamedString)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZRC20TestLogNamedStringIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZRC20TestLogNamedStringIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZRC20TestLogNamedString represents a LogNamedString event raised by the ZRC20Test contract.
type ZRC20TestLogNamedString struct {
	Key string
	Val string
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedString is a free log retrieval operation binding the contract event 0x280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf3583.
//
// Solidity: event log_named_string(string key, string val)
func (_ZRC20Test *ZRC20TestFilterer) FilterLogNamedString(opts *bind.FilterOpts) (*ZRC20TestLogNamedStringIterator, error) {

	logs, sub, err := _ZRC20Test.contract.FilterLogs(opts, "log_named_string")
	if err != nil {
		return nil, err
	}
	return &ZRC20TestLogNamedStringIterator{contract: _ZRC20Test.contract, event: "log_named_string", logs: logs, sub: sub}, nil
}

// WatchLogNamedString is a free log subscription operation binding the contract event 0x280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf3583.
//
// Solidity: event log_named_string(string key, string val)
func (_ZRC20Test *ZRC20TestFilterer) WatchLogNamedString(opts *bind.WatchOpts, sink chan<- *ZRC20TestLogNamedString) (event.Subscription, error) {

	logs, sub, err := _ZRC20Test.contract.WatchLogs(opts, "log_named_string")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZRC20TestLogNamedString)
				if err := _ZRC20Test.contract.UnpackLog(event, "log_named_string", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedString is a log parse operation binding the contract event 0x280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf3583.
//
// Solidity: event log_named_string(string key, string val)
func (_ZRC20Test *ZRC20TestFilterer) ParseLogNamedString(log types.Log) (*ZRC20TestLogNamedString, error) {
	event := new(ZRC20TestLogNamedString)
	if err := _ZRC20Test.contract.UnpackLog(event, "log_named_string", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZRC20TestLogNamedUintIterator is returned from FilterLogNamedUint and is used to iterate over the raw logs and unpacked data for LogNamedUint events raised by the ZRC20Test contract.
type ZRC20TestLogNamedUintIterator struct {
	Event *ZRC20TestLogNamedUint // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZRC20TestLogNamedUintIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZRC20TestLogNamedUint)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZRC20TestLogNamedUint)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZRC20TestLogNamedUintIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZRC20TestLogNamedUintIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZRC20TestLogNamedUint represents a LogNamedUint event raised by the ZRC20Test contract.
type ZRC20TestLogNamedUint struct {
	Key string
	Val *big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedUint is a free log retrieval operation binding the contract event 0xb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a8.
//
// Solidity: event log_named_uint(string key, uint256 val)
func (_ZRC20Test *ZRC20TestFilterer) FilterLogNamedUint(opts *bind.FilterOpts) (*ZRC20TestLogNamedUintIterator, error) {

	logs, sub, err := _ZRC20Test.contract.FilterLogs(opts, "log_named_uint")
	if err != nil {
		return nil, err
	}
	return &ZRC20TestLogNamedUintIterator{contract: _ZRC20Test.contract, event: "log_named_uint", logs: logs, sub: sub}, nil
}

// WatchLogNamedUint is a free log subscription operation binding the contract event 0xb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a8.
//
// Solidity: event log_named_uint(string key, uint256 val)
func (_ZRC20Test *ZRC20TestFilterer) WatchLogNamedUint(opts *bind.WatchOpts, sink chan<- *ZRC20TestLogNamedUint) (event.Subscription, error) {

	logs, sub, err := _ZRC20Test.contract.WatchLogs(opts, "log_named_uint")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZRC20TestLogNamedUint)
				if err := _ZRC20Test.contract.UnpackLog(event, "log_named_uint", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedUint is a log parse operation binding the contract event 0xb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a8.
//
// Solidity: event log_named_uint(string key, uint256 val)
func (_ZRC20Test *ZRC20TestFilterer) ParseLogNamedUint(log types.Log) (*ZRC20TestLogNamedUint, error) {
	event := new(ZRC20TestLogNamedUint)
	if err := _ZRC20Test.contract.UnpackLog(event, "log_named_uint", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZRC20TestLogStringIterator is returned from FilterLogString and is used to iterate over the raw logs and unpacked data for LogString events raised by the ZRC20Test contract.
type ZRC20TestLogStringIterator struct {
	Event *ZRC20TestLogString // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZRC20TestLogStringIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZRC20TestLogString)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZRC20TestLogString)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZRC20TestLogStringIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZRC20TestLogStringIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZRC20TestLogString represents a LogString event raised by the ZRC20Test contract.
type ZRC20TestLogString struct {
	Arg0 string
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogString is a free log retrieval operation binding the contract event 0x0b2e13ff20ac7b474198655583edf70dedd2c1dc980e329c4fbb2fc0748b796b.
//
// Solidity: event log_string(string arg0)
func (_ZRC20Test *ZRC20TestFilterer) FilterLogString(opts *bind.FilterOpts) (*ZRC20TestLogStringIterator, error) {

	logs, sub, err := _ZRC20Test.contract.FilterLogs(opts, "log_string")
	if err != nil {
		return nil, err
	}
	return &ZRC20TestLogStringIterator{contract: _ZRC20Test.contract, event: "log_string", logs: logs, sub: sub}, nil
}

// WatchLogString is a free log subscription operation binding the contract event 0x0b2e13ff20ac7b474198655583edf70dedd2c1dc980e329c4fbb2fc0748b796b.
//
// Solidity: event log_string(string arg0)
func (_ZRC20Test *ZRC20TestFilterer) WatchLogString(opts *bind.WatchOpts, sink chan<- *ZRC20TestLogString) (event.Subscription, error) {

	logs, sub, err := _ZRC20Test.contract.WatchLogs(opts, "log_string")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZRC20TestLogString)
				if err := _ZRC20Test.contract.UnpackLog(event, "log_string", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogString is a log parse operation binding the contract event 0x0b2e13ff20ac7b474198655583edf70dedd2c1dc980e329c4fbb2fc0748b796b.
//
// Solidity: event log_string(string arg0)
func (_ZRC20Test *ZRC20TestFilterer) ParseLogString(log types.Log) (*ZRC20TestLogString, error) {
	event := new(ZRC20TestLogString)
	if err := _ZRC20Test.contract.UnpackLog(event, "log_string", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZRC20TestLogUintIterator is returned from FilterLogUint and is used to iterate over the raw logs and unpacked data for LogUint events raised by the ZRC20Test contract.
type ZRC20TestLogUintIterator struct {
	Event *ZRC20TestLogUint // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZRC20TestLogUintIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZRC20TestLogUint)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZRC20TestLogUint)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZRC20TestLogUintIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZRC20TestLogUintIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZRC20TestLogUint represents a LogUint event raised by the ZRC20Test contract.
type ZRC20TestLogUint struct {
	Arg0 *big.Int
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogUint is a free log retrieval operation binding the contract event 0x2cab9790510fd8bdfbd2115288db33fec66691d476efc5427cfd4c0969301755.
//
// Solidity: event log_uint(uint256 arg0)
func (_ZRC20Test *ZRC20TestFilterer) FilterLogUint(opts *bind.FilterOpts) (*ZRC20TestLogUintIterator, error) {

	logs, sub, err := _ZRC20Test.contract.FilterLogs(opts, "log_uint")
	if err != nil {
		return nil, err
	}
	return &ZRC20TestLogUintIterator{contract: _ZRC20Test.contract, event: "log_uint", logs: logs, sub: sub}, nil
}

// WatchLogUint is a free log subscription operation binding the contract event 0x2cab9790510fd8bdfbd2115288db33fec66691d476efc5427cfd4c0969301755.
//
// Solidity: event log_uint(uint256 arg0)
func (_ZRC20Test *ZRC20TestFilterer) WatchLogUint(opts *bind.WatchOpts, sink chan<- *ZRC20TestLogUint) (event.Subscription, error) {

	logs, sub, err := _ZRC20Test.contract.WatchLogs(opts, "log_uint")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZRC20TestLogUint)
				if err := _ZRC20Test.contract.UnpackLog(event, "log_uint", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogUint is a log parse operation binding the contract event 0x2cab9790510fd8bdfbd2115288db33fec66691d476efc5427cfd4c0969301755.
//
// Solidity: event log_uint(uint256 arg0)
func (_ZRC20Test *ZRC20TestFilterer) ParseLogUint(log types.Log) (*ZRC20TestLogUint, error) {
	event := new(ZRC20TestLogUint)
	if err := _ZRC20Test.contract.UnpackLog(event, "log_uint", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZRC20TestLogsIterator is returned from FilterLogs and is used to iterate over the raw logs and unpacked data for Logs events raised by the ZRC20Test contract.
type ZRC20TestLogsIterator struct {
	Event *ZRC20TestLogs // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZRC20TestLogsIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZRC20TestLogs)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZRC20TestLogs)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZRC20TestLogsIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZRC20TestLogsIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZRC20TestLogs represents a Logs event raised by the ZRC20Test contract.
type ZRC20TestLogs struct {
	Arg0 []byte
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogs is a free log retrieval operation binding the contract event 0xe7950ede0394b9f2ce4a5a1bf5a7e1852411f7e6661b4308c913c4bfd11027e4.
//
// Solidity: event logs(bytes arg0)
func (_ZRC20Test *ZRC20TestFilterer) FilterLogs(opts *bind.FilterOpts) (*ZRC20TestLogsIterator, error) {

	logs, sub, err := _ZRC20Test.contract.FilterLogs(opts, "logs")
	if err != nil {
		return nil, err
	}
	return &ZRC20TestLogsIterator{contract: _ZRC20Test.contract, event: "logs", logs: logs, sub: sub}, nil
}

// WatchLogs is a free log subscription operation binding the contract event 0xe7950ede0394b9f2ce4a5a1bf5a7e1852411f7e6661b4308c913c4bfd11027e4.
//
// Solidity: event logs(bytes arg0)
func (_ZRC20Test *ZRC20TestFilterer) WatchLogs(opts *bind.WatchOpts, sink chan<- *ZRC20TestLogs) (event.Subscription, error) {

	logs, sub, err := _ZRC20Test.contract.WatchLogs(opts, "logs")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZRC20TestLogs)
				if err := _ZRC20Test.contract.UnpackLog(event, "logs", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogs is a log parse operation binding the contract event 0xe7950ede0394b9f2ce4a5a1bf5a7e1852411f7e6661b4308c913c4bfd11027e4.
//
// Solidity: event logs(bytes arg0)
func (_ZRC20Test *ZRC20TestFilterer) ParseLogs(log types.Log) (*ZRC20TestLogs, error) {
	event := new(ZRC20TestLogs)
	if err := _ZRC20Test.contract.UnpackLog(event, "logs", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
