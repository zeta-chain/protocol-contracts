// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package registry

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// StdInvariantFuzzArtifactSelector is an auto generated low-level Go binding around an user-defined struct.
type StdInvariantFuzzArtifactSelector struct {
	Artifact  string
	Selectors [][4]byte
}

// StdInvariantFuzzInterface is an auto generated low-level Go binding around an user-defined struct.
type StdInvariantFuzzInterface struct {
	Addr      common.Address
	Artifacts []string
}

// StdInvariantFuzzSelector is an auto generated low-level Go binding around an user-defined struct.
type StdInvariantFuzzSelector struct {
	Addr      common.Address
	Selectors [][4]byte
}

// RegistryTestMetaData contains all meta data concerning the RegistryTest contract.
var RegistryTestMetaData = &bind.MetaData{
	ABI: "[{\"type\":\"function\",\"name\":\"IS_TEST\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"excludeArtifacts\",\"inputs\":[],\"outputs\":[{\"name\":\"excludedArtifacts_\",\"type\":\"string[]\",\"internalType\":\"string[]\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"excludeContracts\",\"inputs\":[],\"outputs\":[{\"name\":\"excludedContracts_\",\"type\":\"address[]\",\"internalType\":\"address[]\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"excludeSelectors\",\"inputs\":[],\"outputs\":[{\"name\":\"excludedSelectors_\",\"type\":\"tuple[]\",\"internalType\":\"structStdInvariant.FuzzSelector[]\",\"components\":[{\"name\":\"addr\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"selectors\",\"type\":\"bytes4[]\",\"internalType\":\"bytes4[]\"}]}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"excludeSenders\",\"inputs\":[],\"outputs\":[{\"name\":\"excludedSenders_\",\"type\":\"address[]\",\"internalType\":\"address[]\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"failed\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"setUp\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"targetArtifactSelectors\",\"inputs\":[],\"outputs\":[{\"name\":\"targetedArtifactSelectors_\",\"type\":\"tuple[]\",\"internalType\":\"structStdInvariant.FuzzArtifactSelector[]\",\"components\":[{\"name\":\"artifact\",\"type\":\"string\",\"internalType\":\"string\"},{\"name\":\"selectors\",\"type\":\"bytes4[]\",\"internalType\":\"bytes4[]\"}]}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"targetArtifacts\",\"inputs\":[],\"outputs\":[{\"name\":\"targetedArtifacts_\",\"type\":\"string[]\",\"internalType\":\"string[]\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"targetContracts\",\"inputs\":[],\"outputs\":[{\"name\":\"targetedContracts_\",\"type\":\"address[]\",\"internalType\":\"address[]\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"targetInterfaces\",\"inputs\":[],\"outputs\":[{\"name\":\"targetedInterfaces_\",\"type\":\"tuple[]\",\"internalType\":\"structStdInvariant.FuzzInterface[]\",\"components\":[{\"name\":\"addr\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"artifacts\",\"type\":\"string[]\",\"internalType\":\"string[]\"}]}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"targetSelectors\",\"inputs\":[],\"outputs\":[{\"name\":\"targetedSelectors_\",\"type\":\"tuple[]\",\"internalType\":\"structStdInvariant.FuzzSelector[]\",\"components\":[{\"name\":\"addr\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"selectors\",\"type\":\"bytes4[]\",\"internalType\":\"bytes4[]\"}]}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"targetSenders\",\"inputs\":[],\"outputs\":[{\"name\":\"targetedSenders_\",\"type\":\"address[]\",\"internalType\":\"address[]\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"testChangeChainStatus\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testChangeStatusDirectCallFails\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testInitialize\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"testInitializeWithZeroAddress\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testMultipleActiveChains\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testOnCallInvalidSender\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testOnCallPaused\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testOnCallUnauthorized\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testPause\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testPauseUnauthorized\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testRegisterContract\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testRegisterContractWithEmptyAddress\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testRegisterContractWithEmptyType\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testRegisterZRC20Token\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testRegisterZRC20TokenWithEmptyOriginAddress\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testRegisterZRC20TokenWithEmptySymbol\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testRegisterZRC20TokenWithZeroAddress\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testSetContractActive\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testSetContractActiveWithInvalidType\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testSetZRC20TokenActive\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testSetZRC20TokenActiveWithZeroAddress\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testUpdateChainMetadata\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testUpdateContractConfiguration\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testUpdateContractConfigurationWithInvalidType\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"event\",\"name\":\"ChainMetadataUpdated\",\"inputs\":[{\"name\":\"chainId\",\"type\":\"uint256\",\"indexed\":true,\"internalType\":\"uint256\"},{\"name\":\"key\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"value\",\"type\":\"bytes\",\"indexed\":false,\"internalType\":\"bytes\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"ChainStatusChanged\",\"inputs\":[{\"name\":\"chainId\",\"type\":\"uint256\",\"indexed\":true,\"internalType\":\"uint256\"},{\"name\":\"newState\",\"type\":\"bool\",\"indexed\":false,\"internalType\":\"bool\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"ContractConfigurationUpdated\",\"inputs\":[{\"name\":\"chainId\",\"type\":\"uint256\",\"indexed\":true,\"internalType\":\"uint256\"},{\"name\":\"contractType\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"key\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"value\",\"type\":\"bytes\",\"indexed\":false,\"internalType\":\"bytes\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"ContractRegistered\",\"inputs\":[{\"name\":\"chainId\",\"type\":\"uint256\",\"indexed\":true,\"internalType\":\"uint256\"},{\"name\":\"contractType\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"addressBytes\",\"type\":\"bytes\",\"indexed\":false,\"internalType\":\"bytes\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"ContractStatusChanged\",\"inputs\":[{\"name\":\"addressBytes\",\"type\":\"bytes\",\"indexed\":false,\"internalType\":\"bytes\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"ZRC20TokenRegistered\",\"inputs\":[{\"name\":\"originAddress\",\"type\":\"bytes\",\"indexed\":false,\"internalType\":\"bytes\"},{\"name\":\"zrc20\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"decimals\",\"type\":\"uint8\",\"indexed\":false,\"internalType\":\"uint8\"},{\"name\":\"originChainId\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"},{\"name\":\"symbol\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"ZRC20TokenUpdated\",\"inputs\":[{\"name\":\"zrc20\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"active\",\"type\":\"bool\",\"indexed\":false,\"internalType\":\"bool\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log\",\"inputs\":[{\"name\":\"\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_address\",\"inputs\":[{\"name\":\"\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_array\",\"inputs\":[{\"name\":\"val\",\"type\":\"uint256[]\",\"indexed\":false,\"internalType\":\"uint256[]\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_array\",\"inputs\":[{\"name\":\"val\",\"type\":\"int256[]\",\"indexed\":false,\"internalType\":\"int256[]\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_array\",\"inputs\":[{\"name\":\"val\",\"type\":\"address[]\",\"indexed\":false,\"internalType\":\"address[]\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_bytes\",\"inputs\":[{\"name\":\"\",\"type\":\"bytes\",\"indexed\":false,\"internalType\":\"bytes\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_bytes32\",\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"indexed\":false,\"internalType\":\"bytes32\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_int\",\"inputs\":[{\"name\":\"\",\"type\":\"int256\",\"indexed\":false,\"internalType\":\"int256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_named_address\",\"inputs\":[{\"name\":\"key\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"val\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_named_array\",\"inputs\":[{\"name\":\"key\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"val\",\"type\":\"uint256[]\",\"indexed\":false,\"internalType\":\"uint256[]\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_named_array\",\"inputs\":[{\"name\":\"key\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"val\",\"type\":\"int256[]\",\"indexed\":false,\"internalType\":\"int256[]\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_named_array\",\"inputs\":[{\"name\":\"key\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"val\",\"type\":\"address[]\",\"indexed\":false,\"internalType\":\"address[]\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_named_bytes\",\"inputs\":[{\"name\":\"key\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"val\",\"type\":\"bytes\",\"indexed\":false,\"internalType\":\"bytes\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_named_bytes32\",\"inputs\":[{\"name\":\"key\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"val\",\"type\":\"bytes32\",\"indexed\":false,\"internalType\":\"bytes32\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_named_decimal_int\",\"inputs\":[{\"name\":\"key\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"val\",\"type\":\"int256\",\"indexed\":false,\"internalType\":\"int256\"},{\"name\":\"decimals\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_named_decimal_uint\",\"inputs\":[{\"name\":\"key\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"val\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"},{\"name\":\"decimals\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_named_int\",\"inputs\":[{\"name\":\"key\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"val\",\"type\":\"int256\",\"indexed\":false,\"internalType\":\"int256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_named_string\",\"inputs\":[{\"name\":\"key\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"val\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_named_uint\",\"inputs\":[{\"name\":\"key\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"val\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_string\",\"inputs\":[{\"name\":\"\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_uint\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"logs\",\"inputs\":[{\"name\":\"\",\"type\":\"bytes\",\"indexed\":false,\"internalType\":\"bytes\"}],\"anonymous\":false},{\"type\":\"error\",\"name\":\"ChainActive\",\"inputs\":[{\"name\":\"chainId\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"type\":\"error\",\"name\":\"ChainNonActive\",\"inputs\":[{\"name\":\"chainId\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"type\":\"error\",\"name\":\"ContractAlreadyRegistered\",\"inputs\":[{\"name\":\"chainId\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"contractType\",\"type\":\"string\",\"internalType\":\"string\"},{\"name\":\"addressBytes\",\"type\":\"bytes\",\"internalType\":\"bytes\"}]},{\"type\":\"error\",\"name\":\"ContractNotFound\",\"inputs\":[{\"name\":\"chainId\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"contractType\",\"type\":\"string\",\"internalType\":\"string\"}]},{\"type\":\"error\",\"name\":\"InvalidContractType\",\"inputs\":[{\"name\":\"contractType\",\"type\":\"string\",\"internalType\":\"string\"}]},{\"type\":\"error\",\"name\":\"InvalidSender\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"NotAuthorized\",\"inputs\":[{\"name\":\"caller\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"NotGateway\",\"inputs\":[{\"name\":\"caller\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"ZRC20AlreadyRegistered\",\"inputs\":[{\"name\":\"zrc20\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"ZRC20SymbolAlreadyInUse\",\"inputs\":[{\"name\":\"symbol\",\"type\":\"string\",\"internalType\":\"string\"}]},{\"type\":\"error\",\"name\":\"ZeroAddress\",\"inputs\":[]}]",
	Bin: "0x600c805460ff199081166001908117909255601f805490911690911790556065602555602680546001600160a01b03191661cbaa1790556d987600000000000000000000000060a0526014608090815260b46040526027906100619082610191565b50602880546001600160a01b03191661aa5517905560408051808201909152600981526831b7b73732b1ba37b960b91b60208201526029906100a39082610191565b5060285460405160609190911b6001600160601b0319166020820152603401604051602081830303815290604052602a90816100df9190610191565b503480156100ec57600080fd5b5061024f565b634e487b7160e01b600052604160045260246000fd5b600181811c9082168061011c57607f821691505b60208210810361013c57634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561018c57806000526020600020601f840160051c810160208510156101695750805b601f840160051c820191505b818110156101895760008155600101610175565b50505b505050565b81516001600160401b038111156101aa576101aa6100f2565b6101be816101b88454610108565b84610142565b6020601f8211600181146101f257600083156101da5750848201515b600019600385901b1c1916600184901b178455610189565b600084815260208120601f198516915b828110156102225787850151825560209485019460019092019101610202565b50848210156102405786840151600019600387901b60f8161c191681555b50505050600190811b01905550565b61c5748061025e6000396000f3fe608060405234801561001057600080fd5b50600436106102775760003560e01c8063916a17c611610160578063ba414fa6116100d8578063d97aa8991161008c578063e20c9f7111610071578063e20c9f71146103e8578063fa7626d4146103f0578063faab466a146103fd57600080fd5b8063d97aa899146103d8578063dca5e415146103e057600080fd5b8063c52521cf116100bd578063c52521cf146103c0578063d312ad7d146103c8578063d6683856146103d057600080fd5b8063ba414fa6146103a0578063bc056f7f146103b857600080fd5b8063b0464fdc1161012f578063b13cbb3311610114578063b13cbb3314610388578063b39377d814610390578063b5508aa91461039857600080fd5b8063b0464fdc14610378578063b0aef6b31461038057600080fd5b8063916a17c61461034b578063993831b6146103605780639bf3559714610368578063aebfe7811461037057600080fd5b80632ade3880116101f35780635fe0a7a2116101c257806371748c09116101a757806371748c091461032657806385226c811461032e5780638c500b5c1461034357600080fd5b80635fe0a7a21461030957806366d9a9a01461031157600080fd5b80632ade3880146102dc5780633e5e3c23146102f15780633f7286f4146102f957806349b7b1981461030157600080fd5b8063164c5b021161024a5780631ed7831c1161022f5780631ed7831c146102ae5780632013038b146102cc57806324196f32146102d457600080fd5b8063164c5b021461029e5780631ddbe8ca146102a657600080fd5b80630a9254e41461027c5780630c4102951461028657806311aa0d441461028e578063151e9be414610296575b600080fd5b610284610405565b005b6102846105c4565b610284610b9c565b6102846110b3565b610284611351565b610284611545565b6102b6611919565b6040516102c3919061a78e565b60405180910390f35b61028461197b565b610284611cd7565b6102e46124fa565b6040516102c3919061a82a565b6102b661263c565b6102b661269c565b6102846126fc565b610284612987565b610319612c69565b6040516102c3919061a990565b610284612dd6565b6103366131a4565b6040516102c3919061aa2e565b610284613274565b61035361364b565b6040516102c3919061aaa5565b610284613731565b610284613ace565b610284613dd4565b610353613f78565b61028461405e565b6102846145d1565b61028461478b565b610336614bc0565b6103a8614c90565b60405190151581526020016102c3565b610284614d64565b6102846151cc565b61028461546c565b6102846156a2565b610284615874565b610284615a85565b6102b6615adc565b601f546103a89060ff1681565b610284615b3c565b602280547fffffffffffffffffffffffff000000000000000000000000000000000000000090811661abcd17909155602380548216611234179055602480549091166156781790556040516104599061a6c8565b604051809103906000f080158015610475573d6000803e3d6000fd5b50602180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03928316908117909155604080518082018252600c81527f52656769737472792e736f6c000000000000000000000000000000000000000060208201526022546023549251908516602482015260448101939093529216606482015261054f919060840160408051601f198184030181529190526020810180516001600160e01b03167fc0c53b8b000000000000000000000000000000000000000000000000000000001790526163e3565b601f80547fffffffffffffffffffffff0000000000000000000000000000000000000000ff166101006001600160a01b039384168102919091179182905560208054919092049092167fffffffffffffffffffffffff0000000000000000000000000000000000000000909216919091179055565b6025546026546040516000926105f09290916001600160a01b039091169060279060019060240161ac2a565b60408051601f19818403018152918152602080830180516001600160e01b031663547965cb60e11b179052815190810182526023546001600160a01b039081168252602154925163ca669fa760e01b815292166004830152919250737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ca669fa790602401600060405180830381600087803b15801561068457600080fd5b505af1158015610698573d6000803e3d6000fd5b50506020546040516319db301560e21b81526001600160a01b03909116925063676cc05491506106ce908490869060040161ac65565b6000604051808303816000875af11580156106ed573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610715919081019061ad7b565b506025546028546040516000926107429290916001600160a01b0390911690602990602a9060240161adb0565b60408051601f198184030181529181526020820180516001600160e01b03167fb8aa5c7d00000000000000000000000000000000000000000000000000000000179052602154905163ca669fa760e01b81526001600160a01b039091166004820152909150737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ca669fa790602401600060405180830381600087803b1580156107e057600080fd5b505af11580156107f4573d6000803e3d6000fd5b50506020546040516319db301560e21b81526001600160a01b03909116925063676cc054915061082a908590859060040161ac65565b6000604051808303816000875af1158015610849573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610871919081019061ad7b565b50604080518082018252600881527f6761734c696d69740000000000000000000000000000000000000000000000006020808301919091528251620493e08183015283518082039092018252808401909352602554919290916000916108e191906029908690869060640161adea565b60408051601f198184030181529181526020820180516001600160e01b03167ff354b31f00000000000000000000000000000000000000000000000000000000179052602154905163ca669fa760e01b81526001600160a01b039091166004820152909150737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ca669fa790602401600060405180830381600087803b15801561097f57600080fd5b505af1158015610993573d6000803e3d6000fd5b50506040517f491cc7c200000000000000000000000000000000000000000000000000000000815260016004820181905260248201819052604482018190526064820152737109709ecfa91a80626ff3989d68f67f5b1dd12d925063491cc7c29150608401600060405180830381600087803b158015610a1257600080fd5b505af1158015610a26573d6000803e3d6000fd5b505050506025547faea6b6dd1ea232db3e0fc64d54fd642518ed2932043ff697ac7c8a83d651c7c560298585604051610a619392919061ae29565b60405180910390a26020546040516319db301560e21b81526001600160a01b039091169063676cc05490610a9b908890859060040161ac65565b6000604051808303816000875af1158015610aba573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610ae2919081019061ad7b565b506020546025546040517fd3523ea20000000000000000000000000000000000000000000000000000000081526000926001600160a01b03169163d3523ea291610b349190602990899060040161ae62565b600060405180830381865afa158015610b51573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b79919081019061ad7b565b9050610b9381805190602001208480519060200120616402565b50505050505050565b602654604051606591600091610bc89184916001600160a01b039091169060279060019060240161ac2a565b60408051601f19818403018152918152602080830180516001600160e01b031663547965cb60e11b179052815190810182526023546001600160a01b039081168252602154925163ca669fa760e01b815292166004830152919250737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ca669fa790602401600060405180830381600087803b158015610c5c57600080fd5b505af1158015610c70573d6000803e3d6000fd5b50506020546040516319db301560e21b81526001600160a01b03909116925063676cc0549150610ca6908490869060040161ac65565b6000604051808303816000875af1158015610cc5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610ced919081019061ad7b565b50602654604051606691600091610d1a9184916001600160a01b039091169060279060019060240161ac2a565b60408051601f198184030181529181526020820180516001600160e01b031663547965cb60e11b179052602154905163ca669fa760e01b81526001600160a01b039091166004820152909150737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ca669fa790602401600060405180830381600087803b158015610d9f57600080fd5b505af1158015610db3573d6000803e3d6000fd5b50506020546040516319db301560e21b81526001600160a01b03909116925063676cc0549150610de9908690859060040161ac65565b6000604051808303816000875af1158015610e08573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610e30919081019061ad7b565b50602054604080517f94cc868300000000000000000000000000000000000000000000000000000000815290516000926001600160a01b0316916394cc868391600480830192869291908290030181865afa158015610e93573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610ebb919081019061ae8d565b9050610ec981516002616482565b602654604051600091610eef9189916001600160a01b031690602790859060240161ac2a565b60408051601f198184030181529181526020820180516001600160e01b031663547965cb60e11b179052602154905163ca669fa760e01b81526001600160a01b039091166004820152909150737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ca669fa790602401600060405180830381600087803b158015610f7457600080fd5b505af1158015610f88573d6000803e3d6000fd5b50506020546040516319db301560e21b81526001600160a01b03909116925063676cc0549150610fbe908890859060040161ac65565b6000604051808303816000875af1158015610fdd573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611005919081019061ad7b565b50602060009054906101000a90046001600160a01b03166001600160a01b03166394cc86836040518163ffffffff1660e01b8152600401600060405180830381865afa158015611059573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611081919081019061ae8d565b915061108f82516001616482565b610b93826000815181106110a5576110a561af33565b602002602001015185616482565b6024805460405163ca669fa760e01b81526001600160a01b039091166004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9163ca669fa79101600060405180830381600087803b15801561110b57600080fd5b505af115801561111f573d6000803e3d6000fd5b505050507f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d60001c6001600160a01b031663f48448146040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561118157600080fd5b505af1158015611195573d6000803e3d6000fd5b50505050602060009054906101000a90046001600160a01b03166001600160a01b0316638456cb596040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156111e957600080fd5b505af11580156111fd573d6000803e3d6000fd5b50506024805460405163ca669fa760e01b81526001600160a01b039091166004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d935063ca669fa7925001600060405180830381600087803b15801561125957600080fd5b505af115801561126d573d6000803e3d6000fd5b505050507f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d60001c6001600160a01b031663f48448146040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156112cf57600080fd5b505af11580156112e3573d6000803e3d6000fd5b50505050602060009054906101000a90046001600160a01b03166001600160a01b0316633f4ba83a6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561133757600080fd5b505af115801561134b573d6000803e3d6000fd5b50505050565b6040516000602482018190526044820181905290819060640160408051601f19818403018152918152602080830180516001600160e01b03167f9060bda900000000000000000000000000000000000000000000000000000000179052815190810182526023546001600160a01b039081168252602154925163ca669fa760e01b815292166004830152919250737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ca669fa790602401600060405180830381600087803b15801561141757600080fd5b505af115801561142b573d6000803e3d6000fd5b50506040517fc31eb0e00000000000000000000000000000000000000000000000000000000081527fd92e233d000000000000000000000000000000000000000000000000000000006004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d925063c31eb0e09150602401600060405180830381600087803b1580156114b457600080fd5b505af11580156114c8573d6000803e3d6000fd5b50506020546040516319db301560e21b81526001600160a01b03909116925063676cc05491506114fe908490869060040161ac65565b6000604051808303816000875af115801561151d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261134b919081019061ad7b565b6025546026546040516000926115719290916001600160a01b039091169060279060019060240161ac2a565b60408051601f19818403018152918152602080830180516001600160e01b031663547965cb60e11b179052815190810182526023546001600160a01b039081168252602154925163ca669fa760e01b815292166004830152919250737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ca669fa790602401600060405180830381600087803b15801561160557600080fd5b505af1158015611619573d6000803e3d6000fd5b50506020546040516319db301560e21b81526001600160a01b03909116925063676cc054915061164f908490869060040161ac65565b6000604051808303816000875af115801561166e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611696919081019061ad7b565b50604080518082018252600881527f6761734c696d69740000000000000000000000000000000000000000000000006020808301919091528251620493e081830152835180820390920182526060810184526000908401818152602554945193949293909261170d9184908790879060240161af62565b60408051601f198184030181529181526020820180516001600160e01b03167ff354b31f00000000000000000000000000000000000000000000000000000000179052602154905163ca669fa760e01b81526001600160a01b039091166004820152909150737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ca669fa790602401600060405180830381600087803b1580156117ab57600080fd5b505af11580156117bf573d6000803e3d6000fd5b5050604051737109709ecfa91a80626ff3989d68f67f5b1dd12d925063f28dceb391507ec10cfd000000000000000000000000000000000000000000000000000000009061181190869060240161af7b565b60408051601f198184030181529181526020820180516001600160e01b03167fffffffff000000000000000000000000000000000000000000000000000000009485161790525160e084901b909216825261186e9160040161af7b565b600060405180830381600087803b15801561188857600080fd5b505af115801561189c573d6000803e3d6000fd5b50506020546040516319db301560e21b81526001600160a01b03909116925063676cc05491506118d2908890859060040161ac65565b6000604051808303816000875af11580156118f1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b93919081019061ad7b565b6060601680548060200260200160405190810160405280929190818152602001828054801561197157602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611953575b5050505050905090565b6025546026546040516000926119a79290916001600160a01b039091169060279060019060240161ac2a565b60408051601f19818403018152918152602080830180516001600160e01b031663547965cb60e11b179052815190810182526023546001600160a01b039081168252602154925163ca669fa760e01b815292166004830152919250737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ca669fa790602401600060405180830381600087803b158015611a3b57600080fd5b505af1158015611a4f573d6000803e3d6000fd5b50506020546040516319db301560e21b81526001600160a01b03909116925063676cc0549150611a85908490869060040161ac65565b6000604051808303816000875af1158015611aa4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611acc919081019061ad7b565b50604080516020810182526000808252602554602854935192939192611b03926001600160a01b031690602990869060240161af8e565b60408051601f198184030181529181526020820180516001600160e01b03167fb8aa5c7d00000000000000000000000000000000000000000000000000000000179052602154905163ca669fa760e01b81526001600160a01b039091166004820152909150737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ca669fa790602401600060405180830381600087803b158015611ba157600080fd5b505af1158015611bb5573d6000803e3d6000fd5b50506040517fc31eb0e00000000000000000000000000000000000000000000000000000000081527fd92e233d000000000000000000000000000000000000000000000000000000006004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d925063c31eb0e091506024015b600060405180830381600087803b158015611c3f57600080fd5b505af1158015611c53573d6000803e3d6000fd5b50506020546040516319db301560e21b81526001600160a01b03909116925063676cc0549150611c89908690859060040161ac65565b6000604051808303816000875af1158015611ca8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611cd0919081019061ad7b565b5050505050565b604080518082018252600381527f544b4e000000000000000000000000000000000000000000000000000000000060208083019190915291516d13570000000000000000000000009281019290925261dddd9160659060009060340160408051601f198184030181528282018252600583527f455243323000000000000000000000000000000000000000000000000000000060208401529051909250601290600090611d929088908890889088908890889060240161afc8565b60408051601f19818403018152918152602080830180516001600160e01b03167f6e9e2d3f00000000000000000000000000000000000000000000000000000000179052815190810182526023546001600160a01b039081168252602154925163ca669fa760e01b815292166004830152919250737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ca669fa790602401600060405180830381600087803b158015611e3f57600080fd5b505af1158015611e53573d6000803e3d6000fd5b50506020546040516319db301560e21b81526001600160a01b03909116925063676cc0549150611e89908490869060040161ac65565b6000604051808303816000875af1158015611ea8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611ed0919081019061ad7b565b506020546040517fe9d6c5ba0000000000000000000000000000000000000000000000000000000081526001600160a01b038a81166004830152600092169063e9d6c5ba90602401600060405180830381865afa158015611f35573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611f5d919081019061b042565b50505050509050611f6d816164da565b6040516001600160a01b038a1660248201526000604482018190529060640160408051601f198184030181529181526020820180516001600160e01b03167f9060bda900000000000000000000000000000000000000000000000000000000179052602154905163ca669fa760e01b81526001600160a01b039091166004820152909150737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ca669fa790602401600060405180830381600087803b15801561202a57600080fd5b505af115801561203e573d6000803e3d6000fd5b50506040517f491cc7c200000000000000000000000000000000000000000000000000000000815260016004820181905260248201819052604482018190526064820152737109709ecfa91a80626ff3989d68f67f5b1dd12d925063491cc7c29150608401600060405180830381600087803b1580156120bd57600080fd5b505af11580156120d1573d6000803e3d6000fd5b5050604051600081526001600160a01b038d1692507f9542d02d4224477c9e9b53628bf5eae8b59520ea6bf2809cec7f24f76bba8ff8915060200160405180910390a26020546040516319db301560e21b81526001600160a01b039091169063676cc05490612146908690859060040161ac65565b6000604051808303816000875af1158015612165573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261218d919081019061ad7b565b506020546040517fe9d6c5ba0000000000000000000000000000000000000000000000000000000081526001600160a01b038c811660048301529091169063e9d6c5ba90602401600060405180830381865afa1580156121f1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612219919081019061b042565b5093955061222d9350859250616554915050565b6040516001600160a01b038b1660248201526001604482015260009060640160408051601f198184030181529181526020820180516001600160e01b03167f9060bda900000000000000000000000000000000000000000000000000000000179052602154905163ca669fa760e01b81526001600160a01b039091166004820152909150737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ca669fa790602401600060405180830381600087803b1580156122ea57600080fd5b505af11580156122fe573d6000803e3d6000fd5b50506040517f491cc7c200000000000000000000000000000000000000000000000000000000815260016004820181905260248201819052604482018190526064820152737109709ecfa91a80626ff3989d68f67f5b1dd12d925063491cc7c29150608401600060405180830381600087803b15801561237d57600080fd5b505af1158015612391573d6000803e3d6000fd5b5050604051600181526001600160a01b038e1692507f9542d02d4224477c9e9b53628bf5eae8b59520ea6bf2809cec7f24f76bba8ff8915060200160405180910390a26020546040516319db301560e21b81526001600160a01b039091169063676cc05490612406908790859060040161ac65565b6000604051808303816000875af1158015612425573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261244d919081019061ad7b565b506020546040517fe9d6c5ba0000000000000000000000000000000000000000000000000000000081526001600160a01b038d811660048301529091169063e9d6c5ba90602401600060405180830381865afa1580156124b1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526124d9919081019061b042565b509396506124ed93508692506164da915050565b5050505050505050505050565b6060601e805480602002602001604051908101604052809291908181526020016000905b8282101561263357600084815260208082206040805180820182526002870290920180546001600160a01b03168352600181018054835181870281018701909452808452939591948681019491929084015b8282101561261c57838290600052602060002001805461258f9061ab3c565b80601f01602080910402602001604051908101604052809291908181526020018280546125bb9061ab3c565b80156126085780601f106125dd57610100808354040283529160200191612608565b820191906000526020600020905b8154815290600101906020018083116125eb57829003601f168201915b505050505081526020019060010190612570565b50505050815250508152602001906001019061251e565b50505050905090565b60606018805480602002602001604051908101604052809291908181526020018280548015611971576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311611953575050505050905090565b60606017805480602002602001604051908101604052809291908181526020018280548015611971576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311611953575050505050905090565b6024805460405163ca669fa760e01b81526001600160a01b039091166004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9163ca669fa79101600060405180830381600087803b15801561275457600080fd5b505af1158015612768573d6000803e3d6000fd5b505050507f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d60001c6001600160a01b031663f48448146040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156127ca57600080fd5b505af11580156127de573d6000803e3d6000fd5b505060205460255460405163547965cb60e11b81526001600160a01b03909216935063a8f2cb96925061281b91600190602790829060040161ac2a565b600060405180830381600087803b15801561283557600080fd5b505af1158015612849573d6000803e3d6000fd5b505060225460405163ca669fa760e01b81526001600160a01b039091166004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d925063ca669fa79150602401600060405180830381600087803b1580156128a657600080fd5b505af11580156128ba573d6000803e3d6000fd5b505050507f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d60001c6001600160a01b031663f48448146040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561291c57600080fd5b505af1158015612930573d6000803e3d6000fd5b505060205460255460405163547965cb60e11b81526001600160a01b03909216935063a8f2cb96925061296d91600190602790829060040161ac2a565b600060405180830381600087803b15801561133757600080fd5b6025546026546040516000926129b39290916001600160a01b039091169060279060019060240161ac2a565b60408051601f19818403018152918152602080830180516001600160e01b031663547965cb60e11b179052815190810182526023546001600160a01b039081168252602154925163ca669fa760e01b815292166004830152919250737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ca669fa790602401600060405180830381600087803b158015612a4757600080fd5b505af1158015612a5b573d6000803e3d6000fd5b50506020546040516319db301560e21b81526001600160a01b03909116925063676cc0549150612a91908490869060040161ac65565b6000604051808303816000875af1158015612ab0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612ad8919081019061ad7b565b5060006040518060200160405280600081525090506000602554826000604051602401612b079392919061b10c565b60408051601f198184030181529181526020820180516001600160e01b03167f10d29b9e00000000000000000000000000000000000000000000000000000000179052602154905163ca669fa760e01b81526001600160a01b039091166004820152909150737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ca669fa7906024015b600060405180830381600087803b158015612ba657600080fd5b505af1158015612bba573d6000803e3d6000fd5b5050604051737109709ecfa91a80626ff3989d68f67f5b1dd12d925063f28dceb391507ec10cfd0000000000000000000000000000000000000000000000000000000090612c0c90869060240161af7b565b60408051601f198184030181529181526020820180516001600160e01b03167fffffffff000000000000000000000000000000000000000000000000000000009485161790525160e084901b9092168252611c259160040161af7b565b6060601b805480602002602001604051908101604052809291908181526020016000905b828210156126335783829060005260206000209060020201604051806040016040529081600082018054612cc09061ab3c565b80601f0160208091040260200160405190810160405280929190818152602001828054612cec9061ab3c565b8015612d395780601f10612d0e57610100808354040283529160200191612d39565b820191906000526020600020905b815481529060010190602001808311612d1c57829003601f168201915b5050505050815260200160018201805480602002602001604051908101604052809291908181526020018280548015612dbe57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b03191681526020019060040190602082600301049283019260010382029150808411612d805790505b50505050508152505081526020019060010190612c8d565b6000612e266040518060400160405280600c81526020017f52656769737472792e736f6c0000000000000000000000000000000000000000815250604051806020016040528060008152506163e3565b6040517fc31eb0e00000000000000000000000000000000000000000000000000000000081527fd92e233d0000000000000000000000000000000000000000000000000000000060048201529091508190737109709ecfa91a80626ff3989d68f67f5b1dd12d9063c31eb0e090602401600060405180830381600087803b158015612eb057600080fd5b505af1158015612ec4573d6000803e3d6000fd5b50506021546023546040517fc0c53b8b000000000000000000000000000000000000000000000000000000008152600060048201526001600160a01b0392831660248201529082166044820152908416925063c0c53b8b9150606401600060405180830381600087803b158015612f3a57600080fd5b505af1158015612f4e573d6000803e3d6000fd5b50506040517fc31eb0e00000000000000000000000000000000000000000000000000000000081527fd92e233d000000000000000000000000000000000000000000000000000000006004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d925063c31eb0e09150602401600060405180830381600087803b158015612fd757600080fd5b505af1158015612feb573d6000803e3d6000fd5b50506022546023546040517fc0c53b8b0000000000000000000000000000000000000000000000000000000081526001600160a01b039283166004820152600060248201529082166044820152908416925063c0c53b8b9150606401600060405180830381600087803b15801561306157600080fd5b505af1158015613075573d6000803e3d6000fd5b50506040517fc31eb0e00000000000000000000000000000000000000000000000000000000081527fd92e233d000000000000000000000000000000000000000000000000000000006004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d925063c31eb0e09150602401600060405180830381600087803b1580156130fe57600080fd5b505af1158015613112573d6000803e3d6000fd5b50506022546021546040517fc0c53b8b0000000000000000000000000000000000000000000000000000000081526001600160a01b039283166004820152908216602482015260006044820152908416925063c0c53b8b9150606401600060405180830381600087803b15801561318857600080fd5b505af115801561319c573d6000803e3d6000fd5b505050505050565b6060601a805480602002602001604051908101604052809291908181526020016000905b828210156126335783829060005260206000200180546131e79061ab3c565b80601f01602080910402602001604051908101604052809291908181526020018280546132139061ab3c565b80156132605780601f1061323557610100808354040283529160200191613260565b820191906000526020600020905b81548152906001019060200180831161324357829003601f168201915b5050505050815260200190600101906131c8565b604080518082018252600381527f544b4e000000000000000000000000000000000000000000000000000000000060208083019190915291516d13570000000000000000000000009281019290925261dddd9160659060009060340160408051601f198184030181528282018252600583527f45524332300000000000000000000000000000000000000000000000000000006020840152905190925060129060009061332f9088908890889088908890889060240161afc8565b60408051601f19818403018152918152602080830180516001600160e01b03167f6e9e2d3f00000000000000000000000000000000000000000000000000000000179052815190810182526023546001600160a01b039081168252602154925163ca669fa760e01b815292166004830152919250737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ca669fa790602401600060405180830381600087803b1580156133dc57600080fd5b505af11580156133f0573d6000803e3d6000fd5b50506040517f491cc7c200000000000000000000000000000000000000000000000000000000815260016004820181905260248201819052604482018190526064820152737109709ecfa91a80626ff3989d68f67f5b1dd12d925063491cc7c29150608401600060405180830381600087803b15801561346f57600080fd5b505af1158015613483573d6000803e3d6000fd5b50505050876001600160a01b03167fa9edd2fd29fc8cab6015c2725afa5bc5f3b8d709a02d9e89990ef20fd781e3678685898b6040516134c6949392919061b137565b60405180910390a26020546040516319db301560e21b81526001600160a01b039091169063676cc05490613500908490869060040161ac65565b6000604051808303816000875af115801561351f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613547919081019061ad7b565b506020546040517fe9d6c5ba0000000000000000000000000000000000000000000000000000000081526001600160a01b038a81166004830152600092839283928392839283929091169063e9d6c5ba90602401600060405180830381865afa1580156135b8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526135e0919081019061b042565b9550955095509550955095506135f5866164da565b6135ff858e6165a6565b613609848d616482565b61362183805190602001208c80519060200120616402565b61362b828b6165a6565b61363b8160ff168a60ff16616482565b5050505050505050505050505050565b6060601d805480602002602001604051908101604052809291908181526020016000905b828210156126335760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561371957602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116136db5790505b5050505050815250508152602001906001019061366f565b60208054604080517fa217fddf0000000000000000000000000000000000000000000000000000000081529051613851936001600160a01b03909316926391d1485492849263a217fddf926004808401939192918290030181865afa15801561379e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137c2919061b16b565b60225460405160e084901b7fffffffff0000000000000000000000000000000000000000000000000000000016815260048101929092526001600160a01b031660248201526044015b602060405180830381865afa158015613828573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061384c919061b184565b6164da565b60208054604080517fe63ab1e900000000000000000000000000000000000000000000000000000000815290516138be936001600160a01b03909316926391d1485492849263e63ab1e9926004808401939192918290030181865afa15801561379e573d6000803e3d6000fd5b60208054604080517f04421823000000000000000000000000000000000000000000000000000000008152905161399c936001600160a01b03909316926391d148549284926304421823926004808401939192918290030181865afa15801561392b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061394f919061b16b565b60215460405160e084901b7fffffffff0000000000000000000000000000000000000000000000000000000016815260048101929092526001600160a01b0316602482015260440161380b565b60208054604080517f2c78f74c0000000000000000000000000000000000000000000000000000000081529051613a34936001600160a01b0390931692632c78f74c92600480820193918290030181865afa1580156139ff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a23919061b1b7565b6021546001600160a01b03166165f8565b60208054604080517f6bf3d05a0000000000000000000000000000000000000000000000000000000081529051613acc936001600160a01b0390931692636bf3d05a92600480820193918290030181865afa158015613a97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613abb919061b1b7565b6023546001600160a01b03166165f8565b565b60208054604080517f5c975abb0000000000000000000000000000000000000000000000000000000081529051613b5a936001600160a01b0390931692635c975abb92600480820193918290030181865afa158015613b31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b55919061b184565b616554565b60225460405163ca669fa760e01b81526001600160a01b039091166004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ca669fa790602401600060405180830381600087803b158015613bb357600080fd5b505af1158015613bc7573d6000803e3d6000fd5b50505050602060009054906101000a90046001600160a01b03166001600160a01b0316638456cb596040518163ffffffff1660e01b8152600401600060405180830381600087803b158015613c1b57600080fd5b505af1158015613c2f573d6000803e3d6000fd5b505060208054604080517f5c975abb0000000000000000000000000000000000000000000000000000000081529051613c9795506001600160a01b039092169350635c975abb9260048083019391928290030181865afa158015613828573d6000803e3d6000fd5b60225460405163ca669fa760e01b81526001600160a01b039091166004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ca669fa790602401600060405180830381600087803b158015613cf057600080fd5b505af1158015613d04573d6000803e3d6000fd5b50505050602060009054906101000a90046001600160a01b03166001600160a01b0316633f4ba83a6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015613d5857600080fd5b505af1158015613d6c573d6000803e3d6000fd5b505060208054604080517f5c975abb0000000000000000000000000000000000000000000000000000000081529051613acc95506001600160a01b039092169350635c975abb9260048083019391928290030181865afa158015613b31573d6000803e3d6000fd5b604080516020810182526177778152602154915163ca669fa760e01b81526001600160a01b03909216600483015290737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ca669fa790602401600060405180830381600087803b158015613e3c57600080fd5b505af1158015613e50573d6000803e3d6000fd5b50506040517fc31eb0e00000000000000000000000000000000000000000000000000000000081527fddb5de5e000000000000000000000000000000000000000000000000000000006004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d925063c31eb0e09150602401600060405180830381600087803b158015613ed957600080fd5b505af1158015613eed573d6000803e3d6000fd5b50506020805460408051928301815260008352516319db301560e21b81526001600160a01b03909116935063676cc0549250613f2d91859160040161ac65565b6000604051808303816000875af1158015613f4c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613f74919081019061ad7b565b5050565b6060601c805480602002602001604051908101604052809291908181526020016000905b828210156126335760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561404657602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116140085790505b50505050508152505081526020019060010190613f9c565b60255460265460405160009261408a9290916001600160a01b039091169060279060019060240161ac2a565b60408051601f19818403018152918152602080830180516001600160e01b031663547965cb60e11b179052815190810182526023546001600160a01b039081168252602154925163ca669fa760e01b815292166004830152919250737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ca669fa790602401600060405180830381600087803b15801561411e57600080fd5b505af1158015614132573d6000803e3d6000fd5b50506040517f491cc7c200000000000000000000000000000000000000000000000000000000815260016004820181905260248201819052604482018190526064820152737109709ecfa91a80626ff3989d68f67f5b1dd12d925063491cc7c29150608401600060405180830381600087803b1580156141b157600080fd5b505af11580156141c5573d6000803e3d6000fd5b5050602554604051600181529092507fc98ceea113f96d4762d49d2885a10d7d0d16d07243bb17df97e53e9035e1415e915060200160405180910390a26020546040516319db301560e21b81526001600160a01b039091169063676cc05490614234908490869060040161ac65565b6000604051808303816000875af1158015614253573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261427b919081019061ad7b565b50602054604080517f94cc868300000000000000000000000000000000000000000000000000000000815290516000926001600160a01b0316916394cc868391600480830192869291908290030181865afa1580156142de573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052614306919081019061ae8d565b905061431481516001616482565b61433a8160008151811061432a5761432a61af33565b6020026020010151602554616482565b6025546026546040516000926143659290916001600160a01b0390911690602790859060240161ac2a565b60408051601f198184030181529181526020820180516001600160e01b031663547965cb60e11b179052602154905163ca669fa760e01b81526001600160a01b039091166004820152909150737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ca669fa790602401600060405180830381600087803b1580156143ea57600080fd5b505af11580156143fe573d6000803e3d6000fd5b50506040517f491cc7c200000000000000000000000000000000000000000000000000000000815260016004820181905260248201819052604482018190526064820152737109709ecfa91a80626ff3989d68f67f5b1dd12d925063491cc7c29150608401600060405180830381600087803b15801561447d57600080fd5b505af1158015614491573d6000803e3d6000fd5b5050602554604051600081529092507fc98ceea113f96d4762d49d2885a10d7d0d16d07243bb17df97e53e9035e1415e915060200160405180910390a26020546040516319db301560e21b81526001600160a01b039091169063676cc05490614500908690859060040161ac65565b6000604051808303816000875af115801561451f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052614547919081019061ad7b565b50602060009054906101000a90046001600160a01b03166001600160a01b03166394cc86836040518163ffffffff1660e01b8152600401600060405180830381865afa15801561459b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526145c3919081019061ae8d565b915061134b82516000616482565b60225460405163ca669fa760e01b81526001600160a01b039091166004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ca669fa790602401600060405180830381600087803b15801561462a57600080fd5b505af115801561463e573d6000803e3d6000fd5b50505050602060009054906101000a90046001600160a01b03166001600160a01b0316638456cb596040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561469257600080fd5b505af11580156146a6573d6000803e3d6000fd5b5050604080516020810182526023546001600160a01b039081168252602154925163ca669fa760e01b8152921660048301529250737109709ecfa91a80626ff3989d68f67f5b1dd12d915063ca669fa7906024015b600060405180830381600087803b15801561471557600080fd5b505af1158015614729573d6000803e3d6000fd5b505050507f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d60001c6001600160a01b031663f48448146040518163ffffffff1660e01b8152600401600060405180830381600087803b158015613ed957600080fd5b6025546026546040516000926147b79290916001600160a01b039091169060279060019060240161ac2a565b60408051601f19818403018152918152602080830180516001600160e01b031663547965cb60e11b179052815190810182526023546001600160a01b039081168252602154925163ca669fa760e01b815292166004830152919250737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ca669fa790602401600060405180830381600087803b15801561484b57600080fd5b505af115801561485f573d6000803e3d6000fd5b50506020546040516319db301560e21b81526001600160a01b03909116925063676cc0549150614895908490869060040161ac65565b6000604051808303816000875af11580156148b4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526148dc919081019061ad7b565b506025546028546040516000926149099290916001600160a01b0390911690602990602a9060240161adb0565b60408051601f198184030181529181526020820180516001600160e01b03167fb8aa5c7d00000000000000000000000000000000000000000000000000000000179052602154905163ca669fa760e01b81526001600160a01b039091166004820152909150737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ca669fa790602401600060405180830381600087803b1580156149a757600080fd5b505af11580156149bb573d6000803e3d6000fd5b50506040517f491cc7c200000000000000000000000000000000000000000000000000000000815260016004820181905260248201819052604482018190526064820152737109709ecfa91a80626ff3989d68f67f5b1dd12d925063491cc7c29150608401600060405180830381600087803b158015614a3a57600080fd5b505af1158015614a4e573d6000803e3d6000fd5b505050506025547f20319e67335097991b9d6add94a71632118372c1a0b5650654f069668dce25816029602a604051614a8892919061b1d4565b60405180910390a26020546040516319db301560e21b81526001600160a01b039091169063676cc05490614ac2908590859060040161ac65565b6000604051808303816000875af1158015614ae1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052614b09919081019061ad7b565b506020546025546040517f5cf92c9f00000000000000000000000000000000000000000000000000000000815260009283926001600160a01b0390911691635cf92c9f91614b5c9160299060040161b1f9565b6040805180830381865afa158015614b78573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614b9c919061b212565b91509150614ba9826164da565b602854611cd09082906001600160a01b03166165f8565b60606019805480602002602001604051908101604052809291908181526020016000905b82821015612633578382906000526020600020018054614c039061ab3c565b80601f0160208091040260200160405190810160405280929190818152602001828054614c2f9061ab3c565b8015614c7c5780601f10614c5157610100808354040283529160200191614c7c565b820191906000526020600020905b815481529060010190602001808311614c5f57829003601f168201915b505050505081526020019060010190614be4565b60085460009060ff1615614ca8575060085460ff1690565b6040517f667f9d70000000000000000000000000000000000000000000000000000000008152737109709ecfa91a80626ff3989d68f67f5b1dd12d600482018190527f6661696c65640000000000000000000000000000000000000000000000000000602483015260009163667f9d7090604401602060405180830381865afa158015614d39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614d5d919061b16b565b1415905090565b602554602654604051600092614d909290916001600160a01b039091169060279060019060240161ac2a565b60408051601f19818403018152918152602080830180516001600160e01b031663547965cb60e11b179052815190810182526023546001600160a01b039081168252602154925163ca669fa760e01b815292166004830152919250737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ca669fa790602401600060405180830381600087803b158015614e2457600080fd5b505af1158015614e38573d6000803e3d6000fd5b50506020546040516319db301560e21b81526001600160a01b03909116925063676cc0549150614e6e908490869060040161ac65565b6000604051808303816000875af1158015614e8d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052614eb5919081019061ad7b565b50604080518082018252600981527f626c6f636b54696d65000000000000000000000000000000000000000000000060208083019190915282516005818301528351808203909201825280840190935260255491929091600091614f2091908590859060640161b249565b60408051601f198184030181529181526020820180516001600160e01b03167f2259e9e500000000000000000000000000000000000000000000000000000000179052602154905163ca669fa760e01b81526001600160a01b039091166004820152909150737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ca669fa790602401600060405180830381600087803b158015614fbe57600080fd5b505af1158015614fd2573d6000803e3d6000fd5b50506040517f491cc7c200000000000000000000000000000000000000000000000000000000815260016004820181905260248201819052604482018190526064820152737109709ecfa91a80626ff3989d68f67f5b1dd12d925063491cc7c29150608401600060405180830381600087803b15801561505157600080fd5b505af1158015615065573d6000803e3d6000fd5b505050506025547f40c66d0452b5a398a7ebd687f5c3b020e21aa673375087ff6eb7ad214cfee634848460405161509d92919061b262565b60405180910390a26020546040516319db301560e21b81526001600160a01b039091169063676cc054906150d7908790859060040161ac65565b6000604051808303816000875af11580156150f6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261511e919081019061ad7b565b506020546025546040517f7066b18d0000000000000000000000000000000000000000000000000000000081526000926001600160a01b031691637066b18d9161516d9190889060040161b287565b600060405180830381865afa15801561518a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526151b2919081019061ad7b565b905061319c81805190602001208480519060200120616402565b604080518082018252600381527f544b4e000000000000000000000000000000000000000000000000000000000060208083019190915291516d135700000000000000000000000092810192909252600091606590839060340160408051601f198184030181528282018252600583527f4552433230000000000000000000000000000000000000000000000000000000602084015290519092506012906000906152859088908890889088908890889060240161afc8565b60408051601f19818403018152918152602080830180516001600160e01b03167f6e9e2d3f00000000000000000000000000000000000000000000000000000000179052815190810182526023546001600160a01b039081168252602154925163ca669fa760e01b815292166004830152919250737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ca669fa790602401600060405180830381600087803b15801561533257600080fd5b505af1158015615346573d6000803e3d6000fd5b50506040517fc31eb0e00000000000000000000000000000000000000000000000000000000081527fd92e233d000000000000000000000000000000000000000000000000000000006004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d925063c31eb0e091506024015b600060405180830381600087803b1580156153d057600080fd5b505af11580156153e4573d6000803e3d6000fd5b50506020546040516319db301560e21b81526001600160a01b03909116925063676cc054915061541a908490869060040161ac65565b6000604051808303816000875af1158015615439573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052615461919081019061ad7b565b505050505050505050565b604080518082018252600381527f544b4e000000000000000000000000000000000000000000000000000000000060208083019190915282518082018452600080825284518086018652600581527f455243323000000000000000000000000000000000000000000000000000000093810193909352935161dddd9460659391601291906155089088908890889088908890889060240161afc8565b60408051601f19818403018152918152602080830180516001600160e01b03167f6e9e2d3f00000000000000000000000000000000000000000000000000000000179052815190810182526023546001600160a01b039081168252602154925163ca669fa760e01b815292166004830152919250737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ca669fa790602401600060405180830381600087803b1580156155b557600080fd5b505af11580156155c9573d6000803e3d6000fd5b505060405160206024820152601e60448201527f4f726967696e20616464726573732063616e6e6f7420626520656d70747900006064820152737109709ecfa91a80626ff3989d68f67f5b1dd12d925063f28dceb391507ec10cfd00000000000000000000000000000000000000000000000000000000906084015b60408051601f198184030181529181526020820180516001600160e01b03167fffffffff000000000000000000000000000000000000000000000000000000009485161790525160e084901b90921682526153b69160040161af7b565b6040805160208082018352600080835292516d13570000000000000000000000009181019190915261dddd9260659160340160408051601f198184030181528282018252600583527f4552433230000000000000000000000000000000000000000000000000000000602084015290519092506012906000906157339088908890889088908890889060240161afc8565b60408051601f19818403018152918152602080830180516001600160e01b03167f6e9e2d3f00000000000000000000000000000000000000000000000000000000179052815190810182526023546001600160a01b039081168252602154925163ca669fa760e01b815292166004830152919250737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ca669fa790602401600060405180830381600087803b1580156157e057600080fd5b505af11580156157f4573d6000803e3d6000fd5b505060405160206024820152601660448201527f53796d626f6c2063616e6e6f7420626520656d707479000000000000000000006064820152737109709ecfa91a80626ff3989d68f67f5b1dd12d925063f28dceb391507ec10cfd0000000000000000000000000000000000000000000000000000000090608401615645565b6025546026546040516000926158a09290916001600160a01b039091169060279060019060240161ac2a565b60408051601f19818403018152918152602080830180516001600160e01b031663547965cb60e11b179052815190810182526023546001600160a01b039081168252602154925163ca669fa760e01b815292166004830152919250737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ca669fa790602401600060405180830381600087803b15801561593457600080fd5b505af1158015615948573d6000803e3d6000fd5b50506020546040516319db301560e21b81526001600160a01b03909116925063676cc054915061597e908490869060040161ac65565b6000604051808303816000875af115801561599d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526159c5919081019061ad7b565b506040805160208101825260008082526025546028549351929391926159fc926001600160a01b0316908590602a9060240161b2a0565b60408051601f198184030181529181526020820180516001600160e01b03167fb8aa5c7d00000000000000000000000000000000000000000000000000000000179052602154905163ca669fa760e01b81526001600160a01b039091166004820152909150737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ca669fa790602401612b8c565b604080516020810182526023546001600160a01b03908116825260248054935163ca669fa760e01b81529390911660048401529091737109709ecfa91a80626ff3989d68f67f5b1dd12d9163ca669fa791016146fb565b60606015805480602002602001604051908101604052809291908181526020018280548015611971576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311611953575050505050905090565b602554602654604051600092615b689290916001600160a01b039091169060279060019060240161ac2a565b60408051601f19818403018152918152602080830180516001600160e01b031663547965cb60e11b179052815190810182526023546001600160a01b039081168252602154925163ca669fa760e01b815292166004830152919250737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ca669fa790602401600060405180830381600087803b158015615bfc57600080fd5b505af1158015615c10573d6000803e3d6000fd5b50506020546040516319db301560e21b81526001600160a01b03909116925063676cc0549150615c46908490869060040161ac65565b6000604051808303816000875af1158015615c65573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052615c8d919081019061ad7b565b50602554602854604051600092615cba9290916001600160a01b0390911690602990602a9060240161adb0565b60408051601f198184030181529181526020820180516001600160e01b03167fb8aa5c7d00000000000000000000000000000000000000000000000000000000179052602154905163ca669fa760e01b81526001600160a01b039091166004820152909150737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ca669fa790602401600060405180830381600087803b158015615d5857600080fd5b505af1158015615d6c573d6000803e3d6000fd5b50506020546040516319db301560e21b81526001600160a01b03909116925063676cc0549150615da2908590859060040161ac65565b6000604051808303816000875af1158015615dc1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052615de9919081019061ad7b565b506020546025546040517f5cf92c9f0000000000000000000000000000000000000000000000000000000081526000926001600160a01b031691635cf92c9f91615e39919060299060040161b1f9565b6040805180830381865afa158015615e55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190615e79919061b212565b509050615e85816164da565b600060255460296000604051602401615ea09392919061b2c8565b60408051601f198184030181529181526020820180516001600160e01b03167f10d29b9e00000000000000000000000000000000000000000000000000000000179052602154905163ca669fa760e01b81526001600160a01b039091166004820152909150737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ca669fa790602401600060405180830381600087803b158015615f3e57600080fd5b505af1158015615f52573d6000803e3d6000fd5b50506040517f491cc7c200000000000000000000000000000000000000000000000000000000815260016004820181905260248201819052604482018190526064820152737109709ecfa91a80626ff3989d68f67f5b1dd12d925063491cc7c29150608401600060405180830381600087803b158015615fd157600080fd5b505af1158015615fe5573d6000803e3d6000fd5b505050507f6db122b2555e642c944e09ae6d733a3f7600404765f612912f72b3c921c0b88c602a604051616019919061b2e1565b60405180910390a16020546040516319db301560e21b81526001600160a01b039091169063676cc05490616053908790859060040161ac65565b6000604051808303816000875af1158015616072573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261609a919081019061ad7b565b506020546025546040517f5cf92c9f0000000000000000000000000000000000000000000000000000000081526001600160a01b0390921691635cf92c9f916160e89160299060040161b1f9565b6040805180830381865afa158015616104573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190616128919061b212565b50915061613482616554565b60006025546029600160405160240161614f9392919061b2c8565b60408051601f198184030181529181526020820180516001600160e01b03167f10d29b9e00000000000000000000000000000000000000000000000000000000179052602154905163ca669fa760e01b81526001600160a01b039091166004820152909150737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ca669fa790602401600060405180830381600087803b1580156161ed57600080fd5b505af1158015616201573d6000803e3d6000fd5b50506040517f491cc7c200000000000000000000000000000000000000000000000000000000815260016004820181905260248201819052604482018190526064820152737109709ecfa91a80626ff3989d68f67f5b1dd12d925063491cc7c29150608401600060405180830381600087803b15801561628057600080fd5b505af1158015616294573d6000803e3d6000fd5b505050507f6db122b2555e642c944e09ae6d733a3f7600404765f612912f72b3c921c0b88c602a6040516162c8919061b2e1565b60405180910390a16020546040516319db301560e21b81526001600160a01b039091169063676cc05490616302908890859060040161ac65565b6000604051808303816000875af1158015616321573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052616349919081019061ad7b565b506020546025546040517f5cf92c9f0000000000000000000000000000000000000000000000000000000081526001600160a01b0390921691635cf92c9f916163979160299060040161b1f9565b6040805180830381865afa1580156163b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906163d7919061b212565b50925061319c836164da565b60006163ed61a6d5565b6163f8848483616659565b9150505b92915050565b6040517f7c84c69b0000000000000000000000000000000000000000000000000000000081526004810183905260248101829052737109709ecfa91a80626ff3989d68f67f5b1dd12d90637c84c69b906044015b60006040518083038186803b15801561646e57600080fd5b505afa15801561319c573d6000803e3d6000fd5b6040517f98296c540000000000000000000000000000000000000000000000000000000081526004810183905260248101829052737109709ecfa91a80626ff3989d68f67f5b1dd12d906398296c5490604401616456565b6040517f0c9fd5810000000000000000000000000000000000000000000000000000000081528115156004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d90630c9fd581906024015b60006040518083038186803b15801561654057600080fd5b505afa158015611cd0573d6000803e3d6000fd5b6040517fa59828850000000000000000000000000000000000000000000000000000000081528115156004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063a598288590602401616528565b6040517ff320d963000000000000000000000000000000000000000000000000000000008152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063f320d96390616456908590859060040161b262565b6040517f515361f60000000000000000000000000000000000000000000000000000000081526001600160a01b03808416600483015282166024820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063515361f690604401616456565b60008061666685846166d4565b90506166c96040518060400160405280601d81526020017f4552433139363750726f78792e736f6c3a4552433139363750726f787900000081525082866040516020016166b492919061b2f4565b604051602081830303815290604052856166e0565b9150505b9392505050565b60006166cd838361670e565b60c08101515160009015616704576166fd84848460c00151616729565b90506166cd565b6166fd84846168cf565b600061671a83836169ba565b6166cd838360200151846166e0565b6000806167346169c6565b905060006167428683616a99565b905060006167598260600151836020015185616f3f565b9050600061676983838989617151565b9050600061677682617fce565b602081015181519192509060030b156167e9578982604001516040516020016167a092919061b316565b60408051601f19818403018152908290527f08c379a00000000000000000000000000000000000000000000000000000000082526167e09160040161af7b565b60405180910390fd5b600061682c6040518060400160405280601581526020017f4465706c6f79656420746f20616464726573733a20000000000000000000000081525083600161819d565b6040517fc6ce059d000000000000000000000000000000000000000000000000000000008152909150737109709ecfa91a80626ff3989d68f67f5b1dd12d9063c6ce059d9061687f90849060040161af7b565b602060405180830381865afa15801561689c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906168c0919061b1b7565b9b9a5050505050505050505050565b6040517f8d1cc9250000000000000000000000000000000000000000000000000000000081526000908190737109709ecfa91a80626ff3989d68f67f5b1dd12d90638d1cc9259061692490879060040161af7b565b600060405180830381865afa158015616941573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052616969919081019061ad7b565b90506000616997828560405160200161698392919061b397565b604051602081830303815290604052618395565b90506001600160a01b0381166163f85784846040516020016167a092919061b3c6565b613f74828260006183a8565b604080518082018252600381527f6f75740000000000000000000000000000000000000000000000000000000000602082015290517fd145736c000000000000000000000000000000000000000000000000000000008152606091737109709ecfa91a80626ff3989d68f67f5b1dd12d91829063d145736c90616a4d90849060040161b471565b600060405180830381865afa158015616a6a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052616a92919081019061ad7b565b9250505090565b616acb6040518060a0016040528060608152602001606081526020016060815260200160608152602001606081525090565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d9050616b166040518060a0016040528060608152602001606081526020016060815260200160608152602001606081525090565b616b1f856184ab565b60208201526000616b2f86618890565b90506000836001600160a01b031663d930a0e66040518163ffffffff1660e01b8152600401600060405180830381865afa158015616b71573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052616b99919081019061ad7b565b86838560200151604051602001616bb3949392919061b4b8565b60408051601f19818403018152908290527f60f9bb1100000000000000000000000000000000000000000000000000000000825291506000906001600160a01b038616906360f9bb1190616c0b90859060040161af7b565b600060405180830381865afa158015616c28573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052616c50919081019061ad7b565b6040517fdb4235f60000000000000000000000000000000000000000000000000000000081529091506001600160a01b0386169063db4235f690616c9890849060040161b5bc565b602060405180830381865afa158015616cb5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190616cd9919061b184565b616cee57816040516020016167a0919061b60e565b6040517f49c4fac80000000000000000000000000000000000000000000000000000000081526001600160a01b038616906349c4fac890616d3390849060040161b6a0565b600060405180830381865afa158015616d50573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052616d78919081019061ad7b565b84526040517fdb4235f60000000000000000000000000000000000000000000000000000000081526001600160a01b0386169063db4235f690616dbf90849060040161b6f2565b602060405180830381865afa158015616ddc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190616e00919061b184565b15616e95576040517f49c4fac80000000000000000000000000000000000000000000000000000000081526001600160a01b038616906349c4fac890616e4a90849060040161b6f2565b600060405180830381865afa158015616e67573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052616e8f919081019061ad7b565b60408501525b846001600160a01b03166349c4fac8828660000151604051602001616eba919061b744565b6040516020818303038152906040526040518363ffffffff1660e01b8152600401616ee692919061b262565b600060405180830381865afa158015616f03573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052616f2b919081019061ad7b565b606085015250608083015250949350505050565b60408051600480825260a0820190925260609160009190816020015b6060815260200190600190039081616f5b5790505090506040518060400160405280600481526020017f677265700000000000000000000000000000000000000000000000000000000081525081600081518110616fbb57616fbb61af33565b60200260200101819052506040518060400160405280600381526020017f2d726c00000000000000000000000000000000000000000000000000000000008152508160018151811061700f5761700f61af33565b60200260200101819052508460405160200161702b919061b7b0565b6040516020818303038152906040528160028151811061704d5761704d61af33565b602002602001018190525082604051602001617069919061b81c565b6040516020818303038152906040528160038151811061708b5761708b61af33565b602002602001018190525060006170a182617fce565b602080820151604080518082018252600581527f2e6a736f6e00000000000000000000000000000000000000000000000000000081850190815282518084018452600080825290860152825180840190935290518252928101929092529192506171329060408051808201825260008082526020918201528151808301909252845182528085019082015290618b13565b61714757856040516020016167a0919061b85d565b9695505050505050565b60a0810151604080518082018252600080825260209182015281518083019092528251808352928101910152606090737109709ecfa91a80626ff3989d68f67f5b1dd12d90156171a1565b511590565b6173155782602001511561725d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152605860248201527f54686520606c6963656e73655479706560206f7074696f6e2063616e6e6f742060448201527f62652075736564207768656e207468652060736b6970566572696679536f757260648201527f6365436f646560206f7074696f6e206973206074727565600000000000000000608482015260a4016167e0565b8260c0015115617315576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152605360248201527f54686520606c6963656e73655479706560206f7074696f6e2063616e6e6f742060448201527f62652075736564207768656e207468652060736b69704c6963656e736554797060648201527f6560206f7074696f6e2069732060747275656000000000000000000000000000608482015260a4016167e0565b6040805160ff8082526120008201909252600091816020015b606081526020019060019003908161732e57905050905060006040518060400160405280600381526020017f6e707800000000000000000000000000000000000000000000000000000000008152508282806173899061b91d565b935060ff168151811061739e5761739e61af33565b60200260200101819052506040518060400160405280600d81526020017f302e302e312d616c7068612e37000000000000000000000000000000000000008152506040516020016173ef919061b93c565b60405160208183030381529060405282828061740a9061b91d565b935060ff168151811061741f5761741f61af33565b60200260200101819052506040518060400160405280600681526020017f6465706c6f79000000000000000000000000000000000000000000000000000081525082828061746c9061b91d565b935060ff16815181106174815761748161af33565b60200260200101819052506040518060400160405280600e81526020017f2d2d636f6e74726163744e616d650000000000000000000000000000000000008152508282806174ce9061b91d565b935060ff16815181106174e3576174e361af33565b602002602001018190525087602001518282806174ff9061b91d565b935060ff16815181106175145761751461af33565b60200260200101819052506040518060400160405280600e81526020017f2d2d636f6e7472616374506174680000000000000000000000000000000000008152508282806175619061b91d565b935060ff16815181106175765761757661af33565b60209081029190910101528751828261758e8161b91d565b935060ff16815181106175a3576175a361af33565b60200260200101819052506040518060400160405280600981526020017f2d2d636861696e496400000000000000000000000000000000000000000000008152508282806175f09061b91d565b935060ff16815181106176055761760561af33565b602002602001018190525061761946618b74565b82826176248161b91d565b935060ff16815181106176395761763961af33565b60200260200101819052506040518060400160405280600f81526020017f2d2d6275696c64496e666f46696c6500000000000000000000000000000000008152508282806176869061b91d565b935060ff168151811061769b5761769b61af33565b6020026020010181905250868282806176b39061b91d565b935060ff16815181106176c8576176c861af33565b60209081029190910101528551156177ef5760408051808201909152601581527f2d2d636f6e7374727563746f7242797465636f64650000000000000000000000602082015282826177198161b91d565b935060ff168151811061772e5761772e61af33565b60209081029190910101526040517f71aad10d0000000000000000000000000000000000000000000000000000000081526001600160a01b038416906371aad10d9061777e90899060040161af7b565b600060405180830381865afa15801561779b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526177c3919081019061ad7b565b82826177ce8161b91d565b935060ff16815181106177e3576177e361af33565b60200260200101819052505b8460200151156178bf5760408051808201909152601281527f2d2d766572696679536f75726365436f64650000000000000000000000000000602082015282826178388161b91d565b935060ff168151811061784d5761784d61af33565b60200260200101819052506040518060400160405280600581526020017f66616c736500000000000000000000000000000000000000000000000000000081525082828061789a9061b91d565b935060ff16815181106178af576178af61af33565b6020026020010181905250617a86565b6178f761719c8660a0015160408051808201825260008082526020918201528151808301909252825182529182019181019190915290565b61798a5760408051808201909152600d81527f2d2d6c6963656e736554797065000000000000000000000000000000000000006020820152828261793a8161b91d565b935060ff168151811061794f5761794f61af33565b60200260200101819052508460a0015160405160200161796f919061b7b0565b60405160208183030381529060405282828061789a9061b91d565b8460c001511580156179cd5750604080890151815180830183526000808252602091820152825180840190935281518352908101908201526179cb90511590565b155b15617a865760408051808201909152600d81527f2d2d6c6963656e7365547970650000000000000000000000000000000000000060208201528282617a118161b91d565b935060ff1681518110617a2657617a2661af33565b6020026020010181905250617a3a88618c14565b604051602001617a4a919061b7b0565b604051602081830303815290604052828280617a659061b91d565b935060ff1681518110617a7a57617a7a61af33565b60200260200101819052505b60408086015181518083018352600080825260209182015282518084019093528151835290810190820152617aba90511590565b617b4f5760408051808201909152600b81527f2d2d72656c61796572496400000000000000000000000000000000000000000060208201528282617afd8161b91d565b935060ff1681518110617b1257617b1261af33565b60200260200101819052508460400151828280617b2e9061b91d565b935060ff1681518110617b4357617b4361af33565b60200260200101819052505b606085015115617c705760408051808201909152600681527f2d2d73616c74000000000000000000000000000000000000000000000000000060208201528282617b988161b91d565b935060ff1681518110617bad57617bad61af33565b602090810291909101015260608501516040517fb11a19e800000000000000000000000000000000000000000000000000000000815260048101919091526001600160a01b0384169063b11a19e890602401600060405180830381865afa158015617c1c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052617c44919081019061ad7b565b8282617c4f8161b91d565b935060ff1681518110617c6457617c6461af33565b60200260200101819052505b60e08501515115617d175760408051808201909152600a81527f2d2d6761734c696d69740000000000000000000000000000000000000000000060208201528282617cba8161b91d565b935060ff1681518110617ccf57617ccf61af33565b6020026020010181905250617ceb8560e0015160000151618b74565b8282617cf68161b91d565b935060ff1681518110617d0b57617d0b61af33565b60200260200101819052505b60e08501516020015115617dc15760408051808201909152600a81527f2d2d67617350726963650000000000000000000000000000000000000000000060208201528282617d648161b91d565b935060ff1681518110617d7957617d7961af33565b6020026020010181905250617d958560e0015160200151618b74565b8282617da08161b91d565b935060ff1681518110617db557617db561af33565b60200260200101819052505b60e08501516040015115617e6b5760408051808201909152600e81527f2d2d6d617846656550657247617300000000000000000000000000000000000060208201528282617e0e8161b91d565b935060ff1681518110617e2357617e2361af33565b6020026020010181905250617e3f8560e0015160400151618b74565b8282617e4a8161b91d565b935060ff1681518110617e5f57617e5f61af33565b60200260200101819052505b60e08501516060015115617f155760408051808201909152601681527f2d2d6d61785072696f726974794665655065724761730000000000000000000060208201528282617eb88161b91d565b935060ff1681518110617ecd57617ecd61af33565b6020026020010181905250617ee98560e0015160600151618b74565b8282617ef48161b91d565b935060ff1681518110617f0957617f0961af33565b60200260200101819052505b60008160ff1667ffffffffffffffff811115617f3357617f3361ac88565b604051908082528060200260200182016040528015617f6657816020015b6060815260200190600190039081617f515790505b50905060005b8260ff168160ff161015617fbf57838160ff1681518110617f8f57617f8f61af33565b6020026020010151828260ff1681518110617fac57617fac61af33565b6020908102919091010152600101617f6c565b5093505050505b949350505050565b617ff56040518060600160405280600060030b815260200160608152602001606081525090565b60408051808201825260048082527f6261736800000000000000000000000000000000000000000000000000000000602083015291517fd145736c000000000000000000000000000000000000000000000000000000008152737109709ecfa91a80626ff3989d68f67f5b1dd12d92600091849163d145736c9161807b9186910161b9a7565b600060405180830381865afa158015618098573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526180c0919081019061ad7b565b905060006180ce8683619703565b90506000846001600160a01b031663f45c1ce7836040518263ffffffff1660e01b81526004016180fe919061aa2e565b6000604051808303816000875af115801561811d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052618145919081019061b9ee565b805190915060030b1580159061815e5750602081015151155b801561816d5750604081015151155b1561714757816000815181106181855761818561af33565b60200260200101516040516020016167a0919061baa4565b606060006181d28560408051808201825260008082526020918201528151808301909252825182529182019181019190915290565b6040805180820182526000808252602091820152815180830190925286518252808701908201529091506182099082905b90619858565b15618366576000618286826182808461827a61824c8a60408051808201825260008082526020918201528151808301909252825182529182019181019190915290565b6040805180820182526000808252602091820152815180830190925282518252918201519181019190915290565b9061987f565b906198e1565b604080518082018252600181527f0a00000000000000000000000000000000000000000000000000000000000000602080830191825283518085018552600080825290820152835180850190945291518352908201529091506182ea908290619858565b1561835457604080518082018252600181527f0a0000000000000000000000000000000000000000000000000000000000000060208083019182528351808501855260008082529082015283518085019094529151835290820152618351905b8290619966565b90505b61835d8161998c565b925050506166cd565b821561837f5784846040516020016167a092919061bc90565b50506040805160208101909152600081526166cd565b6000808251602084016000f09392505050565b8160a00151156183b757505050565b60006183c48484846199f5565b905060006183d182617fce565b602081015181519192509060030b15801561846d5750604080518082018252600781527f53554343455353000000000000000000000000000000000000000000000000006020808301918252835180850185526000808252908201528351808501909452915183529082015261846d90604080518082018252600080825260209182015281518083019092528451825280850190820152618203565b1561847a57505050505050565b6040820151511561849a5781604001516040516020016167a0919061bd37565b806040516020016167a0919061bd95565b606060006184e08360408051808201825260008082526020918201528151808301909252825182529182019181019190915290565b604080518082018252600481527f2e736f6c0000000000000000000000000000000000000000000000000000000060208083019182528351808501855260008082529082015283518085019094529151835290820152909150618545905b8290618b13565b156185b457604080518082018252600481527f2e736f6c00000000000000000000000000000000000000000000000000000000602080830191825283518085018552600080825290820152835180850190945291518352908201526166cd906185af908390619f90565b61998c565b604080518082018252600181527f3a0000000000000000000000000000000000000000000000000000000000000060208083019182528351808501855260008082529082015283518085019094529151835290820152618616905b829061a01a565b6001036186e357604080518082018252600181527f3a000000000000000000000000000000000000000000000000000000000000006020808301918252835180850185526000808252908201528351808501909452915183529082015261867c9061834a565b50604080518082018252600181527f3a00000000000000000000000000000000000000000000000000000000000000602080830191825283518085018552600080825290820152835180850190945291518352908201526166cd906185af905b8390619966565b604080518082018252600581527f2e6a736f6e000000000000000000000000000000000000000000000000000000602080830191825283518085018552600080825290820152835180850190945291518352908201526187429061853e565b1561887957604080518082018252600181527f2f000000000000000000000000000000000000000000000000000000000000006020808301918252835180850185526000808252908201819052845180860190955292518452830152906187aa90839061a0b4565b9050600081600183516187bd919061be00565b815181106187cd576187cd61af33565b602002602001015190506188706185af6188436040518060400160405280600581526020017f2e6a736f6e00000000000000000000000000000000000000000000000000000081525060408051808201825260008082526020918201528151808301909252825182529182019181019190915290565b60408051808201825260008082526020918201528151808301909252855182528086019082015290619f90565b95945050505050565b826040516020016167a0919061be13565b50919050565b606060006188c58360408051808201825260008082526020918201528151808301909252825182529182019181019190915290565b604080518082018252600481527f2e736f6c00000000000000000000000000000000000000000000000000000000602080830191825283518085018552600080825290820152835180850190945291518352908201529091506189279061853e565b15618935576166cd8161998c565b604080518082018252600181527f3a00000000000000000000000000000000000000000000000000000000000000602080830191825283518085018552600080825290820152835180850190945291518352908201526189949061860f565b6001036189fe57604080518082018252600181527f3a00000000000000000000000000000000000000000000000000000000000000602080830191825283518085018552600080825290820152835180850190945291518352908201526166cd906185af906186dc565b604080518082018252600581527f2e6a736f6e00000000000000000000000000000000000000000000000000000060208083019182528351808501855260008082529082015283518085019094529151835290820152618a5d9061853e565b1561887957604080518082018252600181527f2f00000000000000000000000000000000000000000000000000000000000000602080830191825283518085018552600080825290820181905284518086019095529251845283015290618ac590839061a0b4565b9050600181511115618b01578060028251618ae0919061be00565b81518110618af057618af061af33565b602002602001015192505050919050565b50826040516020016167a0919061be13565b805182516000911115618b28575060006163fc565b81518351602085015160009291618b3e9161bef1565b618b48919061be00565b905082602001518103618b5f5760019150506163fc565b82516020840151819020912014905092915050565b60606000618b818361a161565b600101905060008167ffffffffffffffff811115618ba157618ba161ac88565b6040519080825280601f01601f191660200182016040528015618bcb576020820181803683370190505b5090508181016020015b600019017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8504945084618bd557509392505050565b604081810151815180830183526000808252602091820181905283518085018552835181529282018383015283518085018552600a81527f554e4c4943454e5345440000000000000000000000000000000000000000000081840190815285518087018752838152840192909252845180860190955251845290830152606091618ca0905b829061a243565b15618ce057505060408051808201909152600481527f4e6f6e65000000000000000000000000000000000000000000000000000000006020820152919050565b604080518082018252600981527f556e6c6963656e7365000000000000000000000000000000000000000000000060208083019182528351808501855260008082529082015283518085019094529151835290820152618d3f90618c99565b15618d7f57505060408051808201909152600981527f556e6c6963656e736500000000000000000000000000000000000000000000006020820152919050565b604080518082018252600381527f4d4954000000000000000000000000000000000000000000000000000000000060208083019182528351808501855260008082529082015283518085019094529151835290820152618dde90618c99565b15618e1e57505060408051808201909152600381527f4d495400000000000000000000000000000000000000000000000000000000006020820152919050565b604080518082018252600c81527f47504c2d322e302d6f6e6c79000000000000000000000000000000000000000060208083019182528351808501855260008082529082015283518085019094529151835290820152618e7d90618c99565b80618ee25750604080518082018252601081527f47504c2d322e302d6f722d6c617465720000000000000000000000000000000060208083019182528351808501855260008082529082015283518085019094529151835290820152618ee290618c99565b15618f2257505060408051808201909152600981527f474e552047504c763200000000000000000000000000000000000000000000006020820152919050565b604080518082018252600c81527f47504c2d332e302d6f6e6c79000000000000000000000000000000000000000060208083019182528351808501855260008082529082015283518085019094529151835290820152618f8190618c99565b80618fe65750604080518082018252601081527f47504c2d332e302d6f722d6c617465720000000000000000000000000000000060208083019182528351808501855260008082529082015283518085019094529151835290820152618fe690618c99565b1561902657505060408051808201909152600981527f474e552047504c763300000000000000000000000000000000000000000000006020820152919050565b604080518082018252600d81527f4c47504c2d322e312d6f6e6c79000000000000000000000000000000000000006020808301918252835180850185526000808252908201528351808501909452915183529082015261908590618c99565b806190ea5750604080518082018252601181527f4c47504c2d322e312d6f722d6c61746572000000000000000000000000000000602080830191825283518085018552600080825290820152835180850190945291518352908201526190ea90618c99565b1561912a57505060408051808201909152600c81527f474e55204c47504c76322e3100000000000000000000000000000000000000006020820152919050565b604080518082018252600d81527f4c47504c2d332e302d6f6e6c79000000000000000000000000000000000000006020808301918252835180850185526000808252908201528351808501909452915183529082015261918990618c99565b806191ee5750604080518082018252601181527f4c47504c2d332e302d6f722d6c61746572000000000000000000000000000000602080830191825283518085018552600080825290820152835180850190945291518352908201526191ee90618c99565b1561922e57505060408051808201909152600a81527f474e55204c47504c7633000000000000000000000000000000000000000000006020820152919050565b604080518082018252600c81527f4253442d322d436c6175736500000000000000000000000000000000000000006020808301918252835180850185526000808252908201528351808501909452915183529082015261928d90618c99565b156192cd57505060408051808201909152600c81527f4253442d322d436c6175736500000000000000000000000000000000000000006020820152919050565b604080518082018252600c81527f4253442d332d436c6175736500000000000000000000000000000000000000006020808301918252835180850185526000808252908201528351808501909452915183529082015261932c90618c99565b1561936c57505060408051808201909152600c81527f4253442d332d436c6175736500000000000000000000000000000000000000006020820152919050565b604080518082018252600781527f4d504c2d322e3000000000000000000000000000000000000000000000000000602080830191825283518085018552600080825290820152835180850190945291518352908201526193cb90618c99565b1561940b57505060408051808201909152600781527f4d504c2d322e30000000000000000000000000000000000000000000000000006020820152919050565b604080518082018252600781527f4f534c2d332e30000000000000000000000000000000000000000000000000006020808301918252835180850185526000808252908201528351808501909452915183529082015261946a90618c99565b156194aa57505060408051808201909152600781527f4f534c2d332e30000000000000000000000000000000000000000000000000006020820152919050565b604080518082018252600a81527f4170616368652d322e30000000000000000000000000000000000000000000006020808301918252835180850185526000808252908201528351808501909452915183529082015261950990618c99565b1561954957505060408051808201909152600a81527f4170616368652d322e30000000000000000000000000000000000000000000006020820152919050565b604080518082018252600d81527f4147504c2d332e302d6f6e6c7900000000000000000000000000000000000000602080830191825283518085018552600080825290820152835180850190945291518352908201526195a890618c99565b8061960d5750604080518082018252601181527f4147504c2d332e302d6f722d6c617465720000000000000000000000000000006020808301918252835180850185526000808252908201528351808501909452915183529082015261960d90618c99565b1561964d57505060408051808201909152600a81527f474e55204147504c7633000000000000000000000000000000000000000000006020820152919050565b604080518082018252600881527f4255534c2d312e31000000000000000000000000000000000000000000000000602080830191825283518085018552600080825290820152835180850190945291518352908201526196ac90618c99565b156196ec57505060408051808201909152600781527f42534c20312e31000000000000000000000000000000000000000000000000006020820152919050565b604080840151845191516167a0929060200161bf04565b60608060005b845181101561978e57818582815181106197255761972561af33565b602002602001015160405160200161973e92919061b397565b60405160208183030381529060405291506001855161975d919061be00565b81146197865781604051602001619774919061c06d565b60405160208183030381529060405291505b600101619709565b5060408051600380825260808201909252600091816020015b60608152602001906001900390816197a757905050905083816000815181106197d2576197d261af33565b60200260200101819052506040518060400160405280600281526020017f2d63000000000000000000000000000000000000000000000000000000000000815250816001815181106198265761982661af33565b602002602001018190525081816002815181106198455761984561af33565b6020908102919091010152949350505050565b6020808301518351835192840151600093619876929184919061a257565b14159392505050565b604080518082019091526000808252602082015260006198b1846000015185602001518560000151866020015161a368565b90508360200151816198c3919061be00565b845185906198d290839061be00565b90525060208401525090919050565b60408051808201909152600080825260208201528151835110156199065750816163fc565b602080830151908401516001911461992d5750815160208481015190840151829020919020145b801561995e5782518451859061994490839061be00565b905250825160208501805161995a90839061bef1565b9052505b509192915050565b604080518082019091526000808252602082015261998583838361a488565b5092915050565b60606000826000015167ffffffffffffffff8111156199ad576199ad61ac88565b6040519080825280601f01601f1916602001820160405280156199d7576020820181803683370190505b5090506000602082019050619985818560200151866000015161a533565b60606000619a016169c6565b6040805160ff808252612000820190925291925060009190816020015b6060815260200190600190039081619a1e57905050905060006040518060400160405280600381526020017f6e70780000000000000000000000000000000000000000000000000000000000815250828280619a799061b91d565b935060ff1681518110619a8e57619a8e61af33565b60200260200101819052506040518060400160405280600781526020017f5e312e33322e3300000000000000000000000000000000000000000000000000815250604051602001619adf919061c0ae565b604051602081830303815290604052828280619afa9061b91d565b935060ff1681518110619b0f57619b0f61af33565b60200260200101819052506040518060400160405280600881526020017f76616c6964617465000000000000000000000000000000000000000000000000815250828280619b5c9061b91d565b935060ff1681518110619b7157619b7161af33565b602002602001018190525082604051602001619b8d919061b81c565b604051602081830303815290604052828280619ba89061b91d565b935060ff1681518110619bbd57619bbd61af33565b60200260200101819052506040518060400160405280600a81526020017f2d2d636f6e747261637400000000000000000000000000000000000000000000815250828280619c0a9061b91d565b935060ff1681518110619c1f57619c1f61af33565b6020026020010181905250619c34878461a5ad565b8282619c3f8161b91d565b935060ff1681518110619c5457619c5461af33565b602090810291909101015285515115619d005760408051808201909152600b81527f2d2d7265666572656e636500000000000000000000000000000000000000000060208201528282619ca68161b91d565b935060ff1681518110619cbb57619cbb61af33565b6020026020010181905250619cd486600001518461a5ad565b8282619cdf8161b91d565b935060ff1681518110619cf457619cf461af33565b60200260200101819052505b856080015115619d6e5760408051808201909152601881527f2d2d756e73616665536b697053746f72616765436865636b000000000000000060208201528282619d498161b91d565b935060ff1681518110619d5e57619d5e61af33565b6020026020010181905250619dd4565b8415619dd45760408051808201909152601281527f2d2d726571756972655265666572656e6365000000000000000000000000000060208201528282619db38161b91d565b935060ff1681518110619dc857619dc861af33565b60200260200101819052505b60408601515115619e705760408051808201909152600d81527f2d2d756e73616665416c6c6f770000000000000000000000000000000000000060208201528282619e1e8161b91d565b935060ff1681518110619e3357619e3361af33565b60200260200101819052508560400151828280619e4f9061b91d565b935060ff1681518110619e6457619e6461af33565b60200260200101819052505b856060015115619eda5760408051808201909152601481527f2d2d756e73616665416c6c6f7752656e616d657300000000000000000000000060208201528282619eb98161b91d565b935060ff1681518110619ece57619ece61af33565b60200260200101819052505b60008160ff1667ffffffffffffffff811115619ef857619ef861ac88565b604051908082528060200260200182016040528015619f2b57816020015b6060815260200190600190039081619f165790505b50905060005b8260ff168160ff161015619f8457838160ff1681518110619f5457619f5461af33565b6020026020010151828260ff1681518110619f7157619f7161af33565b6020908102919091010152600101619f31565b50979650505050505050565b6040805180820190915260008082526020820152815183511015619fb55750816163fc565b81518351602085015160009291619fcb9161bef1565b619fd5919061be00565b60208401519091506001908214619ff6575082516020840151819020908220145b801561a0115783518551869061a00d90839061be00565b9052505b50929392505050565b600080826000015161a03e856000015186602001518660000151876020015161a368565b61a048919061bef1565b90505b8351602085015161a05c919061bef1565b8111619985578161a06c8161c0f3565b925050826000015161a0a385602001518361a087919061be00565b865161a093919061be00565b838660000151876020015161a368565b61a0ad919061bef1565b905061a04b565b6060600061a0c2848461a01a565b61a0cd90600161bef1565b67ffffffffffffffff81111561a0e55761a0e561ac88565b60405190808252806020026020018201604052801561a11857816020015b606081526020019060019003908161a1035790505b50905060005b815181101561a1595761a1346185af8686619966565b82828151811061a1465761a14661af33565b602090810291909101015260010161a11e565b509392505050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000831061a1aa577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef8100000000831061a1d6576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061a1f457662386f26fc10000830492506010015b6305f5e100831061a20c576305f5e100830492506008015b612710831061a22057612710830492506004015b6064831061a232576064830492506002015b600a83106163fc5760010192915050565b600061a24f838361a5ed565b159392505050565b60008085841161a35e576020841161a30a576000841561a2a257600161a27e86602061be00565b61a28990600861c10d565b61a29490600261c20b565b61a29e919061be00565b1990505b835181168561a2b1898961bef1565b61a2bb919061be00565b805190935082165b81811461a2f55787841161a2dd5787945050505050617fc6565b8361a2e78161c217565b94505082845116905061a2c3565b61a2ff878561bef1565b945050505050617fc6565b83832061a317858861be00565b61a321908761bef1565b91505b85821061a35c5784822080820361a3495761a33f868461bef1565b9350505050617fc6565b61a35460018461be00565b92505061a324565b505b5092949350505050565b6000838186851161a473576020851161a422576000851561a3b457600161a39087602061be00565b61a39b90600861c10d565b61a3a690600261c20b565b61a3b0919061be00565b1990505b8451811660008761a3c58b8b61bef1565b61a3cf919061be00565b855190915083165b82811461a4145781861061a3fc5761a3ef8b8b61bef1565b9650505050505050617fc6565b8561a4068161c0f3565b96505083865116905061a3d7565b859650505050505050617fc6565b508383206000905b61a434868961be00565b821161a4715785832080820361a4505783945050505050617fc6565b61a45b60018561bef1565b935050818061a4699061c0f3565b92505061a42a565b505b61a47d878761bef1565b979650505050505050565b6040805180820190915260008082526020820152600061a4ba856000015186602001518660000151876020015161a368565b60208087018051918601919091525190915061a4d6908261be00565b83528451602086015161a4e9919061bef1565b810361a4f8576000855261a52a565b8351835161a506919061bef1565b8551869061a51590839061be00565b905250835161a524908261bef1565b60208601525b50909392505050565b6020811061a56b578151835261a54a60208461bef1565b925061a55760208361bef1565b915061a56460208261be00565b905061a533565b600019811561a59a57600161a58183602061be00565b61a58d9061010061c20b565b61a597919061be00565b90505b9151835183169219169190911790915250565b6060600061a5bb8484616a99565b805160208083015160405193945061a5d59390910161c22e565b60405160208183030381529060405291505092915050565b815181516000919081111561a600575081515b6020808501519084015160005b8381101561a6b9578251825180821461a68957600019602087101561a6685760018461a63a89602061be00565b61a644919061bef1565b61a64f90600861c10d565b61a65a90600261c20b565b61a664919061be00565b1990505b818116838216818103911461a6865797506163fc9650505050505050565b50505b61a69460208661bef1565b945061a6a160208561bef1565b9350505060208161a6b2919061bef1565b905061a60d565b5084518651617147919061c286565b6102988061c2a783390190565b6040518060e0016040528060608152602001606081526020016060815260200160001515815260200160001515815260200160001515815260200161a71861a71d565b905290565b6040518061010001604052806000151581526020016000151581526020016060815260200160008019168152602001606081526020016060815260200160001515815260200161a7186040518060800160405280600081526020016000815260200160008152602001600081525090565b602080825282518282018190526000918401906040840190835b8181101561a7cf5783516001600160a01b031683526020938401939092019160010161a7a8565b509095945050505050565b60005b8381101561a7f557818101518382015260200161a7dd565b50506000910152565b6000815180845261a81681602086016020860161a7da565b601f01601f19169290920160200192915050565b6000602082016020835280845180835260408501915060408160051b86010192506020860160005b8281101561a926577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0878603018452815180516001600160a01b03168652602090810151604082880181905281519088018190529101906060600582901b88018101919088019060005b8181101561a90c577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa08a850301835261a8f684865161a7fe565b602095860195909450929092019160010161a8bc565b50919750505060209485019492909201915060010161a852565b50929695505050505050565b600081518084526020840193506020830160005b8281101561a9865781517fffffffff000000000000000000000000000000000000000000000000000000001686526020958601959091019060010161a946565b5093949350505050565b6000602082016020835280845180835260408501915060408160051b86010192506020860160005b8281101561a926577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0878603018452815180516040875261a9fc604088018261a7fe565b905060208201519150868103602088015261aa17818361a932565b96505050602093840193919091019060010161a9b8565b6000602082016020835280845180835260408501915060408160051b86010192506020860160005b8281101561a926577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc087860301845261aa9085835161a7fe565b9450602093840193919091019060010161aa56565b6000602082016020835280845180835260408501915060408160051b86010192506020860160005b8281101561a926577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc087860301845281516001600160a01b038151168652602081015190506040602087015261ab26604087018261a932565b955050602093840193919091019060010161aacd565b600181811c9082168061ab5057607f821691505b60208210810361888a577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000815461ab968161ab3c565b80855260018216801561abb0576001811461abea5761ac21565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0083166020870152602082151560051b870101935061ac21565b84600052602060002060005b8381101561ac185781546020828a01015260018201915060208101905061abf6565b87016020019450505b50505092915050565b8481526001600160a01b038416602082015260806040820152600061ac52608083018561ab89565b9050821515606083015295945050505050565b6001600160a01b038351168152604060208201526000617fc6604083018461a7fe565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040516060810167ffffffffffffffff8111828210171561acda5761acda61ac88565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561ad095761ad0961ac88565b604052919050565b600082601f83011261ad2257600080fd5b81516020830160008067ffffffffffffffff84111561ad435761ad4361ac88565b50601f8301601f191660200161ad588161ace0565b91505082815285838301111561ad6d57600080fd5b61887083602083018461a7da565b60006020828403121561ad8d57600080fd5b815167ffffffffffffffff81111561ada457600080fd5b6163f88482850161ad11565b8481526001600160a01b038416602082015260806040820152600061add8608083018561ab89565b828103606084015261a47d818561ab89565b84815260806020820152600061ae03608083018661ab89565b828103604084015261ae15818661a7fe565b9050828103606084015261a47d818561a7fe565b60608152600061ae3c606083018661ab89565b828103602084015261ae4e818661a7fe565b90508281036040840152617147818561a7fe565b83815260606020820152600061ae7b606083018561ab89565b8281036040840152617147818561a7fe565b60006020828403121561ae9f57600080fd5b815167ffffffffffffffff81111561aeb657600080fd5b8201601f8101841361aec757600080fd5b805167ffffffffffffffff81111561aee15761aee161ac88565b8060051b61aef16020820161ace0565b9182526020818401810192908101908784111561af0d57600080fd5b6020850194505b8385101561a47d5784518083526020958601959093509091019061af14565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b84815260806020820152600061ae03608083018661a7fe565b6020815260006166cd602083018461a7fe565b8481526001600160a01b038416602082015260806040820152600061afb6608083018561ab89565b828103606084015261a47d818561a7fe565b6001600160a01b038716815260c06020820152600061afea60c083018861a7fe565b866040840152828103606084015261b002818761a7fe565b9050828103608084015261b016818661a7fe565b91505060ff831660a0830152979650505050505050565b8051801515811461b03d57600080fd5b919050565b60008060008060008060c0878903121561b05b57600080fd5b61b0648761b02d565b9550602087015167ffffffffffffffff81111561b08057600080fd5b61b08c89828a0161ad11565b604089015160608a01519197509550905067ffffffffffffffff81111561b0b257600080fd5b61b0be89828a0161ad11565b935050608087015167ffffffffffffffff81111561b0db57600080fd5b61b0e789828a0161ad11565b92505060a087015160ff8116811461b0fe57600080fd5b809150509295509295509295565b83815260606020820152600061b125606083018561a7fe565b90508215156040830152949350505050565b60808152600061b14a608083018761a7fe565b60ff86166020840152846040840152828103606084015261a47d818561a7fe565b60006020828403121561b17d57600080fd5b5051919050565b60006020828403121561b19657600080fd5b6166cd8261b02d565b6001600160a01b038116811461b1b457600080fd5b50565b60006020828403121561b1c957600080fd5b81516166cd8161b19f565b60408152600061b1e7604083018561ab89565b82810360208401526166c9818561ab89565b828152604060208201526000617fc6604083018461ab89565b6000806040838503121561b22557600080fd5b61b22e8361b02d565b9150602083015161b23e8161b19f565b809150509250929050565b83815260606020820152600061ae7b606083018561a7fe565b60408152600061b275604083018561a7fe565b82810360208401526166c9818561a7fe565b828152604060208201526000617fc6604083018461a7fe565b8481526001600160a01b038416602082015260806040820152600061add8608083018561a7fe565b83815260606020820152600061b125606083018561ab89565b6020815260006166cd602083018461ab89565b6001600160a01b0383168152604060208201526000617fc6604083018461a7fe565b7f4661696c656420746f206465706c6f7920636f6e74726163742000000000000081526000835161b34e81601a85016020880161a7da565b7f3a20000000000000000000000000000000000000000000000000000000000000601a91840191820152835161b38b81601c84016020880161a7da565b01601c01949350505050565b6000835161b3a981846020880161a7da565b83519083019061b3bd81836020880161a7da565b01949350505050565b7f4661696c656420746f206465706c6f7920636f6e74726163742000000000000081526000835161b3fe81601a85016020880161a7da565b7f207573696e6720636f6e7374727563746f722064617461202200000000000000601a91840191820152835161b43b81603384016020880161a7da565b7f220000000000000000000000000000000000000000000000000000000000000060339290910191820152603401949350505050565b60408152600b60408201527f464f554e4452595f4f555400000000000000000000000000000000000000000060608201526080602082015260006166cd608083018461a7fe565b6000855161b4ca818460208a0161a7da565b7f2f00000000000000000000000000000000000000000000000000000000000000908301908152855161b504816001840160208a0161a7da565b7f2f0000000000000000000000000000000000000000000000000000000000000060019290910191820152845161b54281600284016020890161a7da565b6001818301019150507f2f000000000000000000000000000000000000000000000000000000000000006001820152835161b58481600284016020880161a7da565b7f2e6a736f6e000000000000000000000000000000000000000000000000000000600292909101918201526007019695505050505050565b60408152600061b5cf604083018461a7fe565b8281036020840152600481527f2e6173740000000000000000000000000000000000000000000000000000000060208201526040810191505092915050565b7f436f756c64206e6f742066696e642041535420696e206172746966616374200081526000825161b64681601f85016020870161a7da565b7f2e205365742060617374203d20747275656020696e20666f756e6472792e746f601f9390910192830152507f6d6c000000000000000000000000000000000000000000000000000000000000603f820152604101919050565b60408152600061b6b3604083018461a7fe565b8281036020840152601181527f2e6173742e6162736f6c7574655061746800000000000000000000000000000060208201526040810191505092915050565b60408152600061b705604083018461a7fe565b8281036020840152600c81527f2e6173742e6c6963656e7365000000000000000000000000000000000000000060208201526040810191505092915050565b7f2e6d657461646174612e736f75726365732e5b2700000000000000000000000081526000825161b77c81601485016020870161a7da565b7f275d2e6b656363616b32353600000000000000000000000000000000000000006014939091019283015250602001919050565b7f220000000000000000000000000000000000000000000000000000000000000081526000825161b7e881600185016020870161a7da565b7f22000000000000000000000000000000000000000000000000000000000000006001939091019283015250600201919050565b6000825161b82e81846020870161a7da565b7f2f6275696c642d696e666f000000000000000000000000000000000000000000920191825250600b01919050565b7f436f756c64206e6f742066696e64206275696c642d696e666f2066696c65207781527f697468206d61746368696e6720736f7572636520636f6465206861736820666f60208201527f7220636f6e74726163742000000000000000000000000000000000000000000060408201526000825161b8e181604b85016020870161a7da565b91909101604b0192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600060ff821660ff810361b9335761b93361b8ee565b60010192915050565b7f406f70656e7a657070656c696e2f646566656e6465722d6465706c6f792d636c81527f69656e742d636c6940000000000000000000000000000000000000000000000060208201526000825161b99a81602985016020870161a7da565b9190910160290192915050565b60408152601660408201527f4f50454e5a455050454c494e5f424153485f504154480000000000000000000060608201526080602082015260006166cd608083018461a7fe565b60006020828403121561ba0057600080fd5b815167ffffffffffffffff81111561ba1757600080fd5b82016060818503121561ba2957600080fd5b61ba3161acb7565b81518060030b811461ba4257600080fd5b8152602082015167ffffffffffffffff81111561ba5e57600080fd5b61ba6a8682850161ad11565b602083015250604082015167ffffffffffffffff81111561ba8a57600080fd5b61ba968682850161ad11565b604083015250949350505050565b7f4661696c656420746f2072756e206261736820636f6d6d616e6420776974682081527f220000000000000000000000000000000000000000000000000000000000000060208201526000825161bb0281602185016020870161a7da565b7f222e20496620796f7520617265207573696e672057696e646f77732c2073657460219390910192830152507f20746865204f50454e5a455050454c494e5f424153485f5041544820656e766960418201527f726f6e6d656e74207661726961626c6520746f207468652066756c6c7920717560618201527f616c69666965642070617468206f66207468652062617368206578656375746160818201527f626c652e20466f72206578616d706c652c20696620796f75206172652075736960a18201527f6e672047697420666f722057696e646f77732c206164642074686520666f6c6c60c18201527f6f77696e67206c696e6520696e20746865202e656e762066696c65206f66207960e18201527f6f75722070726f6a65637420287573696e6720666f727761726420736c6173686101018201527f6573293a0a4f50454e5a455050454c494e5f424153485f504154483d22433a2f6101218201527f50726f6772616d2046696c65732f4769742f62696e2f6261736822000000000061014182015261015c01919050565b7f4661696c656420746f2066696e64206c696e652077697468207072656669782081527f270000000000000000000000000000000000000000000000000000000000000060208201526000835161bcee81602185016020880161a7da565b7f2720696e206f75747075743a2000000000000000000000000000000000000000602191840191820152835161bd2b81602e84016020880161a7da565b01602e01949350505050565b7f4661696c656420746f2072756e2075706772616465207361666574792076616c81527f69646174696f6e3a20000000000000000000000000000000000000000000000060208201526000825161b99a81602985016020870161a7da565b7f55706772616465207361666574792076616c69646174696f6e206661696c656481527f3a0a00000000000000000000000000000000000000000000000000000000000060208201526000825161bdf381602285016020870161a7da565b9190910160220192915050565b818103818111156163fc576163fc61b8ee565b7f436f6e7472616374206e616d652000000000000000000000000000000000000081526000825161be4b81600e85016020870161a7da565b7f206d75737420626520696e2074686520666f726d6174204d79436f6e74726163600e9390910192830152507f742e736f6c3a4d79436f6e7472616374206f72204d79436f6e74726163742e73602e8201527f6f6c206f72206f75742f4d79436f6e74726163742e736f6c2f4d79436f6e7472604e8201527f6163742e6a736f6e000000000000000000000000000000000000000000000000606e820152607601919050565b808201808211156163fc576163fc61b8ee565b7f53504458206c6963656e7365206964656e74696669657220000000000000000081526000835161bf3c81601885016020880161a7da565b7f20696e2000000000000000000000000000000000000000000000000000000000601891840191820152835161bf7981601c84016020880161a7da565b7f20646f6573206e6f74206c6f6f6b206c696b65206120737570706f7274656420601c92909101918201527f6c6963656e736520666f7220626c6f636b206578706c6f726572207665726966603c8201527f69636174696f6e2e205573652074686520606c6963656e73655479706560206f605c8201527f7074696f6e20746f20737065636966792061206c6963656e736520747970652c607c8201527f206f7220736574207468652060736b69704c6963656e73655479706560206f70609c8201527f74696f6e20746f2060747275656020746f20736b69702e00000000000000000060bc82015260d301949350505050565b6000825161c07f81846020870161a7da565b7f2000000000000000000000000000000000000000000000000000000000000000920191825250600101919050565b7f406f70656e7a657070656c696e2f75706772616465732d636f7265400000000081526000825161c0e681601c85016020870161a7da565b91909101601c0192915050565b6000600019820361c1065761c10661b8ee565b5060010190565b80820281158282048414176163fc576163fc61b8ee565b6001815b600184111561c15f5780850481111561c1435761c14361b8ee565b600184161561c15157908102905b60019390931c92800261c128565b935093915050565b60008261c176575060016163fc565b8161c183575060006163fc565b816001811461c199576002811461c1a35761c1bf565b60019150506163fc565b60ff84111561c1b45761c1b461b8ee565b50506001821b6163fc565b5060208310610133831016604e8410600b841016171561c1e2575081810a6163fc565b61c1ef600019848461c124565b806000190482111561c2035761c20361b8ee565b029392505050565b60006166cd838361c167565b60008161c2265761c22661b8ee565b506000190190565b6000835161c24081846020880161a7da565b7f3a00000000000000000000000000000000000000000000000000000000000000908301908152835161c27a81600184016020880161a7da565b01600101949350505050565b81810360008312801583831316838312821617156199855761998561b8ee56fe6080604052348015600f57600080fd5b506102798061001f6000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063676cc05414610030575b600080fd5b61004361003e3660046100af565b610059565b604051610050919061013c565b60405180910390f35b60607f13e79c97a555ca94839a23ea9ea3c2702c15dd006ffae3e0cf3a166c0fb2a3bd3384848760405161009094939291906101a8565b60405180910390a1506040805160208101909152600081529392505050565b600080600083850360408112156100c557600080fd5b60208112156100d357600080fd5b50839250602084013567ffffffffffffffff8111156100f157600080fd5b8401601f8101861361010257600080fd5b803567ffffffffffffffff81111561011957600080fd5b86602082840101111561012b57600080fd5b939660209190910195509293505050565b602081526000825180602084015260005b8181101561016a576020818601810151604086840101520161014d565b5060006040828501015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011684010191505092915050565b73ffffffffffffffffffffffffffffffffffffffff851681526060602082015282606082015282846080830137600060808483010152600060807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8601168301019050823573ffffffffffffffffffffffffffffffffffffffff811680821461023257600080fd5b80604085015250509594505050505056fea2646970667358221220f7808a0dc14437b41d929251328117999525a1b2f05b211415813bc4d333035f64736f6c634300081a0033a264697066735822122056e795901d43418553f045cc049d0682f7507e21c9e72c6983d622082163bf3f64736f6c634300081a0033",
}

// RegistryTestABI is the input ABI used to generate the binding from.
// Deprecated: Use RegistryTestMetaData.ABI instead.
var RegistryTestABI = RegistryTestMetaData.ABI

// RegistryTestBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use RegistryTestMetaData.Bin instead.
var RegistryTestBin = RegistryTestMetaData.Bin

// DeployRegistryTest deploys a new Ethereum contract, binding an instance of RegistryTest to it.
func DeployRegistryTest(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *RegistryTest, error) {
	parsed, err := RegistryTestMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(RegistryTestBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &RegistryTest{RegistryTestCaller: RegistryTestCaller{contract: contract}, RegistryTestTransactor: RegistryTestTransactor{contract: contract}, RegistryTestFilterer: RegistryTestFilterer{contract: contract}}, nil
}

// RegistryTest is an auto generated Go binding around an Ethereum contract.
type RegistryTest struct {
	RegistryTestCaller     // Read-only binding to the contract
	RegistryTestTransactor // Write-only binding to the contract
	RegistryTestFilterer   // Log filterer for contract events
}

// RegistryTestCaller is an auto generated read-only Go binding around an Ethereum contract.
type RegistryTestCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RegistryTestTransactor is an auto generated write-only Go binding around an Ethereum contract.
type RegistryTestTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RegistryTestFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type RegistryTestFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RegistryTestSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type RegistryTestSession struct {
	Contract     *RegistryTest     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// RegistryTestCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type RegistryTestCallerSession struct {
	Contract *RegistryTestCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// RegistryTestTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type RegistryTestTransactorSession struct {
	Contract     *RegistryTestTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// RegistryTestRaw is an auto generated low-level Go binding around an Ethereum contract.
type RegistryTestRaw struct {
	Contract *RegistryTest // Generic contract binding to access the raw methods on
}

// RegistryTestCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type RegistryTestCallerRaw struct {
	Contract *RegistryTestCaller // Generic read-only contract binding to access the raw methods on
}

// RegistryTestTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type RegistryTestTransactorRaw struct {
	Contract *RegistryTestTransactor // Generic write-only contract binding to access the raw methods on
}

// NewRegistryTest creates a new instance of RegistryTest, bound to a specific deployed contract.
func NewRegistryTest(address common.Address, backend bind.ContractBackend) (*RegistryTest, error) {
	contract, err := bindRegistryTest(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &RegistryTest{RegistryTestCaller: RegistryTestCaller{contract: contract}, RegistryTestTransactor: RegistryTestTransactor{contract: contract}, RegistryTestFilterer: RegistryTestFilterer{contract: contract}}, nil
}

// NewRegistryTestCaller creates a new read-only instance of RegistryTest, bound to a specific deployed contract.
func NewRegistryTestCaller(address common.Address, caller bind.ContractCaller) (*RegistryTestCaller, error) {
	contract, err := bindRegistryTest(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &RegistryTestCaller{contract: contract}, nil
}

// NewRegistryTestTransactor creates a new write-only instance of RegistryTest, bound to a specific deployed contract.
func NewRegistryTestTransactor(address common.Address, transactor bind.ContractTransactor) (*RegistryTestTransactor, error) {
	contract, err := bindRegistryTest(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &RegistryTestTransactor{contract: contract}, nil
}

// NewRegistryTestFilterer creates a new log filterer instance of RegistryTest, bound to a specific deployed contract.
func NewRegistryTestFilterer(address common.Address, filterer bind.ContractFilterer) (*RegistryTestFilterer, error) {
	contract, err := bindRegistryTest(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &RegistryTestFilterer{contract: contract}, nil
}

// bindRegistryTest binds a generic wrapper to an already deployed contract.
func bindRegistryTest(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := RegistryTestMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RegistryTest *RegistryTestRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RegistryTest.Contract.RegistryTestCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RegistryTest *RegistryTestRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RegistryTest.Contract.RegistryTestTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RegistryTest *RegistryTestRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RegistryTest.Contract.RegistryTestTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RegistryTest *RegistryTestCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RegistryTest.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RegistryTest *RegistryTestTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RegistryTest.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RegistryTest *RegistryTestTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RegistryTest.Contract.contract.Transact(opts, method, params...)
}

// ISTEST is a free data retrieval call binding the contract method 0xfa7626d4.
//
// Solidity: function IS_TEST() view returns(bool)
func (_RegistryTest *RegistryTestCaller) ISTEST(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _RegistryTest.contract.Call(opts, &out, "IS_TEST")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ISTEST is a free data retrieval call binding the contract method 0xfa7626d4.
//
// Solidity: function IS_TEST() view returns(bool)
func (_RegistryTest *RegistryTestSession) ISTEST() (bool, error) {
	return _RegistryTest.Contract.ISTEST(&_RegistryTest.CallOpts)
}

// ISTEST is a free data retrieval call binding the contract method 0xfa7626d4.
//
// Solidity: function IS_TEST() view returns(bool)
func (_RegistryTest *RegistryTestCallerSession) ISTEST() (bool, error) {
	return _RegistryTest.Contract.ISTEST(&_RegistryTest.CallOpts)
}

// ExcludeArtifacts is a free data retrieval call binding the contract method 0xb5508aa9.
//
// Solidity: function excludeArtifacts() view returns(string[] excludedArtifacts_)
func (_RegistryTest *RegistryTestCaller) ExcludeArtifacts(opts *bind.CallOpts) ([]string, error) {
	var out []interface{}
	err := _RegistryTest.contract.Call(opts, &out, "excludeArtifacts")

	if err != nil {
		return *new([]string), err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)

	return out0, err

}

// ExcludeArtifacts is a free data retrieval call binding the contract method 0xb5508aa9.
//
// Solidity: function excludeArtifacts() view returns(string[] excludedArtifacts_)
func (_RegistryTest *RegistryTestSession) ExcludeArtifacts() ([]string, error) {
	return _RegistryTest.Contract.ExcludeArtifacts(&_RegistryTest.CallOpts)
}

// ExcludeArtifacts is a free data retrieval call binding the contract method 0xb5508aa9.
//
// Solidity: function excludeArtifacts() view returns(string[] excludedArtifacts_)
func (_RegistryTest *RegistryTestCallerSession) ExcludeArtifacts() ([]string, error) {
	return _RegistryTest.Contract.ExcludeArtifacts(&_RegistryTest.CallOpts)
}

// ExcludeContracts is a free data retrieval call binding the contract method 0xe20c9f71.
//
// Solidity: function excludeContracts() view returns(address[] excludedContracts_)
func (_RegistryTest *RegistryTestCaller) ExcludeContracts(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _RegistryTest.contract.Call(opts, &out, "excludeContracts")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// ExcludeContracts is a free data retrieval call binding the contract method 0xe20c9f71.
//
// Solidity: function excludeContracts() view returns(address[] excludedContracts_)
func (_RegistryTest *RegistryTestSession) ExcludeContracts() ([]common.Address, error) {
	return _RegistryTest.Contract.ExcludeContracts(&_RegistryTest.CallOpts)
}

// ExcludeContracts is a free data retrieval call binding the contract method 0xe20c9f71.
//
// Solidity: function excludeContracts() view returns(address[] excludedContracts_)
func (_RegistryTest *RegistryTestCallerSession) ExcludeContracts() ([]common.Address, error) {
	return _RegistryTest.Contract.ExcludeContracts(&_RegistryTest.CallOpts)
}

// ExcludeSelectors is a free data retrieval call binding the contract method 0xb0464fdc.
//
// Solidity: function excludeSelectors() view returns((address,bytes4[])[] excludedSelectors_)
func (_RegistryTest *RegistryTestCaller) ExcludeSelectors(opts *bind.CallOpts) ([]StdInvariantFuzzSelector, error) {
	var out []interface{}
	err := _RegistryTest.contract.Call(opts, &out, "excludeSelectors")

	if err != nil {
		return *new([]StdInvariantFuzzSelector), err
	}

	out0 := *abi.ConvertType(out[0], new([]StdInvariantFuzzSelector)).(*[]StdInvariantFuzzSelector)

	return out0, err

}

// ExcludeSelectors is a free data retrieval call binding the contract method 0xb0464fdc.
//
// Solidity: function excludeSelectors() view returns((address,bytes4[])[] excludedSelectors_)
func (_RegistryTest *RegistryTestSession) ExcludeSelectors() ([]StdInvariantFuzzSelector, error) {
	return _RegistryTest.Contract.ExcludeSelectors(&_RegistryTest.CallOpts)
}

// ExcludeSelectors is a free data retrieval call binding the contract method 0xb0464fdc.
//
// Solidity: function excludeSelectors() view returns((address,bytes4[])[] excludedSelectors_)
func (_RegistryTest *RegistryTestCallerSession) ExcludeSelectors() ([]StdInvariantFuzzSelector, error) {
	return _RegistryTest.Contract.ExcludeSelectors(&_RegistryTest.CallOpts)
}

// ExcludeSenders is a free data retrieval call binding the contract method 0x1ed7831c.
//
// Solidity: function excludeSenders() view returns(address[] excludedSenders_)
func (_RegistryTest *RegistryTestCaller) ExcludeSenders(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _RegistryTest.contract.Call(opts, &out, "excludeSenders")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// ExcludeSenders is a free data retrieval call binding the contract method 0x1ed7831c.
//
// Solidity: function excludeSenders() view returns(address[] excludedSenders_)
func (_RegistryTest *RegistryTestSession) ExcludeSenders() ([]common.Address, error) {
	return _RegistryTest.Contract.ExcludeSenders(&_RegistryTest.CallOpts)
}

// ExcludeSenders is a free data retrieval call binding the contract method 0x1ed7831c.
//
// Solidity: function excludeSenders() view returns(address[] excludedSenders_)
func (_RegistryTest *RegistryTestCallerSession) ExcludeSenders() ([]common.Address, error) {
	return _RegistryTest.Contract.ExcludeSenders(&_RegistryTest.CallOpts)
}

// Failed is a free data retrieval call binding the contract method 0xba414fa6.
//
// Solidity: function failed() view returns(bool)
func (_RegistryTest *RegistryTestCaller) Failed(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _RegistryTest.contract.Call(opts, &out, "failed")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Failed is a free data retrieval call binding the contract method 0xba414fa6.
//
// Solidity: function failed() view returns(bool)
func (_RegistryTest *RegistryTestSession) Failed() (bool, error) {
	return _RegistryTest.Contract.Failed(&_RegistryTest.CallOpts)
}

// Failed is a free data retrieval call binding the contract method 0xba414fa6.
//
// Solidity: function failed() view returns(bool)
func (_RegistryTest *RegistryTestCallerSession) Failed() (bool, error) {
	return _RegistryTest.Contract.Failed(&_RegistryTest.CallOpts)
}

// TargetArtifactSelectors is a free data retrieval call binding the contract method 0x66d9a9a0.
//
// Solidity: function targetArtifactSelectors() view returns((string,bytes4[])[] targetedArtifactSelectors_)
func (_RegistryTest *RegistryTestCaller) TargetArtifactSelectors(opts *bind.CallOpts) ([]StdInvariantFuzzArtifactSelector, error) {
	var out []interface{}
	err := _RegistryTest.contract.Call(opts, &out, "targetArtifactSelectors")

	if err != nil {
		return *new([]StdInvariantFuzzArtifactSelector), err
	}

	out0 := *abi.ConvertType(out[0], new([]StdInvariantFuzzArtifactSelector)).(*[]StdInvariantFuzzArtifactSelector)

	return out0, err

}

// TargetArtifactSelectors is a free data retrieval call binding the contract method 0x66d9a9a0.
//
// Solidity: function targetArtifactSelectors() view returns((string,bytes4[])[] targetedArtifactSelectors_)
func (_RegistryTest *RegistryTestSession) TargetArtifactSelectors() ([]StdInvariantFuzzArtifactSelector, error) {
	return _RegistryTest.Contract.TargetArtifactSelectors(&_RegistryTest.CallOpts)
}

// TargetArtifactSelectors is a free data retrieval call binding the contract method 0x66d9a9a0.
//
// Solidity: function targetArtifactSelectors() view returns((string,bytes4[])[] targetedArtifactSelectors_)
func (_RegistryTest *RegistryTestCallerSession) TargetArtifactSelectors() ([]StdInvariantFuzzArtifactSelector, error) {
	return _RegistryTest.Contract.TargetArtifactSelectors(&_RegistryTest.CallOpts)
}

// TargetArtifacts is a free data retrieval call binding the contract method 0x85226c81.
//
// Solidity: function targetArtifacts() view returns(string[] targetedArtifacts_)
func (_RegistryTest *RegistryTestCaller) TargetArtifacts(opts *bind.CallOpts) ([]string, error) {
	var out []interface{}
	err := _RegistryTest.contract.Call(opts, &out, "targetArtifacts")

	if err != nil {
		return *new([]string), err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)

	return out0, err

}

// TargetArtifacts is a free data retrieval call binding the contract method 0x85226c81.
//
// Solidity: function targetArtifacts() view returns(string[] targetedArtifacts_)
func (_RegistryTest *RegistryTestSession) TargetArtifacts() ([]string, error) {
	return _RegistryTest.Contract.TargetArtifacts(&_RegistryTest.CallOpts)
}

// TargetArtifacts is a free data retrieval call binding the contract method 0x85226c81.
//
// Solidity: function targetArtifacts() view returns(string[] targetedArtifacts_)
func (_RegistryTest *RegistryTestCallerSession) TargetArtifacts() ([]string, error) {
	return _RegistryTest.Contract.TargetArtifacts(&_RegistryTest.CallOpts)
}

// TargetContracts is a free data retrieval call binding the contract method 0x3f7286f4.
//
// Solidity: function targetContracts() view returns(address[] targetedContracts_)
func (_RegistryTest *RegistryTestCaller) TargetContracts(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _RegistryTest.contract.Call(opts, &out, "targetContracts")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// TargetContracts is a free data retrieval call binding the contract method 0x3f7286f4.
//
// Solidity: function targetContracts() view returns(address[] targetedContracts_)
func (_RegistryTest *RegistryTestSession) TargetContracts() ([]common.Address, error) {
	return _RegistryTest.Contract.TargetContracts(&_RegistryTest.CallOpts)
}

// TargetContracts is a free data retrieval call binding the contract method 0x3f7286f4.
//
// Solidity: function targetContracts() view returns(address[] targetedContracts_)
func (_RegistryTest *RegistryTestCallerSession) TargetContracts() ([]common.Address, error) {
	return _RegistryTest.Contract.TargetContracts(&_RegistryTest.CallOpts)
}

// TargetInterfaces is a free data retrieval call binding the contract method 0x2ade3880.
//
// Solidity: function targetInterfaces() view returns((address,string[])[] targetedInterfaces_)
func (_RegistryTest *RegistryTestCaller) TargetInterfaces(opts *bind.CallOpts) ([]StdInvariantFuzzInterface, error) {
	var out []interface{}
	err := _RegistryTest.contract.Call(opts, &out, "targetInterfaces")

	if err != nil {
		return *new([]StdInvariantFuzzInterface), err
	}

	out0 := *abi.ConvertType(out[0], new([]StdInvariantFuzzInterface)).(*[]StdInvariantFuzzInterface)

	return out0, err

}

// TargetInterfaces is a free data retrieval call binding the contract method 0x2ade3880.
//
// Solidity: function targetInterfaces() view returns((address,string[])[] targetedInterfaces_)
func (_RegistryTest *RegistryTestSession) TargetInterfaces() ([]StdInvariantFuzzInterface, error) {
	return _RegistryTest.Contract.TargetInterfaces(&_RegistryTest.CallOpts)
}

// TargetInterfaces is a free data retrieval call binding the contract method 0x2ade3880.
//
// Solidity: function targetInterfaces() view returns((address,string[])[] targetedInterfaces_)
func (_RegistryTest *RegistryTestCallerSession) TargetInterfaces() ([]StdInvariantFuzzInterface, error) {
	return _RegistryTest.Contract.TargetInterfaces(&_RegistryTest.CallOpts)
}

// TargetSelectors is a free data retrieval call binding the contract method 0x916a17c6.
//
// Solidity: function targetSelectors() view returns((address,bytes4[])[] targetedSelectors_)
func (_RegistryTest *RegistryTestCaller) TargetSelectors(opts *bind.CallOpts) ([]StdInvariantFuzzSelector, error) {
	var out []interface{}
	err := _RegistryTest.contract.Call(opts, &out, "targetSelectors")

	if err != nil {
		return *new([]StdInvariantFuzzSelector), err
	}

	out0 := *abi.ConvertType(out[0], new([]StdInvariantFuzzSelector)).(*[]StdInvariantFuzzSelector)

	return out0, err

}

// TargetSelectors is a free data retrieval call binding the contract method 0x916a17c6.
//
// Solidity: function targetSelectors() view returns((address,bytes4[])[] targetedSelectors_)
func (_RegistryTest *RegistryTestSession) TargetSelectors() ([]StdInvariantFuzzSelector, error) {
	return _RegistryTest.Contract.TargetSelectors(&_RegistryTest.CallOpts)
}

// TargetSelectors is a free data retrieval call binding the contract method 0x916a17c6.
//
// Solidity: function targetSelectors() view returns((address,bytes4[])[] targetedSelectors_)
func (_RegistryTest *RegistryTestCallerSession) TargetSelectors() ([]StdInvariantFuzzSelector, error) {
	return _RegistryTest.Contract.TargetSelectors(&_RegistryTest.CallOpts)
}

// TargetSenders is a free data retrieval call binding the contract method 0x3e5e3c23.
//
// Solidity: function targetSenders() view returns(address[] targetedSenders_)
func (_RegistryTest *RegistryTestCaller) TargetSenders(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _RegistryTest.contract.Call(opts, &out, "targetSenders")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// TargetSenders is a free data retrieval call binding the contract method 0x3e5e3c23.
//
// Solidity: function targetSenders() view returns(address[] targetedSenders_)
func (_RegistryTest *RegistryTestSession) TargetSenders() ([]common.Address, error) {
	return _RegistryTest.Contract.TargetSenders(&_RegistryTest.CallOpts)
}

// TargetSenders is a free data retrieval call binding the contract method 0x3e5e3c23.
//
// Solidity: function targetSenders() view returns(address[] targetedSenders_)
func (_RegistryTest *RegistryTestCallerSession) TargetSenders() ([]common.Address, error) {
	return _RegistryTest.Contract.TargetSenders(&_RegistryTest.CallOpts)
}

// TestInitialize is a free data retrieval call binding the contract method 0x993831b6.
//
// Solidity: function testInitialize() view returns()
func (_RegistryTest *RegistryTestCaller) TestInitialize(opts *bind.CallOpts) error {
	var out []interface{}
	err := _RegistryTest.contract.Call(opts, &out, "testInitialize")

	if err != nil {
		return err
	}

	return err

}

// TestInitialize is a free data retrieval call binding the contract method 0x993831b6.
//
// Solidity: function testInitialize() view returns()
func (_RegistryTest *RegistryTestSession) TestInitialize() error {
	return _RegistryTest.Contract.TestInitialize(&_RegistryTest.CallOpts)
}

// TestInitialize is a free data retrieval call binding the contract method 0x993831b6.
//
// Solidity: function testInitialize() view returns()
func (_RegistryTest *RegistryTestCallerSession) TestInitialize() error {
	return _RegistryTest.Contract.TestInitialize(&_RegistryTest.CallOpts)
}

// SetUp is a paid mutator transaction binding the contract method 0x0a9254e4.
//
// Solidity: function setUp() returns()
func (_RegistryTest *RegistryTestTransactor) SetUp(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RegistryTest.contract.Transact(opts, "setUp")
}

// SetUp is a paid mutator transaction binding the contract method 0x0a9254e4.
//
// Solidity: function setUp() returns()
func (_RegistryTest *RegistryTestSession) SetUp() (*types.Transaction, error) {
	return _RegistryTest.Contract.SetUp(&_RegistryTest.TransactOpts)
}

// SetUp is a paid mutator transaction binding the contract method 0x0a9254e4.
//
// Solidity: function setUp() returns()
func (_RegistryTest *RegistryTestTransactorSession) SetUp() (*types.Transaction, error) {
	return _RegistryTest.Contract.SetUp(&_RegistryTest.TransactOpts)
}

// TestChangeChainStatus is a paid mutator transaction binding the contract method 0xb0aef6b3.
//
// Solidity: function testChangeChainStatus() returns()
func (_RegistryTest *RegistryTestTransactor) TestChangeChainStatus(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RegistryTest.contract.Transact(opts, "testChangeChainStatus")
}

// TestChangeChainStatus is a paid mutator transaction binding the contract method 0xb0aef6b3.
//
// Solidity: function testChangeChainStatus() returns()
func (_RegistryTest *RegistryTestSession) TestChangeChainStatus() (*types.Transaction, error) {
	return _RegistryTest.Contract.TestChangeChainStatus(&_RegistryTest.TransactOpts)
}

// TestChangeChainStatus is a paid mutator transaction binding the contract method 0xb0aef6b3.
//
// Solidity: function testChangeChainStatus() returns()
func (_RegistryTest *RegistryTestTransactorSession) TestChangeChainStatus() (*types.Transaction, error) {
	return _RegistryTest.Contract.TestChangeChainStatus(&_RegistryTest.TransactOpts)
}

// TestChangeStatusDirectCallFails is a paid mutator transaction binding the contract method 0x49b7b198.
//
// Solidity: function testChangeStatusDirectCallFails() returns()
func (_RegistryTest *RegistryTestTransactor) TestChangeStatusDirectCallFails(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RegistryTest.contract.Transact(opts, "testChangeStatusDirectCallFails")
}

// TestChangeStatusDirectCallFails is a paid mutator transaction binding the contract method 0x49b7b198.
//
// Solidity: function testChangeStatusDirectCallFails() returns()
func (_RegistryTest *RegistryTestSession) TestChangeStatusDirectCallFails() (*types.Transaction, error) {
	return _RegistryTest.Contract.TestChangeStatusDirectCallFails(&_RegistryTest.TransactOpts)
}

// TestChangeStatusDirectCallFails is a paid mutator transaction binding the contract method 0x49b7b198.
//
// Solidity: function testChangeStatusDirectCallFails() returns()
func (_RegistryTest *RegistryTestTransactorSession) TestChangeStatusDirectCallFails() (*types.Transaction, error) {
	return _RegistryTest.Contract.TestChangeStatusDirectCallFails(&_RegistryTest.TransactOpts)
}

// TestInitializeWithZeroAddress is a paid mutator transaction binding the contract method 0x71748c09.
//
// Solidity: function testInitializeWithZeroAddress() returns()
func (_RegistryTest *RegistryTestTransactor) TestInitializeWithZeroAddress(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RegistryTest.contract.Transact(opts, "testInitializeWithZeroAddress")
}

// TestInitializeWithZeroAddress is a paid mutator transaction binding the contract method 0x71748c09.
//
// Solidity: function testInitializeWithZeroAddress() returns()
func (_RegistryTest *RegistryTestSession) TestInitializeWithZeroAddress() (*types.Transaction, error) {
	return _RegistryTest.Contract.TestInitializeWithZeroAddress(&_RegistryTest.TransactOpts)
}

// TestInitializeWithZeroAddress is a paid mutator transaction binding the contract method 0x71748c09.
//
// Solidity: function testInitializeWithZeroAddress() returns()
func (_RegistryTest *RegistryTestTransactorSession) TestInitializeWithZeroAddress() (*types.Transaction, error) {
	return _RegistryTest.Contract.TestInitializeWithZeroAddress(&_RegistryTest.TransactOpts)
}

// TestMultipleActiveChains is a paid mutator transaction binding the contract method 0x11aa0d44.
//
// Solidity: function testMultipleActiveChains() returns()
func (_RegistryTest *RegistryTestTransactor) TestMultipleActiveChains(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RegistryTest.contract.Transact(opts, "testMultipleActiveChains")
}

// TestMultipleActiveChains is a paid mutator transaction binding the contract method 0x11aa0d44.
//
// Solidity: function testMultipleActiveChains() returns()
func (_RegistryTest *RegistryTestSession) TestMultipleActiveChains() (*types.Transaction, error) {
	return _RegistryTest.Contract.TestMultipleActiveChains(&_RegistryTest.TransactOpts)
}

// TestMultipleActiveChains is a paid mutator transaction binding the contract method 0x11aa0d44.
//
// Solidity: function testMultipleActiveChains() returns()
func (_RegistryTest *RegistryTestTransactorSession) TestMultipleActiveChains() (*types.Transaction, error) {
	return _RegistryTest.Contract.TestMultipleActiveChains(&_RegistryTest.TransactOpts)
}

// TestOnCallInvalidSender is a paid mutator transaction binding the contract method 0xaebfe781.
//
// Solidity: function testOnCallInvalidSender() returns()
func (_RegistryTest *RegistryTestTransactor) TestOnCallInvalidSender(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RegistryTest.contract.Transact(opts, "testOnCallInvalidSender")
}

// TestOnCallInvalidSender is a paid mutator transaction binding the contract method 0xaebfe781.
//
// Solidity: function testOnCallInvalidSender() returns()
func (_RegistryTest *RegistryTestSession) TestOnCallInvalidSender() (*types.Transaction, error) {
	return _RegistryTest.Contract.TestOnCallInvalidSender(&_RegistryTest.TransactOpts)
}

// TestOnCallInvalidSender is a paid mutator transaction binding the contract method 0xaebfe781.
//
// Solidity: function testOnCallInvalidSender() returns()
func (_RegistryTest *RegistryTestTransactorSession) TestOnCallInvalidSender() (*types.Transaction, error) {
	return _RegistryTest.Contract.TestOnCallInvalidSender(&_RegistryTest.TransactOpts)
}

// TestOnCallPaused is a paid mutator transaction binding the contract method 0xb13cbb33.
//
// Solidity: function testOnCallPaused() returns()
func (_RegistryTest *RegistryTestTransactor) TestOnCallPaused(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RegistryTest.contract.Transact(opts, "testOnCallPaused")
}

// TestOnCallPaused is a paid mutator transaction binding the contract method 0xb13cbb33.
//
// Solidity: function testOnCallPaused() returns()
func (_RegistryTest *RegistryTestSession) TestOnCallPaused() (*types.Transaction, error) {
	return _RegistryTest.Contract.TestOnCallPaused(&_RegistryTest.TransactOpts)
}

// TestOnCallPaused is a paid mutator transaction binding the contract method 0xb13cbb33.
//
// Solidity: function testOnCallPaused() returns()
func (_RegistryTest *RegistryTestTransactorSession) TestOnCallPaused() (*types.Transaction, error) {
	return _RegistryTest.Contract.TestOnCallPaused(&_RegistryTest.TransactOpts)
}

// TestOnCallUnauthorized is a paid mutator transaction binding the contract method 0xdca5e415.
//
// Solidity: function testOnCallUnauthorized() returns()
func (_RegistryTest *RegistryTestTransactor) TestOnCallUnauthorized(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RegistryTest.contract.Transact(opts, "testOnCallUnauthorized")
}

// TestOnCallUnauthorized is a paid mutator transaction binding the contract method 0xdca5e415.
//
// Solidity: function testOnCallUnauthorized() returns()
func (_RegistryTest *RegistryTestSession) TestOnCallUnauthorized() (*types.Transaction, error) {
	return _RegistryTest.Contract.TestOnCallUnauthorized(&_RegistryTest.TransactOpts)
}

// TestOnCallUnauthorized is a paid mutator transaction binding the contract method 0xdca5e415.
//
// Solidity: function testOnCallUnauthorized() returns()
func (_RegistryTest *RegistryTestTransactorSession) TestOnCallUnauthorized() (*types.Transaction, error) {
	return _RegistryTest.Contract.TestOnCallUnauthorized(&_RegistryTest.TransactOpts)
}

// TestPause is a paid mutator transaction binding the contract method 0x9bf35597.
//
// Solidity: function testPause() returns()
func (_RegistryTest *RegistryTestTransactor) TestPause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RegistryTest.contract.Transact(opts, "testPause")
}

// TestPause is a paid mutator transaction binding the contract method 0x9bf35597.
//
// Solidity: function testPause() returns()
func (_RegistryTest *RegistryTestSession) TestPause() (*types.Transaction, error) {
	return _RegistryTest.Contract.TestPause(&_RegistryTest.TransactOpts)
}

// TestPause is a paid mutator transaction binding the contract method 0x9bf35597.
//
// Solidity: function testPause() returns()
func (_RegistryTest *RegistryTestTransactorSession) TestPause() (*types.Transaction, error) {
	return _RegistryTest.Contract.TestPause(&_RegistryTest.TransactOpts)
}

// TestPauseUnauthorized is a paid mutator transaction binding the contract method 0x151e9be4.
//
// Solidity: function testPauseUnauthorized() returns()
func (_RegistryTest *RegistryTestTransactor) TestPauseUnauthorized(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RegistryTest.contract.Transact(opts, "testPauseUnauthorized")
}

// TestPauseUnauthorized is a paid mutator transaction binding the contract method 0x151e9be4.
//
// Solidity: function testPauseUnauthorized() returns()
func (_RegistryTest *RegistryTestSession) TestPauseUnauthorized() (*types.Transaction, error) {
	return _RegistryTest.Contract.TestPauseUnauthorized(&_RegistryTest.TransactOpts)
}

// TestPauseUnauthorized is a paid mutator transaction binding the contract method 0x151e9be4.
//
// Solidity: function testPauseUnauthorized() returns()
func (_RegistryTest *RegistryTestTransactorSession) TestPauseUnauthorized() (*types.Transaction, error) {
	return _RegistryTest.Contract.TestPauseUnauthorized(&_RegistryTest.TransactOpts)
}

// TestRegisterContract is a paid mutator transaction binding the contract method 0xb39377d8.
//
// Solidity: function testRegisterContract() returns()
func (_RegistryTest *RegistryTestTransactor) TestRegisterContract(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RegistryTest.contract.Transact(opts, "testRegisterContract")
}

// TestRegisterContract is a paid mutator transaction binding the contract method 0xb39377d8.
//
// Solidity: function testRegisterContract() returns()
func (_RegistryTest *RegistryTestSession) TestRegisterContract() (*types.Transaction, error) {
	return _RegistryTest.Contract.TestRegisterContract(&_RegistryTest.TransactOpts)
}

// TestRegisterContract is a paid mutator transaction binding the contract method 0xb39377d8.
//
// Solidity: function testRegisterContract() returns()
func (_RegistryTest *RegistryTestTransactorSession) TestRegisterContract() (*types.Transaction, error) {
	return _RegistryTest.Contract.TestRegisterContract(&_RegistryTest.TransactOpts)
}

// TestRegisterContractWithEmptyAddress is a paid mutator transaction binding the contract method 0x2013038b.
//
// Solidity: function testRegisterContractWithEmptyAddress() returns()
func (_RegistryTest *RegistryTestTransactor) TestRegisterContractWithEmptyAddress(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RegistryTest.contract.Transact(opts, "testRegisterContractWithEmptyAddress")
}

// TestRegisterContractWithEmptyAddress is a paid mutator transaction binding the contract method 0x2013038b.
//
// Solidity: function testRegisterContractWithEmptyAddress() returns()
func (_RegistryTest *RegistryTestSession) TestRegisterContractWithEmptyAddress() (*types.Transaction, error) {
	return _RegistryTest.Contract.TestRegisterContractWithEmptyAddress(&_RegistryTest.TransactOpts)
}

// TestRegisterContractWithEmptyAddress is a paid mutator transaction binding the contract method 0x2013038b.
//
// Solidity: function testRegisterContractWithEmptyAddress() returns()
func (_RegistryTest *RegistryTestTransactorSession) TestRegisterContractWithEmptyAddress() (*types.Transaction, error) {
	return _RegistryTest.Contract.TestRegisterContractWithEmptyAddress(&_RegistryTest.TransactOpts)
}

// TestRegisterContractWithEmptyType is a paid mutator transaction binding the contract method 0xd97aa899.
//
// Solidity: function testRegisterContractWithEmptyType() returns()
func (_RegistryTest *RegistryTestTransactor) TestRegisterContractWithEmptyType(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RegistryTest.contract.Transact(opts, "testRegisterContractWithEmptyType")
}

// TestRegisterContractWithEmptyType is a paid mutator transaction binding the contract method 0xd97aa899.
//
// Solidity: function testRegisterContractWithEmptyType() returns()
func (_RegistryTest *RegistryTestSession) TestRegisterContractWithEmptyType() (*types.Transaction, error) {
	return _RegistryTest.Contract.TestRegisterContractWithEmptyType(&_RegistryTest.TransactOpts)
}

// TestRegisterContractWithEmptyType is a paid mutator transaction binding the contract method 0xd97aa899.
//
// Solidity: function testRegisterContractWithEmptyType() returns()
func (_RegistryTest *RegistryTestTransactorSession) TestRegisterContractWithEmptyType() (*types.Transaction, error) {
	return _RegistryTest.Contract.TestRegisterContractWithEmptyType(&_RegistryTest.TransactOpts)
}

// TestRegisterZRC20Token is a paid mutator transaction binding the contract method 0x8c500b5c.
//
// Solidity: function testRegisterZRC20Token() returns()
func (_RegistryTest *RegistryTestTransactor) TestRegisterZRC20Token(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RegistryTest.contract.Transact(opts, "testRegisterZRC20Token")
}

// TestRegisterZRC20Token is a paid mutator transaction binding the contract method 0x8c500b5c.
//
// Solidity: function testRegisterZRC20Token() returns()
func (_RegistryTest *RegistryTestSession) TestRegisterZRC20Token() (*types.Transaction, error) {
	return _RegistryTest.Contract.TestRegisterZRC20Token(&_RegistryTest.TransactOpts)
}

// TestRegisterZRC20Token is a paid mutator transaction binding the contract method 0x8c500b5c.
//
// Solidity: function testRegisterZRC20Token() returns()
func (_RegistryTest *RegistryTestTransactorSession) TestRegisterZRC20Token() (*types.Transaction, error) {
	return _RegistryTest.Contract.TestRegisterZRC20Token(&_RegistryTest.TransactOpts)
}

// TestRegisterZRC20TokenWithEmptyOriginAddress is a paid mutator transaction binding the contract method 0xd312ad7d.
//
// Solidity: function testRegisterZRC20TokenWithEmptyOriginAddress() returns()
func (_RegistryTest *RegistryTestTransactor) TestRegisterZRC20TokenWithEmptyOriginAddress(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RegistryTest.contract.Transact(opts, "testRegisterZRC20TokenWithEmptyOriginAddress")
}

// TestRegisterZRC20TokenWithEmptyOriginAddress is a paid mutator transaction binding the contract method 0xd312ad7d.
//
// Solidity: function testRegisterZRC20TokenWithEmptyOriginAddress() returns()
func (_RegistryTest *RegistryTestSession) TestRegisterZRC20TokenWithEmptyOriginAddress() (*types.Transaction, error) {
	return _RegistryTest.Contract.TestRegisterZRC20TokenWithEmptyOriginAddress(&_RegistryTest.TransactOpts)
}

// TestRegisterZRC20TokenWithEmptyOriginAddress is a paid mutator transaction binding the contract method 0xd312ad7d.
//
// Solidity: function testRegisterZRC20TokenWithEmptyOriginAddress() returns()
func (_RegistryTest *RegistryTestTransactorSession) TestRegisterZRC20TokenWithEmptyOriginAddress() (*types.Transaction, error) {
	return _RegistryTest.Contract.TestRegisterZRC20TokenWithEmptyOriginAddress(&_RegistryTest.TransactOpts)
}

// TestRegisterZRC20TokenWithEmptySymbol is a paid mutator transaction binding the contract method 0xd6683856.
//
// Solidity: function testRegisterZRC20TokenWithEmptySymbol() returns()
func (_RegistryTest *RegistryTestTransactor) TestRegisterZRC20TokenWithEmptySymbol(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RegistryTest.contract.Transact(opts, "testRegisterZRC20TokenWithEmptySymbol")
}

// TestRegisterZRC20TokenWithEmptySymbol is a paid mutator transaction binding the contract method 0xd6683856.
//
// Solidity: function testRegisterZRC20TokenWithEmptySymbol() returns()
func (_RegistryTest *RegistryTestSession) TestRegisterZRC20TokenWithEmptySymbol() (*types.Transaction, error) {
	return _RegistryTest.Contract.TestRegisterZRC20TokenWithEmptySymbol(&_RegistryTest.TransactOpts)
}

// TestRegisterZRC20TokenWithEmptySymbol is a paid mutator transaction binding the contract method 0xd6683856.
//
// Solidity: function testRegisterZRC20TokenWithEmptySymbol() returns()
func (_RegistryTest *RegistryTestTransactorSession) TestRegisterZRC20TokenWithEmptySymbol() (*types.Transaction, error) {
	return _RegistryTest.Contract.TestRegisterZRC20TokenWithEmptySymbol(&_RegistryTest.TransactOpts)
}

// TestRegisterZRC20TokenWithZeroAddress is a paid mutator transaction binding the contract method 0xc52521cf.
//
// Solidity: function testRegisterZRC20TokenWithZeroAddress() returns()
func (_RegistryTest *RegistryTestTransactor) TestRegisterZRC20TokenWithZeroAddress(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RegistryTest.contract.Transact(opts, "testRegisterZRC20TokenWithZeroAddress")
}

// TestRegisterZRC20TokenWithZeroAddress is a paid mutator transaction binding the contract method 0xc52521cf.
//
// Solidity: function testRegisterZRC20TokenWithZeroAddress() returns()
func (_RegistryTest *RegistryTestSession) TestRegisterZRC20TokenWithZeroAddress() (*types.Transaction, error) {
	return _RegistryTest.Contract.TestRegisterZRC20TokenWithZeroAddress(&_RegistryTest.TransactOpts)
}

// TestRegisterZRC20TokenWithZeroAddress is a paid mutator transaction binding the contract method 0xc52521cf.
//
// Solidity: function testRegisterZRC20TokenWithZeroAddress() returns()
func (_RegistryTest *RegistryTestTransactorSession) TestRegisterZRC20TokenWithZeroAddress() (*types.Transaction, error) {
	return _RegistryTest.Contract.TestRegisterZRC20TokenWithZeroAddress(&_RegistryTest.TransactOpts)
}

// TestSetContractActive is a paid mutator transaction binding the contract method 0xfaab466a.
//
// Solidity: function testSetContractActive() returns()
func (_RegistryTest *RegistryTestTransactor) TestSetContractActive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RegistryTest.contract.Transact(opts, "testSetContractActive")
}

// TestSetContractActive is a paid mutator transaction binding the contract method 0xfaab466a.
//
// Solidity: function testSetContractActive() returns()
func (_RegistryTest *RegistryTestSession) TestSetContractActive() (*types.Transaction, error) {
	return _RegistryTest.Contract.TestSetContractActive(&_RegistryTest.TransactOpts)
}

// TestSetContractActive is a paid mutator transaction binding the contract method 0xfaab466a.
//
// Solidity: function testSetContractActive() returns()
func (_RegistryTest *RegistryTestTransactorSession) TestSetContractActive() (*types.Transaction, error) {
	return _RegistryTest.Contract.TestSetContractActive(&_RegistryTest.TransactOpts)
}

// TestSetContractActiveWithInvalidType is a paid mutator transaction binding the contract method 0x5fe0a7a2.
//
// Solidity: function testSetContractActiveWithInvalidType() returns()
func (_RegistryTest *RegistryTestTransactor) TestSetContractActiveWithInvalidType(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RegistryTest.contract.Transact(opts, "testSetContractActiveWithInvalidType")
}

// TestSetContractActiveWithInvalidType is a paid mutator transaction binding the contract method 0x5fe0a7a2.
//
// Solidity: function testSetContractActiveWithInvalidType() returns()
func (_RegistryTest *RegistryTestSession) TestSetContractActiveWithInvalidType() (*types.Transaction, error) {
	return _RegistryTest.Contract.TestSetContractActiveWithInvalidType(&_RegistryTest.TransactOpts)
}

// TestSetContractActiveWithInvalidType is a paid mutator transaction binding the contract method 0x5fe0a7a2.
//
// Solidity: function testSetContractActiveWithInvalidType() returns()
func (_RegistryTest *RegistryTestTransactorSession) TestSetContractActiveWithInvalidType() (*types.Transaction, error) {
	return _RegistryTest.Contract.TestSetContractActiveWithInvalidType(&_RegistryTest.TransactOpts)
}

// TestSetZRC20TokenActive is a paid mutator transaction binding the contract method 0x24196f32.
//
// Solidity: function testSetZRC20TokenActive() returns()
func (_RegistryTest *RegistryTestTransactor) TestSetZRC20TokenActive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RegistryTest.contract.Transact(opts, "testSetZRC20TokenActive")
}

// TestSetZRC20TokenActive is a paid mutator transaction binding the contract method 0x24196f32.
//
// Solidity: function testSetZRC20TokenActive() returns()
func (_RegistryTest *RegistryTestSession) TestSetZRC20TokenActive() (*types.Transaction, error) {
	return _RegistryTest.Contract.TestSetZRC20TokenActive(&_RegistryTest.TransactOpts)
}

// TestSetZRC20TokenActive is a paid mutator transaction binding the contract method 0x24196f32.
//
// Solidity: function testSetZRC20TokenActive() returns()
func (_RegistryTest *RegistryTestTransactorSession) TestSetZRC20TokenActive() (*types.Transaction, error) {
	return _RegistryTest.Contract.TestSetZRC20TokenActive(&_RegistryTest.TransactOpts)
}

// TestSetZRC20TokenActiveWithZeroAddress is a paid mutator transaction binding the contract method 0x164c5b02.
//
// Solidity: function testSetZRC20TokenActiveWithZeroAddress() returns()
func (_RegistryTest *RegistryTestTransactor) TestSetZRC20TokenActiveWithZeroAddress(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RegistryTest.contract.Transact(opts, "testSetZRC20TokenActiveWithZeroAddress")
}

// TestSetZRC20TokenActiveWithZeroAddress is a paid mutator transaction binding the contract method 0x164c5b02.
//
// Solidity: function testSetZRC20TokenActiveWithZeroAddress() returns()
func (_RegistryTest *RegistryTestSession) TestSetZRC20TokenActiveWithZeroAddress() (*types.Transaction, error) {
	return _RegistryTest.Contract.TestSetZRC20TokenActiveWithZeroAddress(&_RegistryTest.TransactOpts)
}

// TestSetZRC20TokenActiveWithZeroAddress is a paid mutator transaction binding the contract method 0x164c5b02.
//
// Solidity: function testSetZRC20TokenActiveWithZeroAddress() returns()
func (_RegistryTest *RegistryTestTransactorSession) TestSetZRC20TokenActiveWithZeroAddress() (*types.Transaction, error) {
	return _RegistryTest.Contract.TestSetZRC20TokenActiveWithZeroAddress(&_RegistryTest.TransactOpts)
}

// TestUpdateChainMetadata is a paid mutator transaction binding the contract method 0xbc056f7f.
//
// Solidity: function testUpdateChainMetadata() returns()
func (_RegistryTest *RegistryTestTransactor) TestUpdateChainMetadata(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RegistryTest.contract.Transact(opts, "testUpdateChainMetadata")
}

// TestUpdateChainMetadata is a paid mutator transaction binding the contract method 0xbc056f7f.
//
// Solidity: function testUpdateChainMetadata() returns()
func (_RegistryTest *RegistryTestSession) TestUpdateChainMetadata() (*types.Transaction, error) {
	return _RegistryTest.Contract.TestUpdateChainMetadata(&_RegistryTest.TransactOpts)
}

// TestUpdateChainMetadata is a paid mutator transaction binding the contract method 0xbc056f7f.
//
// Solidity: function testUpdateChainMetadata() returns()
func (_RegistryTest *RegistryTestTransactorSession) TestUpdateChainMetadata() (*types.Transaction, error) {
	return _RegistryTest.Contract.TestUpdateChainMetadata(&_RegistryTest.TransactOpts)
}

// TestUpdateContractConfiguration is a paid mutator transaction binding the contract method 0x0c410295.
//
// Solidity: function testUpdateContractConfiguration() returns()
func (_RegistryTest *RegistryTestTransactor) TestUpdateContractConfiguration(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RegistryTest.contract.Transact(opts, "testUpdateContractConfiguration")
}

// TestUpdateContractConfiguration is a paid mutator transaction binding the contract method 0x0c410295.
//
// Solidity: function testUpdateContractConfiguration() returns()
func (_RegistryTest *RegistryTestSession) TestUpdateContractConfiguration() (*types.Transaction, error) {
	return _RegistryTest.Contract.TestUpdateContractConfiguration(&_RegistryTest.TransactOpts)
}

// TestUpdateContractConfiguration is a paid mutator transaction binding the contract method 0x0c410295.
//
// Solidity: function testUpdateContractConfiguration() returns()
func (_RegistryTest *RegistryTestTransactorSession) TestUpdateContractConfiguration() (*types.Transaction, error) {
	return _RegistryTest.Contract.TestUpdateContractConfiguration(&_RegistryTest.TransactOpts)
}

// TestUpdateContractConfigurationWithInvalidType is a paid mutator transaction binding the contract method 0x1ddbe8ca.
//
// Solidity: function testUpdateContractConfigurationWithInvalidType() returns()
func (_RegistryTest *RegistryTestTransactor) TestUpdateContractConfigurationWithInvalidType(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RegistryTest.contract.Transact(opts, "testUpdateContractConfigurationWithInvalidType")
}

// TestUpdateContractConfigurationWithInvalidType is a paid mutator transaction binding the contract method 0x1ddbe8ca.
//
// Solidity: function testUpdateContractConfigurationWithInvalidType() returns()
func (_RegistryTest *RegistryTestSession) TestUpdateContractConfigurationWithInvalidType() (*types.Transaction, error) {
	return _RegistryTest.Contract.TestUpdateContractConfigurationWithInvalidType(&_RegistryTest.TransactOpts)
}

// TestUpdateContractConfigurationWithInvalidType is a paid mutator transaction binding the contract method 0x1ddbe8ca.
//
// Solidity: function testUpdateContractConfigurationWithInvalidType() returns()
func (_RegistryTest *RegistryTestTransactorSession) TestUpdateContractConfigurationWithInvalidType() (*types.Transaction, error) {
	return _RegistryTest.Contract.TestUpdateContractConfigurationWithInvalidType(&_RegistryTest.TransactOpts)
}

// RegistryTestChainMetadataUpdatedIterator is returned from FilterChainMetadataUpdated and is used to iterate over the raw logs and unpacked data for ChainMetadataUpdated events raised by the RegistryTest contract.
type RegistryTestChainMetadataUpdatedIterator struct {
	Event *RegistryTestChainMetadataUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryTestChainMetadataUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryTestChainMetadataUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryTestChainMetadataUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryTestChainMetadataUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryTestChainMetadataUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryTestChainMetadataUpdated represents a ChainMetadataUpdated event raised by the RegistryTest contract.
type RegistryTestChainMetadataUpdated struct {
	ChainId *big.Int
	Key     string
	Value   []byte
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterChainMetadataUpdated is a free log retrieval operation binding the contract event 0x40c66d0452b5a398a7ebd687f5c3b020e21aa673375087ff6eb7ad214cfee634.
//
// Solidity: event ChainMetadataUpdated(uint256 indexed chainId, string key, bytes value)
func (_RegistryTest *RegistryTestFilterer) FilterChainMetadataUpdated(opts *bind.FilterOpts, chainId []*big.Int) (*RegistryTestChainMetadataUpdatedIterator, error) {

	var chainIdRule []interface{}
	for _, chainIdItem := range chainId {
		chainIdRule = append(chainIdRule, chainIdItem)
	}

	logs, sub, err := _RegistryTest.contract.FilterLogs(opts, "ChainMetadataUpdated", chainIdRule)
	if err != nil {
		return nil, err
	}
	return &RegistryTestChainMetadataUpdatedIterator{contract: _RegistryTest.contract, event: "ChainMetadataUpdated", logs: logs, sub: sub}, nil
}

// WatchChainMetadataUpdated is a free log subscription operation binding the contract event 0x40c66d0452b5a398a7ebd687f5c3b020e21aa673375087ff6eb7ad214cfee634.
//
// Solidity: event ChainMetadataUpdated(uint256 indexed chainId, string key, bytes value)
func (_RegistryTest *RegistryTestFilterer) WatchChainMetadataUpdated(opts *bind.WatchOpts, sink chan<- *RegistryTestChainMetadataUpdated, chainId []*big.Int) (event.Subscription, error) {

	var chainIdRule []interface{}
	for _, chainIdItem := range chainId {
		chainIdRule = append(chainIdRule, chainIdItem)
	}

	logs, sub, err := _RegistryTest.contract.WatchLogs(opts, "ChainMetadataUpdated", chainIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryTestChainMetadataUpdated)
				if err := _RegistryTest.contract.UnpackLog(event, "ChainMetadataUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseChainMetadataUpdated is a log parse operation binding the contract event 0x40c66d0452b5a398a7ebd687f5c3b020e21aa673375087ff6eb7ad214cfee634.
//
// Solidity: event ChainMetadataUpdated(uint256 indexed chainId, string key, bytes value)
func (_RegistryTest *RegistryTestFilterer) ParseChainMetadataUpdated(log types.Log) (*RegistryTestChainMetadataUpdated, error) {
	event := new(RegistryTestChainMetadataUpdated)
	if err := _RegistryTest.contract.UnpackLog(event, "ChainMetadataUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryTestChainStatusChangedIterator is returned from FilterChainStatusChanged and is used to iterate over the raw logs and unpacked data for ChainStatusChanged events raised by the RegistryTest contract.
type RegistryTestChainStatusChangedIterator struct {
	Event *RegistryTestChainStatusChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryTestChainStatusChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryTestChainStatusChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryTestChainStatusChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryTestChainStatusChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryTestChainStatusChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryTestChainStatusChanged represents a ChainStatusChanged event raised by the RegistryTest contract.
type RegistryTestChainStatusChanged struct {
	ChainId  *big.Int
	NewState bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterChainStatusChanged is a free log retrieval operation binding the contract event 0xc98ceea113f96d4762d49d2885a10d7d0d16d07243bb17df97e53e9035e1415e.
//
// Solidity: event ChainStatusChanged(uint256 indexed chainId, bool newState)
func (_RegistryTest *RegistryTestFilterer) FilterChainStatusChanged(opts *bind.FilterOpts, chainId []*big.Int) (*RegistryTestChainStatusChangedIterator, error) {

	var chainIdRule []interface{}
	for _, chainIdItem := range chainId {
		chainIdRule = append(chainIdRule, chainIdItem)
	}

	logs, sub, err := _RegistryTest.contract.FilterLogs(opts, "ChainStatusChanged", chainIdRule)
	if err != nil {
		return nil, err
	}
	return &RegistryTestChainStatusChangedIterator{contract: _RegistryTest.contract, event: "ChainStatusChanged", logs: logs, sub: sub}, nil
}

// WatchChainStatusChanged is a free log subscription operation binding the contract event 0xc98ceea113f96d4762d49d2885a10d7d0d16d07243bb17df97e53e9035e1415e.
//
// Solidity: event ChainStatusChanged(uint256 indexed chainId, bool newState)
func (_RegistryTest *RegistryTestFilterer) WatchChainStatusChanged(opts *bind.WatchOpts, sink chan<- *RegistryTestChainStatusChanged, chainId []*big.Int) (event.Subscription, error) {

	var chainIdRule []interface{}
	for _, chainIdItem := range chainId {
		chainIdRule = append(chainIdRule, chainIdItem)
	}

	logs, sub, err := _RegistryTest.contract.WatchLogs(opts, "ChainStatusChanged", chainIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryTestChainStatusChanged)
				if err := _RegistryTest.contract.UnpackLog(event, "ChainStatusChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseChainStatusChanged is a log parse operation binding the contract event 0xc98ceea113f96d4762d49d2885a10d7d0d16d07243bb17df97e53e9035e1415e.
//
// Solidity: event ChainStatusChanged(uint256 indexed chainId, bool newState)
func (_RegistryTest *RegistryTestFilterer) ParseChainStatusChanged(log types.Log) (*RegistryTestChainStatusChanged, error) {
	event := new(RegistryTestChainStatusChanged)
	if err := _RegistryTest.contract.UnpackLog(event, "ChainStatusChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryTestContractConfigurationUpdatedIterator is returned from FilterContractConfigurationUpdated and is used to iterate over the raw logs and unpacked data for ContractConfigurationUpdated events raised by the RegistryTest contract.
type RegistryTestContractConfigurationUpdatedIterator struct {
	Event *RegistryTestContractConfigurationUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryTestContractConfigurationUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryTestContractConfigurationUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryTestContractConfigurationUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryTestContractConfigurationUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryTestContractConfigurationUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryTestContractConfigurationUpdated represents a ContractConfigurationUpdated event raised by the RegistryTest contract.
type RegistryTestContractConfigurationUpdated struct {
	ChainId      *big.Int
	ContractType string
	Key          string
	Value        []byte
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterContractConfigurationUpdated is a free log retrieval operation binding the contract event 0xaea6b6dd1ea232db3e0fc64d54fd642518ed2932043ff697ac7c8a83d651c7c5.
//
// Solidity: event ContractConfigurationUpdated(uint256 indexed chainId, string contractType, string key, bytes value)
func (_RegistryTest *RegistryTestFilterer) FilterContractConfigurationUpdated(opts *bind.FilterOpts, chainId []*big.Int) (*RegistryTestContractConfigurationUpdatedIterator, error) {

	var chainIdRule []interface{}
	for _, chainIdItem := range chainId {
		chainIdRule = append(chainIdRule, chainIdItem)
	}

	logs, sub, err := _RegistryTest.contract.FilterLogs(opts, "ContractConfigurationUpdated", chainIdRule)
	if err != nil {
		return nil, err
	}
	return &RegistryTestContractConfigurationUpdatedIterator{contract: _RegistryTest.contract, event: "ContractConfigurationUpdated", logs: logs, sub: sub}, nil
}

// WatchContractConfigurationUpdated is a free log subscription operation binding the contract event 0xaea6b6dd1ea232db3e0fc64d54fd642518ed2932043ff697ac7c8a83d651c7c5.
//
// Solidity: event ContractConfigurationUpdated(uint256 indexed chainId, string contractType, string key, bytes value)
func (_RegistryTest *RegistryTestFilterer) WatchContractConfigurationUpdated(opts *bind.WatchOpts, sink chan<- *RegistryTestContractConfigurationUpdated, chainId []*big.Int) (event.Subscription, error) {

	var chainIdRule []interface{}
	for _, chainIdItem := range chainId {
		chainIdRule = append(chainIdRule, chainIdItem)
	}

	logs, sub, err := _RegistryTest.contract.WatchLogs(opts, "ContractConfigurationUpdated", chainIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryTestContractConfigurationUpdated)
				if err := _RegistryTest.contract.UnpackLog(event, "ContractConfigurationUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseContractConfigurationUpdated is a log parse operation binding the contract event 0xaea6b6dd1ea232db3e0fc64d54fd642518ed2932043ff697ac7c8a83d651c7c5.
//
// Solidity: event ContractConfigurationUpdated(uint256 indexed chainId, string contractType, string key, bytes value)
func (_RegistryTest *RegistryTestFilterer) ParseContractConfigurationUpdated(log types.Log) (*RegistryTestContractConfigurationUpdated, error) {
	event := new(RegistryTestContractConfigurationUpdated)
	if err := _RegistryTest.contract.UnpackLog(event, "ContractConfigurationUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryTestContractRegisteredIterator is returned from FilterContractRegistered and is used to iterate over the raw logs and unpacked data for ContractRegistered events raised by the RegistryTest contract.
type RegistryTestContractRegisteredIterator struct {
	Event *RegistryTestContractRegistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryTestContractRegisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryTestContractRegistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryTestContractRegistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryTestContractRegisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryTestContractRegisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryTestContractRegistered represents a ContractRegistered event raised by the RegistryTest contract.
type RegistryTestContractRegistered struct {
	ChainId      *big.Int
	ContractType string
	AddressBytes []byte
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterContractRegistered is a free log retrieval operation binding the contract event 0x20319e67335097991b9d6add94a71632118372c1a0b5650654f069668dce2581.
//
// Solidity: event ContractRegistered(uint256 indexed chainId, string contractType, bytes addressBytes)
func (_RegistryTest *RegistryTestFilterer) FilterContractRegistered(opts *bind.FilterOpts, chainId []*big.Int) (*RegistryTestContractRegisteredIterator, error) {

	var chainIdRule []interface{}
	for _, chainIdItem := range chainId {
		chainIdRule = append(chainIdRule, chainIdItem)
	}

	logs, sub, err := _RegistryTest.contract.FilterLogs(opts, "ContractRegistered", chainIdRule)
	if err != nil {
		return nil, err
	}
	return &RegistryTestContractRegisteredIterator{contract: _RegistryTest.contract, event: "ContractRegistered", logs: logs, sub: sub}, nil
}

// WatchContractRegistered is a free log subscription operation binding the contract event 0x20319e67335097991b9d6add94a71632118372c1a0b5650654f069668dce2581.
//
// Solidity: event ContractRegistered(uint256 indexed chainId, string contractType, bytes addressBytes)
func (_RegistryTest *RegistryTestFilterer) WatchContractRegistered(opts *bind.WatchOpts, sink chan<- *RegistryTestContractRegistered, chainId []*big.Int) (event.Subscription, error) {

	var chainIdRule []interface{}
	for _, chainIdItem := range chainId {
		chainIdRule = append(chainIdRule, chainIdItem)
	}

	logs, sub, err := _RegistryTest.contract.WatchLogs(opts, "ContractRegistered", chainIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryTestContractRegistered)
				if err := _RegistryTest.contract.UnpackLog(event, "ContractRegistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseContractRegistered is a log parse operation binding the contract event 0x20319e67335097991b9d6add94a71632118372c1a0b5650654f069668dce2581.
//
// Solidity: event ContractRegistered(uint256 indexed chainId, string contractType, bytes addressBytes)
func (_RegistryTest *RegistryTestFilterer) ParseContractRegistered(log types.Log) (*RegistryTestContractRegistered, error) {
	event := new(RegistryTestContractRegistered)
	if err := _RegistryTest.contract.UnpackLog(event, "ContractRegistered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryTestContractStatusChangedIterator is returned from FilterContractStatusChanged and is used to iterate over the raw logs and unpacked data for ContractStatusChanged events raised by the RegistryTest contract.
type RegistryTestContractStatusChangedIterator struct {
	Event *RegistryTestContractStatusChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryTestContractStatusChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryTestContractStatusChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryTestContractStatusChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryTestContractStatusChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryTestContractStatusChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryTestContractStatusChanged represents a ContractStatusChanged event raised by the RegistryTest contract.
type RegistryTestContractStatusChanged struct {
	AddressBytes []byte
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterContractStatusChanged is a free log retrieval operation binding the contract event 0x6db122b2555e642c944e09ae6d733a3f7600404765f612912f72b3c921c0b88c.
//
// Solidity: event ContractStatusChanged(bytes addressBytes)
func (_RegistryTest *RegistryTestFilterer) FilterContractStatusChanged(opts *bind.FilterOpts) (*RegistryTestContractStatusChangedIterator, error) {

	logs, sub, err := _RegistryTest.contract.FilterLogs(opts, "ContractStatusChanged")
	if err != nil {
		return nil, err
	}
	return &RegistryTestContractStatusChangedIterator{contract: _RegistryTest.contract, event: "ContractStatusChanged", logs: logs, sub: sub}, nil
}

// WatchContractStatusChanged is a free log subscription operation binding the contract event 0x6db122b2555e642c944e09ae6d733a3f7600404765f612912f72b3c921c0b88c.
//
// Solidity: event ContractStatusChanged(bytes addressBytes)
func (_RegistryTest *RegistryTestFilterer) WatchContractStatusChanged(opts *bind.WatchOpts, sink chan<- *RegistryTestContractStatusChanged) (event.Subscription, error) {

	logs, sub, err := _RegistryTest.contract.WatchLogs(opts, "ContractStatusChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryTestContractStatusChanged)
				if err := _RegistryTest.contract.UnpackLog(event, "ContractStatusChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseContractStatusChanged is a log parse operation binding the contract event 0x6db122b2555e642c944e09ae6d733a3f7600404765f612912f72b3c921c0b88c.
//
// Solidity: event ContractStatusChanged(bytes addressBytes)
func (_RegistryTest *RegistryTestFilterer) ParseContractStatusChanged(log types.Log) (*RegistryTestContractStatusChanged, error) {
	event := new(RegistryTestContractStatusChanged)
	if err := _RegistryTest.contract.UnpackLog(event, "ContractStatusChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryTestZRC20TokenRegisteredIterator is returned from FilterZRC20TokenRegistered and is used to iterate over the raw logs and unpacked data for ZRC20TokenRegistered events raised by the RegistryTest contract.
type RegistryTestZRC20TokenRegisteredIterator struct {
	Event *RegistryTestZRC20TokenRegistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryTestZRC20TokenRegisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryTestZRC20TokenRegistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryTestZRC20TokenRegistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryTestZRC20TokenRegisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryTestZRC20TokenRegisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryTestZRC20TokenRegistered represents a ZRC20TokenRegistered event raised by the RegistryTest contract.
type RegistryTestZRC20TokenRegistered struct {
	OriginAddress []byte
	Zrc20         common.Address
	Decimals      uint8
	OriginChainId *big.Int
	Symbol        string
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterZRC20TokenRegistered is a free log retrieval operation binding the contract event 0xa9edd2fd29fc8cab6015c2725afa5bc5f3b8d709a02d9e89990ef20fd781e367.
//
// Solidity: event ZRC20TokenRegistered(bytes originAddress, address indexed zrc20, uint8 decimals, uint256 originChainId, string symbol)
func (_RegistryTest *RegistryTestFilterer) FilterZRC20TokenRegistered(opts *bind.FilterOpts, zrc20 []common.Address) (*RegistryTestZRC20TokenRegisteredIterator, error) {

	var zrc20Rule []interface{}
	for _, zrc20Item := range zrc20 {
		zrc20Rule = append(zrc20Rule, zrc20Item)
	}

	logs, sub, err := _RegistryTest.contract.FilterLogs(opts, "ZRC20TokenRegistered", zrc20Rule)
	if err != nil {
		return nil, err
	}
	return &RegistryTestZRC20TokenRegisteredIterator{contract: _RegistryTest.contract, event: "ZRC20TokenRegistered", logs: logs, sub: sub}, nil
}

// WatchZRC20TokenRegistered is a free log subscription operation binding the contract event 0xa9edd2fd29fc8cab6015c2725afa5bc5f3b8d709a02d9e89990ef20fd781e367.
//
// Solidity: event ZRC20TokenRegistered(bytes originAddress, address indexed zrc20, uint8 decimals, uint256 originChainId, string symbol)
func (_RegistryTest *RegistryTestFilterer) WatchZRC20TokenRegistered(opts *bind.WatchOpts, sink chan<- *RegistryTestZRC20TokenRegistered, zrc20 []common.Address) (event.Subscription, error) {

	var zrc20Rule []interface{}
	for _, zrc20Item := range zrc20 {
		zrc20Rule = append(zrc20Rule, zrc20Item)
	}

	logs, sub, err := _RegistryTest.contract.WatchLogs(opts, "ZRC20TokenRegistered", zrc20Rule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryTestZRC20TokenRegistered)
				if err := _RegistryTest.contract.UnpackLog(event, "ZRC20TokenRegistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseZRC20TokenRegistered is a log parse operation binding the contract event 0xa9edd2fd29fc8cab6015c2725afa5bc5f3b8d709a02d9e89990ef20fd781e367.
//
// Solidity: event ZRC20TokenRegistered(bytes originAddress, address indexed zrc20, uint8 decimals, uint256 originChainId, string symbol)
func (_RegistryTest *RegistryTestFilterer) ParseZRC20TokenRegistered(log types.Log) (*RegistryTestZRC20TokenRegistered, error) {
	event := new(RegistryTestZRC20TokenRegistered)
	if err := _RegistryTest.contract.UnpackLog(event, "ZRC20TokenRegistered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryTestZRC20TokenUpdatedIterator is returned from FilterZRC20TokenUpdated and is used to iterate over the raw logs and unpacked data for ZRC20TokenUpdated events raised by the RegistryTest contract.
type RegistryTestZRC20TokenUpdatedIterator struct {
	Event *RegistryTestZRC20TokenUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryTestZRC20TokenUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryTestZRC20TokenUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryTestZRC20TokenUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryTestZRC20TokenUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryTestZRC20TokenUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryTestZRC20TokenUpdated represents a ZRC20TokenUpdated event raised by the RegistryTest contract.
type RegistryTestZRC20TokenUpdated struct {
	Zrc20  common.Address
	Active bool
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterZRC20TokenUpdated is a free log retrieval operation binding the contract event 0x9542d02d4224477c9e9b53628bf5eae8b59520ea6bf2809cec7f24f76bba8ff8.
//
// Solidity: event ZRC20TokenUpdated(address indexed zrc20, bool active)
func (_RegistryTest *RegistryTestFilterer) FilterZRC20TokenUpdated(opts *bind.FilterOpts, zrc20 []common.Address) (*RegistryTestZRC20TokenUpdatedIterator, error) {

	var zrc20Rule []interface{}
	for _, zrc20Item := range zrc20 {
		zrc20Rule = append(zrc20Rule, zrc20Item)
	}

	logs, sub, err := _RegistryTest.contract.FilterLogs(opts, "ZRC20TokenUpdated", zrc20Rule)
	if err != nil {
		return nil, err
	}
	return &RegistryTestZRC20TokenUpdatedIterator{contract: _RegistryTest.contract, event: "ZRC20TokenUpdated", logs: logs, sub: sub}, nil
}

// WatchZRC20TokenUpdated is a free log subscription operation binding the contract event 0x9542d02d4224477c9e9b53628bf5eae8b59520ea6bf2809cec7f24f76bba8ff8.
//
// Solidity: event ZRC20TokenUpdated(address indexed zrc20, bool active)
func (_RegistryTest *RegistryTestFilterer) WatchZRC20TokenUpdated(opts *bind.WatchOpts, sink chan<- *RegistryTestZRC20TokenUpdated, zrc20 []common.Address) (event.Subscription, error) {

	var zrc20Rule []interface{}
	for _, zrc20Item := range zrc20 {
		zrc20Rule = append(zrc20Rule, zrc20Item)
	}

	logs, sub, err := _RegistryTest.contract.WatchLogs(opts, "ZRC20TokenUpdated", zrc20Rule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryTestZRC20TokenUpdated)
				if err := _RegistryTest.contract.UnpackLog(event, "ZRC20TokenUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseZRC20TokenUpdated is a log parse operation binding the contract event 0x9542d02d4224477c9e9b53628bf5eae8b59520ea6bf2809cec7f24f76bba8ff8.
//
// Solidity: event ZRC20TokenUpdated(address indexed zrc20, bool active)
func (_RegistryTest *RegistryTestFilterer) ParseZRC20TokenUpdated(log types.Log) (*RegistryTestZRC20TokenUpdated, error) {
	event := new(RegistryTestZRC20TokenUpdated)
	if err := _RegistryTest.contract.UnpackLog(event, "ZRC20TokenUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryTestLogIterator is returned from FilterLog and is used to iterate over the raw logs and unpacked data for Log events raised by the RegistryTest contract.
type RegistryTestLogIterator struct {
	Event *RegistryTestLog // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryTestLogIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryTestLog)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryTestLog)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryTestLogIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryTestLogIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryTestLog represents a Log event raised by the RegistryTest contract.
type RegistryTestLog struct {
	Arg0 string
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLog is a free log retrieval operation binding the contract event 0x41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50.
//
// Solidity: event log(string arg0)
func (_RegistryTest *RegistryTestFilterer) FilterLog(opts *bind.FilterOpts) (*RegistryTestLogIterator, error) {

	logs, sub, err := _RegistryTest.contract.FilterLogs(opts, "log")
	if err != nil {
		return nil, err
	}
	return &RegistryTestLogIterator{contract: _RegistryTest.contract, event: "log", logs: logs, sub: sub}, nil
}

// WatchLog is a free log subscription operation binding the contract event 0x41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50.
//
// Solidity: event log(string arg0)
func (_RegistryTest *RegistryTestFilterer) WatchLog(opts *bind.WatchOpts, sink chan<- *RegistryTestLog) (event.Subscription, error) {

	logs, sub, err := _RegistryTest.contract.WatchLogs(opts, "log")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryTestLog)
				if err := _RegistryTest.contract.UnpackLog(event, "log", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLog is a log parse operation binding the contract event 0x41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50.
//
// Solidity: event log(string arg0)
func (_RegistryTest *RegistryTestFilterer) ParseLog(log types.Log) (*RegistryTestLog, error) {
	event := new(RegistryTestLog)
	if err := _RegistryTest.contract.UnpackLog(event, "log", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryTestLogAddressIterator is returned from FilterLogAddress and is used to iterate over the raw logs and unpacked data for LogAddress events raised by the RegistryTest contract.
type RegistryTestLogAddressIterator struct {
	Event *RegistryTestLogAddress // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryTestLogAddressIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryTestLogAddress)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryTestLogAddress)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryTestLogAddressIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryTestLogAddressIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryTestLogAddress represents a LogAddress event raised by the RegistryTest contract.
type RegistryTestLogAddress struct {
	Arg0 common.Address
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogAddress is a free log retrieval operation binding the contract event 0x7ae74c527414ae135fd97047b12921a5ec3911b804197855d67e25c7b75ee6f3.
//
// Solidity: event log_address(address arg0)
func (_RegistryTest *RegistryTestFilterer) FilterLogAddress(opts *bind.FilterOpts) (*RegistryTestLogAddressIterator, error) {

	logs, sub, err := _RegistryTest.contract.FilterLogs(opts, "log_address")
	if err != nil {
		return nil, err
	}
	return &RegistryTestLogAddressIterator{contract: _RegistryTest.contract, event: "log_address", logs: logs, sub: sub}, nil
}

// WatchLogAddress is a free log subscription operation binding the contract event 0x7ae74c527414ae135fd97047b12921a5ec3911b804197855d67e25c7b75ee6f3.
//
// Solidity: event log_address(address arg0)
func (_RegistryTest *RegistryTestFilterer) WatchLogAddress(opts *bind.WatchOpts, sink chan<- *RegistryTestLogAddress) (event.Subscription, error) {

	logs, sub, err := _RegistryTest.contract.WatchLogs(opts, "log_address")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryTestLogAddress)
				if err := _RegistryTest.contract.UnpackLog(event, "log_address", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogAddress is a log parse operation binding the contract event 0x7ae74c527414ae135fd97047b12921a5ec3911b804197855d67e25c7b75ee6f3.
//
// Solidity: event log_address(address arg0)
func (_RegistryTest *RegistryTestFilterer) ParseLogAddress(log types.Log) (*RegistryTestLogAddress, error) {
	event := new(RegistryTestLogAddress)
	if err := _RegistryTest.contract.UnpackLog(event, "log_address", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryTestLogArrayIterator is returned from FilterLogArray and is used to iterate over the raw logs and unpacked data for LogArray events raised by the RegistryTest contract.
type RegistryTestLogArrayIterator struct {
	Event *RegistryTestLogArray // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryTestLogArrayIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryTestLogArray)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryTestLogArray)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryTestLogArrayIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryTestLogArrayIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryTestLogArray represents a LogArray event raised by the RegistryTest contract.
type RegistryTestLogArray struct {
	Val []*big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogArray is a free log retrieval operation binding the contract event 0xfb102865d50addddf69da9b5aa1bced66c80cf869a5c8d0471a467e18ce9cab1.
//
// Solidity: event log_array(uint256[] val)
func (_RegistryTest *RegistryTestFilterer) FilterLogArray(opts *bind.FilterOpts) (*RegistryTestLogArrayIterator, error) {

	logs, sub, err := _RegistryTest.contract.FilterLogs(opts, "log_array")
	if err != nil {
		return nil, err
	}
	return &RegistryTestLogArrayIterator{contract: _RegistryTest.contract, event: "log_array", logs: logs, sub: sub}, nil
}

// WatchLogArray is a free log subscription operation binding the contract event 0xfb102865d50addddf69da9b5aa1bced66c80cf869a5c8d0471a467e18ce9cab1.
//
// Solidity: event log_array(uint256[] val)
func (_RegistryTest *RegistryTestFilterer) WatchLogArray(opts *bind.WatchOpts, sink chan<- *RegistryTestLogArray) (event.Subscription, error) {

	logs, sub, err := _RegistryTest.contract.WatchLogs(opts, "log_array")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryTestLogArray)
				if err := _RegistryTest.contract.UnpackLog(event, "log_array", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogArray is a log parse operation binding the contract event 0xfb102865d50addddf69da9b5aa1bced66c80cf869a5c8d0471a467e18ce9cab1.
//
// Solidity: event log_array(uint256[] val)
func (_RegistryTest *RegistryTestFilterer) ParseLogArray(log types.Log) (*RegistryTestLogArray, error) {
	event := new(RegistryTestLogArray)
	if err := _RegistryTest.contract.UnpackLog(event, "log_array", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryTestLogArray0Iterator is returned from FilterLogArray0 and is used to iterate over the raw logs and unpacked data for LogArray0 events raised by the RegistryTest contract.
type RegistryTestLogArray0Iterator struct {
	Event *RegistryTestLogArray0 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryTestLogArray0Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryTestLogArray0)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryTestLogArray0)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryTestLogArray0Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryTestLogArray0Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryTestLogArray0 represents a LogArray0 event raised by the RegistryTest contract.
type RegistryTestLogArray0 struct {
	Val []*big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogArray0 is a free log retrieval operation binding the contract event 0x890a82679b470f2bd82816ed9b161f97d8b967f37fa3647c21d5bf39749e2dd5.
//
// Solidity: event log_array(int256[] val)
func (_RegistryTest *RegistryTestFilterer) FilterLogArray0(opts *bind.FilterOpts) (*RegistryTestLogArray0Iterator, error) {

	logs, sub, err := _RegistryTest.contract.FilterLogs(opts, "log_array0")
	if err != nil {
		return nil, err
	}
	return &RegistryTestLogArray0Iterator{contract: _RegistryTest.contract, event: "log_array0", logs: logs, sub: sub}, nil
}

// WatchLogArray0 is a free log subscription operation binding the contract event 0x890a82679b470f2bd82816ed9b161f97d8b967f37fa3647c21d5bf39749e2dd5.
//
// Solidity: event log_array(int256[] val)
func (_RegistryTest *RegistryTestFilterer) WatchLogArray0(opts *bind.WatchOpts, sink chan<- *RegistryTestLogArray0) (event.Subscription, error) {

	logs, sub, err := _RegistryTest.contract.WatchLogs(opts, "log_array0")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryTestLogArray0)
				if err := _RegistryTest.contract.UnpackLog(event, "log_array0", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogArray0 is a log parse operation binding the contract event 0x890a82679b470f2bd82816ed9b161f97d8b967f37fa3647c21d5bf39749e2dd5.
//
// Solidity: event log_array(int256[] val)
func (_RegistryTest *RegistryTestFilterer) ParseLogArray0(log types.Log) (*RegistryTestLogArray0, error) {
	event := new(RegistryTestLogArray0)
	if err := _RegistryTest.contract.UnpackLog(event, "log_array0", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryTestLogArray1Iterator is returned from FilterLogArray1 and is used to iterate over the raw logs and unpacked data for LogArray1 events raised by the RegistryTest contract.
type RegistryTestLogArray1Iterator struct {
	Event *RegistryTestLogArray1 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryTestLogArray1Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryTestLogArray1)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryTestLogArray1)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryTestLogArray1Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryTestLogArray1Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryTestLogArray1 represents a LogArray1 event raised by the RegistryTest contract.
type RegistryTestLogArray1 struct {
	Val []common.Address
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogArray1 is a free log retrieval operation binding the contract event 0x40e1840f5769073d61bd01372d9b75baa9842d5629a0c99ff103be1178a8e9e2.
//
// Solidity: event log_array(address[] val)
func (_RegistryTest *RegistryTestFilterer) FilterLogArray1(opts *bind.FilterOpts) (*RegistryTestLogArray1Iterator, error) {

	logs, sub, err := _RegistryTest.contract.FilterLogs(opts, "log_array1")
	if err != nil {
		return nil, err
	}
	return &RegistryTestLogArray1Iterator{contract: _RegistryTest.contract, event: "log_array1", logs: logs, sub: sub}, nil
}

// WatchLogArray1 is a free log subscription operation binding the contract event 0x40e1840f5769073d61bd01372d9b75baa9842d5629a0c99ff103be1178a8e9e2.
//
// Solidity: event log_array(address[] val)
func (_RegistryTest *RegistryTestFilterer) WatchLogArray1(opts *bind.WatchOpts, sink chan<- *RegistryTestLogArray1) (event.Subscription, error) {

	logs, sub, err := _RegistryTest.contract.WatchLogs(opts, "log_array1")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryTestLogArray1)
				if err := _RegistryTest.contract.UnpackLog(event, "log_array1", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogArray1 is a log parse operation binding the contract event 0x40e1840f5769073d61bd01372d9b75baa9842d5629a0c99ff103be1178a8e9e2.
//
// Solidity: event log_array(address[] val)
func (_RegistryTest *RegistryTestFilterer) ParseLogArray1(log types.Log) (*RegistryTestLogArray1, error) {
	event := new(RegistryTestLogArray1)
	if err := _RegistryTest.contract.UnpackLog(event, "log_array1", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryTestLogBytesIterator is returned from FilterLogBytes and is used to iterate over the raw logs and unpacked data for LogBytes events raised by the RegistryTest contract.
type RegistryTestLogBytesIterator struct {
	Event *RegistryTestLogBytes // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryTestLogBytesIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryTestLogBytes)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryTestLogBytes)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryTestLogBytesIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryTestLogBytesIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryTestLogBytes represents a LogBytes event raised by the RegistryTest contract.
type RegistryTestLogBytes struct {
	Arg0 []byte
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogBytes is a free log retrieval operation binding the contract event 0x23b62ad0584d24a75f0bf3560391ef5659ec6db1269c56e11aa241d637f19b20.
//
// Solidity: event log_bytes(bytes arg0)
func (_RegistryTest *RegistryTestFilterer) FilterLogBytes(opts *bind.FilterOpts) (*RegistryTestLogBytesIterator, error) {

	logs, sub, err := _RegistryTest.contract.FilterLogs(opts, "log_bytes")
	if err != nil {
		return nil, err
	}
	return &RegistryTestLogBytesIterator{contract: _RegistryTest.contract, event: "log_bytes", logs: logs, sub: sub}, nil
}

// WatchLogBytes is a free log subscription operation binding the contract event 0x23b62ad0584d24a75f0bf3560391ef5659ec6db1269c56e11aa241d637f19b20.
//
// Solidity: event log_bytes(bytes arg0)
func (_RegistryTest *RegistryTestFilterer) WatchLogBytes(opts *bind.WatchOpts, sink chan<- *RegistryTestLogBytes) (event.Subscription, error) {

	logs, sub, err := _RegistryTest.contract.WatchLogs(opts, "log_bytes")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryTestLogBytes)
				if err := _RegistryTest.contract.UnpackLog(event, "log_bytes", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogBytes is a log parse operation binding the contract event 0x23b62ad0584d24a75f0bf3560391ef5659ec6db1269c56e11aa241d637f19b20.
//
// Solidity: event log_bytes(bytes arg0)
func (_RegistryTest *RegistryTestFilterer) ParseLogBytes(log types.Log) (*RegistryTestLogBytes, error) {
	event := new(RegistryTestLogBytes)
	if err := _RegistryTest.contract.UnpackLog(event, "log_bytes", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryTestLogBytes32Iterator is returned from FilterLogBytes32 and is used to iterate over the raw logs and unpacked data for LogBytes32 events raised by the RegistryTest contract.
type RegistryTestLogBytes32Iterator struct {
	Event *RegistryTestLogBytes32 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryTestLogBytes32Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryTestLogBytes32)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryTestLogBytes32)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryTestLogBytes32Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryTestLogBytes32Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryTestLogBytes32 represents a LogBytes32 event raised by the RegistryTest contract.
type RegistryTestLogBytes32 struct {
	Arg0 [32]byte
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogBytes32 is a free log retrieval operation binding the contract event 0xe81699b85113eea1c73e10588b2b035e55893369632173afd43feb192fac64e3.
//
// Solidity: event log_bytes32(bytes32 arg0)
func (_RegistryTest *RegistryTestFilterer) FilterLogBytes32(opts *bind.FilterOpts) (*RegistryTestLogBytes32Iterator, error) {

	logs, sub, err := _RegistryTest.contract.FilterLogs(opts, "log_bytes32")
	if err != nil {
		return nil, err
	}
	return &RegistryTestLogBytes32Iterator{contract: _RegistryTest.contract, event: "log_bytes32", logs: logs, sub: sub}, nil
}

// WatchLogBytes32 is a free log subscription operation binding the contract event 0xe81699b85113eea1c73e10588b2b035e55893369632173afd43feb192fac64e3.
//
// Solidity: event log_bytes32(bytes32 arg0)
func (_RegistryTest *RegistryTestFilterer) WatchLogBytes32(opts *bind.WatchOpts, sink chan<- *RegistryTestLogBytes32) (event.Subscription, error) {

	logs, sub, err := _RegistryTest.contract.WatchLogs(opts, "log_bytes32")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryTestLogBytes32)
				if err := _RegistryTest.contract.UnpackLog(event, "log_bytes32", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogBytes32 is a log parse operation binding the contract event 0xe81699b85113eea1c73e10588b2b035e55893369632173afd43feb192fac64e3.
//
// Solidity: event log_bytes32(bytes32 arg0)
func (_RegistryTest *RegistryTestFilterer) ParseLogBytes32(log types.Log) (*RegistryTestLogBytes32, error) {
	event := new(RegistryTestLogBytes32)
	if err := _RegistryTest.contract.UnpackLog(event, "log_bytes32", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryTestLogIntIterator is returned from FilterLogInt and is used to iterate over the raw logs and unpacked data for LogInt events raised by the RegistryTest contract.
type RegistryTestLogIntIterator struct {
	Event *RegistryTestLogInt // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryTestLogIntIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryTestLogInt)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryTestLogInt)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryTestLogIntIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryTestLogIntIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryTestLogInt represents a LogInt event raised by the RegistryTest contract.
type RegistryTestLogInt struct {
	Arg0 *big.Int
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogInt is a free log retrieval operation binding the contract event 0x0eb5d52624c8d28ada9fc55a8c502ed5aa3fbe2fb6e91b71b5f376882b1d2fb8.
//
// Solidity: event log_int(int256 arg0)
func (_RegistryTest *RegistryTestFilterer) FilterLogInt(opts *bind.FilterOpts) (*RegistryTestLogIntIterator, error) {

	logs, sub, err := _RegistryTest.contract.FilterLogs(opts, "log_int")
	if err != nil {
		return nil, err
	}
	return &RegistryTestLogIntIterator{contract: _RegistryTest.contract, event: "log_int", logs: logs, sub: sub}, nil
}

// WatchLogInt is a free log subscription operation binding the contract event 0x0eb5d52624c8d28ada9fc55a8c502ed5aa3fbe2fb6e91b71b5f376882b1d2fb8.
//
// Solidity: event log_int(int256 arg0)
func (_RegistryTest *RegistryTestFilterer) WatchLogInt(opts *bind.WatchOpts, sink chan<- *RegistryTestLogInt) (event.Subscription, error) {

	logs, sub, err := _RegistryTest.contract.WatchLogs(opts, "log_int")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryTestLogInt)
				if err := _RegistryTest.contract.UnpackLog(event, "log_int", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogInt is a log parse operation binding the contract event 0x0eb5d52624c8d28ada9fc55a8c502ed5aa3fbe2fb6e91b71b5f376882b1d2fb8.
//
// Solidity: event log_int(int256 arg0)
func (_RegistryTest *RegistryTestFilterer) ParseLogInt(log types.Log) (*RegistryTestLogInt, error) {
	event := new(RegistryTestLogInt)
	if err := _RegistryTest.contract.UnpackLog(event, "log_int", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryTestLogNamedAddressIterator is returned from FilterLogNamedAddress and is used to iterate over the raw logs and unpacked data for LogNamedAddress events raised by the RegistryTest contract.
type RegistryTestLogNamedAddressIterator struct {
	Event *RegistryTestLogNamedAddress // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryTestLogNamedAddressIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryTestLogNamedAddress)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryTestLogNamedAddress)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryTestLogNamedAddressIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryTestLogNamedAddressIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryTestLogNamedAddress represents a LogNamedAddress event raised by the RegistryTest contract.
type RegistryTestLogNamedAddress struct {
	Key string
	Val common.Address
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedAddress is a free log retrieval operation binding the contract event 0x9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f.
//
// Solidity: event log_named_address(string key, address val)
func (_RegistryTest *RegistryTestFilterer) FilterLogNamedAddress(opts *bind.FilterOpts) (*RegistryTestLogNamedAddressIterator, error) {

	logs, sub, err := _RegistryTest.contract.FilterLogs(opts, "log_named_address")
	if err != nil {
		return nil, err
	}
	return &RegistryTestLogNamedAddressIterator{contract: _RegistryTest.contract, event: "log_named_address", logs: logs, sub: sub}, nil
}

// WatchLogNamedAddress is a free log subscription operation binding the contract event 0x9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f.
//
// Solidity: event log_named_address(string key, address val)
func (_RegistryTest *RegistryTestFilterer) WatchLogNamedAddress(opts *bind.WatchOpts, sink chan<- *RegistryTestLogNamedAddress) (event.Subscription, error) {

	logs, sub, err := _RegistryTest.contract.WatchLogs(opts, "log_named_address")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryTestLogNamedAddress)
				if err := _RegistryTest.contract.UnpackLog(event, "log_named_address", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedAddress is a log parse operation binding the contract event 0x9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f.
//
// Solidity: event log_named_address(string key, address val)
func (_RegistryTest *RegistryTestFilterer) ParseLogNamedAddress(log types.Log) (*RegistryTestLogNamedAddress, error) {
	event := new(RegistryTestLogNamedAddress)
	if err := _RegistryTest.contract.UnpackLog(event, "log_named_address", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryTestLogNamedArrayIterator is returned from FilterLogNamedArray and is used to iterate over the raw logs and unpacked data for LogNamedArray events raised by the RegistryTest contract.
type RegistryTestLogNamedArrayIterator struct {
	Event *RegistryTestLogNamedArray // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryTestLogNamedArrayIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryTestLogNamedArray)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryTestLogNamedArray)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryTestLogNamedArrayIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryTestLogNamedArrayIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryTestLogNamedArray represents a LogNamedArray event raised by the RegistryTest contract.
type RegistryTestLogNamedArray struct {
	Key string
	Val []*big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedArray is a free log retrieval operation binding the contract event 0x00aaa39c9ffb5f567a4534380c737075702e1f7f14107fc95328e3b56c0325fb.
//
// Solidity: event log_named_array(string key, uint256[] val)
func (_RegistryTest *RegistryTestFilterer) FilterLogNamedArray(opts *bind.FilterOpts) (*RegistryTestLogNamedArrayIterator, error) {

	logs, sub, err := _RegistryTest.contract.FilterLogs(opts, "log_named_array")
	if err != nil {
		return nil, err
	}
	return &RegistryTestLogNamedArrayIterator{contract: _RegistryTest.contract, event: "log_named_array", logs: logs, sub: sub}, nil
}

// WatchLogNamedArray is a free log subscription operation binding the contract event 0x00aaa39c9ffb5f567a4534380c737075702e1f7f14107fc95328e3b56c0325fb.
//
// Solidity: event log_named_array(string key, uint256[] val)
func (_RegistryTest *RegistryTestFilterer) WatchLogNamedArray(opts *bind.WatchOpts, sink chan<- *RegistryTestLogNamedArray) (event.Subscription, error) {

	logs, sub, err := _RegistryTest.contract.WatchLogs(opts, "log_named_array")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryTestLogNamedArray)
				if err := _RegistryTest.contract.UnpackLog(event, "log_named_array", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedArray is a log parse operation binding the contract event 0x00aaa39c9ffb5f567a4534380c737075702e1f7f14107fc95328e3b56c0325fb.
//
// Solidity: event log_named_array(string key, uint256[] val)
func (_RegistryTest *RegistryTestFilterer) ParseLogNamedArray(log types.Log) (*RegistryTestLogNamedArray, error) {
	event := new(RegistryTestLogNamedArray)
	if err := _RegistryTest.contract.UnpackLog(event, "log_named_array", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryTestLogNamedArray0Iterator is returned from FilterLogNamedArray0 and is used to iterate over the raw logs and unpacked data for LogNamedArray0 events raised by the RegistryTest contract.
type RegistryTestLogNamedArray0Iterator struct {
	Event *RegistryTestLogNamedArray0 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryTestLogNamedArray0Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryTestLogNamedArray0)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryTestLogNamedArray0)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryTestLogNamedArray0Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryTestLogNamedArray0Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryTestLogNamedArray0 represents a LogNamedArray0 event raised by the RegistryTest contract.
type RegistryTestLogNamedArray0 struct {
	Key string
	Val []*big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedArray0 is a free log retrieval operation binding the contract event 0xa73eda09662f46dde729be4611385ff34fe6c44fbbc6f7e17b042b59a3445b57.
//
// Solidity: event log_named_array(string key, int256[] val)
func (_RegistryTest *RegistryTestFilterer) FilterLogNamedArray0(opts *bind.FilterOpts) (*RegistryTestLogNamedArray0Iterator, error) {

	logs, sub, err := _RegistryTest.contract.FilterLogs(opts, "log_named_array0")
	if err != nil {
		return nil, err
	}
	return &RegistryTestLogNamedArray0Iterator{contract: _RegistryTest.contract, event: "log_named_array0", logs: logs, sub: sub}, nil
}

// WatchLogNamedArray0 is a free log subscription operation binding the contract event 0xa73eda09662f46dde729be4611385ff34fe6c44fbbc6f7e17b042b59a3445b57.
//
// Solidity: event log_named_array(string key, int256[] val)
func (_RegistryTest *RegistryTestFilterer) WatchLogNamedArray0(opts *bind.WatchOpts, sink chan<- *RegistryTestLogNamedArray0) (event.Subscription, error) {

	logs, sub, err := _RegistryTest.contract.WatchLogs(opts, "log_named_array0")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryTestLogNamedArray0)
				if err := _RegistryTest.contract.UnpackLog(event, "log_named_array0", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedArray0 is a log parse operation binding the contract event 0xa73eda09662f46dde729be4611385ff34fe6c44fbbc6f7e17b042b59a3445b57.
//
// Solidity: event log_named_array(string key, int256[] val)
func (_RegistryTest *RegistryTestFilterer) ParseLogNamedArray0(log types.Log) (*RegistryTestLogNamedArray0, error) {
	event := new(RegistryTestLogNamedArray0)
	if err := _RegistryTest.contract.UnpackLog(event, "log_named_array0", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryTestLogNamedArray1Iterator is returned from FilterLogNamedArray1 and is used to iterate over the raw logs and unpacked data for LogNamedArray1 events raised by the RegistryTest contract.
type RegistryTestLogNamedArray1Iterator struct {
	Event *RegistryTestLogNamedArray1 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryTestLogNamedArray1Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryTestLogNamedArray1)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryTestLogNamedArray1)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryTestLogNamedArray1Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryTestLogNamedArray1Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryTestLogNamedArray1 represents a LogNamedArray1 event raised by the RegistryTest contract.
type RegistryTestLogNamedArray1 struct {
	Key string
	Val []common.Address
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedArray1 is a free log retrieval operation binding the contract event 0x3bcfb2ae2e8d132dd1fce7cf278a9a19756a9fceabe470df3bdabb4bc577d1bd.
//
// Solidity: event log_named_array(string key, address[] val)
func (_RegistryTest *RegistryTestFilterer) FilterLogNamedArray1(opts *bind.FilterOpts) (*RegistryTestLogNamedArray1Iterator, error) {

	logs, sub, err := _RegistryTest.contract.FilterLogs(opts, "log_named_array1")
	if err != nil {
		return nil, err
	}
	return &RegistryTestLogNamedArray1Iterator{contract: _RegistryTest.contract, event: "log_named_array1", logs: logs, sub: sub}, nil
}

// WatchLogNamedArray1 is a free log subscription operation binding the contract event 0x3bcfb2ae2e8d132dd1fce7cf278a9a19756a9fceabe470df3bdabb4bc577d1bd.
//
// Solidity: event log_named_array(string key, address[] val)
func (_RegistryTest *RegistryTestFilterer) WatchLogNamedArray1(opts *bind.WatchOpts, sink chan<- *RegistryTestLogNamedArray1) (event.Subscription, error) {

	logs, sub, err := _RegistryTest.contract.WatchLogs(opts, "log_named_array1")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryTestLogNamedArray1)
				if err := _RegistryTest.contract.UnpackLog(event, "log_named_array1", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedArray1 is a log parse operation binding the contract event 0x3bcfb2ae2e8d132dd1fce7cf278a9a19756a9fceabe470df3bdabb4bc577d1bd.
//
// Solidity: event log_named_array(string key, address[] val)
func (_RegistryTest *RegistryTestFilterer) ParseLogNamedArray1(log types.Log) (*RegistryTestLogNamedArray1, error) {
	event := new(RegistryTestLogNamedArray1)
	if err := _RegistryTest.contract.UnpackLog(event, "log_named_array1", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryTestLogNamedBytesIterator is returned from FilterLogNamedBytes and is used to iterate over the raw logs and unpacked data for LogNamedBytes events raised by the RegistryTest contract.
type RegistryTestLogNamedBytesIterator struct {
	Event *RegistryTestLogNamedBytes // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryTestLogNamedBytesIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryTestLogNamedBytes)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryTestLogNamedBytes)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryTestLogNamedBytesIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryTestLogNamedBytesIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryTestLogNamedBytes represents a LogNamedBytes event raised by the RegistryTest contract.
type RegistryTestLogNamedBytes struct {
	Key string
	Val []byte
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedBytes is a free log retrieval operation binding the contract event 0xd26e16cad4548705e4c9e2d94f98ee91c289085ee425594fd5635fa2964ccf18.
//
// Solidity: event log_named_bytes(string key, bytes val)
func (_RegistryTest *RegistryTestFilterer) FilterLogNamedBytes(opts *bind.FilterOpts) (*RegistryTestLogNamedBytesIterator, error) {

	logs, sub, err := _RegistryTest.contract.FilterLogs(opts, "log_named_bytes")
	if err != nil {
		return nil, err
	}
	return &RegistryTestLogNamedBytesIterator{contract: _RegistryTest.contract, event: "log_named_bytes", logs: logs, sub: sub}, nil
}

// WatchLogNamedBytes is a free log subscription operation binding the contract event 0xd26e16cad4548705e4c9e2d94f98ee91c289085ee425594fd5635fa2964ccf18.
//
// Solidity: event log_named_bytes(string key, bytes val)
func (_RegistryTest *RegistryTestFilterer) WatchLogNamedBytes(opts *bind.WatchOpts, sink chan<- *RegistryTestLogNamedBytes) (event.Subscription, error) {

	logs, sub, err := _RegistryTest.contract.WatchLogs(opts, "log_named_bytes")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryTestLogNamedBytes)
				if err := _RegistryTest.contract.UnpackLog(event, "log_named_bytes", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedBytes is a log parse operation binding the contract event 0xd26e16cad4548705e4c9e2d94f98ee91c289085ee425594fd5635fa2964ccf18.
//
// Solidity: event log_named_bytes(string key, bytes val)
func (_RegistryTest *RegistryTestFilterer) ParseLogNamedBytes(log types.Log) (*RegistryTestLogNamedBytes, error) {
	event := new(RegistryTestLogNamedBytes)
	if err := _RegistryTest.contract.UnpackLog(event, "log_named_bytes", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryTestLogNamedBytes32Iterator is returned from FilterLogNamedBytes32 and is used to iterate over the raw logs and unpacked data for LogNamedBytes32 events raised by the RegistryTest contract.
type RegistryTestLogNamedBytes32Iterator struct {
	Event *RegistryTestLogNamedBytes32 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryTestLogNamedBytes32Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryTestLogNamedBytes32)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryTestLogNamedBytes32)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryTestLogNamedBytes32Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryTestLogNamedBytes32Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryTestLogNamedBytes32 represents a LogNamedBytes32 event raised by the RegistryTest contract.
type RegistryTestLogNamedBytes32 struct {
	Key string
	Val [32]byte
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedBytes32 is a free log retrieval operation binding the contract event 0xafb795c9c61e4fe7468c386f925d7a5429ecad9c0495ddb8d38d690614d32f99.
//
// Solidity: event log_named_bytes32(string key, bytes32 val)
func (_RegistryTest *RegistryTestFilterer) FilterLogNamedBytes32(opts *bind.FilterOpts) (*RegistryTestLogNamedBytes32Iterator, error) {

	logs, sub, err := _RegistryTest.contract.FilterLogs(opts, "log_named_bytes32")
	if err != nil {
		return nil, err
	}
	return &RegistryTestLogNamedBytes32Iterator{contract: _RegistryTest.contract, event: "log_named_bytes32", logs: logs, sub: sub}, nil
}

// WatchLogNamedBytes32 is a free log subscription operation binding the contract event 0xafb795c9c61e4fe7468c386f925d7a5429ecad9c0495ddb8d38d690614d32f99.
//
// Solidity: event log_named_bytes32(string key, bytes32 val)
func (_RegistryTest *RegistryTestFilterer) WatchLogNamedBytes32(opts *bind.WatchOpts, sink chan<- *RegistryTestLogNamedBytes32) (event.Subscription, error) {

	logs, sub, err := _RegistryTest.contract.WatchLogs(opts, "log_named_bytes32")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryTestLogNamedBytes32)
				if err := _RegistryTest.contract.UnpackLog(event, "log_named_bytes32", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedBytes32 is a log parse operation binding the contract event 0xafb795c9c61e4fe7468c386f925d7a5429ecad9c0495ddb8d38d690614d32f99.
//
// Solidity: event log_named_bytes32(string key, bytes32 val)
func (_RegistryTest *RegistryTestFilterer) ParseLogNamedBytes32(log types.Log) (*RegistryTestLogNamedBytes32, error) {
	event := new(RegistryTestLogNamedBytes32)
	if err := _RegistryTest.contract.UnpackLog(event, "log_named_bytes32", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryTestLogNamedDecimalIntIterator is returned from FilterLogNamedDecimalInt and is used to iterate over the raw logs and unpacked data for LogNamedDecimalInt events raised by the RegistryTest contract.
type RegistryTestLogNamedDecimalIntIterator struct {
	Event *RegistryTestLogNamedDecimalInt // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryTestLogNamedDecimalIntIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryTestLogNamedDecimalInt)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryTestLogNamedDecimalInt)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryTestLogNamedDecimalIntIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryTestLogNamedDecimalIntIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryTestLogNamedDecimalInt represents a LogNamedDecimalInt event raised by the RegistryTest contract.
type RegistryTestLogNamedDecimalInt struct {
	Key      string
	Val      *big.Int
	Decimals *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterLogNamedDecimalInt is a free log retrieval operation binding the contract event 0x5da6ce9d51151ba10c09a559ef24d520b9dac5c5b8810ae8434e4d0d86411a95.
//
// Solidity: event log_named_decimal_int(string key, int256 val, uint256 decimals)
func (_RegistryTest *RegistryTestFilterer) FilterLogNamedDecimalInt(opts *bind.FilterOpts) (*RegistryTestLogNamedDecimalIntIterator, error) {

	logs, sub, err := _RegistryTest.contract.FilterLogs(opts, "log_named_decimal_int")
	if err != nil {
		return nil, err
	}
	return &RegistryTestLogNamedDecimalIntIterator{contract: _RegistryTest.contract, event: "log_named_decimal_int", logs: logs, sub: sub}, nil
}

// WatchLogNamedDecimalInt is a free log subscription operation binding the contract event 0x5da6ce9d51151ba10c09a559ef24d520b9dac5c5b8810ae8434e4d0d86411a95.
//
// Solidity: event log_named_decimal_int(string key, int256 val, uint256 decimals)
func (_RegistryTest *RegistryTestFilterer) WatchLogNamedDecimalInt(opts *bind.WatchOpts, sink chan<- *RegistryTestLogNamedDecimalInt) (event.Subscription, error) {

	logs, sub, err := _RegistryTest.contract.WatchLogs(opts, "log_named_decimal_int")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryTestLogNamedDecimalInt)
				if err := _RegistryTest.contract.UnpackLog(event, "log_named_decimal_int", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedDecimalInt is a log parse operation binding the contract event 0x5da6ce9d51151ba10c09a559ef24d520b9dac5c5b8810ae8434e4d0d86411a95.
//
// Solidity: event log_named_decimal_int(string key, int256 val, uint256 decimals)
func (_RegistryTest *RegistryTestFilterer) ParseLogNamedDecimalInt(log types.Log) (*RegistryTestLogNamedDecimalInt, error) {
	event := new(RegistryTestLogNamedDecimalInt)
	if err := _RegistryTest.contract.UnpackLog(event, "log_named_decimal_int", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryTestLogNamedDecimalUintIterator is returned from FilterLogNamedDecimalUint and is used to iterate over the raw logs and unpacked data for LogNamedDecimalUint events raised by the RegistryTest contract.
type RegistryTestLogNamedDecimalUintIterator struct {
	Event *RegistryTestLogNamedDecimalUint // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryTestLogNamedDecimalUintIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryTestLogNamedDecimalUint)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryTestLogNamedDecimalUint)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryTestLogNamedDecimalUintIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryTestLogNamedDecimalUintIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryTestLogNamedDecimalUint represents a LogNamedDecimalUint event raised by the RegistryTest contract.
type RegistryTestLogNamedDecimalUint struct {
	Key      string
	Val      *big.Int
	Decimals *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterLogNamedDecimalUint is a free log retrieval operation binding the contract event 0xeb8ba43ced7537421946bd43e828b8b2b8428927aa8f801c13d934bf11aca57b.
//
// Solidity: event log_named_decimal_uint(string key, uint256 val, uint256 decimals)
func (_RegistryTest *RegistryTestFilterer) FilterLogNamedDecimalUint(opts *bind.FilterOpts) (*RegistryTestLogNamedDecimalUintIterator, error) {

	logs, sub, err := _RegistryTest.contract.FilterLogs(opts, "log_named_decimal_uint")
	if err != nil {
		return nil, err
	}
	return &RegistryTestLogNamedDecimalUintIterator{contract: _RegistryTest.contract, event: "log_named_decimal_uint", logs: logs, sub: sub}, nil
}

// WatchLogNamedDecimalUint is a free log subscription operation binding the contract event 0xeb8ba43ced7537421946bd43e828b8b2b8428927aa8f801c13d934bf11aca57b.
//
// Solidity: event log_named_decimal_uint(string key, uint256 val, uint256 decimals)
func (_RegistryTest *RegistryTestFilterer) WatchLogNamedDecimalUint(opts *bind.WatchOpts, sink chan<- *RegistryTestLogNamedDecimalUint) (event.Subscription, error) {

	logs, sub, err := _RegistryTest.contract.WatchLogs(opts, "log_named_decimal_uint")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryTestLogNamedDecimalUint)
				if err := _RegistryTest.contract.UnpackLog(event, "log_named_decimal_uint", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedDecimalUint is a log parse operation binding the contract event 0xeb8ba43ced7537421946bd43e828b8b2b8428927aa8f801c13d934bf11aca57b.
//
// Solidity: event log_named_decimal_uint(string key, uint256 val, uint256 decimals)
func (_RegistryTest *RegistryTestFilterer) ParseLogNamedDecimalUint(log types.Log) (*RegistryTestLogNamedDecimalUint, error) {
	event := new(RegistryTestLogNamedDecimalUint)
	if err := _RegistryTest.contract.UnpackLog(event, "log_named_decimal_uint", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryTestLogNamedIntIterator is returned from FilterLogNamedInt and is used to iterate over the raw logs and unpacked data for LogNamedInt events raised by the RegistryTest contract.
type RegistryTestLogNamedIntIterator struct {
	Event *RegistryTestLogNamedInt // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryTestLogNamedIntIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryTestLogNamedInt)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryTestLogNamedInt)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryTestLogNamedIntIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryTestLogNamedIntIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryTestLogNamedInt represents a LogNamedInt event raised by the RegistryTest contract.
type RegistryTestLogNamedInt struct {
	Key string
	Val *big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedInt is a free log retrieval operation binding the contract event 0x2fe632779174374378442a8e978bccfbdcc1d6b2b0d81f7e8eb776ab2286f168.
//
// Solidity: event log_named_int(string key, int256 val)
func (_RegistryTest *RegistryTestFilterer) FilterLogNamedInt(opts *bind.FilterOpts) (*RegistryTestLogNamedIntIterator, error) {

	logs, sub, err := _RegistryTest.contract.FilterLogs(opts, "log_named_int")
	if err != nil {
		return nil, err
	}
	return &RegistryTestLogNamedIntIterator{contract: _RegistryTest.contract, event: "log_named_int", logs: logs, sub: sub}, nil
}

// WatchLogNamedInt is a free log subscription operation binding the contract event 0x2fe632779174374378442a8e978bccfbdcc1d6b2b0d81f7e8eb776ab2286f168.
//
// Solidity: event log_named_int(string key, int256 val)
func (_RegistryTest *RegistryTestFilterer) WatchLogNamedInt(opts *bind.WatchOpts, sink chan<- *RegistryTestLogNamedInt) (event.Subscription, error) {

	logs, sub, err := _RegistryTest.contract.WatchLogs(opts, "log_named_int")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryTestLogNamedInt)
				if err := _RegistryTest.contract.UnpackLog(event, "log_named_int", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedInt is a log parse operation binding the contract event 0x2fe632779174374378442a8e978bccfbdcc1d6b2b0d81f7e8eb776ab2286f168.
//
// Solidity: event log_named_int(string key, int256 val)
func (_RegistryTest *RegistryTestFilterer) ParseLogNamedInt(log types.Log) (*RegistryTestLogNamedInt, error) {
	event := new(RegistryTestLogNamedInt)
	if err := _RegistryTest.contract.UnpackLog(event, "log_named_int", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryTestLogNamedStringIterator is returned from FilterLogNamedString and is used to iterate over the raw logs and unpacked data for LogNamedString events raised by the RegistryTest contract.
type RegistryTestLogNamedStringIterator struct {
	Event *RegistryTestLogNamedString // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryTestLogNamedStringIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryTestLogNamedString)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryTestLogNamedString)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryTestLogNamedStringIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryTestLogNamedStringIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryTestLogNamedString represents a LogNamedString event raised by the RegistryTest contract.
type RegistryTestLogNamedString struct {
	Key string
	Val string
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedString is a free log retrieval operation binding the contract event 0x280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf3583.
//
// Solidity: event log_named_string(string key, string val)
func (_RegistryTest *RegistryTestFilterer) FilterLogNamedString(opts *bind.FilterOpts) (*RegistryTestLogNamedStringIterator, error) {

	logs, sub, err := _RegistryTest.contract.FilterLogs(opts, "log_named_string")
	if err != nil {
		return nil, err
	}
	return &RegistryTestLogNamedStringIterator{contract: _RegistryTest.contract, event: "log_named_string", logs: logs, sub: sub}, nil
}

// WatchLogNamedString is a free log subscription operation binding the contract event 0x280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf3583.
//
// Solidity: event log_named_string(string key, string val)
func (_RegistryTest *RegistryTestFilterer) WatchLogNamedString(opts *bind.WatchOpts, sink chan<- *RegistryTestLogNamedString) (event.Subscription, error) {

	logs, sub, err := _RegistryTest.contract.WatchLogs(opts, "log_named_string")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryTestLogNamedString)
				if err := _RegistryTest.contract.UnpackLog(event, "log_named_string", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedString is a log parse operation binding the contract event 0x280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf3583.
//
// Solidity: event log_named_string(string key, string val)
func (_RegistryTest *RegistryTestFilterer) ParseLogNamedString(log types.Log) (*RegistryTestLogNamedString, error) {
	event := new(RegistryTestLogNamedString)
	if err := _RegistryTest.contract.UnpackLog(event, "log_named_string", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryTestLogNamedUintIterator is returned from FilterLogNamedUint and is used to iterate over the raw logs and unpacked data for LogNamedUint events raised by the RegistryTest contract.
type RegistryTestLogNamedUintIterator struct {
	Event *RegistryTestLogNamedUint // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryTestLogNamedUintIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryTestLogNamedUint)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryTestLogNamedUint)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryTestLogNamedUintIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryTestLogNamedUintIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryTestLogNamedUint represents a LogNamedUint event raised by the RegistryTest contract.
type RegistryTestLogNamedUint struct {
	Key string
	Val *big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedUint is a free log retrieval operation binding the contract event 0xb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a8.
//
// Solidity: event log_named_uint(string key, uint256 val)
func (_RegistryTest *RegistryTestFilterer) FilterLogNamedUint(opts *bind.FilterOpts) (*RegistryTestLogNamedUintIterator, error) {

	logs, sub, err := _RegistryTest.contract.FilterLogs(opts, "log_named_uint")
	if err != nil {
		return nil, err
	}
	return &RegistryTestLogNamedUintIterator{contract: _RegistryTest.contract, event: "log_named_uint", logs: logs, sub: sub}, nil
}

// WatchLogNamedUint is a free log subscription operation binding the contract event 0xb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a8.
//
// Solidity: event log_named_uint(string key, uint256 val)
func (_RegistryTest *RegistryTestFilterer) WatchLogNamedUint(opts *bind.WatchOpts, sink chan<- *RegistryTestLogNamedUint) (event.Subscription, error) {

	logs, sub, err := _RegistryTest.contract.WatchLogs(opts, "log_named_uint")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryTestLogNamedUint)
				if err := _RegistryTest.contract.UnpackLog(event, "log_named_uint", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedUint is a log parse operation binding the contract event 0xb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a8.
//
// Solidity: event log_named_uint(string key, uint256 val)
func (_RegistryTest *RegistryTestFilterer) ParseLogNamedUint(log types.Log) (*RegistryTestLogNamedUint, error) {
	event := new(RegistryTestLogNamedUint)
	if err := _RegistryTest.contract.UnpackLog(event, "log_named_uint", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryTestLogStringIterator is returned from FilterLogString and is used to iterate over the raw logs and unpacked data for LogString events raised by the RegistryTest contract.
type RegistryTestLogStringIterator struct {
	Event *RegistryTestLogString // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryTestLogStringIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryTestLogString)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryTestLogString)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryTestLogStringIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryTestLogStringIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryTestLogString represents a LogString event raised by the RegistryTest contract.
type RegistryTestLogString struct {
	Arg0 string
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogString is a free log retrieval operation binding the contract event 0x0b2e13ff20ac7b474198655583edf70dedd2c1dc980e329c4fbb2fc0748b796b.
//
// Solidity: event log_string(string arg0)
func (_RegistryTest *RegistryTestFilterer) FilterLogString(opts *bind.FilterOpts) (*RegistryTestLogStringIterator, error) {

	logs, sub, err := _RegistryTest.contract.FilterLogs(opts, "log_string")
	if err != nil {
		return nil, err
	}
	return &RegistryTestLogStringIterator{contract: _RegistryTest.contract, event: "log_string", logs: logs, sub: sub}, nil
}

// WatchLogString is a free log subscription operation binding the contract event 0x0b2e13ff20ac7b474198655583edf70dedd2c1dc980e329c4fbb2fc0748b796b.
//
// Solidity: event log_string(string arg0)
func (_RegistryTest *RegistryTestFilterer) WatchLogString(opts *bind.WatchOpts, sink chan<- *RegistryTestLogString) (event.Subscription, error) {

	logs, sub, err := _RegistryTest.contract.WatchLogs(opts, "log_string")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryTestLogString)
				if err := _RegistryTest.contract.UnpackLog(event, "log_string", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogString is a log parse operation binding the contract event 0x0b2e13ff20ac7b474198655583edf70dedd2c1dc980e329c4fbb2fc0748b796b.
//
// Solidity: event log_string(string arg0)
func (_RegistryTest *RegistryTestFilterer) ParseLogString(log types.Log) (*RegistryTestLogString, error) {
	event := new(RegistryTestLogString)
	if err := _RegistryTest.contract.UnpackLog(event, "log_string", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryTestLogUintIterator is returned from FilterLogUint and is used to iterate over the raw logs and unpacked data for LogUint events raised by the RegistryTest contract.
type RegistryTestLogUintIterator struct {
	Event *RegistryTestLogUint // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryTestLogUintIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryTestLogUint)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryTestLogUint)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryTestLogUintIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryTestLogUintIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryTestLogUint represents a LogUint event raised by the RegistryTest contract.
type RegistryTestLogUint struct {
	Arg0 *big.Int
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogUint is a free log retrieval operation binding the contract event 0x2cab9790510fd8bdfbd2115288db33fec66691d476efc5427cfd4c0969301755.
//
// Solidity: event log_uint(uint256 arg0)
func (_RegistryTest *RegistryTestFilterer) FilterLogUint(opts *bind.FilterOpts) (*RegistryTestLogUintIterator, error) {

	logs, sub, err := _RegistryTest.contract.FilterLogs(opts, "log_uint")
	if err != nil {
		return nil, err
	}
	return &RegistryTestLogUintIterator{contract: _RegistryTest.contract, event: "log_uint", logs: logs, sub: sub}, nil
}

// WatchLogUint is a free log subscription operation binding the contract event 0x2cab9790510fd8bdfbd2115288db33fec66691d476efc5427cfd4c0969301755.
//
// Solidity: event log_uint(uint256 arg0)
func (_RegistryTest *RegistryTestFilterer) WatchLogUint(opts *bind.WatchOpts, sink chan<- *RegistryTestLogUint) (event.Subscription, error) {

	logs, sub, err := _RegistryTest.contract.WatchLogs(opts, "log_uint")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryTestLogUint)
				if err := _RegistryTest.contract.UnpackLog(event, "log_uint", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogUint is a log parse operation binding the contract event 0x2cab9790510fd8bdfbd2115288db33fec66691d476efc5427cfd4c0969301755.
//
// Solidity: event log_uint(uint256 arg0)
func (_RegistryTest *RegistryTestFilterer) ParseLogUint(log types.Log) (*RegistryTestLogUint, error) {
	event := new(RegistryTestLogUint)
	if err := _RegistryTest.contract.UnpackLog(event, "log_uint", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryTestLogsIterator is returned from FilterLogs and is used to iterate over the raw logs and unpacked data for Logs events raised by the RegistryTest contract.
type RegistryTestLogsIterator struct {
	Event *RegistryTestLogs // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryTestLogsIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryTestLogs)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryTestLogs)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryTestLogsIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryTestLogsIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryTestLogs represents a Logs event raised by the RegistryTest contract.
type RegistryTestLogs struct {
	Arg0 []byte
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogs is a free log retrieval operation binding the contract event 0xe7950ede0394b9f2ce4a5a1bf5a7e1852411f7e6661b4308c913c4bfd11027e4.
//
// Solidity: event logs(bytes arg0)
func (_RegistryTest *RegistryTestFilterer) FilterLogs(opts *bind.FilterOpts) (*RegistryTestLogsIterator, error) {

	logs, sub, err := _RegistryTest.contract.FilterLogs(opts, "logs")
	if err != nil {
		return nil, err
	}
	return &RegistryTestLogsIterator{contract: _RegistryTest.contract, event: "logs", logs: logs, sub: sub}, nil
}

// WatchLogs is a free log subscription operation binding the contract event 0xe7950ede0394b9f2ce4a5a1bf5a7e1852411f7e6661b4308c913c4bfd11027e4.
//
// Solidity: event logs(bytes arg0)
func (_RegistryTest *RegistryTestFilterer) WatchLogs(opts *bind.WatchOpts, sink chan<- *RegistryTestLogs) (event.Subscription, error) {

	logs, sub, err := _RegistryTest.contract.WatchLogs(opts, "logs")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryTestLogs)
				if err := _RegistryTest.contract.UnpackLog(event, "logs", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogs is a log parse operation binding the contract event 0xe7950ede0394b9f2ce4a5a1bf5a7e1852411f7e6661b4308c913c4bfd11027e4.
//
// Solidity: event logs(bytes arg0)
func (_RegistryTest *RegistryTestFilterer) ParseLogs(log types.Log) (*RegistryTestLogs, error) {
	event := new(RegistryTestLogs)
	if err := _RegistryTest.contract.UnpackLog(event, "logs", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
