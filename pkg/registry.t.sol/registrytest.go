// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package registry

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// StdInvariantFuzzArtifactSelector is an auto generated low-level Go binding around an user-defined struct.
type StdInvariantFuzzArtifactSelector struct {
	Artifact  string
	Selectors [][4]byte
}

// StdInvariantFuzzInterface is an auto generated low-level Go binding around an user-defined struct.
type StdInvariantFuzzInterface struct {
	Addr      common.Address
	Artifacts []string
}

// StdInvariantFuzzSelector is an auto generated low-level Go binding around an user-defined struct.
type StdInvariantFuzzSelector struct {
	Addr      common.Address
	Selectors [][4]byte
}

// RegistryTestMetaData contains all meta data concerning the RegistryTest contract.
var RegistryTestMetaData = &bind.MetaData{
	ABI: "[{\"type\":\"function\",\"name\":\"IS_TEST\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"excludeArtifacts\",\"inputs\":[],\"outputs\":[{\"name\":\"excludedArtifacts_\",\"type\":\"string[]\",\"internalType\":\"string[]\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"excludeContracts\",\"inputs\":[],\"outputs\":[{\"name\":\"excludedContracts_\",\"type\":\"address[]\",\"internalType\":\"address[]\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"excludeSelectors\",\"inputs\":[],\"outputs\":[{\"name\":\"excludedSelectors_\",\"type\":\"tuple[]\",\"internalType\":\"structStdInvariant.FuzzSelector[]\",\"components\":[{\"name\":\"addr\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"selectors\",\"type\":\"bytes4[]\",\"internalType\":\"bytes4[]\"}]}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"excludeSenders\",\"inputs\":[],\"outputs\":[{\"name\":\"excludedSenders_\",\"type\":\"address[]\",\"internalType\":\"address[]\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"failed\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"setUp\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"targetArtifactSelectors\",\"inputs\":[],\"outputs\":[{\"name\":\"targetedArtifactSelectors_\",\"type\":\"tuple[]\",\"internalType\":\"structStdInvariant.FuzzArtifactSelector[]\",\"components\":[{\"name\":\"artifact\",\"type\":\"string\",\"internalType\":\"string\"},{\"name\":\"selectors\",\"type\":\"bytes4[]\",\"internalType\":\"bytes4[]\"}]}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"targetArtifacts\",\"inputs\":[],\"outputs\":[{\"name\":\"targetedArtifacts_\",\"type\":\"string[]\",\"internalType\":\"string[]\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"targetContracts\",\"inputs\":[],\"outputs\":[{\"name\":\"targetedContracts_\",\"type\":\"address[]\",\"internalType\":\"address[]\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"targetInterfaces\",\"inputs\":[],\"outputs\":[{\"name\":\"targetedInterfaces_\",\"type\":\"tuple[]\",\"internalType\":\"structStdInvariant.FuzzInterface[]\",\"components\":[{\"name\":\"addr\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"artifacts\",\"type\":\"string[]\",\"internalType\":\"string[]\"}]}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"targetSelectors\",\"inputs\":[],\"outputs\":[{\"name\":\"targetedSelectors_\",\"type\":\"tuple[]\",\"internalType\":\"structStdInvariant.FuzzSelector[]\",\"components\":[{\"name\":\"addr\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"selectors\",\"type\":\"bytes4[]\",\"internalType\":\"bytes4[]\"}]}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"targetSenders\",\"inputs\":[],\"outputs\":[{\"name\":\"targetedSenders_\",\"type\":\"address[]\",\"internalType\":\"address[]\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"testChangeChainStatus\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testChangeStatusDirectCallFails\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testInitialize\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"testInitializeWithZeroAddress\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testMultipleActiveChains\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testOnCallInvalidSender\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testOnCallPaused\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testOnCallUnauthorized\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testPause\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testPauseUnauthorized\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testRegisterContract\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testRegisterContractWithEmptyAddress\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testRegisterContractWithEmptyType\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testRegisterZRC20Token\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testRegisterZRC20TokenWithEmptyOriginAddress\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testRegisterZRC20TokenWithEmptySymbol\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testRegisterZRC20TokenWithZeroAddress\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testSetContractActive\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testSetContractActiveWithInvalidType\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testSetZRC20TokenActive\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testSetZRC20TokenActiveWithZeroAddress\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testUpdateChainMetadata\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testUpdateContractConfiguration\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"testUpdateContractConfigurationWithInvalidType\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"event\",\"name\":\"ChainMetadataUpdated\",\"inputs\":[{\"name\":\"chainId\",\"type\":\"uint256\",\"indexed\":true,\"internalType\":\"uint256\"},{\"name\":\"key\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"value\",\"type\":\"bytes\",\"indexed\":false,\"internalType\":\"bytes\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"ChainStatusChanged\",\"inputs\":[{\"name\":\"chainId\",\"type\":\"uint256\",\"indexed\":true,\"internalType\":\"uint256\"},{\"name\":\"newStatus\",\"type\":\"bool\",\"indexed\":false,\"internalType\":\"bool\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"ContractConfigurationUpdated\",\"inputs\":[{\"name\":\"chainId\",\"type\":\"uint256\",\"indexed\":true,\"internalType\":\"uint256\"},{\"name\":\"contractType\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"key\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"value\",\"type\":\"bytes\",\"indexed\":false,\"internalType\":\"bytes\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"ContractRegistered\",\"inputs\":[{\"name\":\"chainId\",\"type\":\"uint256\",\"indexed\":true,\"internalType\":\"uint256\"},{\"name\":\"contractType\",\"type\":\"string\",\"indexed\":true,\"internalType\":\"string\"},{\"name\":\"addressBytes\",\"type\":\"bytes\",\"indexed\":false,\"internalType\":\"bytes\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"ContractStatusChanged\",\"inputs\":[{\"name\":\"addressBytes\",\"type\":\"bytes\",\"indexed\":false,\"internalType\":\"bytes\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"ZRC20TokenRegistered\",\"inputs\":[{\"name\":\"originAddress\",\"type\":\"bytes\",\"indexed\":true,\"internalType\":\"bytes\"},{\"name\":\"address_\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"decimals\",\"type\":\"uint8\",\"indexed\":false,\"internalType\":\"uint8\"},{\"name\":\"originChainId\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"},{\"name\":\"symbol\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"ZRC20TokenUpdated\",\"inputs\":[{\"name\":\"address_\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"},{\"name\":\"active\",\"type\":\"bool\",\"indexed\":false,\"internalType\":\"bool\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log\",\"inputs\":[{\"name\":\"\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_address\",\"inputs\":[{\"name\":\"\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_array\",\"inputs\":[{\"name\":\"val\",\"type\":\"uint256[]\",\"indexed\":false,\"internalType\":\"uint256[]\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_array\",\"inputs\":[{\"name\":\"val\",\"type\":\"int256[]\",\"indexed\":false,\"internalType\":\"int256[]\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_array\",\"inputs\":[{\"name\":\"val\",\"type\":\"address[]\",\"indexed\":false,\"internalType\":\"address[]\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_bytes\",\"inputs\":[{\"name\":\"\",\"type\":\"bytes\",\"indexed\":false,\"internalType\":\"bytes\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_bytes32\",\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"indexed\":false,\"internalType\":\"bytes32\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_int\",\"inputs\":[{\"name\":\"\",\"type\":\"int256\",\"indexed\":false,\"internalType\":\"int256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_named_address\",\"inputs\":[{\"name\":\"key\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"val\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_named_array\",\"inputs\":[{\"name\":\"key\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"val\",\"type\":\"uint256[]\",\"indexed\":false,\"internalType\":\"uint256[]\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_named_array\",\"inputs\":[{\"name\":\"key\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"val\",\"type\":\"int256[]\",\"indexed\":false,\"internalType\":\"int256[]\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_named_array\",\"inputs\":[{\"name\":\"key\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"val\",\"type\":\"address[]\",\"indexed\":false,\"internalType\":\"address[]\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_named_bytes\",\"inputs\":[{\"name\":\"key\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"val\",\"type\":\"bytes\",\"indexed\":false,\"internalType\":\"bytes\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_named_bytes32\",\"inputs\":[{\"name\":\"key\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"val\",\"type\":\"bytes32\",\"indexed\":false,\"internalType\":\"bytes32\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_named_decimal_int\",\"inputs\":[{\"name\":\"key\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"val\",\"type\":\"int256\",\"indexed\":false,\"internalType\":\"int256\"},{\"name\":\"decimals\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_named_decimal_uint\",\"inputs\":[{\"name\":\"key\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"val\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"},{\"name\":\"decimals\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_named_int\",\"inputs\":[{\"name\":\"key\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"val\",\"type\":\"int256\",\"indexed\":false,\"internalType\":\"int256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_named_string\",\"inputs\":[{\"name\":\"key\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"val\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_named_uint\",\"inputs\":[{\"name\":\"key\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"val\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_string\",\"inputs\":[{\"name\":\"\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"log_uint\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"logs\",\"inputs\":[{\"name\":\"\",\"type\":\"bytes\",\"indexed\":false,\"internalType\":\"bytes\"}],\"anonymous\":false},{\"type\":\"error\",\"name\":\"ChainActive\",\"inputs\":[{\"name\":\"chainId\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"type\":\"error\",\"name\":\"ChainNonActive\",\"inputs\":[{\"name\":\"chainId\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"type\":\"error\",\"name\":\"ContractAlreadyRegistered\",\"inputs\":[{\"name\":\"chainId\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"contractType\",\"type\":\"string\",\"internalType\":\"string\"},{\"name\":\"addressBytes\",\"type\":\"bytes\",\"internalType\":\"bytes\"}]},{\"type\":\"error\",\"name\":\"ContractNotFound\",\"inputs\":[{\"name\":\"chainId\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"contractType\",\"type\":\"string\",\"internalType\":\"string\"}]},{\"type\":\"error\",\"name\":\"InvalidContractType\",\"inputs\":[{\"name\":\"message\",\"type\":\"string\",\"internalType\":\"string\"}]},{\"type\":\"error\",\"name\":\"InvalidSender\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"TransferFailed\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"ZRC20AlreadyRegistered\",\"inputs\":[{\"name\":\"address_\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"ZRC20SymbolAlreadyInUse\",\"inputs\":[{\"name\":\"symbol\",\"type\":\"string\",\"internalType\":\"string\"}]},{\"type\":\"error\",\"name\":\"ZeroAddress\",\"inputs\":[]}]",
	Bin: "0x600c805460ff199081166001908117909255601f805490911690911790556065602655602780546001600160a01b03191661cbaa1790556d987600000000000000000000000060a0526014608090815260b46040526028906100619082610191565b50602980546001600160a01b03191661aa5517905560408051808201909152600981526831b7b73732b1ba37b960b91b6020820152602a906100a39082610191565b5060295460405160609190911b6001600160601b0319166020820152603401604051602081830303815290604052602b90816100df9190610191565b503480156100ec57600080fd5b5061024f565b634e487b7160e01b600052604160045260246000fd5b600181811c9082168061011c57607f821691505b60208210810361013c57634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561018c57806000526020600020601f840160051c810160208510156101695750805b601f840160051c820191505b818110156101895760008155600101610175565b50505b505050565b81516001600160401b038111156101aa576101aa6100f2565b6101be816101b88454610108565b84610142565b6020601f8211600181146101f257600083156101da5750848201515b600019600385901b1c1916600184901b178455610189565b600084815260208120601f198516915b828110156102225787850151825560209485019460019092019101610202565b50848210156102405786840151600019600387901b60f8161c191681555b50505050600190811b01905550565b61c9d38061025e6000396000f3fe608060405234801561001057600080fd5b50600436106102775760003560e01c8063916a17c611610160578063ba414fa6116100d8578063d97aa8991161008c578063e20c9f7111610071578063e20c9f71146103e8578063fa7626d4146103f0578063faab466a146103fd57600080fd5b8063d97aa899146103d8578063dca5e415146103e057600080fd5b8063c52521cf116100bd578063c52521cf146103c0578063d312ad7d146103c8578063d6683856146103d057600080fd5b8063ba414fa6146103a0578063bc056f7f146103b857600080fd5b8063b0464fdc1161012f578063b13cbb3311610114578063b13cbb3314610388578063b39377d814610390578063b5508aa91461039857600080fd5b8063b0464fdc14610378578063b0aef6b31461038057600080fd5b8063916a17c61461034b578063993831b6146103605780639bf3559714610368578063aebfe7811461037057600080fd5b80632ade3880116101f35780635fe0a7a2116101c257806371748c09116101a757806371748c091461032657806385226c811461032e5780638c500b5c1461034357600080fd5b80635fe0a7a21461030957806366d9a9a01461031157600080fd5b80632ade3880146102dc5780633e5e3c23146102f15780633f7286f4146102f957806349b7b1981461030157600080fd5b8063164c5b021161024a5780631ed7831c1161022f5780631ed7831c146102ae5780632013038b146102cc57806324196f32146102d457600080fd5b8063164c5b021461029e5780631ddbe8ca146102a657600080fd5b80630a9254e41461027c5780630c4102951461028657806311aa0d441461028e578063151e9be414610296575b600080fd5b610284610405565b005b6102846105da565b610284610ba1565b6102846110b8565b610284611358565b61028461154c565b6102b6611920565b6040516102c3919061abb6565b60405180910390f35b610284611982565b610284611cd6565b6102e4612501565b6040516102c3919061ac52565b6102b6612643565b6102b66126a3565b610284612703565b61028461298f565b610319612c71565b6040516102c3919061adb8565b610284612dde565b610336613306565b6040516102c3919061ae56565b6102846133d6565b6103536137c1565b6040516102c3919061aecd565b6102846138a7565b610284613d8f565b610284614095565b610353614239565b61028461431f565b610284614892565b610284614a4c565b610336614f06565b6103a8614fd6565b60405190151581526020016102c3565b6102846150aa565b610284615512565b6102846157b2565b610284615a33565b610284615c56565b610284615e5f565b6102b6615eb4565b601f546103a89060ff1681565b610284615f14565b602280547fffffffffffffffffffffffff000000000000000000000000000000000000000090811661abcd17909155602480548216611234179055602580548216615678179055602380549091166133331790556040516104659061aaf0565b604051809103906000f080158015610481573d6000803e3d6000fd5b50602180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03928316908117909155604080518082018252600c81527f52656769737472792e736f6c000000000000000000000000000000000000000060208201526022546023546024805494519287169083015285166044820152606481019390935292166084820152610565919060a40160408051601f198184030181529190526020810180516001600160e01b03167ff8c8765e000000000000000000000000000000000000000000000000000000001790526167b9565b601f80547fffffffffffffffffffffff0000000000000000000000000000000000000000ff166101006001600160a01b039384168102919091179182905560208054919092049092167fffffffffffffffffffffffff0000000000000000000000000000000000000000909216919091179055565b6026546027546040516000926106069290916001600160a01b039091169060289060019060240161b052565b60408051601f19818403018152918152602080830180516001600160e01b031663547965cb60e11b17905281519081018252602480546001600160a01b039081168352602154935163ca669fa760e01b81529316600484015292935091737109709ecfa91a80626ff3989d68f67f5b1dd12d9163ca669fa79101600060405180830381600087803b15801561069a57600080fd5b505af11580156106ae573d6000803e3d6000fd5b50506020546040516319db301560e21b81526001600160a01b03909116925063676cc05491506106e4908490869060040161b08d565b6000604051808303816000875af1158015610703573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261072b919081019061b1a3565b506000602654602a602b6040516024016107479392919061b1d8565b60408051601f198184030181529181526020820180516001600160e01b03167f631d62e400000000000000000000000000000000000000000000000000000000179052602154905163ca669fa760e01b81526001600160a01b039091166004820152909150737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ca669fa790602401600060405180830381600087803b1580156107e557600080fd5b505af11580156107f9573d6000803e3d6000fd5b50506020546040516319db301560e21b81526001600160a01b03909116925063676cc054915061082f908590859060040161b08d565b6000604051808303816000875af115801561084e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610876919081019061b1a3565b50604080518082018252600881527f6761734c696d69740000000000000000000000000000000000000000000000006020808301919091528251620493e08183015283518082039092018252808401909352602654919290916000916108e69190602a908690869060640161b203565b60408051601f198184030181529181526020820180516001600160e01b03167ff354b31f00000000000000000000000000000000000000000000000000000000179052602154905163ca669fa760e01b81526001600160a01b039091166004820152909150737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ca669fa790602401600060405180830381600087803b15801561098457600080fd5b505af1158015610998573d6000803e3d6000fd5b50506040517f491cc7c200000000000000000000000000000000000000000000000000000000815260016004820181905260248201819052604482018190526064820152737109709ecfa91a80626ff3989d68f67f5b1dd12d925063491cc7c29150608401600060405180830381600087803b158015610a1757600080fd5b505af1158015610a2b573d6000803e3d6000fd5b505050506026547faea6b6dd1ea232db3e0fc64d54fd642518ed2932043ff697ac7c8a83d651c7c5602a8585604051610a669392919061b242565b60405180910390a26020546040516319db301560e21b81526001600160a01b039091169063676cc05490610aa0908890859060040161b08d565b6000604051808303816000875af1158015610abf573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610ae7919081019061b1a3565b506020546026546040517fd3523ea20000000000000000000000000000000000000000000000000000000081526000926001600160a01b03169163d3523ea291610b399190602a90899060040161b27b565b600060405180830381865afa158015610b56573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b7e919081019061b1a3565b9050610b98818051906020012084805190602001206167d8565b50505050505050565b602754604051606591600091610bcd9184916001600160a01b039091169060289060019060240161b052565b60408051601f19818403018152918152602080830180516001600160e01b031663547965cb60e11b17905281519081018252602480546001600160a01b039081168352602154935163ca669fa760e01b81529316600484015292935091737109709ecfa91a80626ff3989d68f67f5b1dd12d9163ca669fa79101600060405180830381600087803b158015610c6157600080fd5b505af1158015610c75573d6000803e3d6000fd5b50506020546040516319db301560e21b81526001600160a01b03909116925063676cc0549150610cab908490869060040161b08d565b6000604051808303816000875af1158015610cca573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610cf2919081019061b1a3565b50602754604051606691600091610d1f9184916001600160a01b039091169060289060019060240161b052565b60408051601f198184030181529181526020820180516001600160e01b031663547965cb60e11b179052602154905163ca669fa760e01b81526001600160a01b039091166004820152909150737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ca669fa790602401600060405180830381600087803b158015610da457600080fd5b505af1158015610db8573d6000803e3d6000fd5b50506020546040516319db301560e21b81526001600160a01b03909116925063676cc0549150610dee908690859060040161b08d565b6000604051808303816000875af1158015610e0d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610e35919081019061b1a3565b50602054604080517f94cc868300000000000000000000000000000000000000000000000000000000815290516000926001600160a01b0316916394cc868391600480830192869291908290030181865afa158015610e98573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610ec0919081019061b2a6565b9050610ece81516002616858565b602754604051600091610ef49189916001600160a01b031690602890859060240161b052565b60408051601f198184030181529181526020820180516001600160e01b031663547965cb60e11b179052602154905163ca669fa760e01b81526001600160a01b039091166004820152909150737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ca669fa790602401600060405180830381600087803b158015610f7957600080fd5b505af1158015610f8d573d6000803e3d6000fd5b50506020546040516319db301560e21b81526001600160a01b03909116925063676cc0549150610fc3908890859060040161b08d565b6000604051808303816000875af1158015610fe2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261100a919081019061b1a3565b50602060009054906101000a90046001600160a01b03166001600160a01b03166394cc86836040518163ffffffff1660e01b8152600401600060405180830381865afa15801561105e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611086919081019061b2a6565b915061109482516001616858565b610b98826000815181106110aa576110aa61b34c565b602002602001015185616858565b60255460405163ca669fa760e01b81526001600160a01b039091166004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ca669fa790602401600060405180830381600087803b15801561111157600080fd5b505af1158015611125573d6000803e3d6000fd5b505050507f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d60001c6001600160a01b031663f48448146040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561118757600080fd5b505af115801561119b573d6000803e3d6000fd5b50505050602060009054906101000a90046001600160a01b03166001600160a01b0316638456cb596040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156111ef57600080fd5b505af1158015611203573d6000803e3d6000fd5b505060255460405163ca669fa760e01b81526001600160a01b039091166004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d925063ca669fa79150602401600060405180830381600087803b15801561126057600080fd5b505af1158015611274573d6000803e3d6000fd5b505050507f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d60001c6001600160a01b031663f48448146040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156112d657600080fd5b505af11580156112ea573d6000803e3d6000fd5b50505050602060009054906101000a90046001600160a01b03166001600160a01b0316633f4ba83a6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561133e57600080fd5b505af1158015611352573d6000803e3d6000fd5b50505050565b6040516000602482018190526044820181905290819060640160408051601f19818403018152918152602080830180516001600160e01b03167f9060bda90000000000000000000000000000000000000000000000000000000017905281519081018252602480546001600160a01b039081168352602154935163ca669fa760e01b81529316600484015292935091737109709ecfa91a80626ff3989d68f67f5b1dd12d9163ca669fa79101600060405180830381600087803b15801561141e57600080fd5b505af1158015611432573d6000803e3d6000fd5b50506040517fc31eb0e00000000000000000000000000000000000000000000000000000000081527fd92e233d000000000000000000000000000000000000000000000000000000006004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d925063c31eb0e09150602401600060405180830381600087803b1580156114bb57600080fd5b505af11580156114cf573d6000803e3d6000fd5b50506020546040516319db301560e21b81526001600160a01b03909116925063676cc0549150611505908490869060040161b08d565b6000604051808303816000875af1158015611524573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611352919081019061b1a3565b6026546027546040516000926115789290916001600160a01b039091169060289060019060240161b052565b60408051601f19818403018152918152602080830180516001600160e01b031663547965cb60e11b17905281519081018252602480546001600160a01b039081168352602154935163ca669fa760e01b81529316600484015292935091737109709ecfa91a80626ff3989d68f67f5b1dd12d9163ca669fa79101600060405180830381600087803b15801561160c57600080fd5b505af1158015611620573d6000803e3d6000fd5b50506020546040516319db301560e21b81526001600160a01b03909116925063676cc0549150611656908490869060040161b08d565b6000604051808303816000875af1158015611675573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261169d919081019061b1a3565b50604080518082018252600881527f6761734c696d69740000000000000000000000000000000000000000000000006020808301919091528251620493e08183015283518082039092018252606081018452600090840181815260265494519394929390926117149184908790879060240161b37b565b60408051601f198184030181529181526020820180516001600160e01b03167ff354b31f00000000000000000000000000000000000000000000000000000000179052602154905163ca669fa760e01b81526001600160a01b039091166004820152909150737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ca669fa790602401600060405180830381600087803b1580156117b257600080fd5b505af11580156117c6573d6000803e3d6000fd5b5050604051737109709ecfa91a80626ff3989d68f67f5b1dd12d925063f28dceb391507ec10cfd000000000000000000000000000000000000000000000000000000009061181890869060240161b394565b60408051601f198184030181529181526020820180516001600160e01b03167fffffffff000000000000000000000000000000000000000000000000000000009485161790525160e084901b90921682526118759160040161b394565b600060405180830381600087803b15801561188f57600080fd5b505af11580156118a3573d6000803e3d6000fd5b50506020546040516319db301560e21b81526001600160a01b03909116925063676cc05491506118d9908890859060040161b08d565b6000604051808303816000875af11580156118f8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b98919081019061b1a3565b6060601680548060200260200160405190810160405280929190818152602001828054801561197857602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161195a575b5050505050905090565b6026546027546040516000926119ae9290916001600160a01b039091169060289060019060240161b052565b60408051601f19818403018152918152602080830180516001600160e01b031663547965cb60e11b17905281519081018252602480546001600160a01b039081168352602154935163ca669fa760e01b81529316600484015292935091737109709ecfa91a80626ff3989d68f67f5b1dd12d9163ca669fa79101600060405180830381600087803b158015611a4257600080fd5b505af1158015611a56573d6000803e3d6000fd5b50506020546040516319db301560e21b81526001600160a01b03909116925063676cc0549150611a8c908490869060040161b08d565b6000604051808303816000875af1158015611aab573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611ad3919081019061b1a3565b5060006040518060200160405280600081525090506000602654602a83604051602401611b029392919061b27b565b60408051601f198184030181529181526020820180516001600160e01b03167f631d62e400000000000000000000000000000000000000000000000000000000179052602154905163ca669fa760e01b81526001600160a01b039091166004820152909150737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ca669fa790602401600060405180830381600087803b158015611ba057600080fd5b505af1158015611bb4573d6000803e3d6000fd5b50506040517fc31eb0e00000000000000000000000000000000000000000000000000000000081527fd92e233d000000000000000000000000000000000000000000000000000000006004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d925063c31eb0e091506024015b600060405180830381600087803b158015611c3e57600080fd5b505af1158015611c52573d6000803e3d6000fd5b50506020546040516319db301560e21b81526001600160a01b03909116925063676cc0549150611c88908690859060040161b08d565b6000604051808303816000875af1158015611ca7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611ccf919081019061b1a3565b5050505050565b604080518082018252600381527f544b4e000000000000000000000000000000000000000000000000000000000060208083019190915291516d13570000000000000000000000009281019290925261dddd9160659060009060340160408051601f198184030181528282018252600583527f455243323000000000000000000000000000000000000000000000000000000060208401529051909250601290600090611d919088908890889088908890889060240161b3a7565b60408051601f19818403018152918152602080830180516001600160e01b03167f6e9e2d3f0000000000000000000000000000000000000000000000000000000017905281519081018252602480546001600160a01b039081168352602154935163ca669fa760e01b81529316600484015292935091737109709ecfa91a80626ff3989d68f67f5b1dd12d9163ca669fa79101600060405180830381600087803b158015611e3e57600080fd5b505af1158015611e52573d6000803e3d6000fd5b50506020546040516319db301560e21b81526001600160a01b03909116925063676cc0549150611e88908490869060040161b08d565b6000604051808303816000875af1158015611ea7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611ecf919081019061b1a3565b506020546040517fe9d6c5ba0000000000000000000000000000000000000000000000000000000081526001600160a01b038a81166004830152600092169063e9d6c5ba90602401600060405180830381865afa158015611f34573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611f5c919081019061b421565b50505050509050611f6c816168b0565b6040516001600160a01b038a1660248201526000604482018190529060640160408051601f198184030181529181526020820180516001600160e01b03167f9060bda900000000000000000000000000000000000000000000000000000000179052602154905163ca669fa760e01b81526001600160a01b039091166004820152909150737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ca669fa790602401600060405180830381600087803b15801561202957600080fd5b505af115801561203d573d6000803e3d6000fd5b50506040517f491cc7c200000000000000000000000000000000000000000000000000000000815260016004820181905260248201819052604482018190526064820152737109709ecfa91a80626ff3989d68f67f5b1dd12d925063491cc7c29150608401600060405180830381600087803b1580156120bc57600080fd5b505af11580156120d0573d6000803e3d6000fd5b5050604080516001600160a01b038e168152600060208201527f9542d02d4224477c9e9b53628bf5eae8b59520ea6bf2809cec7f24f76bba8ff8935001905060405180910390a16020546040516319db301560e21b81526001600160a01b039091169063676cc05490612149908690859060040161b08d565b6000604051808303816000875af1158015612168573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612190919081019061b1a3565b506020546040517fe9d6c5ba0000000000000000000000000000000000000000000000000000000081526001600160a01b038c811660048301529091169063e9d6c5ba90602401600060405180830381865afa1580156121f4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261221c919081019061b421565b50939550612230935085925061692a915050565b6040516001600160a01b038b1660248201526001604482015260009060640160408051601f198184030181529181526020820180516001600160e01b03167f9060bda900000000000000000000000000000000000000000000000000000000179052602154905163ca669fa760e01b81526001600160a01b039091166004820152909150737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ca669fa790602401600060405180830381600087803b1580156122ed57600080fd5b505af1158015612301573d6000803e3d6000fd5b50506040517f491cc7c200000000000000000000000000000000000000000000000000000000815260016004820181905260248201819052604482018190526064820152737109709ecfa91a80626ff3989d68f67f5b1dd12d925063491cc7c29150608401600060405180830381600087803b15801561238057600080fd5b505af1158015612394573d6000803e3d6000fd5b5050604080516001600160a01b038f168152600160208201527f9542d02d4224477c9e9b53628bf5eae8b59520ea6bf2809cec7f24f76bba8ff8935001905060405180910390a16020546040516319db301560e21b81526001600160a01b039091169063676cc0549061240d908790859060040161b08d565b6000604051808303816000875af115801561242c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612454919081019061b1a3565b506020546040517fe9d6c5ba0000000000000000000000000000000000000000000000000000000081526001600160a01b038d811660048301529091169063e9d6c5ba90602401600060405180830381865afa1580156124b8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526124e0919081019061b421565b509396506124f493508692506168b0915050565b5050505050505050505050565b6060601e805480602002602001604051908101604052809291908181526020016000905b8282101561263a57600084815260208082206040805180820182526002870290920180546001600160a01b03168352600181018054835181870281018701909452808452939591948681019491929084015b828210156126235783829060005260206000200180546125969061af64565b80601f01602080910402602001604051908101604052809291908181526020018280546125c29061af64565b801561260f5780601f106125e45761010080835404028352916020019161260f565b820191906000526020600020905b8154815290600101906020018083116125f257829003601f168201915b505050505081526020019060010190612577565b505050508152505081526020019060010190612525565b50505050905090565b60606018805480602002602001604051908101604052809291908181526020018280548015611978576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831161195a575050505050905090565b60606017805480602002602001604051908101604052809291908181526020018280548015611978576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831161195a575050505050905090565b60255460405163ca669fa760e01b81526001600160a01b039091166004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ca669fa790602401600060405180830381600087803b15801561275c57600080fd5b505af1158015612770573d6000803e3d6000fd5b505050507f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d60001c6001600160a01b031663f48448146040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156127d257600080fd5b505af11580156127e6573d6000803e3d6000fd5b505060205460265460405163547965cb60e11b81526001600160a01b03909216935063a8f2cb96925061282391600190602890829060040161b052565b600060405180830381600087803b15801561283d57600080fd5b505af1158015612851573d6000803e3d6000fd5b505060225460405163ca669fa760e01b81526001600160a01b039091166004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d925063ca669fa79150602401600060405180830381600087803b1580156128ae57600080fd5b505af11580156128c2573d6000803e3d6000fd5b505050507f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d60001c6001600160a01b031663f48448146040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561292457600080fd5b505af1158015612938573d6000803e3d6000fd5b505060205460265460405163547965cb60e11b81526001600160a01b03909216935063a8f2cb96925061297591600190602890829060040161b052565b600060405180830381600087803b15801561133e57600080fd5b6026546027546040516000926129bb9290916001600160a01b039091169060289060019060240161b052565b60408051601f19818403018152918152602080830180516001600160e01b031663547965cb60e11b17905281519081018252602480546001600160a01b039081168352602154935163ca669fa760e01b81529316600484015292935091737109709ecfa91a80626ff3989d68f67f5b1dd12d9163ca669fa79101600060405180830381600087803b158015612a4f57600080fd5b505af1158015612a63573d6000803e3d6000fd5b50506020546040516319db301560e21b81526001600160a01b03909116925063676cc0549150612a99908490869060040161b08d565b6000604051808303816000875af1158015612ab8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612ae0919081019061b1a3565b5060006040518060200160405280600081525090506000602654826000604051602401612b0f9392919061b4eb565b60408051601f198184030181529181526020820180516001600160e01b03167f10d29b9e00000000000000000000000000000000000000000000000000000000179052602154905163ca669fa760e01b81526001600160a01b039091166004820152909150737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ca669fa7906024015b600060405180830381600087803b158015612bae57600080fd5b505af1158015612bc2573d6000803e3d6000fd5b5050604051737109709ecfa91a80626ff3989d68f67f5b1dd12d925063f28dceb391507ec10cfd0000000000000000000000000000000000000000000000000000000090612c1490869060240161b394565b60408051601f198184030181529181526020820180516001600160e01b03167fffffffff000000000000000000000000000000000000000000000000000000009485161790525160e084901b9092168252611c249160040161b394565b6060601b805480602002602001604051908101604052809291908181526020016000905b8282101561263a5783829060005260206000209060020201604051806040016040529081600082018054612cc89061af64565b80601f0160208091040260200160405190810160405280929190818152602001828054612cf49061af64565b8015612d415780601f10612d1657610100808354040283529160200191612d41565b820191906000526020600020905b815481529060010190602001808311612d2457829003601f168201915b5050505050815260200160018201805480602002602001604051908101604052809291908181526020018280548015612dc657602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b03191681526020019060040190602082600301049283019260010382029150808411612d885790505b50505050508152505081526020019060010190612c95565b6000612e2e6040518060400160405280600c81526020017f52656769737472792e736f6c0000000000000000000000000000000000000000815250604051806020016040528060008152506167b9565b6040517fc31eb0e00000000000000000000000000000000000000000000000000000000081527fd92e233d0000000000000000000000000000000000000000000000000000000060048201529091508190737109709ecfa91a80626ff3989d68f67f5b1dd12d9063c31eb0e090602401600060405180830381600087803b158015612eb857600080fd5b505af1158015612ecc573d6000803e3d6000fd5b5050602354602154602480546040517ff8c8765e000000000000000000000000000000000000000000000000000000008152600060048201526001600160a01b039485169281019290925291831660448201529082166064820152908416925063f8c8765e9150608401600060405180830381600087803b158015612f5057600080fd5b505af1158015612f64573d6000803e3d6000fd5b50506040517fc31eb0e00000000000000000000000000000000000000000000000000000000081527fd92e233d000000000000000000000000000000000000000000000000000000006004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d925063c31eb0e09150602401600060405180830381600087803b158015612fed57600080fd5b505af1158015613001573d6000803e3d6000fd5b5050602254602154602480546040517ff8c8765e0000000000000000000000000000000000000000000000000000000081526001600160a01b03948516600482015260009281019290925291831660448201529082166064820152908416925063f8c8765e9150608401600060405180830381600087803b15801561308557600080fd5b505af1158015613099573d6000803e3d6000fd5b50506040517fc31eb0e00000000000000000000000000000000000000000000000000000000081527fd92e233d000000000000000000000000000000000000000000000000000000006004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d925063c31eb0e09150602401600060405180830381600087803b15801561312257600080fd5b505af1158015613136573d6000803e3d6000fd5b5050602254602354602480546040517ff8c8765e0000000000000000000000000000000000000000000000000000000081526001600160a01b039485166004820152928416918301919091526000604483015282166064820152908416925063f8c8765e9150608401600060405180830381600087803b1580156131b957600080fd5b505af11580156131cd573d6000803e3d6000fd5b50506040517fc31eb0e00000000000000000000000000000000000000000000000000000000081527fd92e233d000000000000000000000000000000000000000000000000000000006004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d925063c31eb0e09150602401600060405180830381600087803b15801561325657600080fd5b505af115801561326a573d6000803e3d6000fd5b50506022546023546021546040517ff8c8765e0000000000000000000000000000000000000000000000000000000081526001600160a01b03938416600482015291831660248301528216604482015260006064820152908416925063f8c8765e9150608401600060405180830381600087803b1580156132ea57600080fd5b505af11580156132fe573d6000803e3d6000fd5b505050505050565b6060601a805480602002602001604051908101604052809291908181526020016000905b8282101561263a5783829060005260206000200180546133499061af64565b80601f01602080910402602001604051908101604052809291908181526020018280546133759061af64565b80156133c25780601f10613397576101008083540402835291602001916133c2565b820191906000526020600020905b8154815290600101906020018083116133a557829003601f168201915b50505050508152602001906001019061332a565b604080518082018252600381527f544b4e000000000000000000000000000000000000000000000000000000000060208083019190915291516d13570000000000000000000000009281019290925261dddd9160659060009060340160408051601f198184030181528282018252600583527f4552433230000000000000000000000000000000000000000000000000000000602084015290519092506012906000906134919088908890889088908890889060240161b3a7565b60408051601f19818403018152918152602080830180516001600160e01b03167f6e9e2d3f0000000000000000000000000000000000000000000000000000000017905281519081018252602480546001600160a01b039081168352602154935163ca669fa760e01b81529316600484015292935091737109709ecfa91a80626ff3989d68f67f5b1dd12d9163ca669fa79101600060405180830381600087803b15801561353e57600080fd5b505af1158015613552573d6000803e3d6000fd5b50506040517f491cc7c200000000000000000000000000000000000000000000000000000000815260016004820181905260248201819052604482018190526064820152737109709ecfa91a80626ff3989d68f67f5b1dd12d925063491cc7c29150608401600060405180830381600087803b1580156135d157600080fd5b505af11580156135e5573d6000803e3d6000fd5b50505050876001600160a01b031685604051613601919061b516565b60405180910390207fa9edd2fd29fc8cab6015c2725afa5bc5f3b8d709a02d9e89990ef20fd781e36785898b60405161363c9392919061b532565b60405180910390a36020546040516319db301560e21b81526001600160a01b039091169063676cc05490613676908490869060040161b08d565b6000604051808303816000875af1158015613695573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526136bd919081019061b1a3565b506020546040517fe9d6c5ba0000000000000000000000000000000000000000000000000000000081526001600160a01b038a81166004830152600092839283928392839283929091169063e9d6c5ba90602401600060405180830381865afa15801561372e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613756919081019061b421565b95509550955095509550955061376b866168b0565b613775858e61697c565b61377f848d616858565b61379783805190602001208c805190602001206167d8565b6137a1828b61697c565b6137b18160ff168a60ff16616858565b5050505050505050505050505050565b6060601d805480602002602001604051908101604052809291908181526020016000905b8282101561263a5760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561388f57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116138515790505b505050505081525050815260200190600101906137e5565b60208054604080517fa217fddf00000000000000000000000000000000000000000000000000000000815290516139c7936001600160a01b03909316926391d1485492849263a217fddf926004808401939192918290030181865afa158015613914573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613938919061b554565b60225460405160e084901b7fffffffff0000000000000000000000000000000000000000000000000000000016815260048101929092526001600160a01b031660248201526044015b602060405180830381865afa15801561399e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139c2919061b56d565b6168b0565b60208054604080517fe63ab1e90000000000000000000000000000000000000000000000000000000081529051613a34936001600160a01b03909316926391d1485492849263e63ab1e9926004808401939192918290030181865afa158015613914573d6000803e3d6000fd5b60208054604080517fe63ab1e90000000000000000000000000000000000000000000000000000000081529051613b12936001600160a01b03909316926391d1485492849263e63ab1e9926004808401939192918290030181865afa158015613aa1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ac5919061b554565b60235460405160e084901b7fffffffff0000000000000000000000000000000000000000000000000000000016815260048101929092526001600160a01b03166024820152604401613981565b60208054604080517fbd8fde1c0000000000000000000000000000000000000000000000000000000081529051613b7f936001600160a01b03909316926391d1485492849263bd8fde1c926004808401939192918290030181865afa158015613aa1573d6000803e3d6000fd5b60208054604080517fc50d6dd90000000000000000000000000000000000000000000000000000000081529051613c5d936001600160a01b03909316926391d1485492849263c50d6dd9926004808401939192918290030181865afa158015613bec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c10919061b554565b60215460405160e084901b7fffffffff0000000000000000000000000000000000000000000000000000000016815260048101929092526001600160a01b03166024820152604401613981565b60208054604080517f2c78f74c0000000000000000000000000000000000000000000000000000000081529051613cf5936001600160a01b0390931692632c78f74c92600480820193918290030181865afa158015613cc0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ce4919061b5a0565b6021546001600160a01b03166169ce565b60208054604080517f6bf3d05a0000000000000000000000000000000000000000000000000000000081529051613d8d936001600160a01b0390931692636bf3d05a92600480820193918290030181865afa158015613d58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d7c919061b5a0565b6024546001600160a01b03166169ce565b565b60208054604080517f5c975abb0000000000000000000000000000000000000000000000000000000081529051613e1b936001600160a01b0390931692635c975abb92600480820193918290030181865afa158015613df2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e16919061b56d565b61692a565b60225460405163ca669fa760e01b81526001600160a01b039091166004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ca669fa790602401600060405180830381600087803b158015613e7457600080fd5b505af1158015613e88573d6000803e3d6000fd5b50505050602060009054906101000a90046001600160a01b03166001600160a01b0316638456cb596040518163ffffffff1660e01b8152600401600060405180830381600087803b158015613edc57600080fd5b505af1158015613ef0573d6000803e3d6000fd5b505060208054604080517f5c975abb0000000000000000000000000000000000000000000000000000000081529051613f5895506001600160a01b039092169350635c975abb9260048083019391928290030181865afa15801561399e573d6000803e3d6000fd5b60225460405163ca669fa760e01b81526001600160a01b039091166004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ca669fa790602401600060405180830381600087803b158015613fb157600080fd5b505af1158015613fc5573d6000803e3d6000fd5b50505050602060009054906101000a90046001600160a01b03166001600160a01b0316633f4ba83a6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561401957600080fd5b505af115801561402d573d6000803e3d6000fd5b505060208054604080517f5c975abb0000000000000000000000000000000000000000000000000000000081529051613d8d95506001600160a01b039092169350635c975abb9260048083019391928290030181865afa158015613df2573d6000803e3d6000fd5b604080516020810182526177778152602154915163ca669fa760e01b81526001600160a01b03909216600483015290737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ca669fa790602401600060405180830381600087803b1580156140fd57600080fd5b505af1158015614111573d6000803e3d6000fd5b50506040517fc31eb0e00000000000000000000000000000000000000000000000000000000081527fddb5de5e000000000000000000000000000000000000000000000000000000006004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d925063c31eb0e09150602401600060405180830381600087803b15801561419a57600080fd5b505af11580156141ae573d6000803e3d6000fd5b50506020805460408051928301815260008352516319db301560e21b81526001600160a01b03909116935063676cc05492506141ee91859160040161b08d565b6000604051808303816000875af115801561420d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052614235919081019061b1a3565b5050565b6060601c805480602002602001604051908101604052809291908181526020016000905b8282101561263a5760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561430757602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116142c95790505b5050505050815250508152602001906001019061425d565b60265460275460405160009261434b9290916001600160a01b039091169060289060019060240161b052565b60408051601f19818403018152918152602080830180516001600160e01b031663547965cb60e11b17905281519081018252602480546001600160a01b039081168352602154935163ca669fa760e01b81529316600484015292935091737109709ecfa91a80626ff3989d68f67f5b1dd12d9163ca669fa79101600060405180830381600087803b1580156143df57600080fd5b505af11580156143f3573d6000803e3d6000fd5b50506040517f491cc7c200000000000000000000000000000000000000000000000000000000815260016004820181905260248201819052604482018190526064820152737109709ecfa91a80626ff3989d68f67f5b1dd12d925063491cc7c29150608401600060405180830381600087803b15801561447257600080fd5b505af1158015614486573d6000803e3d6000fd5b5050602654604051600181529092507fc98ceea113f96d4762d49d2885a10d7d0d16d07243bb17df97e53e9035e1415e915060200160405180910390a26020546040516319db301560e21b81526001600160a01b039091169063676cc054906144f5908490869060040161b08d565b6000604051808303816000875af1158015614514573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261453c919081019061b1a3565b50602054604080517f94cc868300000000000000000000000000000000000000000000000000000000815290516000926001600160a01b0316916394cc868391600480830192869291908290030181865afa15801561459f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526145c7919081019061b2a6565b90506145d581516001616858565b6145fb816000815181106145eb576145eb61b34c565b6020026020010151602654616858565b6026546027546040516000926146269290916001600160a01b0390911690602890859060240161b052565b60408051601f198184030181529181526020820180516001600160e01b031663547965cb60e11b179052602154905163ca669fa760e01b81526001600160a01b039091166004820152909150737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ca669fa790602401600060405180830381600087803b1580156146ab57600080fd5b505af11580156146bf573d6000803e3d6000fd5b50506040517f491cc7c200000000000000000000000000000000000000000000000000000000815260016004820181905260248201819052604482018190526064820152737109709ecfa91a80626ff3989d68f67f5b1dd12d925063491cc7c29150608401600060405180830381600087803b15801561473e57600080fd5b505af1158015614752573d6000803e3d6000fd5b5050602654604051600081529092507fc98ceea113f96d4762d49d2885a10d7d0d16d07243bb17df97e53e9035e1415e915060200160405180910390a26020546040516319db301560e21b81526001600160a01b039091169063676cc054906147c1908690859060040161b08d565b6000604051808303816000875af11580156147e0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052614808919081019061b1a3565b50602060009054906101000a90046001600160a01b03166001600160a01b03166394cc86836040518163ffffffff1660e01b8152600401600060405180830381865afa15801561485c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052614884919081019061b2a6565b915061135282516000616858565b60225460405163ca669fa760e01b81526001600160a01b039091166004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ca669fa790602401600060405180830381600087803b1580156148eb57600080fd5b505af11580156148ff573d6000803e3d6000fd5b50505050602060009054906101000a90046001600160a01b03166001600160a01b0316638456cb596040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561495357600080fd5b505af1158015614967573d6000803e3d6000fd5b505060408051602081018252602480546001600160a01b039081168352602154935163ca669fa760e01b815293166004840152909350737109709ecfa91a80626ff3989d68f67f5b1dd12d925063ca669fa791015b600060405180830381600087803b1580156149d657600080fd5b505af11580156149ea573d6000803e3d6000fd5b505050507f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d60001c6001600160a01b031663f48448146040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561419a57600080fd5b602654602754604051600092614a789290916001600160a01b039091169060289060019060240161b052565b60408051601f19818403018152918152602080830180516001600160e01b031663547965cb60e11b17905281519081018252602480546001600160a01b039081168352602154935163ca669fa760e01b81529316600484015292935091737109709ecfa91a80626ff3989d68f67f5b1dd12d9163ca669fa79101600060405180830381600087803b158015614b0c57600080fd5b505af1158015614b20573d6000803e3d6000fd5b50506020546040516319db301560e21b81526001600160a01b03909116925063676cc0549150614b56908490869060040161b08d565b6000604051808303816000875af1158015614b75573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052614b9d919081019061b1a3565b506000602654602a602b604051602401614bb99392919061b1d8565b60408051601f198184030181529181526020820180516001600160e01b03167f631d62e400000000000000000000000000000000000000000000000000000000179052602154905163ca669fa760e01b81526001600160a01b039091166004820152909150737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ca669fa790602401600060405180830381600087803b158015614c5757600080fd5b505af1158015614c6b573d6000803e3d6000fd5b50506040517f491cc7c200000000000000000000000000000000000000000000000000000000815260016004820181905260248201819052604482018190526064820152737109709ecfa91a80626ff3989d68f67f5b1dd12d925063491cc7c29150608401600060405180830381600087803b158015614cea57600080fd5b505af1158015614cfe573d6000803e3d6000fd5b50505050602a604051614d11919061b5bd565b60405180910390206026547f20319e67335097991b9d6add94a71632118372c1a0b5650654f069668dce2581602b604051614d4c919061b650565b60405180910390a36020546040516319db301560e21b81526001600160a01b039091169063676cc05490614d86908590859060040161b08d565b6000604051808303816000875af1158015614da5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052614dcd919081019061b1a3565b506020546026546040517f5cf92c9f00000000000000000000000000000000000000000000000000000000815260009283926001600160a01b0390911691635cf92c9f91614e2091602a9060040161b663565b600060405180830381865afa158015614e3d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052614e65919081019061b67c565b91509150614e72826168b0565b611ccf81602b8054614e839061af64565b80601f0160208091040260200160405190810160405280929190818152602001828054614eaf9061af64565b8015614efc5780601f10614ed157610100808354040283529160200191614efc565b820191906000526020600020905b815481529060010190602001808311614edf57829003601f168201915b5050505050616a2f565b60606019805480602002602001604051908101604052809291908181526020016000905b8282101561263a578382906000526020600020018054614f499061af64565b80601f0160208091040260200160405190810160405280929190818152602001828054614f759061af64565b8015614fc25780601f10614f9757610100808354040283529160200191614fc2565b820191906000526020600020905b815481529060010190602001808311614fa557829003601f168201915b505050505081526020019060010190614f2a565b60085460009060ff1615614fee575060085460ff1690565b6040517f667f9d70000000000000000000000000000000000000000000000000000000008152737109709ecfa91a80626ff3989d68f67f5b1dd12d600482018190527f6661696c65640000000000000000000000000000000000000000000000000000602483015260009163667f9d7090604401602060405180830381865afa15801561507f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906150a3919061b554565b1415905090565b6026546027546040516000926150d69290916001600160a01b039091169060289060019060240161b052565b60408051601f19818403018152918152602080830180516001600160e01b031663547965cb60e11b17905281519081018252602480546001600160a01b039081168352602154935163ca669fa760e01b81529316600484015292935091737109709ecfa91a80626ff3989d68f67f5b1dd12d9163ca669fa79101600060405180830381600087803b15801561516a57600080fd5b505af115801561517e573d6000803e3d6000fd5b50506020546040516319db301560e21b81526001600160a01b03909116925063676cc05491506151b4908490869060040161b08d565b6000604051808303816000875af11580156151d3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526151fb919081019061b1a3565b50604080518082018252600981527f626c6f636b54696d6500000000000000000000000000000000000000000000006020808301919091528251600581830152835180820390920182528084019093526026549192909160009161526691908590859060640161b6ca565b60408051601f198184030181529181526020820180516001600160e01b03167f2259e9e500000000000000000000000000000000000000000000000000000000179052602154905163ca669fa760e01b81526001600160a01b039091166004820152909150737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ca669fa790602401600060405180830381600087803b15801561530457600080fd5b505af1158015615318573d6000803e3d6000fd5b50506040517f491cc7c200000000000000000000000000000000000000000000000000000000815260016004820181905260248201819052604482018190526064820152737109709ecfa91a80626ff3989d68f67f5b1dd12d925063491cc7c29150608401600060405180830381600087803b15801561539757600080fd5b505af11580156153ab573d6000803e3d6000fd5b505050506026547f40c66d0452b5a398a7ebd687f5c3b020e21aa673375087ff6eb7ad214cfee63484846040516153e392919061b6e3565b60405180910390a26020546040516319db301560e21b81526001600160a01b039091169063676cc0549061541d908790859060040161b08d565b6000604051808303816000875af115801561543c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052615464919081019061b1a3565b506020546026546040517f7066b18d0000000000000000000000000000000000000000000000000000000081526000926001600160a01b031691637066b18d916154b39190889060040161b708565b600060405180830381865afa1580156154d0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526154f8919081019061b1a3565b90506132fe818051906020012084805190602001206167d8565b604080518082018252600381527f544b4e000000000000000000000000000000000000000000000000000000000060208083019190915291516d135700000000000000000000000092810192909252600091606590839060340160408051601f198184030181528282018252600583527f4552433230000000000000000000000000000000000000000000000000000000602084015290519092506012906000906155cb9088908890889088908890889060240161b3a7565b60408051601f19818403018152918152602080830180516001600160e01b03167f6e9e2d3f0000000000000000000000000000000000000000000000000000000017905281519081018252602480546001600160a01b039081168352602154935163ca669fa760e01b81529316600484015292935091737109709ecfa91a80626ff3989d68f67f5b1dd12d9163ca669fa79101600060405180830381600087803b15801561567857600080fd5b505af115801561568c573d6000803e3d6000fd5b50506040517fc31eb0e00000000000000000000000000000000000000000000000000000000081527fd92e233d000000000000000000000000000000000000000000000000000000006004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d925063c31eb0e091506024015b600060405180830381600087803b15801561571657600080fd5b505af115801561572a573d6000803e3d6000fd5b50506020546040516319db301560e21b81526001600160a01b03909116925063676cc0549150615760908490869060040161b08d565b6000604051808303816000875af115801561577f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526157a7919081019061b1a3565b505050505050505050565b604080518082018252600381527f544b4e000000000000000000000000000000000000000000000000000000000060208083019190915282518082018452600080825284518086018652600581527f455243323000000000000000000000000000000000000000000000000000000093810193909352935161dddd94606593916012919061584e9088908890889088908890889060240161b3a7565b60408051601f19818403018152918152602080830180516001600160e01b03167f6e9e2d3f0000000000000000000000000000000000000000000000000000000017905281519081018252602480546001600160a01b039081168352602154935163ca669fa760e01b81529316600484015292935091737109709ecfa91a80626ff3989d68f67f5b1dd12d9163ca669fa79101600060405180830381600087803b1580156158fb57600080fd5b505af115801561590f573d6000803e3d6000fd5b50506040517f491cc7c200000000000000000000000000000000000000000000000000000000815260016004820181905260248201819052604482018190526064820152737109709ecfa91a80626ff3989d68f67f5b1dd12d925063491cc7c29150608401600060405180830381600087803b15801561598e57600080fd5b505af11580156159a2573d6000803e3d6000fd5b50505050876001600160a01b0316856040516159be919061b516565b60405180910390207fa9edd2fd29fc8cab6015c2725afa5bc5f3b8d709a02d9e89990ef20fd781e36785898b6040516159f99392919061b532565b60405180910390a36020546040516319db301560e21b81526001600160a01b039091169063676cc05490615760908490869060040161b08d565b6040805160208082018352600080835292516d13570000000000000000000000009181019190915261dddd9260659160340160408051601f198184030181528282018252600583527f455243323000000000000000000000000000000000000000000000000000000060208401529051909250601290600090615ac49088908890889088908890889060240161b3a7565b60408051601f19818403018152918152602080830180516001600160e01b03167f6e9e2d3f0000000000000000000000000000000000000000000000000000000017905281519081018252602480546001600160a01b039081168352602154935163ca669fa760e01b81529316600484015292935091737109709ecfa91a80626ff3989d68f67f5b1dd12d9163ca669fa79101600060405180830381600087803b158015615b7157600080fd5b505af1158015615b85573d6000803e3d6000fd5b505060408051602060248201819052601660448301527f53796d626f6c2063616e6e6f7420626520656d707479000000000000000000006064808401919091528351808403909101815260849092018352810180516001600160e01b03167ec10cfd0000000000000000000000000000000000000000000000000000000017905290517ff28dceb3000000000000000000000000000000000000000000000000000000008152737109709ecfa91a80626ff3989d68f67f5b1dd12d935063f28dceb392506156fc919060040161b394565b602654602754604051600092615c829290916001600160a01b039091169060289060019060240161b052565b60408051601f19818403018152918152602080830180516001600160e01b031663547965cb60e11b17905281519081018252602480546001600160a01b039081168352602154935163ca669fa760e01b81529316600484015292935091737109709ecfa91a80626ff3989d68f67f5b1dd12d9163ca669fa79101600060405180830381600087803b158015615d1657600080fd5b505af1158015615d2a573d6000803e3d6000fd5b50506020546040516319db301560e21b81526001600160a01b03909116925063676cc0549150615d60908490869060040161b08d565b6000604051808303816000875af1158015615d7f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052615da7919081019061b1a3565b506000604051806020016040528060008152509050600060265482602b604051602401615dd69392919061b721565b60408051601f198184030181529181526020820180516001600160e01b03167f631d62e400000000000000000000000000000000000000000000000000000000179052602154905163ca669fa760e01b81526001600160a01b039091166004820152909150737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ca669fa790602401612b94565b60408051602081018252602480546001600160a01b039081168352602554935163ca669fa760e01b8152931660048401529091737109709ecfa91a80626ff3989d68f67f5b1dd12d9163ca669fa791016149bc565b60606015805480602002602001604051908101604052809291908181526020018280548015611978576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831161195a575050505050905090565b602654602754604051600092615f409290916001600160a01b039091169060289060019060240161b052565b60408051601f19818403018152918152602080830180516001600160e01b031663547965cb60e11b17905281519081018252602480546001600160a01b039081168352602154935163ca669fa760e01b81529316600484015292935091737109709ecfa91a80626ff3989d68f67f5b1dd12d9163ca669fa79101600060405180830381600087803b158015615fd457600080fd5b505af1158015615fe8573d6000803e3d6000fd5b50506020546040516319db301560e21b81526001600160a01b03909116925063676cc054915061601e908490869060040161b08d565b6000604051808303816000875af115801561603d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052616065919081019061b1a3565b506000602654602a602b6040516024016160819392919061b1d8565b60408051601f198184030181529181526020820180516001600160e01b03167f631d62e400000000000000000000000000000000000000000000000000000000179052602154905163ca669fa760e01b81526001600160a01b039091166004820152909150737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ca669fa790602401600060405180830381600087803b15801561611f57600080fd5b505af1158015616133573d6000803e3d6000fd5b50506020546040516319db301560e21b81526001600160a01b03909116925063676cc0549150616169908590859060040161b08d565b6000604051808303816000875af1158015616188573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526161b0919081019061b1a3565b506020546026546040517f5cf92c9f0000000000000000000000000000000000000000000000000000000081526000926001600160a01b031691635cf92c9f916162009190602a9060040161b663565b600060405180830381865afa15801561621d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052616245919081019061b67c565b509050616251816168b0565b6000602654602a600060405160240161626c9392919061b73a565b60408051601f198184030181529181526020820180516001600160e01b03167f10d29b9e00000000000000000000000000000000000000000000000000000000179052602154905163ca669fa760e01b81526001600160a01b039091166004820152909150737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ca669fa790602401600060405180830381600087803b15801561630a57600080fd5b505af115801561631e573d6000803e3d6000fd5b50506040517f491cc7c200000000000000000000000000000000000000000000000000000000815260016004820181905260248201819052604482018190526064820152737109709ecfa91a80626ff3989d68f67f5b1dd12d925063491cc7c29150608401600060405180830381600087803b15801561639d57600080fd5b505af11580156163b1573d6000803e3d6000fd5b505050507f6db122b2555e642c944e09ae6d733a3f7600404765f612912f72b3c921c0b88c602b6040516163e5919061b650565b60405180910390a16020546040516319db301560e21b81526001600160a01b039091169063676cc0549061641f908790859060040161b08d565b6000604051808303816000875af115801561643e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052616466919081019061b1a3565b506020546026546040517f5cf92c9f0000000000000000000000000000000000000000000000000000000081526001600160a01b0390921691635cf92c9f916164b491602a9060040161b663565b600060405180830381865afa1580156164d1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526164f9919081019061b67c565b5091506165058261692a565b6000602654602a60016040516024016165209392919061b73a565b60408051601f198184030181529181526020820180516001600160e01b03167f10d29b9e00000000000000000000000000000000000000000000000000000000179052602154905163ca669fa760e01b81526001600160a01b039091166004820152909150737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ca669fa790602401600060405180830381600087803b1580156165be57600080fd5b505af11580156165d2573d6000803e3d6000fd5b50506040517f491cc7c200000000000000000000000000000000000000000000000000000000815260016004820181905260248201819052604482018190526064820152737109709ecfa91a80626ff3989d68f67f5b1dd12d925063491cc7c29150608401600060405180830381600087803b15801561665157600080fd5b505af1158015616665573d6000803e3d6000fd5b505050507f6db122b2555e642c944e09ae6d733a3f7600404765f612912f72b3c921c0b88c602b604051616699919061b650565b60405180910390a16020546040516319db301560e21b81526001600160a01b039091169063676cc054906166d3908890859060040161b08d565b6000604051808303816000875af11580156166f2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261671a919081019061b1a3565b506020546026546040517f5cf92c9f0000000000000000000000000000000000000000000000000000000081526001600160a01b0390921691635cf92c9f9161676891602a9060040161b663565b600060405180830381865afa158015616785573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526167ad919081019061b67c565b5092506132fe836168b0565b60006167c361aafd565b6167ce848483616a81565b9150505b92915050565b6040517f7c84c69b0000000000000000000000000000000000000000000000000000000081526004810183905260248101829052737109709ecfa91a80626ff3989d68f67f5b1dd12d90637c84c69b906044015b60006040518083038186803b15801561684457600080fd5b505afa1580156132fe573d6000803e3d6000fd5b6040517f98296c540000000000000000000000000000000000000000000000000000000081526004810183905260248101829052737109709ecfa91a80626ff3989d68f67f5b1dd12d906398296c549060440161682c565b6040517f0c9fd5810000000000000000000000000000000000000000000000000000000081528115156004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d90630c9fd581906024015b60006040518083038186803b15801561691657600080fd5b505afa158015611ccf573d6000803e3d6000fd5b6040517fa59828850000000000000000000000000000000000000000000000000000000081528115156004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063a5982885906024016168fe565b6040517ff320d963000000000000000000000000000000000000000000000000000000008152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063f320d9639061682c908590859060040161b6e3565b6040517f515361f60000000000000000000000000000000000000000000000000000000081526001600160a01b03808416600483015282166024820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063515361f69060440161682c565b6040517f97624631000000000000000000000000000000000000000000000000000000008152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063976246319061682c908590859060040161b6e3565b600080616a8e8584616afc565b9050616af16040518060400160405280601d81526020017f4552433139363750726f78792e736f6c3a4552433139363750726f78790000008152508286604051602001616adc92919061b753565b60405160208183030381529060405285616b08565b9150505b9392505050565b6000616af58383616b36565b60c08101515160009015616b2c57616b2584848460c00151616b51565b9050616af5565b616b258484616cf7565b6000616b428383616de2565b616af583836020015184616b08565b600080616b5c616dee565b90506000616b6a8683616ec1565b90506000616b818260600151836020015185617367565b90506000616b9183838989617579565b90506000616b9e826183f6565b602081015181519192509060030b15616c1157898260400151604051602001616bc892919061b775565b60408051601f19818403018152908290527f08c379a0000000000000000000000000000000000000000000000000000000008252616c089160040161b394565b60405180910390fd5b6000616c546040518060400160405280601581526020017f4465706c6f79656420746f20616464726573733a2000000000000000000000008152508360016185c5565b6040517fc6ce059d000000000000000000000000000000000000000000000000000000008152909150737109709ecfa91a80626ff3989d68f67f5b1dd12d9063c6ce059d90616ca790849060040161b394565b602060405180830381865afa158015616cc4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190616ce8919061b5a0565b9b9a5050505050505050505050565b6040517f8d1cc9250000000000000000000000000000000000000000000000000000000081526000908190737109709ecfa91a80626ff3989d68f67f5b1dd12d90638d1cc92590616d4c90879060040161b394565b600060405180830381865afa158015616d69573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052616d91919081019061b1a3565b90506000616dbf8285604051602001616dab92919061b7f6565b6040516020818303038152906040526187bd565b90506001600160a01b0381166167ce578484604051602001616bc892919061b825565b614235828260006187d0565b604080518082018252600381527f6f75740000000000000000000000000000000000000000000000000000000000602082015290517fd145736c000000000000000000000000000000000000000000000000000000008152606091737109709ecfa91a80626ff3989d68f67f5b1dd12d91829063d145736c90616e7590849060040161b8d0565b600060405180830381865afa158015616e92573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052616eba919081019061b1a3565b9250505090565b616ef36040518060a0016040528060608152602001606081526020016060815260200160608152602001606081525090565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d9050616f3e6040518060a0016040528060608152602001606081526020016060815260200160608152602001606081525090565b616f47856188d3565b60208201526000616f5786618cb8565b90506000836001600160a01b031663d930a0e66040518163ffffffff1660e01b8152600401600060405180830381865afa158015616f99573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052616fc1919081019061b1a3565b86838560200151604051602001616fdb949392919061b917565b60408051601f19818403018152908290527f60f9bb1100000000000000000000000000000000000000000000000000000000825291506000906001600160a01b038616906360f9bb119061703390859060040161b394565b600060405180830381865afa158015617050573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052617078919081019061b1a3565b6040517fdb4235f60000000000000000000000000000000000000000000000000000000081529091506001600160a01b0386169063db4235f6906170c090849060040161ba1b565b602060405180830381865afa1580156170dd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190617101919061b56d565b6171165781604051602001616bc8919061ba6d565b6040517f49c4fac80000000000000000000000000000000000000000000000000000000081526001600160a01b038616906349c4fac89061715b90849060040161baff565b600060405180830381865afa158015617178573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526171a0919081019061b1a3565b84526040517fdb4235f60000000000000000000000000000000000000000000000000000000081526001600160a01b0386169063db4235f6906171e790849060040161bb51565b602060405180830381865afa158015617204573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190617228919061b56d565b156172bd576040517f49c4fac80000000000000000000000000000000000000000000000000000000081526001600160a01b038616906349c4fac89061727290849060040161bb51565b600060405180830381865afa15801561728f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526172b7919081019061b1a3565b60408501525b846001600160a01b03166349c4fac88286600001516040516020016172e2919061bba3565b6040516020818303038152906040526040518363ffffffff1660e01b815260040161730e92919061b6e3565b600060405180830381865afa15801561732b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052617353919081019061b1a3565b606085015250608083015250949350505050565b60408051600480825260a0820190925260609160009190816020015b60608152602001906001900390816173835790505090506040518060400160405280600481526020017f6772657000000000000000000000000000000000000000000000000000000000815250816000815181106173e3576173e361b34c565b60200260200101819052506040518060400160405280600381526020017f2d726c0000000000000000000000000000000000000000000000000000000000815250816001815181106174375761743761b34c565b602002602001018190525084604051602001617453919061bc0f565b604051602081830303815290604052816002815181106174755761747561b34c565b602002602001018190525082604051602001617491919061bc7b565b604051602081830303815290604052816003815181106174b3576174b361b34c565b602002602001018190525060006174c9826183f6565b602080820151604080518082018252600581527f2e6a736f6e000000000000000000000000000000000000000000000000000000818501908152825180840184526000808252908601528251808401909352905182529281019290925291925061755a9060408051808201825260008082526020918201528151808301909252845182528085019082015290618f3b565b61756f5785604051602001616bc8919061bcbc565b9695505050505050565b60a0810151604080518082018252600080825260209182015281518083019092528251808352928101910152606090737109709ecfa91a80626ff3989d68f67f5b1dd12d90156175c9565b511590565b61773d57826020015115617685576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152605860248201527f54686520606c6963656e73655479706560206f7074696f6e2063616e6e6f742060448201527f62652075736564207768656e207468652060736b6970566572696679536f757260648201527f6365436f646560206f7074696f6e206973206074727565600000000000000000608482015260a401616c08565b8260c001511561773d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152605360248201527f54686520606c6963656e73655479706560206f7074696f6e2063616e6e6f742060448201527f62652075736564207768656e207468652060736b69704c6963656e736554797060648201527f6560206f7074696f6e2069732060747275656000000000000000000000000000608482015260a401616c08565b6040805160ff8082526120008201909252600091816020015b606081526020019060019003908161775657905050905060006040518060400160405280600381526020017f6e707800000000000000000000000000000000000000000000000000000000008152508282806177b19061bd7c565b935060ff16815181106177c6576177c661b34c565b60200260200101819052506040518060400160405280600d81526020017f302e302e312d616c7068612e3700000000000000000000000000000000000000815250604051602001617817919061bd9b565b6040516020818303038152906040528282806178329061bd7c565b935060ff16815181106178475761784761b34c565b60200260200101819052506040518060400160405280600681526020017f6465706c6f7900000000000000000000000000000000000000000000000000008152508282806178949061bd7c565b935060ff16815181106178a9576178a961b34c565b60200260200101819052506040518060400160405280600e81526020017f2d2d636f6e74726163744e616d650000000000000000000000000000000000008152508282806178f69061bd7c565b935060ff168151811061790b5761790b61b34c565b602002602001018190525087602001518282806179279061bd7c565b935060ff168151811061793c5761793c61b34c565b60200260200101819052506040518060400160405280600e81526020017f2d2d636f6e7472616374506174680000000000000000000000000000000000008152508282806179899061bd7c565b935060ff168151811061799e5761799e61b34c565b6020908102919091010152875182826179b68161bd7c565b935060ff16815181106179cb576179cb61b34c565b60200260200101819052506040518060400160405280600981526020017f2d2d636861696e49640000000000000000000000000000000000000000000000815250828280617a189061bd7c565b935060ff1681518110617a2d57617a2d61b34c565b6020026020010181905250617a4146618f9c565b8282617a4c8161bd7c565b935060ff1681518110617a6157617a6161b34c565b60200260200101819052506040518060400160405280600f81526020017f2d2d6275696c64496e666f46696c650000000000000000000000000000000000815250828280617aae9061bd7c565b935060ff1681518110617ac357617ac361b34c565b602002602001018190525086828280617adb9061bd7c565b935060ff1681518110617af057617af061b34c565b6020908102919091010152855115617c175760408051808201909152601581527f2d2d636f6e7374727563746f7242797465636f6465000000000000000000000060208201528282617b418161bd7c565b935060ff1681518110617b5657617b5661b34c565b60209081029190910101526040517f71aad10d0000000000000000000000000000000000000000000000000000000081526001600160a01b038416906371aad10d90617ba690899060040161b394565b600060405180830381865afa158015617bc3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052617beb919081019061b1a3565b8282617bf68161bd7c565b935060ff1681518110617c0b57617c0b61b34c565b60200260200101819052505b846020015115617ce75760408051808201909152601281527f2d2d766572696679536f75726365436f6465000000000000000000000000000060208201528282617c608161bd7c565b935060ff1681518110617c7557617c7561b34c565b60200260200101819052506040518060400160405280600581526020017f66616c7365000000000000000000000000000000000000000000000000000000815250828280617cc29061bd7c565b935060ff1681518110617cd757617cd761b34c565b6020026020010181905250617eae565b617d1f6175c48660a0015160408051808201825260008082526020918201528151808301909252825182529182019181019190915290565b617db25760408051808201909152600d81527f2d2d6c6963656e7365547970650000000000000000000000000000000000000060208201528282617d628161bd7c565b935060ff1681518110617d7757617d7761b34c565b60200260200101819052508460a00151604051602001617d97919061bc0f565b604051602081830303815290604052828280617cc29061bd7c565b8460c00151158015617df5575060408089015181518083018352600080825260209182015282518084019093528151835290810190820152617df390511590565b155b15617eae5760408051808201909152600d81527f2d2d6c6963656e7365547970650000000000000000000000000000000000000060208201528282617e398161bd7c565b935060ff1681518110617e4e57617e4e61b34c565b6020026020010181905250617e628861903c565b604051602001617e72919061bc0f565b604051602081830303815290604052828280617e8d9061bd7c565b935060ff1681518110617ea257617ea261b34c565b60200260200101819052505b60408086015181518083018352600080825260209182015282518084019093528151835290810190820152617ee290511590565b617f775760408051808201909152600b81527f2d2d72656c61796572496400000000000000000000000000000000000000000060208201528282617f258161bd7c565b935060ff1681518110617f3a57617f3a61b34c565b60200260200101819052508460400151828280617f569061bd7c565b935060ff1681518110617f6b57617f6b61b34c565b60200260200101819052505b6060850151156180985760408051808201909152600681527f2d2d73616c74000000000000000000000000000000000000000000000000000060208201528282617fc08161bd7c565b935060ff1681518110617fd557617fd561b34c565b602090810291909101015260608501516040517fb11a19e800000000000000000000000000000000000000000000000000000000815260048101919091526001600160a01b0384169063b11a19e890602401600060405180830381865afa158015618044573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261806c919081019061b1a3565b82826180778161bd7c565b935060ff168151811061808c5761808c61b34c565b60200260200101819052505b60e0850151511561813f5760408051808201909152600a81527f2d2d6761734c696d697400000000000000000000000000000000000000000000602082015282826180e28161bd7c565b935060ff16815181106180f7576180f761b34c565b60200260200101819052506181138560e0015160000151618f9c565b828261811e8161bd7c565b935060ff16815181106181335761813361b34c565b60200260200101819052505b60e085015160200151156181e95760408051808201909152600a81527f2d2d6761735072696365000000000000000000000000000000000000000000006020820152828261818c8161bd7c565b935060ff16815181106181a1576181a161b34c565b60200260200101819052506181bd8560e0015160200151618f9c565b82826181c88161bd7c565b935060ff16815181106181dd576181dd61b34c565b60200260200101819052505b60e085015160400151156182935760408051808201909152600e81527f2d2d6d6178466565506572476173000000000000000000000000000000000000602082015282826182368161bd7c565b935060ff168151811061824b5761824b61b34c565b60200260200101819052506182678560e0015160400151618f9c565b82826182728161bd7c565b935060ff16815181106182875761828761b34c565b60200260200101819052505b60e0850151606001511561833d5760408051808201909152601681527f2d2d6d61785072696f7269747946656550657247617300000000000000000000602082015282826182e08161bd7c565b935060ff16815181106182f5576182f561b34c565b60200260200101819052506183118560e0015160600151618f9c565b828261831c8161bd7c565b935060ff16815181106183315761833161b34c565b60200260200101819052505b60008160ff1667ffffffffffffffff81111561835b5761835b61b0b0565b60405190808252806020026020018201604052801561838e57816020015b60608152602001906001900390816183795790505b50905060005b8260ff168160ff1610156183e757838160ff16815181106183b7576183b761b34c565b6020026020010151828260ff16815181106183d4576183d461b34c565b6020908102919091010152600101618394565b5093505050505b949350505050565b61841d6040518060600160405280600060030b815260200160608152602001606081525090565b60408051808201825260048082527f6261736800000000000000000000000000000000000000000000000000000000602083015291517fd145736c000000000000000000000000000000000000000000000000000000008152737109709ecfa91a80626ff3989d68f67f5b1dd12d92600091849163d145736c916184a39186910161be06565b600060405180830381865afa1580156184c0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526184e8919081019061b1a3565b905060006184f68683619b2b565b90506000846001600160a01b031663f45c1ce7836040518263ffffffff1660e01b8152600401618526919061ae56565b6000604051808303816000875af1158015618545573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261856d919081019061be4d565b805190915060030b158015906185865750602081015151155b80156185955750604081015151155b1561756f57816000815181106185ad576185ad61b34c565b6020026020010151604051602001616bc8919061bf03565b606060006185fa8560408051808201825260008082526020918201528151808301909252825182529182019181019190915290565b6040805180820182526000808252602091820152815180830190925286518252808701908201529091506186319082905b90619c80565b1561878e5760006186ae826186a8846186a26186748a60408051808201825260008082526020918201528151808301909252825182529182019181019190915290565b6040805180820182526000808252602091820152815180830190925282518252918201519181019190915290565b90619ca7565b90619d09565b604080518082018252600181527f0a0000000000000000000000000000000000000000000000000000000000000060208083019182528351808501855260008082529082015283518085019094529151835290820152909150618712908290619c80565b1561877c57604080518082018252600181527f0a0000000000000000000000000000000000000000000000000000000000000060208083019182528351808501855260008082529082015283518085019094529151835290820152618779905b8290619d8e565b90505b61878581619db4565b92505050616af5565b82156187a7578484604051602001616bc892919061c0ef565b5050604080516020810190915260008152616af5565b6000808251602084016000f09392505050565b8160a00151156187df57505050565b60006187ec848484619e1d565b905060006187f9826183f6565b602081015181519192509060030b1580156188955750604080518082018252600781527f5355434345535300000000000000000000000000000000000000000000000000602080830191825283518085018552600080825290820152835180850190945291518352908201526188959060408051808201825260008082526020918201528151808301909252845182528085019082015261862b565b156188a257505050505050565b604082015151156188c2578160400151604051602001616bc8919061c196565b80604051602001616bc8919061c1f4565b606060006189088360408051808201825260008082526020918201528151808301909252825182529182019181019190915290565b604080518082018252600481527f2e736f6c000000000000000000000000000000000000000000000000000000006020808301918252835180850185526000808252908201528351808501909452915183529082015290915061896d905b8290618f3b565b156189dc57604080518082018252600481527f2e736f6c0000000000000000000000000000000000000000000000000000000060208083019182528351808501855260008082529082015283518085019094529151835290820152616af5906189d790839061a3b8565b619db4565b604080518082018252600181527f3a0000000000000000000000000000000000000000000000000000000000000060208083019182528351808501855260008082529082015283518085019094529151835290820152618a3e905b829061a442565b600103618b0b57604080518082018252600181527f3a0000000000000000000000000000000000000000000000000000000000000060208083019182528351808501855260008082529082015283518085019094529151835290820152618aa490618772565b50604080518082018252600181527f3a0000000000000000000000000000000000000000000000000000000000000060208083019182528351808501855260008082529082015283518085019094529151835290820152616af5906189d7905b8390619d8e565b604080518082018252600581527f2e6a736f6e00000000000000000000000000000000000000000000000000000060208083019182528351808501855260008082529082015283518085019094529151835290820152618b6a90618966565b15618ca157604080518082018252600181527f2f00000000000000000000000000000000000000000000000000000000000000602080830191825283518085018552600080825290820181905284518086019095529251845283015290618bd290839061a4dc565b905060008160018351618be5919061c25f565b81518110618bf557618bf561b34c565b60200260200101519050618c986189d7618c6b6040518060400160405280600581526020017f2e6a736f6e00000000000000000000000000000000000000000000000000000081525060408051808201825260008082526020918201528151808301909252825182529182019181019190915290565b6040805180820182526000808252602091820152815180830190925285518252808601908201529061a3b8565b95945050505050565b82604051602001616bc8919061c272565b50919050565b60606000618ced8360408051808201825260008082526020918201528151808301909252825182529182019181019190915290565b604080518082018252600481527f2e736f6c0000000000000000000000000000000000000000000000000000000060208083019182528351808501855260008082529082015283518085019094529151835290820152909150618d4f90618966565b15618d5d57616af581619db4565b604080518082018252600181527f3a0000000000000000000000000000000000000000000000000000000000000060208083019182528351808501855260008082529082015283518085019094529151835290820152618dbc90618a37565b600103618e2657604080518082018252600181527f3a0000000000000000000000000000000000000000000000000000000000000060208083019182528351808501855260008082529082015283518085019094529151835290820152616af5906189d790618b04565b604080518082018252600581527f2e6a736f6e00000000000000000000000000000000000000000000000000000060208083019182528351808501855260008082529082015283518085019094529151835290820152618e8590618966565b15618ca157604080518082018252600181527f2f00000000000000000000000000000000000000000000000000000000000000602080830191825283518085018552600080825290820181905284518086019095529251845283015290618eed90839061a4dc565b9050600181511115618f29578060028251618f08919061c25f565b81518110618f1857618f1861b34c565b602002602001015192505050919050565b5082604051602001616bc8919061c272565b805182516000911115618f50575060006167d2565b81518351602085015160009291618f669161c350565b618f70919061c25f565b905082602001518103618f875760019150506167d2565b82516020840151819020912014905092915050565b60606000618fa98361a589565b600101905060008167ffffffffffffffff811115618fc957618fc961b0b0565b6040519080825280601f01601f191660200182016040528015618ff3576020820181803683370190505b5090508181016020015b600019017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8504945084618ffd57509392505050565b604081810151815180830183526000808252602091820181905283518085018552835181529282018383015283518085018552600a81527f554e4c4943454e53454400000000000000000000000000000000000000000000818401908152855180870187528381528401929092528451808601909552518452908301526060916190c8905b829061a66b565b1561910857505060408051808201909152600481527f4e6f6e65000000000000000000000000000000000000000000000000000000006020820152919050565b604080518082018252600981527f556e6c6963656e7365000000000000000000000000000000000000000000000060208083019182528351808501855260008082529082015283518085019094529151835290820152619167906190c1565b156191a757505060408051808201909152600981527f556e6c6963656e736500000000000000000000000000000000000000000000006020820152919050565b604080518082018252600381527f4d4954000000000000000000000000000000000000000000000000000000000060208083019182528351808501855260008082529082015283518085019094529151835290820152619206906190c1565b1561924657505060408051808201909152600381527f4d495400000000000000000000000000000000000000000000000000000000006020820152919050565b604080518082018252600c81527f47504c2d322e302d6f6e6c790000000000000000000000000000000000000000602080830191825283518085018552600080825290820152835180850190945291518352908201526192a5906190c1565b8061930a5750604080518082018252601081527f47504c2d322e302d6f722d6c61746572000000000000000000000000000000006020808301918252835180850185526000808252908201528351808501909452915183529082015261930a906190c1565b1561934a57505060408051808201909152600981527f474e552047504c763200000000000000000000000000000000000000000000006020820152919050565b604080518082018252600c81527f47504c2d332e302d6f6e6c790000000000000000000000000000000000000000602080830191825283518085018552600080825290820152835180850190945291518352908201526193a9906190c1565b8061940e5750604080518082018252601081527f47504c2d332e302d6f722d6c61746572000000000000000000000000000000006020808301918252835180850185526000808252908201528351808501909452915183529082015261940e906190c1565b1561944e57505060408051808201909152600981527f474e552047504c763300000000000000000000000000000000000000000000006020820152919050565b604080518082018252600d81527f4c47504c2d322e312d6f6e6c7900000000000000000000000000000000000000602080830191825283518085018552600080825290820152835180850190945291518352908201526194ad906190c1565b806195125750604080518082018252601181527f4c47504c2d322e312d6f722d6c6174657200000000000000000000000000000060208083019182528351808501855260008082529082015283518085019094529151835290820152619512906190c1565b1561955257505060408051808201909152600c81527f474e55204c47504c76322e3100000000000000000000000000000000000000006020820152919050565b604080518082018252600d81527f4c47504c2d332e302d6f6e6c7900000000000000000000000000000000000000602080830191825283518085018552600080825290820152835180850190945291518352908201526195b1906190c1565b806196165750604080518082018252601181527f4c47504c2d332e302d6f722d6c6174657200000000000000000000000000000060208083019182528351808501855260008082529082015283518085019094529151835290820152619616906190c1565b1561965657505060408051808201909152600a81527f474e55204c47504c7633000000000000000000000000000000000000000000006020820152919050565b604080518082018252600c81527f4253442d322d436c617573650000000000000000000000000000000000000000602080830191825283518085018552600080825290820152835180850190945291518352908201526196b5906190c1565b156196f557505060408051808201909152600c81527f4253442d322d436c6175736500000000000000000000000000000000000000006020820152919050565b604080518082018252600c81527f4253442d332d436c61757365000000000000000000000000000000000000000060208083019182528351808501855260008082529082015283518085019094529151835290820152619754906190c1565b1561979457505060408051808201909152600c81527f4253442d332d436c6175736500000000000000000000000000000000000000006020820152919050565b604080518082018252600781527f4d504c2d322e3000000000000000000000000000000000000000000000000000602080830191825283518085018552600080825290820152835180850190945291518352908201526197f3906190c1565b1561983357505060408051808201909152600781527f4d504c2d322e30000000000000000000000000000000000000000000000000006020820152919050565b604080518082018252600781527f4f534c2d332e300000000000000000000000000000000000000000000000000060208083019182528351808501855260008082529082015283518085019094529151835290820152619892906190c1565b156198d257505060408051808201909152600781527f4f534c2d332e30000000000000000000000000000000000000000000000000006020820152919050565b604080518082018252600a81527f4170616368652d322e300000000000000000000000000000000000000000000060208083019182528351808501855260008082529082015283518085019094529151835290820152619931906190c1565b1561997157505060408051808201909152600a81527f4170616368652d322e30000000000000000000000000000000000000000000006020820152919050565b604080518082018252600d81527f4147504c2d332e302d6f6e6c7900000000000000000000000000000000000000602080830191825283518085018552600080825290820152835180850190945291518352908201526199d0906190c1565b80619a355750604080518082018252601181527f4147504c2d332e302d6f722d6c6174657200000000000000000000000000000060208083019182528351808501855260008082529082015283518085019094529151835290820152619a35906190c1565b15619a7557505060408051808201909152600a81527f474e55204147504c7633000000000000000000000000000000000000000000006020820152919050565b604080518082018252600881527f4255534c2d312e3100000000000000000000000000000000000000000000000060208083019182528351808501855260008082529082015283518085019094529151835290820152619ad4906190c1565b15619b1457505060408051808201909152600781527f42534c20312e31000000000000000000000000000000000000000000000000006020820152919050565b60408084015184519151616bc8929060200161c363565b60608060005b8451811015619bb65781858281518110619b4d57619b4d61b34c565b6020026020010151604051602001619b6692919061b7f6565b604051602081830303815290604052915060018551619b85919061c25f565b8114619bae5781604051602001619b9c919061c4cc565b60405160208183030381529060405291505b600101619b31565b5060408051600380825260808201909252600091816020015b6060815260200190600190039081619bcf5790505090508381600081518110619bfa57619bfa61b34c565b60200260200101819052506040518060400160405280600281526020017f2d6300000000000000000000000000000000000000000000000000000000000081525081600181518110619c4e57619c4e61b34c565b60200260200101819052508181600281518110619c6d57619c6d61b34c565b6020908102919091010152949350505050565b6020808301518351835192840151600093619c9e929184919061a67f565b14159392505050565b60408051808201909152600080825260208201526000619cd9846000015185602001518560000151866020015161a790565b9050836020015181619ceb919061c25f565b84518590619cfa90839061c25f565b90525060208401525090919050565b6040805180820190915260008082526020820152815183511015619d2e5750816167d2565b6020808301519084015160019114619d555750815160208481015190840151829020919020145b8015619d8657825184518590619d6c90839061c25f565b9052508251602085018051619d8290839061c350565b9052505b509192915050565b6040805180820190915260008082526020820152619dad83838361a8b0565b5092915050565b60606000826000015167ffffffffffffffff811115619dd557619dd561b0b0565b6040519080825280601f01601f191660200182016040528015619dff576020820181803683370190505b5090506000602082019050619dad818560200151866000015161a95b565b60606000619e29616dee565b6040805160ff808252612000820190925291925060009190816020015b6060815260200190600190039081619e4657905050905060006040518060400160405280600381526020017f6e70780000000000000000000000000000000000000000000000000000000000815250828280619ea19061bd7c565b935060ff1681518110619eb657619eb661b34c565b60200260200101819052506040518060400160405280600781526020017f5e312e33322e3300000000000000000000000000000000000000000000000000815250604051602001619f07919061c50d565b604051602081830303815290604052828280619f229061bd7c565b935060ff1681518110619f3757619f3761b34c565b60200260200101819052506040518060400160405280600881526020017f76616c6964617465000000000000000000000000000000000000000000000000815250828280619f849061bd7c565b935060ff1681518110619f9957619f9961b34c565b602002602001018190525082604051602001619fb5919061bc7b565b604051602081830303815290604052828280619fd09061bd7c565b935060ff1681518110619fe557619fe561b34c565b60200260200101819052506040518060400160405280600a81526020017f2d2d636f6e74726163740000000000000000000000000000000000000000000081525082828061a0329061bd7c565b935060ff168151811061a0475761a04761b34c565b602002602001018190525061a05c878461a9d5565b828261a0678161bd7c565b935060ff168151811061a07c5761a07c61b34c565b60209081029190910101528551511561a1285760408051808201909152600b81527f2d2d7265666572656e63650000000000000000000000000000000000000000006020820152828261a0ce8161bd7c565b935060ff168151811061a0e35761a0e361b34c565b602002602001018190525061a0fc86600001518461a9d5565b828261a1078161bd7c565b935060ff168151811061a11c5761a11c61b34c565b60200260200101819052505b85608001511561a1965760408051808201909152601881527f2d2d756e73616665536b697053746f72616765436865636b00000000000000006020820152828261a1718161bd7c565b935060ff168151811061a1865761a18661b34c565b602002602001018190525061a1fc565b841561a1fc5760408051808201909152601281527f2d2d726571756972655265666572656e636500000000000000000000000000006020820152828261a1db8161bd7c565b935060ff168151811061a1f05761a1f061b34c565b60200260200101819052505b6040860151511561a2985760408051808201909152600d81527f2d2d756e73616665416c6c6f77000000000000000000000000000000000000006020820152828261a2468161bd7c565b935060ff168151811061a25b5761a25b61b34c565b6020026020010181905250856040015182828061a2779061bd7c565b935060ff168151811061a28c5761a28c61b34c565b60200260200101819052505b85606001511561a3025760408051808201909152601481527f2d2d756e73616665416c6c6f7752656e616d65730000000000000000000000006020820152828261a2e18161bd7c565b935060ff168151811061a2f65761a2f661b34c565b60200260200101819052505b60008160ff1667ffffffffffffffff81111561a3205761a32061b0b0565b60405190808252806020026020018201604052801561a35357816020015b606081526020019060019003908161a33e5790505b50905060005b8260ff168160ff16101561a3ac57838160ff168151811061a37c5761a37c61b34c565b6020026020010151828260ff168151811061a3995761a39961b34c565b602090810291909101015260010161a359565b50979650505050505050565b604080518082019091526000808252602082015281518351101561a3dd5750816167d2565b8151835160208501516000929161a3f39161c350565b61a3fd919061c25f565b6020840151909150600190821461a41e575082516020840151819020908220145b801561a4395783518551869061a43590839061c25f565b9052505b50929392505050565b600080826000015161a466856000015186602001518660000151876020015161a790565b61a470919061c350565b90505b8351602085015161a484919061c350565b8111619dad578161a4948161c552565b925050826000015161a4cb85602001518361a4af919061c25f565b865161a4bb919061c25f565b838660000151876020015161a790565b61a4d5919061c350565b905061a473565b6060600061a4ea848461a442565b61a4f590600161c350565b67ffffffffffffffff81111561a50d5761a50d61b0b0565b60405190808252806020026020018201604052801561a54057816020015b606081526020019060019003908161a52b5790505b50905060005b815181101561a5815761a55c6189d78686619d8e565b82828151811061a56e5761a56e61b34c565b602090810291909101015260010161a546565b509392505050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000831061a5d2577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef8100000000831061a5fe576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061a61c57662386f26fc10000830492506010015b6305f5e100831061a634576305f5e100830492506008015b612710831061a64857612710830492506004015b6064831061a65a576064830492506002015b600a83106167d25760010192915050565b600061a677838361aa15565b159392505050565b60008085841161a786576020841161a732576000841561a6ca57600161a6a686602061c25f565b61a6b190600861c56c565b61a6bc90600261c66a565b61a6c6919061c25f565b1990505b835181168561a6d9898961c350565b61a6e3919061c25f565b805190935082165b81811461a71d5787841161a70557879450505050506183ee565b8361a70f8161c676565b94505082845116905061a6eb565b61a727878561c350565b9450505050506183ee565b83832061a73f858861c25f565b61a749908761c350565b91505b85821061a7845784822080820361a7715761a767868461c350565b93505050506183ee565b61a77c60018461c25f565b92505061a74c565b505b5092949350505050565b6000838186851161a89b576020851161a84a576000851561a7dc57600161a7b887602061c25f565b61a7c390600861c56c565b61a7ce90600261c66a565b61a7d8919061c25f565b1990505b8451811660008761a7ed8b8b61c350565b61a7f7919061c25f565b855190915083165b82811461a83c5781861061a8245761a8178b8b61c350565b96505050505050506183ee565b8561a82e8161c552565b96505083865116905061a7ff565b8596505050505050506183ee565b508383206000905b61a85c868961c25f565b821161a8995785832080820361a87857839450505050506183ee565b61a88360018561c350565b935050818061a8919061c552565b92505061a852565b505b61a8a5878761c350565b979650505050505050565b6040805180820190915260008082526020820152600061a8e2856000015186602001518660000151876020015161a790565b60208087018051918601919091525190915061a8fe908261c25f565b83528451602086015161a911919061c350565b810361a920576000855261a952565b8351835161a92e919061c350565b8551869061a93d90839061c25f565b905250835161a94c908261c350565b60208601525b50909392505050565b6020811061a993578151835261a97260208461c350565b925061a97f60208361c350565b915061a98c60208261c25f565b905061a95b565b600019811561a9c257600161a9a983602061c25f565b61a9b59061010061c66a565b61a9bf919061c25f565b90505b9151835183169219169190911790915250565b6060600061a9e38484616ec1565b805160208083015160405193945061a9fd9390910161c68d565b60405160208183030381529060405291505092915050565b815181516000919081111561aa28575081515b6020808501519084015160005b8381101561aae1578251825180821461aab157600019602087101561aa905760018461aa6289602061c25f565b61aa6c919061c350565b61aa7790600861c56c565b61aa8290600261c66a565b61aa8c919061c25f565b1990505b818116838216818103911461aaae5797506167d29650505050505050565b50505b61aabc60208661c350565b945061aac960208561c350565b9350505060208161aada919061c350565b905061aa35565b508451865161756f919061c6e5565b6102988061c70683390190565b6040518060e0016040528060608152602001606081526020016060815260200160001515815260200160001515815260200160001515815260200161ab4061ab45565b905290565b6040518061010001604052806000151581526020016000151581526020016060815260200160008019168152602001606081526020016060815260200160001515815260200161ab406040518060800160405280600081526020016000815260200160008152602001600081525090565b602080825282518282018190526000918401906040840190835b8181101561abf75783516001600160a01b031683526020938401939092019160010161abd0565b509095945050505050565b60005b8381101561ac1d57818101518382015260200161ac05565b50506000910152565b6000815180845261ac3e81602086016020860161ac02565b601f01601f19169290920160200192915050565b6000602082016020835280845180835260408501915060408160051b86010192506020860160005b8281101561ad4e577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0878603018452815180516001600160a01b03168652602090810151604082880181905281519088018190529101906060600582901b88018101919088019060005b8181101561ad34577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa08a850301835261ad1e84865161ac26565b602095860195909450929092019160010161ace4565b50919750505060209485019492909201915060010161ac7a565b50929695505050505050565b600081518084526020840193506020830160005b8281101561adae5781517fffffffff000000000000000000000000000000000000000000000000000000001686526020958601959091019060010161ad6e565b5093949350505050565b6000602082016020835280845180835260408501915060408160051b86010192506020860160005b8281101561ad4e577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0878603018452815180516040875261ae24604088018261ac26565b905060208201519150868103602088015261ae3f818361ad5a565b96505050602093840193919091019060010161ade0565b6000602082016020835280845180835260408501915060408160051b86010192506020860160005b8281101561ad4e577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc087860301845261aeb885835161ac26565b9450602093840193919091019060010161ae7e565b6000602082016020835280845180835260408501915060408160051b86010192506020860160005b8281101561ad4e577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc087860301845281516001600160a01b038151168652602081015190506040602087015261af4e604087018261ad5a565b955050602093840193919091019060010161aef5565b600181811c9082168061af7857607f821691505b602082108103618cb2577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000815461afbe8161af64565b80855260018216801561afd8576001811461b0125761b049565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0083166020870152602082151560051b870101935061b049565b84600052602060002060005b8381101561b0405781546020828a01015260018201915060208101905061b01e565b87016020019450505b50505092915050565b8481526001600160a01b038416602082015260806040820152600061b07a608083018561afb1565b9050821515606083015295945050505050565b6001600160a01b0383511681526040602082015260006183ee604083018461ac26565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040516060810167ffffffffffffffff8111828210171561b1025761b10261b0b0565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561b1315761b13161b0b0565b604052919050565b600082601f83011261b14a57600080fd5b81516020830160008067ffffffffffffffff84111561b16b5761b16b61b0b0565b50601f8301601f191660200161b1808161b108565b91505082815285838301111561b19557600080fd5b618c9883602083018461ac02565b60006020828403121561b1b557600080fd5b815167ffffffffffffffff81111561b1cc57600080fd5b6167ce8482850161b139565b83815260606020820152600061b1f1606083018561afb1565b828103604084015261756f818561afb1565b84815260806020820152600061b21c608083018661afb1565b828103604084015261b22e818661ac26565b9050828103606084015261a8a5818561ac26565b60608152600061b255606083018661afb1565b828103602084015261b267818661ac26565b9050828103604084015261756f818561ac26565b83815260606020820152600061b294606083018561afb1565b828103604084015261756f818561ac26565b60006020828403121561b2b857600080fd5b815167ffffffffffffffff81111561b2cf57600080fd5b8201601f8101841361b2e057600080fd5b805167ffffffffffffffff81111561b2fa5761b2fa61b0b0565b8060051b61b30a6020820161b108565b9182526020818401810192908101908784111561b32657600080fd5b6020850194505b8385101561a8a55784518083526020958601959093509091019061b32d565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b84815260806020820152600061b21c608083018661ac26565b602081526000616af5602083018461ac26565b6001600160a01b038716815260c06020820152600061b3c960c083018861ac26565b866040840152828103606084015261b3e1818761ac26565b9050828103608084015261b3f5818661ac26565b91505060ff831660a0830152979650505050505050565b8051801515811461b41c57600080fd5b919050565b60008060008060008060c0878903121561b43a57600080fd5b61b4438761b40c565b9550602087015167ffffffffffffffff81111561b45f57600080fd5b61b46b89828a0161b139565b604089015160608a01519197509550905067ffffffffffffffff81111561b49157600080fd5b61b49d89828a0161b139565b935050608087015167ffffffffffffffff81111561b4ba57600080fd5b61b4c689828a0161b139565b92505060a087015160ff8116811461b4dd57600080fd5b809150509295509295509295565b83815260606020820152600061b504606083018561ac26565b90508215156040830152949350505050565b6000825161b52881846020870161ac02565b9190910192915050565b60ff84168152826020820152606060408201526000618c98606083018461ac26565b60006020828403121561b56657600080fd5b5051919050565b60006020828403121561b57f57600080fd5b616af58261b40c565b6001600160a01b038116811461b59d57600080fd5b50565b60006020828403121561b5b257600080fd5b8151616af58161b588565b600080835461b5cb8161af64565b60018216801561b5e2576001811461b6155761b645565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff008316865281151582028601935061b645565b86600052602060002060005b8381101561b63d5781548882015260019091019060200161b621565b505081860193505b509195945050505050565b602081526000616af5602083018461afb1565b8281526040602082015260006183ee604083018461afb1565b6000806040838503121561b68f57600080fd5b61b6988361b40c565b9150602083015167ffffffffffffffff81111561b6b457600080fd5b61b6c08582860161b139565b9150509250929050565b83815260606020820152600061b294606083018561ac26565b60408152600061b6f6604083018561ac26565b8281036020840152616af1818561ac26565b8281526040602082015260006183ee604083018461ac26565b83815260606020820152600061b1f1606083018561ac26565b83815260606020820152600061b504606083018561afb1565b6001600160a01b03831681526040602082015260006183ee604083018461ac26565b7f4661696c656420746f206465706c6f7920636f6e74726163742000000000000081526000835161b7ad81601a85016020880161ac02565b7f3a20000000000000000000000000000000000000000000000000000000000000601a91840191820152835161b7ea81601c84016020880161ac02565b01601c01949350505050565b6000835161b80881846020880161ac02565b83519083019061b81c81836020880161ac02565b01949350505050565b7f4661696c656420746f206465706c6f7920636f6e74726163742000000000000081526000835161b85d81601a85016020880161ac02565b7f207573696e6720636f6e7374727563746f722064617461202200000000000000601a91840191820152835161b89a81603384016020880161ac02565b7f220000000000000000000000000000000000000000000000000000000000000060339290910191820152603401949350505050565b60408152600b60408201527f464f554e4452595f4f55540000000000000000000000000000000000000000006060820152608060208201526000616af5608083018461ac26565b6000855161b929818460208a0161ac02565b7f2f00000000000000000000000000000000000000000000000000000000000000908301908152855161b963816001840160208a0161ac02565b7f2f0000000000000000000000000000000000000000000000000000000000000060019290910191820152845161b9a181600284016020890161ac02565b6001818301019150507f2f000000000000000000000000000000000000000000000000000000000000006001820152835161b9e381600284016020880161ac02565b7f2e6a736f6e000000000000000000000000000000000000000000000000000000600292909101918201526007019695505050505050565b60408152600061ba2e604083018461ac26565b8281036020840152600481527f2e6173740000000000000000000000000000000000000000000000000000000060208201526040810191505092915050565b7f436f756c64206e6f742066696e642041535420696e206172746966616374200081526000825161baa581601f85016020870161ac02565b7f2e205365742060617374203d20747275656020696e20666f756e6472792e746f601f9390910192830152507f6d6c000000000000000000000000000000000000000000000000000000000000603f820152604101919050565b60408152600061bb12604083018461ac26565b8281036020840152601181527f2e6173742e6162736f6c7574655061746800000000000000000000000000000060208201526040810191505092915050565b60408152600061bb64604083018461ac26565b8281036020840152600c81527f2e6173742e6c6963656e7365000000000000000000000000000000000000000060208201526040810191505092915050565b7f2e6d657461646174612e736f75726365732e5b2700000000000000000000000081526000825161bbdb81601485016020870161ac02565b7f275d2e6b656363616b32353600000000000000000000000000000000000000006014939091019283015250602001919050565b7f220000000000000000000000000000000000000000000000000000000000000081526000825161bc4781600185016020870161ac02565b7f22000000000000000000000000000000000000000000000000000000000000006001939091019283015250600201919050565b6000825161bc8d81846020870161ac02565b7f2f6275696c642d696e666f000000000000000000000000000000000000000000920191825250600b01919050565b7f436f756c64206e6f742066696e64206275696c642d696e666f2066696c65207781527f697468206d61746368696e6720736f7572636520636f6465206861736820666f60208201527f7220636f6e74726163742000000000000000000000000000000000000000000060408201526000825161bd4081604b85016020870161ac02565b91909101604b0192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600060ff821660ff810361bd925761bd9261bd4d565b60010192915050565b7f406f70656e7a657070656c696e2f646566656e6465722d6465706c6f792d636c81527f69656e742d636c6940000000000000000000000000000000000000000000000060208201526000825161bdf981602985016020870161ac02565b9190910160290192915050565b60408152601660408201527f4f50454e5a455050454c494e5f424153485f50415448000000000000000000006060820152608060208201526000616af5608083018461ac26565b60006020828403121561be5f57600080fd5b815167ffffffffffffffff81111561be7657600080fd5b82016060818503121561be8857600080fd5b61be9061b0df565b81518060030b811461bea157600080fd5b8152602082015167ffffffffffffffff81111561bebd57600080fd5b61bec98682850161b139565b602083015250604082015167ffffffffffffffff81111561bee957600080fd5b61bef58682850161b139565b604083015250949350505050565b7f4661696c656420746f2072756e206261736820636f6d6d616e6420776974682081527f220000000000000000000000000000000000000000000000000000000000000060208201526000825161bf6181602185016020870161ac02565b7f222e20496620796f7520617265207573696e672057696e646f77732c2073657460219390910192830152507f20746865204f50454e5a455050454c494e5f424153485f5041544820656e766960418201527f726f6e6d656e74207661726961626c6520746f207468652066756c6c7920717560618201527f616c69666965642070617468206f66207468652062617368206578656375746160818201527f626c652e20466f72206578616d706c652c20696620796f75206172652075736960a18201527f6e672047697420666f722057696e646f77732c206164642074686520666f6c6c60c18201527f6f77696e67206c696e6520696e20746865202e656e762066696c65206f66207960e18201527f6f75722070726f6a65637420287573696e6720666f727761726420736c6173686101018201527f6573293a0a4f50454e5a455050454c494e5f424153485f504154483d22433a2f6101218201527f50726f6772616d2046696c65732f4769742f62696e2f6261736822000000000061014182015261015c01919050565b7f4661696c656420746f2066696e64206c696e652077697468207072656669782081527f270000000000000000000000000000000000000000000000000000000000000060208201526000835161c14d81602185016020880161ac02565b7f2720696e206f75747075743a2000000000000000000000000000000000000000602191840191820152835161c18a81602e84016020880161ac02565b01602e01949350505050565b7f4661696c656420746f2072756e2075706772616465207361666574792076616c81527f69646174696f6e3a20000000000000000000000000000000000000000000000060208201526000825161bdf981602985016020870161ac02565b7f55706772616465207361666574792076616c69646174696f6e206661696c656481527f3a0a00000000000000000000000000000000000000000000000000000000000060208201526000825161c25281602285016020870161ac02565b9190910160220192915050565b818103818111156167d2576167d261bd4d565b7f436f6e7472616374206e616d652000000000000000000000000000000000000081526000825161c2aa81600e85016020870161ac02565b7f206d75737420626520696e2074686520666f726d6174204d79436f6e74726163600e9390910192830152507f742e736f6c3a4d79436f6e7472616374206f72204d79436f6e74726163742e73602e8201527f6f6c206f72206f75742f4d79436f6e74726163742e736f6c2f4d79436f6e7472604e8201527f6163742e6a736f6e000000000000000000000000000000000000000000000000606e820152607601919050565b808201808211156167d2576167d261bd4d565b7f53504458206c6963656e7365206964656e74696669657220000000000000000081526000835161c39b81601885016020880161ac02565b7f20696e2000000000000000000000000000000000000000000000000000000000601891840191820152835161c3d881601c84016020880161ac02565b7f20646f6573206e6f74206c6f6f6b206c696b65206120737570706f7274656420601c92909101918201527f6c6963656e736520666f7220626c6f636b206578706c6f726572207665726966603c8201527f69636174696f6e2e205573652074686520606c6963656e73655479706560206f605c8201527f7074696f6e20746f20737065636966792061206c6963656e736520747970652c607c8201527f206f7220736574207468652060736b69704c6963656e73655479706560206f70609c8201527f74696f6e20746f2060747275656020746f20736b69702e00000000000000000060bc82015260d301949350505050565b6000825161c4de81846020870161ac02565b7f2000000000000000000000000000000000000000000000000000000000000000920191825250600101919050565b7f406f70656e7a657070656c696e2f75706772616465732d636f7265400000000081526000825161c54581601c85016020870161ac02565b91909101601c0192915050565b6000600019820361c5655761c56561bd4d565b5060010190565b80820281158282048414176167d2576167d261bd4d565b6001815b600184111561c5be5780850481111561c5a25761c5a261bd4d565b600184161561c5b057908102905b60019390931c92800261c587565b935093915050565b60008261c5d5575060016167d2565b8161c5e2575060006167d2565b816001811461c5f8576002811461c6025761c61e565b60019150506167d2565b60ff84111561c6135761c61361bd4d565b50506001821b6167d2565b5060208310610133831016604e8410600b841016171561c641575081810a6167d2565b61c64e600019848461c583565b806000190482111561c6625761c66261bd4d565b029392505050565b6000616af5838361c5c6565b60008161c6855761c68561bd4d565b506000190190565b6000835161c69f81846020880161ac02565b7f3a00000000000000000000000000000000000000000000000000000000000000908301908152835161c6d981600184016020880161ac02565b01600101949350505050565b8181036000831280158383131683831282161715619dad57619dad61bd4d56fe6080604052348015600f57600080fd5b506102798061001f6000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063676cc05414610030575b600080fd5b61004361003e3660046100af565b610059565b604051610050919061013c565b60405180910390f35b60607f13e79c97a555ca94839a23ea9ea3c2702c15dd006ffae3e0cf3a166c0fb2a3bd3384848760405161009094939291906101a8565b60405180910390a1506040805160208101909152600081529392505050565b600080600083850360408112156100c557600080fd5b60208112156100d357600080fd5b50839250602084013567ffffffffffffffff8111156100f157600080fd5b8401601f8101861361010257600080fd5b803567ffffffffffffffff81111561011957600080fd5b86602082840101111561012b57600080fd5b939660209190910195509293505050565b602081526000825180602084015260005b8181101561016a576020818601810151604086840101520161014d565b5060006040828501015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011684010191505092915050565b73ffffffffffffffffffffffffffffffffffffffff851681526060602082015282606082015282846080830137600060808483010152600060807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8601168301019050823573ffffffffffffffffffffffffffffffffffffffff811680821461023257600080fd5b80604085015250509594505050505056fea2646970667358221220d62550411a1e1cf6dfa4e12619c02deeefbd79197989795145c7297a06e460c764736f6c634300081a0033a26469706673582212203e24284bbba657609e2cbf2def50f5eea6b8c27b709d19c08ddcb707a2acb2be64736f6c634300081a0033",
}

// RegistryTestABI is the input ABI used to generate the binding from.
// Deprecated: Use RegistryTestMetaData.ABI instead.
var RegistryTestABI = RegistryTestMetaData.ABI

// RegistryTestBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use RegistryTestMetaData.Bin instead.
var RegistryTestBin = RegistryTestMetaData.Bin

// DeployRegistryTest deploys a new Ethereum contract, binding an instance of RegistryTest to it.
func DeployRegistryTest(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *RegistryTest, error) {
	parsed, err := RegistryTestMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(RegistryTestBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &RegistryTest{RegistryTestCaller: RegistryTestCaller{contract: contract}, RegistryTestTransactor: RegistryTestTransactor{contract: contract}, RegistryTestFilterer: RegistryTestFilterer{contract: contract}}, nil
}

// RegistryTest is an auto generated Go binding around an Ethereum contract.
type RegistryTest struct {
	RegistryTestCaller     // Read-only binding to the contract
	RegistryTestTransactor // Write-only binding to the contract
	RegistryTestFilterer   // Log filterer for contract events
}

// RegistryTestCaller is an auto generated read-only Go binding around an Ethereum contract.
type RegistryTestCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RegistryTestTransactor is an auto generated write-only Go binding around an Ethereum contract.
type RegistryTestTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RegistryTestFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type RegistryTestFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RegistryTestSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type RegistryTestSession struct {
	Contract     *RegistryTest     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// RegistryTestCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type RegistryTestCallerSession struct {
	Contract *RegistryTestCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// RegistryTestTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type RegistryTestTransactorSession struct {
	Contract     *RegistryTestTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// RegistryTestRaw is an auto generated low-level Go binding around an Ethereum contract.
type RegistryTestRaw struct {
	Contract *RegistryTest // Generic contract binding to access the raw methods on
}

// RegistryTestCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type RegistryTestCallerRaw struct {
	Contract *RegistryTestCaller // Generic read-only contract binding to access the raw methods on
}

// RegistryTestTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type RegistryTestTransactorRaw struct {
	Contract *RegistryTestTransactor // Generic write-only contract binding to access the raw methods on
}

// NewRegistryTest creates a new instance of RegistryTest, bound to a specific deployed contract.
func NewRegistryTest(address common.Address, backend bind.ContractBackend) (*RegistryTest, error) {
	contract, err := bindRegistryTest(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &RegistryTest{RegistryTestCaller: RegistryTestCaller{contract: contract}, RegistryTestTransactor: RegistryTestTransactor{contract: contract}, RegistryTestFilterer: RegistryTestFilterer{contract: contract}}, nil
}

// NewRegistryTestCaller creates a new read-only instance of RegistryTest, bound to a specific deployed contract.
func NewRegistryTestCaller(address common.Address, caller bind.ContractCaller) (*RegistryTestCaller, error) {
	contract, err := bindRegistryTest(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &RegistryTestCaller{contract: contract}, nil
}

// NewRegistryTestTransactor creates a new write-only instance of RegistryTest, bound to a specific deployed contract.
func NewRegistryTestTransactor(address common.Address, transactor bind.ContractTransactor) (*RegistryTestTransactor, error) {
	contract, err := bindRegistryTest(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &RegistryTestTransactor{contract: contract}, nil
}

// NewRegistryTestFilterer creates a new log filterer instance of RegistryTest, bound to a specific deployed contract.
func NewRegistryTestFilterer(address common.Address, filterer bind.ContractFilterer) (*RegistryTestFilterer, error) {
	contract, err := bindRegistryTest(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &RegistryTestFilterer{contract: contract}, nil
}

// bindRegistryTest binds a generic wrapper to an already deployed contract.
func bindRegistryTest(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := RegistryTestMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RegistryTest *RegistryTestRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RegistryTest.Contract.RegistryTestCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RegistryTest *RegistryTestRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RegistryTest.Contract.RegistryTestTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RegistryTest *RegistryTestRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RegistryTest.Contract.RegistryTestTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RegistryTest *RegistryTestCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RegistryTest.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RegistryTest *RegistryTestTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RegistryTest.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RegistryTest *RegistryTestTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RegistryTest.Contract.contract.Transact(opts, method, params...)
}

// ISTEST is a free data retrieval call binding the contract method 0xfa7626d4.
//
// Solidity: function IS_TEST() view returns(bool)
func (_RegistryTest *RegistryTestCaller) ISTEST(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _RegistryTest.contract.Call(opts, &out, "IS_TEST")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ISTEST is a free data retrieval call binding the contract method 0xfa7626d4.
//
// Solidity: function IS_TEST() view returns(bool)
func (_RegistryTest *RegistryTestSession) ISTEST() (bool, error) {
	return _RegistryTest.Contract.ISTEST(&_RegistryTest.CallOpts)
}

// ISTEST is a free data retrieval call binding the contract method 0xfa7626d4.
//
// Solidity: function IS_TEST() view returns(bool)
func (_RegistryTest *RegistryTestCallerSession) ISTEST() (bool, error) {
	return _RegistryTest.Contract.ISTEST(&_RegistryTest.CallOpts)
}

// ExcludeArtifacts is a free data retrieval call binding the contract method 0xb5508aa9.
//
// Solidity: function excludeArtifacts() view returns(string[] excludedArtifacts_)
func (_RegistryTest *RegistryTestCaller) ExcludeArtifacts(opts *bind.CallOpts) ([]string, error) {
	var out []interface{}
	err := _RegistryTest.contract.Call(opts, &out, "excludeArtifacts")

	if err != nil {
		return *new([]string), err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)

	return out0, err

}

// ExcludeArtifacts is a free data retrieval call binding the contract method 0xb5508aa9.
//
// Solidity: function excludeArtifacts() view returns(string[] excludedArtifacts_)
func (_RegistryTest *RegistryTestSession) ExcludeArtifacts() ([]string, error) {
	return _RegistryTest.Contract.ExcludeArtifacts(&_RegistryTest.CallOpts)
}

// ExcludeArtifacts is a free data retrieval call binding the contract method 0xb5508aa9.
//
// Solidity: function excludeArtifacts() view returns(string[] excludedArtifacts_)
func (_RegistryTest *RegistryTestCallerSession) ExcludeArtifacts() ([]string, error) {
	return _RegistryTest.Contract.ExcludeArtifacts(&_RegistryTest.CallOpts)
}

// ExcludeContracts is a free data retrieval call binding the contract method 0xe20c9f71.
//
// Solidity: function excludeContracts() view returns(address[] excludedContracts_)
func (_RegistryTest *RegistryTestCaller) ExcludeContracts(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _RegistryTest.contract.Call(opts, &out, "excludeContracts")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// ExcludeContracts is a free data retrieval call binding the contract method 0xe20c9f71.
//
// Solidity: function excludeContracts() view returns(address[] excludedContracts_)
func (_RegistryTest *RegistryTestSession) ExcludeContracts() ([]common.Address, error) {
	return _RegistryTest.Contract.ExcludeContracts(&_RegistryTest.CallOpts)
}

// ExcludeContracts is a free data retrieval call binding the contract method 0xe20c9f71.
//
// Solidity: function excludeContracts() view returns(address[] excludedContracts_)
func (_RegistryTest *RegistryTestCallerSession) ExcludeContracts() ([]common.Address, error) {
	return _RegistryTest.Contract.ExcludeContracts(&_RegistryTest.CallOpts)
}

// ExcludeSelectors is a free data retrieval call binding the contract method 0xb0464fdc.
//
// Solidity: function excludeSelectors() view returns((address,bytes4[])[] excludedSelectors_)
func (_RegistryTest *RegistryTestCaller) ExcludeSelectors(opts *bind.CallOpts) ([]StdInvariantFuzzSelector, error) {
	var out []interface{}
	err := _RegistryTest.contract.Call(opts, &out, "excludeSelectors")

	if err != nil {
		return *new([]StdInvariantFuzzSelector), err
	}

	out0 := *abi.ConvertType(out[0], new([]StdInvariantFuzzSelector)).(*[]StdInvariantFuzzSelector)

	return out0, err

}

// ExcludeSelectors is a free data retrieval call binding the contract method 0xb0464fdc.
//
// Solidity: function excludeSelectors() view returns((address,bytes4[])[] excludedSelectors_)
func (_RegistryTest *RegistryTestSession) ExcludeSelectors() ([]StdInvariantFuzzSelector, error) {
	return _RegistryTest.Contract.ExcludeSelectors(&_RegistryTest.CallOpts)
}

// ExcludeSelectors is a free data retrieval call binding the contract method 0xb0464fdc.
//
// Solidity: function excludeSelectors() view returns((address,bytes4[])[] excludedSelectors_)
func (_RegistryTest *RegistryTestCallerSession) ExcludeSelectors() ([]StdInvariantFuzzSelector, error) {
	return _RegistryTest.Contract.ExcludeSelectors(&_RegistryTest.CallOpts)
}

// ExcludeSenders is a free data retrieval call binding the contract method 0x1ed7831c.
//
// Solidity: function excludeSenders() view returns(address[] excludedSenders_)
func (_RegistryTest *RegistryTestCaller) ExcludeSenders(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _RegistryTest.contract.Call(opts, &out, "excludeSenders")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// ExcludeSenders is a free data retrieval call binding the contract method 0x1ed7831c.
//
// Solidity: function excludeSenders() view returns(address[] excludedSenders_)
func (_RegistryTest *RegistryTestSession) ExcludeSenders() ([]common.Address, error) {
	return _RegistryTest.Contract.ExcludeSenders(&_RegistryTest.CallOpts)
}

// ExcludeSenders is a free data retrieval call binding the contract method 0x1ed7831c.
//
// Solidity: function excludeSenders() view returns(address[] excludedSenders_)
func (_RegistryTest *RegistryTestCallerSession) ExcludeSenders() ([]common.Address, error) {
	return _RegistryTest.Contract.ExcludeSenders(&_RegistryTest.CallOpts)
}

// Failed is a free data retrieval call binding the contract method 0xba414fa6.
//
// Solidity: function failed() view returns(bool)
func (_RegistryTest *RegistryTestCaller) Failed(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _RegistryTest.contract.Call(opts, &out, "failed")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Failed is a free data retrieval call binding the contract method 0xba414fa6.
//
// Solidity: function failed() view returns(bool)
func (_RegistryTest *RegistryTestSession) Failed() (bool, error) {
	return _RegistryTest.Contract.Failed(&_RegistryTest.CallOpts)
}

// Failed is a free data retrieval call binding the contract method 0xba414fa6.
//
// Solidity: function failed() view returns(bool)
func (_RegistryTest *RegistryTestCallerSession) Failed() (bool, error) {
	return _RegistryTest.Contract.Failed(&_RegistryTest.CallOpts)
}

// TargetArtifactSelectors is a free data retrieval call binding the contract method 0x66d9a9a0.
//
// Solidity: function targetArtifactSelectors() view returns((string,bytes4[])[] targetedArtifactSelectors_)
func (_RegistryTest *RegistryTestCaller) TargetArtifactSelectors(opts *bind.CallOpts) ([]StdInvariantFuzzArtifactSelector, error) {
	var out []interface{}
	err := _RegistryTest.contract.Call(opts, &out, "targetArtifactSelectors")

	if err != nil {
		return *new([]StdInvariantFuzzArtifactSelector), err
	}

	out0 := *abi.ConvertType(out[0], new([]StdInvariantFuzzArtifactSelector)).(*[]StdInvariantFuzzArtifactSelector)

	return out0, err

}

// TargetArtifactSelectors is a free data retrieval call binding the contract method 0x66d9a9a0.
//
// Solidity: function targetArtifactSelectors() view returns((string,bytes4[])[] targetedArtifactSelectors_)
func (_RegistryTest *RegistryTestSession) TargetArtifactSelectors() ([]StdInvariantFuzzArtifactSelector, error) {
	return _RegistryTest.Contract.TargetArtifactSelectors(&_RegistryTest.CallOpts)
}

// TargetArtifactSelectors is a free data retrieval call binding the contract method 0x66d9a9a0.
//
// Solidity: function targetArtifactSelectors() view returns((string,bytes4[])[] targetedArtifactSelectors_)
func (_RegistryTest *RegistryTestCallerSession) TargetArtifactSelectors() ([]StdInvariantFuzzArtifactSelector, error) {
	return _RegistryTest.Contract.TargetArtifactSelectors(&_RegistryTest.CallOpts)
}

// TargetArtifacts is a free data retrieval call binding the contract method 0x85226c81.
//
// Solidity: function targetArtifacts() view returns(string[] targetedArtifacts_)
func (_RegistryTest *RegistryTestCaller) TargetArtifacts(opts *bind.CallOpts) ([]string, error) {
	var out []interface{}
	err := _RegistryTest.contract.Call(opts, &out, "targetArtifacts")

	if err != nil {
		return *new([]string), err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)

	return out0, err

}

// TargetArtifacts is a free data retrieval call binding the contract method 0x85226c81.
//
// Solidity: function targetArtifacts() view returns(string[] targetedArtifacts_)
func (_RegistryTest *RegistryTestSession) TargetArtifacts() ([]string, error) {
	return _RegistryTest.Contract.TargetArtifacts(&_RegistryTest.CallOpts)
}

// TargetArtifacts is a free data retrieval call binding the contract method 0x85226c81.
//
// Solidity: function targetArtifacts() view returns(string[] targetedArtifacts_)
func (_RegistryTest *RegistryTestCallerSession) TargetArtifacts() ([]string, error) {
	return _RegistryTest.Contract.TargetArtifacts(&_RegistryTest.CallOpts)
}

// TargetContracts is a free data retrieval call binding the contract method 0x3f7286f4.
//
// Solidity: function targetContracts() view returns(address[] targetedContracts_)
func (_RegistryTest *RegistryTestCaller) TargetContracts(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _RegistryTest.contract.Call(opts, &out, "targetContracts")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// TargetContracts is a free data retrieval call binding the contract method 0x3f7286f4.
//
// Solidity: function targetContracts() view returns(address[] targetedContracts_)
func (_RegistryTest *RegistryTestSession) TargetContracts() ([]common.Address, error) {
	return _RegistryTest.Contract.TargetContracts(&_RegistryTest.CallOpts)
}

// TargetContracts is a free data retrieval call binding the contract method 0x3f7286f4.
//
// Solidity: function targetContracts() view returns(address[] targetedContracts_)
func (_RegistryTest *RegistryTestCallerSession) TargetContracts() ([]common.Address, error) {
	return _RegistryTest.Contract.TargetContracts(&_RegistryTest.CallOpts)
}

// TargetInterfaces is a free data retrieval call binding the contract method 0x2ade3880.
//
// Solidity: function targetInterfaces() view returns((address,string[])[] targetedInterfaces_)
func (_RegistryTest *RegistryTestCaller) TargetInterfaces(opts *bind.CallOpts) ([]StdInvariantFuzzInterface, error) {
	var out []interface{}
	err := _RegistryTest.contract.Call(opts, &out, "targetInterfaces")

	if err != nil {
		return *new([]StdInvariantFuzzInterface), err
	}

	out0 := *abi.ConvertType(out[0], new([]StdInvariantFuzzInterface)).(*[]StdInvariantFuzzInterface)

	return out0, err

}

// TargetInterfaces is a free data retrieval call binding the contract method 0x2ade3880.
//
// Solidity: function targetInterfaces() view returns((address,string[])[] targetedInterfaces_)
func (_RegistryTest *RegistryTestSession) TargetInterfaces() ([]StdInvariantFuzzInterface, error) {
	return _RegistryTest.Contract.TargetInterfaces(&_RegistryTest.CallOpts)
}

// TargetInterfaces is a free data retrieval call binding the contract method 0x2ade3880.
//
// Solidity: function targetInterfaces() view returns((address,string[])[] targetedInterfaces_)
func (_RegistryTest *RegistryTestCallerSession) TargetInterfaces() ([]StdInvariantFuzzInterface, error) {
	return _RegistryTest.Contract.TargetInterfaces(&_RegistryTest.CallOpts)
}

// TargetSelectors is a free data retrieval call binding the contract method 0x916a17c6.
//
// Solidity: function targetSelectors() view returns((address,bytes4[])[] targetedSelectors_)
func (_RegistryTest *RegistryTestCaller) TargetSelectors(opts *bind.CallOpts) ([]StdInvariantFuzzSelector, error) {
	var out []interface{}
	err := _RegistryTest.contract.Call(opts, &out, "targetSelectors")

	if err != nil {
		return *new([]StdInvariantFuzzSelector), err
	}

	out0 := *abi.ConvertType(out[0], new([]StdInvariantFuzzSelector)).(*[]StdInvariantFuzzSelector)

	return out0, err

}

// TargetSelectors is a free data retrieval call binding the contract method 0x916a17c6.
//
// Solidity: function targetSelectors() view returns((address,bytes4[])[] targetedSelectors_)
func (_RegistryTest *RegistryTestSession) TargetSelectors() ([]StdInvariantFuzzSelector, error) {
	return _RegistryTest.Contract.TargetSelectors(&_RegistryTest.CallOpts)
}

// TargetSelectors is a free data retrieval call binding the contract method 0x916a17c6.
//
// Solidity: function targetSelectors() view returns((address,bytes4[])[] targetedSelectors_)
func (_RegistryTest *RegistryTestCallerSession) TargetSelectors() ([]StdInvariantFuzzSelector, error) {
	return _RegistryTest.Contract.TargetSelectors(&_RegistryTest.CallOpts)
}

// TargetSenders is a free data retrieval call binding the contract method 0x3e5e3c23.
//
// Solidity: function targetSenders() view returns(address[] targetedSenders_)
func (_RegistryTest *RegistryTestCaller) TargetSenders(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _RegistryTest.contract.Call(opts, &out, "targetSenders")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// TargetSenders is a free data retrieval call binding the contract method 0x3e5e3c23.
//
// Solidity: function targetSenders() view returns(address[] targetedSenders_)
func (_RegistryTest *RegistryTestSession) TargetSenders() ([]common.Address, error) {
	return _RegistryTest.Contract.TargetSenders(&_RegistryTest.CallOpts)
}

// TargetSenders is a free data retrieval call binding the contract method 0x3e5e3c23.
//
// Solidity: function targetSenders() view returns(address[] targetedSenders_)
func (_RegistryTest *RegistryTestCallerSession) TargetSenders() ([]common.Address, error) {
	return _RegistryTest.Contract.TargetSenders(&_RegistryTest.CallOpts)
}

// TestInitialize is a free data retrieval call binding the contract method 0x993831b6.
//
// Solidity: function testInitialize() view returns()
func (_RegistryTest *RegistryTestCaller) TestInitialize(opts *bind.CallOpts) error {
	var out []interface{}
	err := _RegistryTest.contract.Call(opts, &out, "testInitialize")

	if err != nil {
		return err
	}

	return err

}

// TestInitialize is a free data retrieval call binding the contract method 0x993831b6.
//
// Solidity: function testInitialize() view returns()
func (_RegistryTest *RegistryTestSession) TestInitialize() error {
	return _RegistryTest.Contract.TestInitialize(&_RegistryTest.CallOpts)
}

// TestInitialize is a free data retrieval call binding the contract method 0x993831b6.
//
// Solidity: function testInitialize() view returns()
func (_RegistryTest *RegistryTestCallerSession) TestInitialize() error {
	return _RegistryTest.Contract.TestInitialize(&_RegistryTest.CallOpts)
}

// SetUp is a paid mutator transaction binding the contract method 0x0a9254e4.
//
// Solidity: function setUp() returns()
func (_RegistryTest *RegistryTestTransactor) SetUp(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RegistryTest.contract.Transact(opts, "setUp")
}

// SetUp is a paid mutator transaction binding the contract method 0x0a9254e4.
//
// Solidity: function setUp() returns()
func (_RegistryTest *RegistryTestSession) SetUp() (*types.Transaction, error) {
	return _RegistryTest.Contract.SetUp(&_RegistryTest.TransactOpts)
}

// SetUp is a paid mutator transaction binding the contract method 0x0a9254e4.
//
// Solidity: function setUp() returns()
func (_RegistryTest *RegistryTestTransactorSession) SetUp() (*types.Transaction, error) {
	return _RegistryTest.Contract.SetUp(&_RegistryTest.TransactOpts)
}

// TestChangeChainStatus is a paid mutator transaction binding the contract method 0xb0aef6b3.
//
// Solidity: function testChangeChainStatus() returns()
func (_RegistryTest *RegistryTestTransactor) TestChangeChainStatus(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RegistryTest.contract.Transact(opts, "testChangeChainStatus")
}

// TestChangeChainStatus is a paid mutator transaction binding the contract method 0xb0aef6b3.
//
// Solidity: function testChangeChainStatus() returns()
func (_RegistryTest *RegistryTestSession) TestChangeChainStatus() (*types.Transaction, error) {
	return _RegistryTest.Contract.TestChangeChainStatus(&_RegistryTest.TransactOpts)
}

// TestChangeChainStatus is a paid mutator transaction binding the contract method 0xb0aef6b3.
//
// Solidity: function testChangeChainStatus() returns()
func (_RegistryTest *RegistryTestTransactorSession) TestChangeChainStatus() (*types.Transaction, error) {
	return _RegistryTest.Contract.TestChangeChainStatus(&_RegistryTest.TransactOpts)
}

// TestChangeStatusDirectCallFails is a paid mutator transaction binding the contract method 0x49b7b198.
//
// Solidity: function testChangeStatusDirectCallFails() returns()
func (_RegistryTest *RegistryTestTransactor) TestChangeStatusDirectCallFails(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RegistryTest.contract.Transact(opts, "testChangeStatusDirectCallFails")
}

// TestChangeStatusDirectCallFails is a paid mutator transaction binding the contract method 0x49b7b198.
//
// Solidity: function testChangeStatusDirectCallFails() returns()
func (_RegistryTest *RegistryTestSession) TestChangeStatusDirectCallFails() (*types.Transaction, error) {
	return _RegistryTest.Contract.TestChangeStatusDirectCallFails(&_RegistryTest.TransactOpts)
}

// TestChangeStatusDirectCallFails is a paid mutator transaction binding the contract method 0x49b7b198.
//
// Solidity: function testChangeStatusDirectCallFails() returns()
func (_RegistryTest *RegistryTestTransactorSession) TestChangeStatusDirectCallFails() (*types.Transaction, error) {
	return _RegistryTest.Contract.TestChangeStatusDirectCallFails(&_RegistryTest.TransactOpts)
}

// TestInitializeWithZeroAddress is a paid mutator transaction binding the contract method 0x71748c09.
//
// Solidity: function testInitializeWithZeroAddress() returns()
func (_RegistryTest *RegistryTestTransactor) TestInitializeWithZeroAddress(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RegistryTest.contract.Transact(opts, "testInitializeWithZeroAddress")
}

// TestInitializeWithZeroAddress is a paid mutator transaction binding the contract method 0x71748c09.
//
// Solidity: function testInitializeWithZeroAddress() returns()
func (_RegistryTest *RegistryTestSession) TestInitializeWithZeroAddress() (*types.Transaction, error) {
	return _RegistryTest.Contract.TestInitializeWithZeroAddress(&_RegistryTest.TransactOpts)
}

// TestInitializeWithZeroAddress is a paid mutator transaction binding the contract method 0x71748c09.
//
// Solidity: function testInitializeWithZeroAddress() returns()
func (_RegistryTest *RegistryTestTransactorSession) TestInitializeWithZeroAddress() (*types.Transaction, error) {
	return _RegistryTest.Contract.TestInitializeWithZeroAddress(&_RegistryTest.TransactOpts)
}

// TestMultipleActiveChains is a paid mutator transaction binding the contract method 0x11aa0d44.
//
// Solidity: function testMultipleActiveChains() returns()
func (_RegistryTest *RegistryTestTransactor) TestMultipleActiveChains(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RegistryTest.contract.Transact(opts, "testMultipleActiveChains")
}

// TestMultipleActiveChains is a paid mutator transaction binding the contract method 0x11aa0d44.
//
// Solidity: function testMultipleActiveChains() returns()
func (_RegistryTest *RegistryTestSession) TestMultipleActiveChains() (*types.Transaction, error) {
	return _RegistryTest.Contract.TestMultipleActiveChains(&_RegistryTest.TransactOpts)
}

// TestMultipleActiveChains is a paid mutator transaction binding the contract method 0x11aa0d44.
//
// Solidity: function testMultipleActiveChains() returns()
func (_RegistryTest *RegistryTestTransactorSession) TestMultipleActiveChains() (*types.Transaction, error) {
	return _RegistryTest.Contract.TestMultipleActiveChains(&_RegistryTest.TransactOpts)
}

// TestOnCallInvalidSender is a paid mutator transaction binding the contract method 0xaebfe781.
//
// Solidity: function testOnCallInvalidSender() returns()
func (_RegistryTest *RegistryTestTransactor) TestOnCallInvalidSender(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RegistryTest.contract.Transact(opts, "testOnCallInvalidSender")
}

// TestOnCallInvalidSender is a paid mutator transaction binding the contract method 0xaebfe781.
//
// Solidity: function testOnCallInvalidSender() returns()
func (_RegistryTest *RegistryTestSession) TestOnCallInvalidSender() (*types.Transaction, error) {
	return _RegistryTest.Contract.TestOnCallInvalidSender(&_RegistryTest.TransactOpts)
}

// TestOnCallInvalidSender is a paid mutator transaction binding the contract method 0xaebfe781.
//
// Solidity: function testOnCallInvalidSender() returns()
func (_RegistryTest *RegistryTestTransactorSession) TestOnCallInvalidSender() (*types.Transaction, error) {
	return _RegistryTest.Contract.TestOnCallInvalidSender(&_RegistryTest.TransactOpts)
}

// TestOnCallPaused is a paid mutator transaction binding the contract method 0xb13cbb33.
//
// Solidity: function testOnCallPaused() returns()
func (_RegistryTest *RegistryTestTransactor) TestOnCallPaused(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RegistryTest.contract.Transact(opts, "testOnCallPaused")
}

// TestOnCallPaused is a paid mutator transaction binding the contract method 0xb13cbb33.
//
// Solidity: function testOnCallPaused() returns()
func (_RegistryTest *RegistryTestSession) TestOnCallPaused() (*types.Transaction, error) {
	return _RegistryTest.Contract.TestOnCallPaused(&_RegistryTest.TransactOpts)
}

// TestOnCallPaused is a paid mutator transaction binding the contract method 0xb13cbb33.
//
// Solidity: function testOnCallPaused() returns()
func (_RegistryTest *RegistryTestTransactorSession) TestOnCallPaused() (*types.Transaction, error) {
	return _RegistryTest.Contract.TestOnCallPaused(&_RegistryTest.TransactOpts)
}

// TestOnCallUnauthorized is a paid mutator transaction binding the contract method 0xdca5e415.
//
// Solidity: function testOnCallUnauthorized() returns()
func (_RegistryTest *RegistryTestTransactor) TestOnCallUnauthorized(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RegistryTest.contract.Transact(opts, "testOnCallUnauthorized")
}

// TestOnCallUnauthorized is a paid mutator transaction binding the contract method 0xdca5e415.
//
// Solidity: function testOnCallUnauthorized() returns()
func (_RegistryTest *RegistryTestSession) TestOnCallUnauthorized() (*types.Transaction, error) {
	return _RegistryTest.Contract.TestOnCallUnauthorized(&_RegistryTest.TransactOpts)
}

// TestOnCallUnauthorized is a paid mutator transaction binding the contract method 0xdca5e415.
//
// Solidity: function testOnCallUnauthorized() returns()
func (_RegistryTest *RegistryTestTransactorSession) TestOnCallUnauthorized() (*types.Transaction, error) {
	return _RegistryTest.Contract.TestOnCallUnauthorized(&_RegistryTest.TransactOpts)
}

// TestPause is a paid mutator transaction binding the contract method 0x9bf35597.
//
// Solidity: function testPause() returns()
func (_RegistryTest *RegistryTestTransactor) TestPause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RegistryTest.contract.Transact(opts, "testPause")
}

// TestPause is a paid mutator transaction binding the contract method 0x9bf35597.
//
// Solidity: function testPause() returns()
func (_RegistryTest *RegistryTestSession) TestPause() (*types.Transaction, error) {
	return _RegistryTest.Contract.TestPause(&_RegistryTest.TransactOpts)
}

// TestPause is a paid mutator transaction binding the contract method 0x9bf35597.
//
// Solidity: function testPause() returns()
func (_RegistryTest *RegistryTestTransactorSession) TestPause() (*types.Transaction, error) {
	return _RegistryTest.Contract.TestPause(&_RegistryTest.TransactOpts)
}

// TestPauseUnauthorized is a paid mutator transaction binding the contract method 0x151e9be4.
//
// Solidity: function testPauseUnauthorized() returns()
func (_RegistryTest *RegistryTestTransactor) TestPauseUnauthorized(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RegistryTest.contract.Transact(opts, "testPauseUnauthorized")
}

// TestPauseUnauthorized is a paid mutator transaction binding the contract method 0x151e9be4.
//
// Solidity: function testPauseUnauthorized() returns()
func (_RegistryTest *RegistryTestSession) TestPauseUnauthorized() (*types.Transaction, error) {
	return _RegistryTest.Contract.TestPauseUnauthorized(&_RegistryTest.TransactOpts)
}

// TestPauseUnauthorized is a paid mutator transaction binding the contract method 0x151e9be4.
//
// Solidity: function testPauseUnauthorized() returns()
func (_RegistryTest *RegistryTestTransactorSession) TestPauseUnauthorized() (*types.Transaction, error) {
	return _RegistryTest.Contract.TestPauseUnauthorized(&_RegistryTest.TransactOpts)
}

// TestRegisterContract is a paid mutator transaction binding the contract method 0xb39377d8.
//
// Solidity: function testRegisterContract() returns()
func (_RegistryTest *RegistryTestTransactor) TestRegisterContract(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RegistryTest.contract.Transact(opts, "testRegisterContract")
}

// TestRegisterContract is a paid mutator transaction binding the contract method 0xb39377d8.
//
// Solidity: function testRegisterContract() returns()
func (_RegistryTest *RegistryTestSession) TestRegisterContract() (*types.Transaction, error) {
	return _RegistryTest.Contract.TestRegisterContract(&_RegistryTest.TransactOpts)
}

// TestRegisterContract is a paid mutator transaction binding the contract method 0xb39377d8.
//
// Solidity: function testRegisterContract() returns()
func (_RegistryTest *RegistryTestTransactorSession) TestRegisterContract() (*types.Transaction, error) {
	return _RegistryTest.Contract.TestRegisterContract(&_RegistryTest.TransactOpts)
}

// TestRegisterContractWithEmptyAddress is a paid mutator transaction binding the contract method 0x2013038b.
//
// Solidity: function testRegisterContractWithEmptyAddress() returns()
func (_RegistryTest *RegistryTestTransactor) TestRegisterContractWithEmptyAddress(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RegistryTest.contract.Transact(opts, "testRegisterContractWithEmptyAddress")
}

// TestRegisterContractWithEmptyAddress is a paid mutator transaction binding the contract method 0x2013038b.
//
// Solidity: function testRegisterContractWithEmptyAddress() returns()
func (_RegistryTest *RegistryTestSession) TestRegisterContractWithEmptyAddress() (*types.Transaction, error) {
	return _RegistryTest.Contract.TestRegisterContractWithEmptyAddress(&_RegistryTest.TransactOpts)
}

// TestRegisterContractWithEmptyAddress is a paid mutator transaction binding the contract method 0x2013038b.
//
// Solidity: function testRegisterContractWithEmptyAddress() returns()
func (_RegistryTest *RegistryTestTransactorSession) TestRegisterContractWithEmptyAddress() (*types.Transaction, error) {
	return _RegistryTest.Contract.TestRegisterContractWithEmptyAddress(&_RegistryTest.TransactOpts)
}

// TestRegisterContractWithEmptyType is a paid mutator transaction binding the contract method 0xd97aa899.
//
// Solidity: function testRegisterContractWithEmptyType() returns()
func (_RegistryTest *RegistryTestTransactor) TestRegisterContractWithEmptyType(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RegistryTest.contract.Transact(opts, "testRegisterContractWithEmptyType")
}

// TestRegisterContractWithEmptyType is a paid mutator transaction binding the contract method 0xd97aa899.
//
// Solidity: function testRegisterContractWithEmptyType() returns()
func (_RegistryTest *RegistryTestSession) TestRegisterContractWithEmptyType() (*types.Transaction, error) {
	return _RegistryTest.Contract.TestRegisterContractWithEmptyType(&_RegistryTest.TransactOpts)
}

// TestRegisterContractWithEmptyType is a paid mutator transaction binding the contract method 0xd97aa899.
//
// Solidity: function testRegisterContractWithEmptyType() returns()
func (_RegistryTest *RegistryTestTransactorSession) TestRegisterContractWithEmptyType() (*types.Transaction, error) {
	return _RegistryTest.Contract.TestRegisterContractWithEmptyType(&_RegistryTest.TransactOpts)
}

// TestRegisterZRC20Token is a paid mutator transaction binding the contract method 0x8c500b5c.
//
// Solidity: function testRegisterZRC20Token() returns()
func (_RegistryTest *RegistryTestTransactor) TestRegisterZRC20Token(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RegistryTest.contract.Transact(opts, "testRegisterZRC20Token")
}

// TestRegisterZRC20Token is a paid mutator transaction binding the contract method 0x8c500b5c.
//
// Solidity: function testRegisterZRC20Token() returns()
func (_RegistryTest *RegistryTestSession) TestRegisterZRC20Token() (*types.Transaction, error) {
	return _RegistryTest.Contract.TestRegisterZRC20Token(&_RegistryTest.TransactOpts)
}

// TestRegisterZRC20Token is a paid mutator transaction binding the contract method 0x8c500b5c.
//
// Solidity: function testRegisterZRC20Token() returns()
func (_RegistryTest *RegistryTestTransactorSession) TestRegisterZRC20Token() (*types.Transaction, error) {
	return _RegistryTest.Contract.TestRegisterZRC20Token(&_RegistryTest.TransactOpts)
}

// TestRegisterZRC20TokenWithEmptyOriginAddress is a paid mutator transaction binding the contract method 0xd312ad7d.
//
// Solidity: function testRegisterZRC20TokenWithEmptyOriginAddress() returns()
func (_RegistryTest *RegistryTestTransactor) TestRegisterZRC20TokenWithEmptyOriginAddress(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RegistryTest.contract.Transact(opts, "testRegisterZRC20TokenWithEmptyOriginAddress")
}

// TestRegisterZRC20TokenWithEmptyOriginAddress is a paid mutator transaction binding the contract method 0xd312ad7d.
//
// Solidity: function testRegisterZRC20TokenWithEmptyOriginAddress() returns()
func (_RegistryTest *RegistryTestSession) TestRegisterZRC20TokenWithEmptyOriginAddress() (*types.Transaction, error) {
	return _RegistryTest.Contract.TestRegisterZRC20TokenWithEmptyOriginAddress(&_RegistryTest.TransactOpts)
}

// TestRegisterZRC20TokenWithEmptyOriginAddress is a paid mutator transaction binding the contract method 0xd312ad7d.
//
// Solidity: function testRegisterZRC20TokenWithEmptyOriginAddress() returns()
func (_RegistryTest *RegistryTestTransactorSession) TestRegisterZRC20TokenWithEmptyOriginAddress() (*types.Transaction, error) {
	return _RegistryTest.Contract.TestRegisterZRC20TokenWithEmptyOriginAddress(&_RegistryTest.TransactOpts)
}

// TestRegisterZRC20TokenWithEmptySymbol is a paid mutator transaction binding the contract method 0xd6683856.
//
// Solidity: function testRegisterZRC20TokenWithEmptySymbol() returns()
func (_RegistryTest *RegistryTestTransactor) TestRegisterZRC20TokenWithEmptySymbol(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RegistryTest.contract.Transact(opts, "testRegisterZRC20TokenWithEmptySymbol")
}

// TestRegisterZRC20TokenWithEmptySymbol is a paid mutator transaction binding the contract method 0xd6683856.
//
// Solidity: function testRegisterZRC20TokenWithEmptySymbol() returns()
func (_RegistryTest *RegistryTestSession) TestRegisterZRC20TokenWithEmptySymbol() (*types.Transaction, error) {
	return _RegistryTest.Contract.TestRegisterZRC20TokenWithEmptySymbol(&_RegistryTest.TransactOpts)
}

// TestRegisterZRC20TokenWithEmptySymbol is a paid mutator transaction binding the contract method 0xd6683856.
//
// Solidity: function testRegisterZRC20TokenWithEmptySymbol() returns()
func (_RegistryTest *RegistryTestTransactorSession) TestRegisterZRC20TokenWithEmptySymbol() (*types.Transaction, error) {
	return _RegistryTest.Contract.TestRegisterZRC20TokenWithEmptySymbol(&_RegistryTest.TransactOpts)
}

// TestRegisterZRC20TokenWithZeroAddress is a paid mutator transaction binding the contract method 0xc52521cf.
//
// Solidity: function testRegisterZRC20TokenWithZeroAddress() returns()
func (_RegistryTest *RegistryTestTransactor) TestRegisterZRC20TokenWithZeroAddress(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RegistryTest.contract.Transact(opts, "testRegisterZRC20TokenWithZeroAddress")
}

// TestRegisterZRC20TokenWithZeroAddress is a paid mutator transaction binding the contract method 0xc52521cf.
//
// Solidity: function testRegisterZRC20TokenWithZeroAddress() returns()
func (_RegistryTest *RegistryTestSession) TestRegisterZRC20TokenWithZeroAddress() (*types.Transaction, error) {
	return _RegistryTest.Contract.TestRegisterZRC20TokenWithZeroAddress(&_RegistryTest.TransactOpts)
}

// TestRegisterZRC20TokenWithZeroAddress is a paid mutator transaction binding the contract method 0xc52521cf.
//
// Solidity: function testRegisterZRC20TokenWithZeroAddress() returns()
func (_RegistryTest *RegistryTestTransactorSession) TestRegisterZRC20TokenWithZeroAddress() (*types.Transaction, error) {
	return _RegistryTest.Contract.TestRegisterZRC20TokenWithZeroAddress(&_RegistryTest.TransactOpts)
}

// TestSetContractActive is a paid mutator transaction binding the contract method 0xfaab466a.
//
// Solidity: function testSetContractActive() returns()
func (_RegistryTest *RegistryTestTransactor) TestSetContractActive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RegistryTest.contract.Transact(opts, "testSetContractActive")
}

// TestSetContractActive is a paid mutator transaction binding the contract method 0xfaab466a.
//
// Solidity: function testSetContractActive() returns()
func (_RegistryTest *RegistryTestSession) TestSetContractActive() (*types.Transaction, error) {
	return _RegistryTest.Contract.TestSetContractActive(&_RegistryTest.TransactOpts)
}

// TestSetContractActive is a paid mutator transaction binding the contract method 0xfaab466a.
//
// Solidity: function testSetContractActive() returns()
func (_RegistryTest *RegistryTestTransactorSession) TestSetContractActive() (*types.Transaction, error) {
	return _RegistryTest.Contract.TestSetContractActive(&_RegistryTest.TransactOpts)
}

// TestSetContractActiveWithInvalidType is a paid mutator transaction binding the contract method 0x5fe0a7a2.
//
// Solidity: function testSetContractActiveWithInvalidType() returns()
func (_RegistryTest *RegistryTestTransactor) TestSetContractActiveWithInvalidType(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RegistryTest.contract.Transact(opts, "testSetContractActiveWithInvalidType")
}

// TestSetContractActiveWithInvalidType is a paid mutator transaction binding the contract method 0x5fe0a7a2.
//
// Solidity: function testSetContractActiveWithInvalidType() returns()
func (_RegistryTest *RegistryTestSession) TestSetContractActiveWithInvalidType() (*types.Transaction, error) {
	return _RegistryTest.Contract.TestSetContractActiveWithInvalidType(&_RegistryTest.TransactOpts)
}

// TestSetContractActiveWithInvalidType is a paid mutator transaction binding the contract method 0x5fe0a7a2.
//
// Solidity: function testSetContractActiveWithInvalidType() returns()
func (_RegistryTest *RegistryTestTransactorSession) TestSetContractActiveWithInvalidType() (*types.Transaction, error) {
	return _RegistryTest.Contract.TestSetContractActiveWithInvalidType(&_RegistryTest.TransactOpts)
}

// TestSetZRC20TokenActive is a paid mutator transaction binding the contract method 0x24196f32.
//
// Solidity: function testSetZRC20TokenActive() returns()
func (_RegistryTest *RegistryTestTransactor) TestSetZRC20TokenActive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RegistryTest.contract.Transact(opts, "testSetZRC20TokenActive")
}

// TestSetZRC20TokenActive is a paid mutator transaction binding the contract method 0x24196f32.
//
// Solidity: function testSetZRC20TokenActive() returns()
func (_RegistryTest *RegistryTestSession) TestSetZRC20TokenActive() (*types.Transaction, error) {
	return _RegistryTest.Contract.TestSetZRC20TokenActive(&_RegistryTest.TransactOpts)
}

// TestSetZRC20TokenActive is a paid mutator transaction binding the contract method 0x24196f32.
//
// Solidity: function testSetZRC20TokenActive() returns()
func (_RegistryTest *RegistryTestTransactorSession) TestSetZRC20TokenActive() (*types.Transaction, error) {
	return _RegistryTest.Contract.TestSetZRC20TokenActive(&_RegistryTest.TransactOpts)
}

// TestSetZRC20TokenActiveWithZeroAddress is a paid mutator transaction binding the contract method 0x164c5b02.
//
// Solidity: function testSetZRC20TokenActiveWithZeroAddress() returns()
func (_RegistryTest *RegistryTestTransactor) TestSetZRC20TokenActiveWithZeroAddress(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RegistryTest.contract.Transact(opts, "testSetZRC20TokenActiveWithZeroAddress")
}

// TestSetZRC20TokenActiveWithZeroAddress is a paid mutator transaction binding the contract method 0x164c5b02.
//
// Solidity: function testSetZRC20TokenActiveWithZeroAddress() returns()
func (_RegistryTest *RegistryTestSession) TestSetZRC20TokenActiveWithZeroAddress() (*types.Transaction, error) {
	return _RegistryTest.Contract.TestSetZRC20TokenActiveWithZeroAddress(&_RegistryTest.TransactOpts)
}

// TestSetZRC20TokenActiveWithZeroAddress is a paid mutator transaction binding the contract method 0x164c5b02.
//
// Solidity: function testSetZRC20TokenActiveWithZeroAddress() returns()
func (_RegistryTest *RegistryTestTransactorSession) TestSetZRC20TokenActiveWithZeroAddress() (*types.Transaction, error) {
	return _RegistryTest.Contract.TestSetZRC20TokenActiveWithZeroAddress(&_RegistryTest.TransactOpts)
}

// TestUpdateChainMetadata is a paid mutator transaction binding the contract method 0xbc056f7f.
//
// Solidity: function testUpdateChainMetadata() returns()
func (_RegistryTest *RegistryTestTransactor) TestUpdateChainMetadata(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RegistryTest.contract.Transact(opts, "testUpdateChainMetadata")
}

// TestUpdateChainMetadata is a paid mutator transaction binding the contract method 0xbc056f7f.
//
// Solidity: function testUpdateChainMetadata() returns()
func (_RegistryTest *RegistryTestSession) TestUpdateChainMetadata() (*types.Transaction, error) {
	return _RegistryTest.Contract.TestUpdateChainMetadata(&_RegistryTest.TransactOpts)
}

// TestUpdateChainMetadata is a paid mutator transaction binding the contract method 0xbc056f7f.
//
// Solidity: function testUpdateChainMetadata() returns()
func (_RegistryTest *RegistryTestTransactorSession) TestUpdateChainMetadata() (*types.Transaction, error) {
	return _RegistryTest.Contract.TestUpdateChainMetadata(&_RegistryTest.TransactOpts)
}

// TestUpdateContractConfiguration is a paid mutator transaction binding the contract method 0x0c410295.
//
// Solidity: function testUpdateContractConfiguration() returns()
func (_RegistryTest *RegistryTestTransactor) TestUpdateContractConfiguration(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RegistryTest.contract.Transact(opts, "testUpdateContractConfiguration")
}

// TestUpdateContractConfiguration is a paid mutator transaction binding the contract method 0x0c410295.
//
// Solidity: function testUpdateContractConfiguration() returns()
func (_RegistryTest *RegistryTestSession) TestUpdateContractConfiguration() (*types.Transaction, error) {
	return _RegistryTest.Contract.TestUpdateContractConfiguration(&_RegistryTest.TransactOpts)
}

// TestUpdateContractConfiguration is a paid mutator transaction binding the contract method 0x0c410295.
//
// Solidity: function testUpdateContractConfiguration() returns()
func (_RegistryTest *RegistryTestTransactorSession) TestUpdateContractConfiguration() (*types.Transaction, error) {
	return _RegistryTest.Contract.TestUpdateContractConfiguration(&_RegistryTest.TransactOpts)
}

// TestUpdateContractConfigurationWithInvalidType is a paid mutator transaction binding the contract method 0x1ddbe8ca.
//
// Solidity: function testUpdateContractConfigurationWithInvalidType() returns()
func (_RegistryTest *RegistryTestTransactor) TestUpdateContractConfigurationWithInvalidType(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RegistryTest.contract.Transact(opts, "testUpdateContractConfigurationWithInvalidType")
}

// TestUpdateContractConfigurationWithInvalidType is a paid mutator transaction binding the contract method 0x1ddbe8ca.
//
// Solidity: function testUpdateContractConfigurationWithInvalidType() returns()
func (_RegistryTest *RegistryTestSession) TestUpdateContractConfigurationWithInvalidType() (*types.Transaction, error) {
	return _RegistryTest.Contract.TestUpdateContractConfigurationWithInvalidType(&_RegistryTest.TransactOpts)
}

// TestUpdateContractConfigurationWithInvalidType is a paid mutator transaction binding the contract method 0x1ddbe8ca.
//
// Solidity: function testUpdateContractConfigurationWithInvalidType() returns()
func (_RegistryTest *RegistryTestTransactorSession) TestUpdateContractConfigurationWithInvalidType() (*types.Transaction, error) {
	return _RegistryTest.Contract.TestUpdateContractConfigurationWithInvalidType(&_RegistryTest.TransactOpts)
}

// RegistryTestChainMetadataUpdatedIterator is returned from FilterChainMetadataUpdated and is used to iterate over the raw logs and unpacked data for ChainMetadataUpdated events raised by the RegistryTest contract.
type RegistryTestChainMetadataUpdatedIterator struct {
	Event *RegistryTestChainMetadataUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryTestChainMetadataUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryTestChainMetadataUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryTestChainMetadataUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryTestChainMetadataUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryTestChainMetadataUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryTestChainMetadataUpdated represents a ChainMetadataUpdated event raised by the RegistryTest contract.
type RegistryTestChainMetadataUpdated struct {
	ChainId *big.Int
	Key     string
	Value   []byte
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterChainMetadataUpdated is a free log retrieval operation binding the contract event 0x40c66d0452b5a398a7ebd687f5c3b020e21aa673375087ff6eb7ad214cfee634.
//
// Solidity: event ChainMetadataUpdated(uint256 indexed chainId, string key, bytes value)
func (_RegistryTest *RegistryTestFilterer) FilterChainMetadataUpdated(opts *bind.FilterOpts, chainId []*big.Int) (*RegistryTestChainMetadataUpdatedIterator, error) {

	var chainIdRule []interface{}
	for _, chainIdItem := range chainId {
		chainIdRule = append(chainIdRule, chainIdItem)
	}

	logs, sub, err := _RegistryTest.contract.FilterLogs(opts, "ChainMetadataUpdated", chainIdRule)
	if err != nil {
		return nil, err
	}
	return &RegistryTestChainMetadataUpdatedIterator{contract: _RegistryTest.contract, event: "ChainMetadataUpdated", logs: logs, sub: sub}, nil
}

// WatchChainMetadataUpdated is a free log subscription operation binding the contract event 0x40c66d0452b5a398a7ebd687f5c3b020e21aa673375087ff6eb7ad214cfee634.
//
// Solidity: event ChainMetadataUpdated(uint256 indexed chainId, string key, bytes value)
func (_RegistryTest *RegistryTestFilterer) WatchChainMetadataUpdated(opts *bind.WatchOpts, sink chan<- *RegistryTestChainMetadataUpdated, chainId []*big.Int) (event.Subscription, error) {

	var chainIdRule []interface{}
	for _, chainIdItem := range chainId {
		chainIdRule = append(chainIdRule, chainIdItem)
	}

	logs, sub, err := _RegistryTest.contract.WatchLogs(opts, "ChainMetadataUpdated", chainIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryTestChainMetadataUpdated)
				if err := _RegistryTest.contract.UnpackLog(event, "ChainMetadataUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseChainMetadataUpdated is a log parse operation binding the contract event 0x40c66d0452b5a398a7ebd687f5c3b020e21aa673375087ff6eb7ad214cfee634.
//
// Solidity: event ChainMetadataUpdated(uint256 indexed chainId, string key, bytes value)
func (_RegistryTest *RegistryTestFilterer) ParseChainMetadataUpdated(log types.Log) (*RegistryTestChainMetadataUpdated, error) {
	event := new(RegistryTestChainMetadataUpdated)
	if err := _RegistryTest.contract.UnpackLog(event, "ChainMetadataUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryTestChainStatusChangedIterator is returned from FilterChainStatusChanged and is used to iterate over the raw logs and unpacked data for ChainStatusChanged events raised by the RegistryTest contract.
type RegistryTestChainStatusChangedIterator struct {
	Event *RegistryTestChainStatusChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryTestChainStatusChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryTestChainStatusChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryTestChainStatusChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryTestChainStatusChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryTestChainStatusChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryTestChainStatusChanged represents a ChainStatusChanged event raised by the RegistryTest contract.
type RegistryTestChainStatusChanged struct {
	ChainId   *big.Int
	NewStatus bool
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterChainStatusChanged is a free log retrieval operation binding the contract event 0xc98ceea113f96d4762d49d2885a10d7d0d16d07243bb17df97e53e9035e1415e.
//
// Solidity: event ChainStatusChanged(uint256 indexed chainId, bool newStatus)
func (_RegistryTest *RegistryTestFilterer) FilterChainStatusChanged(opts *bind.FilterOpts, chainId []*big.Int) (*RegistryTestChainStatusChangedIterator, error) {

	var chainIdRule []interface{}
	for _, chainIdItem := range chainId {
		chainIdRule = append(chainIdRule, chainIdItem)
	}

	logs, sub, err := _RegistryTest.contract.FilterLogs(opts, "ChainStatusChanged", chainIdRule)
	if err != nil {
		return nil, err
	}
	return &RegistryTestChainStatusChangedIterator{contract: _RegistryTest.contract, event: "ChainStatusChanged", logs: logs, sub: sub}, nil
}

// WatchChainStatusChanged is a free log subscription operation binding the contract event 0xc98ceea113f96d4762d49d2885a10d7d0d16d07243bb17df97e53e9035e1415e.
//
// Solidity: event ChainStatusChanged(uint256 indexed chainId, bool newStatus)
func (_RegistryTest *RegistryTestFilterer) WatchChainStatusChanged(opts *bind.WatchOpts, sink chan<- *RegistryTestChainStatusChanged, chainId []*big.Int) (event.Subscription, error) {

	var chainIdRule []interface{}
	for _, chainIdItem := range chainId {
		chainIdRule = append(chainIdRule, chainIdItem)
	}

	logs, sub, err := _RegistryTest.contract.WatchLogs(opts, "ChainStatusChanged", chainIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryTestChainStatusChanged)
				if err := _RegistryTest.contract.UnpackLog(event, "ChainStatusChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseChainStatusChanged is a log parse operation binding the contract event 0xc98ceea113f96d4762d49d2885a10d7d0d16d07243bb17df97e53e9035e1415e.
//
// Solidity: event ChainStatusChanged(uint256 indexed chainId, bool newStatus)
func (_RegistryTest *RegistryTestFilterer) ParseChainStatusChanged(log types.Log) (*RegistryTestChainStatusChanged, error) {
	event := new(RegistryTestChainStatusChanged)
	if err := _RegistryTest.contract.UnpackLog(event, "ChainStatusChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryTestContractConfigurationUpdatedIterator is returned from FilterContractConfigurationUpdated and is used to iterate over the raw logs and unpacked data for ContractConfigurationUpdated events raised by the RegistryTest contract.
type RegistryTestContractConfigurationUpdatedIterator struct {
	Event *RegistryTestContractConfigurationUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryTestContractConfigurationUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryTestContractConfigurationUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryTestContractConfigurationUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryTestContractConfigurationUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryTestContractConfigurationUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryTestContractConfigurationUpdated represents a ContractConfigurationUpdated event raised by the RegistryTest contract.
type RegistryTestContractConfigurationUpdated struct {
	ChainId      *big.Int
	ContractType string
	Key          string
	Value        []byte
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterContractConfigurationUpdated is a free log retrieval operation binding the contract event 0xaea6b6dd1ea232db3e0fc64d54fd642518ed2932043ff697ac7c8a83d651c7c5.
//
// Solidity: event ContractConfigurationUpdated(uint256 indexed chainId, string contractType, string key, bytes value)
func (_RegistryTest *RegistryTestFilterer) FilterContractConfigurationUpdated(opts *bind.FilterOpts, chainId []*big.Int) (*RegistryTestContractConfigurationUpdatedIterator, error) {

	var chainIdRule []interface{}
	for _, chainIdItem := range chainId {
		chainIdRule = append(chainIdRule, chainIdItem)
	}

	logs, sub, err := _RegistryTest.contract.FilterLogs(opts, "ContractConfigurationUpdated", chainIdRule)
	if err != nil {
		return nil, err
	}
	return &RegistryTestContractConfigurationUpdatedIterator{contract: _RegistryTest.contract, event: "ContractConfigurationUpdated", logs: logs, sub: sub}, nil
}

// WatchContractConfigurationUpdated is a free log subscription operation binding the contract event 0xaea6b6dd1ea232db3e0fc64d54fd642518ed2932043ff697ac7c8a83d651c7c5.
//
// Solidity: event ContractConfigurationUpdated(uint256 indexed chainId, string contractType, string key, bytes value)
func (_RegistryTest *RegistryTestFilterer) WatchContractConfigurationUpdated(opts *bind.WatchOpts, sink chan<- *RegistryTestContractConfigurationUpdated, chainId []*big.Int) (event.Subscription, error) {

	var chainIdRule []interface{}
	for _, chainIdItem := range chainId {
		chainIdRule = append(chainIdRule, chainIdItem)
	}

	logs, sub, err := _RegistryTest.contract.WatchLogs(opts, "ContractConfigurationUpdated", chainIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryTestContractConfigurationUpdated)
				if err := _RegistryTest.contract.UnpackLog(event, "ContractConfigurationUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseContractConfigurationUpdated is a log parse operation binding the contract event 0xaea6b6dd1ea232db3e0fc64d54fd642518ed2932043ff697ac7c8a83d651c7c5.
//
// Solidity: event ContractConfigurationUpdated(uint256 indexed chainId, string contractType, string key, bytes value)
func (_RegistryTest *RegistryTestFilterer) ParseContractConfigurationUpdated(log types.Log) (*RegistryTestContractConfigurationUpdated, error) {
	event := new(RegistryTestContractConfigurationUpdated)
	if err := _RegistryTest.contract.UnpackLog(event, "ContractConfigurationUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryTestContractRegisteredIterator is returned from FilterContractRegistered and is used to iterate over the raw logs and unpacked data for ContractRegistered events raised by the RegistryTest contract.
type RegistryTestContractRegisteredIterator struct {
	Event *RegistryTestContractRegistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryTestContractRegisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryTestContractRegistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryTestContractRegistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryTestContractRegisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryTestContractRegisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryTestContractRegistered represents a ContractRegistered event raised by the RegistryTest contract.
type RegistryTestContractRegistered struct {
	ChainId      *big.Int
	ContractType common.Hash
	AddressBytes []byte
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterContractRegistered is a free log retrieval operation binding the contract event 0x20319e67335097991b9d6add94a71632118372c1a0b5650654f069668dce2581.
//
// Solidity: event ContractRegistered(uint256 indexed chainId, string indexed contractType, bytes addressBytes)
func (_RegistryTest *RegistryTestFilterer) FilterContractRegistered(opts *bind.FilterOpts, chainId []*big.Int, contractType []string) (*RegistryTestContractRegisteredIterator, error) {

	var chainIdRule []interface{}
	for _, chainIdItem := range chainId {
		chainIdRule = append(chainIdRule, chainIdItem)
	}
	var contractTypeRule []interface{}
	for _, contractTypeItem := range contractType {
		contractTypeRule = append(contractTypeRule, contractTypeItem)
	}

	logs, sub, err := _RegistryTest.contract.FilterLogs(opts, "ContractRegistered", chainIdRule, contractTypeRule)
	if err != nil {
		return nil, err
	}
	return &RegistryTestContractRegisteredIterator{contract: _RegistryTest.contract, event: "ContractRegistered", logs: logs, sub: sub}, nil
}

// WatchContractRegistered is a free log subscription operation binding the contract event 0x20319e67335097991b9d6add94a71632118372c1a0b5650654f069668dce2581.
//
// Solidity: event ContractRegistered(uint256 indexed chainId, string indexed contractType, bytes addressBytes)
func (_RegistryTest *RegistryTestFilterer) WatchContractRegistered(opts *bind.WatchOpts, sink chan<- *RegistryTestContractRegistered, chainId []*big.Int, contractType []string) (event.Subscription, error) {

	var chainIdRule []interface{}
	for _, chainIdItem := range chainId {
		chainIdRule = append(chainIdRule, chainIdItem)
	}
	var contractTypeRule []interface{}
	for _, contractTypeItem := range contractType {
		contractTypeRule = append(contractTypeRule, contractTypeItem)
	}

	logs, sub, err := _RegistryTest.contract.WatchLogs(opts, "ContractRegistered", chainIdRule, contractTypeRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryTestContractRegistered)
				if err := _RegistryTest.contract.UnpackLog(event, "ContractRegistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseContractRegistered is a log parse operation binding the contract event 0x20319e67335097991b9d6add94a71632118372c1a0b5650654f069668dce2581.
//
// Solidity: event ContractRegistered(uint256 indexed chainId, string indexed contractType, bytes addressBytes)
func (_RegistryTest *RegistryTestFilterer) ParseContractRegistered(log types.Log) (*RegistryTestContractRegistered, error) {
	event := new(RegistryTestContractRegistered)
	if err := _RegistryTest.contract.UnpackLog(event, "ContractRegistered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryTestContractStatusChangedIterator is returned from FilterContractStatusChanged and is used to iterate over the raw logs and unpacked data for ContractStatusChanged events raised by the RegistryTest contract.
type RegistryTestContractStatusChangedIterator struct {
	Event *RegistryTestContractStatusChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryTestContractStatusChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryTestContractStatusChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryTestContractStatusChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryTestContractStatusChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryTestContractStatusChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryTestContractStatusChanged represents a ContractStatusChanged event raised by the RegistryTest contract.
type RegistryTestContractStatusChanged struct {
	AddressBytes []byte
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterContractStatusChanged is a free log retrieval operation binding the contract event 0x6db122b2555e642c944e09ae6d733a3f7600404765f612912f72b3c921c0b88c.
//
// Solidity: event ContractStatusChanged(bytes addressBytes)
func (_RegistryTest *RegistryTestFilterer) FilterContractStatusChanged(opts *bind.FilterOpts) (*RegistryTestContractStatusChangedIterator, error) {

	logs, sub, err := _RegistryTest.contract.FilterLogs(opts, "ContractStatusChanged")
	if err != nil {
		return nil, err
	}
	return &RegistryTestContractStatusChangedIterator{contract: _RegistryTest.contract, event: "ContractStatusChanged", logs: logs, sub: sub}, nil
}

// WatchContractStatusChanged is a free log subscription operation binding the contract event 0x6db122b2555e642c944e09ae6d733a3f7600404765f612912f72b3c921c0b88c.
//
// Solidity: event ContractStatusChanged(bytes addressBytes)
func (_RegistryTest *RegistryTestFilterer) WatchContractStatusChanged(opts *bind.WatchOpts, sink chan<- *RegistryTestContractStatusChanged) (event.Subscription, error) {

	logs, sub, err := _RegistryTest.contract.WatchLogs(opts, "ContractStatusChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryTestContractStatusChanged)
				if err := _RegistryTest.contract.UnpackLog(event, "ContractStatusChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseContractStatusChanged is a log parse operation binding the contract event 0x6db122b2555e642c944e09ae6d733a3f7600404765f612912f72b3c921c0b88c.
//
// Solidity: event ContractStatusChanged(bytes addressBytes)
func (_RegistryTest *RegistryTestFilterer) ParseContractStatusChanged(log types.Log) (*RegistryTestContractStatusChanged, error) {
	event := new(RegistryTestContractStatusChanged)
	if err := _RegistryTest.contract.UnpackLog(event, "ContractStatusChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryTestZRC20TokenRegisteredIterator is returned from FilterZRC20TokenRegistered and is used to iterate over the raw logs and unpacked data for ZRC20TokenRegistered events raised by the RegistryTest contract.
type RegistryTestZRC20TokenRegisteredIterator struct {
	Event *RegistryTestZRC20TokenRegistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryTestZRC20TokenRegisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryTestZRC20TokenRegistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryTestZRC20TokenRegistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryTestZRC20TokenRegisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryTestZRC20TokenRegisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryTestZRC20TokenRegistered represents a ZRC20TokenRegistered event raised by the RegistryTest contract.
type RegistryTestZRC20TokenRegistered struct {
	OriginAddress common.Hash
	Address       common.Address
	Decimals      uint8
	OriginChainId *big.Int
	Symbol        string
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterZRC20TokenRegistered is a free log retrieval operation binding the contract event 0xa9edd2fd29fc8cab6015c2725afa5bc5f3b8d709a02d9e89990ef20fd781e367.
//
// Solidity: event ZRC20TokenRegistered(bytes indexed originAddress, address indexed address_, uint8 decimals, uint256 originChainId, string symbol)
func (_RegistryTest *RegistryTestFilterer) FilterZRC20TokenRegistered(opts *bind.FilterOpts, originAddress [][]byte, address_ []common.Address) (*RegistryTestZRC20TokenRegisteredIterator, error) {

	var originAddressRule []interface{}
	for _, originAddressItem := range originAddress {
		originAddressRule = append(originAddressRule, originAddressItem)
	}
	var address_Rule []interface{}
	for _, address_Item := range address_ {
		address_Rule = append(address_Rule, address_Item)
	}

	logs, sub, err := _RegistryTest.contract.FilterLogs(opts, "ZRC20TokenRegistered", originAddressRule, address_Rule)
	if err != nil {
		return nil, err
	}
	return &RegistryTestZRC20TokenRegisteredIterator{contract: _RegistryTest.contract, event: "ZRC20TokenRegistered", logs: logs, sub: sub}, nil
}

// WatchZRC20TokenRegistered is a free log subscription operation binding the contract event 0xa9edd2fd29fc8cab6015c2725afa5bc5f3b8d709a02d9e89990ef20fd781e367.
//
// Solidity: event ZRC20TokenRegistered(bytes indexed originAddress, address indexed address_, uint8 decimals, uint256 originChainId, string symbol)
func (_RegistryTest *RegistryTestFilterer) WatchZRC20TokenRegistered(opts *bind.WatchOpts, sink chan<- *RegistryTestZRC20TokenRegistered, originAddress [][]byte, address_ []common.Address) (event.Subscription, error) {

	var originAddressRule []interface{}
	for _, originAddressItem := range originAddress {
		originAddressRule = append(originAddressRule, originAddressItem)
	}
	var address_Rule []interface{}
	for _, address_Item := range address_ {
		address_Rule = append(address_Rule, address_Item)
	}

	logs, sub, err := _RegistryTest.contract.WatchLogs(opts, "ZRC20TokenRegistered", originAddressRule, address_Rule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryTestZRC20TokenRegistered)
				if err := _RegistryTest.contract.UnpackLog(event, "ZRC20TokenRegistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseZRC20TokenRegistered is a log parse operation binding the contract event 0xa9edd2fd29fc8cab6015c2725afa5bc5f3b8d709a02d9e89990ef20fd781e367.
//
// Solidity: event ZRC20TokenRegistered(bytes indexed originAddress, address indexed address_, uint8 decimals, uint256 originChainId, string symbol)
func (_RegistryTest *RegistryTestFilterer) ParseZRC20TokenRegistered(log types.Log) (*RegistryTestZRC20TokenRegistered, error) {
	event := new(RegistryTestZRC20TokenRegistered)
	if err := _RegistryTest.contract.UnpackLog(event, "ZRC20TokenRegistered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryTestZRC20TokenUpdatedIterator is returned from FilterZRC20TokenUpdated and is used to iterate over the raw logs and unpacked data for ZRC20TokenUpdated events raised by the RegistryTest contract.
type RegistryTestZRC20TokenUpdatedIterator struct {
	Event *RegistryTestZRC20TokenUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryTestZRC20TokenUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryTestZRC20TokenUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryTestZRC20TokenUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryTestZRC20TokenUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryTestZRC20TokenUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryTestZRC20TokenUpdated represents a ZRC20TokenUpdated event raised by the RegistryTest contract.
type RegistryTestZRC20TokenUpdated struct {
	Address common.Address
	Active  bool
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterZRC20TokenUpdated is a free log retrieval operation binding the contract event 0x9542d02d4224477c9e9b53628bf5eae8b59520ea6bf2809cec7f24f76bba8ff8.
//
// Solidity: event ZRC20TokenUpdated(address address_, bool active)
func (_RegistryTest *RegistryTestFilterer) FilterZRC20TokenUpdated(opts *bind.FilterOpts) (*RegistryTestZRC20TokenUpdatedIterator, error) {

	logs, sub, err := _RegistryTest.contract.FilterLogs(opts, "ZRC20TokenUpdated")
	if err != nil {
		return nil, err
	}
	return &RegistryTestZRC20TokenUpdatedIterator{contract: _RegistryTest.contract, event: "ZRC20TokenUpdated", logs: logs, sub: sub}, nil
}

// WatchZRC20TokenUpdated is a free log subscription operation binding the contract event 0x9542d02d4224477c9e9b53628bf5eae8b59520ea6bf2809cec7f24f76bba8ff8.
//
// Solidity: event ZRC20TokenUpdated(address address_, bool active)
func (_RegistryTest *RegistryTestFilterer) WatchZRC20TokenUpdated(opts *bind.WatchOpts, sink chan<- *RegistryTestZRC20TokenUpdated) (event.Subscription, error) {

	logs, sub, err := _RegistryTest.contract.WatchLogs(opts, "ZRC20TokenUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryTestZRC20TokenUpdated)
				if err := _RegistryTest.contract.UnpackLog(event, "ZRC20TokenUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseZRC20TokenUpdated is a log parse operation binding the contract event 0x9542d02d4224477c9e9b53628bf5eae8b59520ea6bf2809cec7f24f76bba8ff8.
//
// Solidity: event ZRC20TokenUpdated(address address_, bool active)
func (_RegistryTest *RegistryTestFilterer) ParseZRC20TokenUpdated(log types.Log) (*RegistryTestZRC20TokenUpdated, error) {
	event := new(RegistryTestZRC20TokenUpdated)
	if err := _RegistryTest.contract.UnpackLog(event, "ZRC20TokenUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryTestLogIterator is returned from FilterLog and is used to iterate over the raw logs and unpacked data for Log events raised by the RegistryTest contract.
type RegistryTestLogIterator struct {
	Event *RegistryTestLog // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryTestLogIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryTestLog)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryTestLog)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryTestLogIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryTestLogIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryTestLog represents a Log event raised by the RegistryTest contract.
type RegistryTestLog struct {
	Arg0 string
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLog is a free log retrieval operation binding the contract event 0x41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50.
//
// Solidity: event log(string arg0)
func (_RegistryTest *RegistryTestFilterer) FilterLog(opts *bind.FilterOpts) (*RegistryTestLogIterator, error) {

	logs, sub, err := _RegistryTest.contract.FilterLogs(opts, "log")
	if err != nil {
		return nil, err
	}
	return &RegistryTestLogIterator{contract: _RegistryTest.contract, event: "log", logs: logs, sub: sub}, nil
}

// WatchLog is a free log subscription operation binding the contract event 0x41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50.
//
// Solidity: event log(string arg0)
func (_RegistryTest *RegistryTestFilterer) WatchLog(opts *bind.WatchOpts, sink chan<- *RegistryTestLog) (event.Subscription, error) {

	logs, sub, err := _RegistryTest.contract.WatchLogs(opts, "log")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryTestLog)
				if err := _RegistryTest.contract.UnpackLog(event, "log", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLog is a log parse operation binding the contract event 0x41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50.
//
// Solidity: event log(string arg0)
func (_RegistryTest *RegistryTestFilterer) ParseLog(log types.Log) (*RegistryTestLog, error) {
	event := new(RegistryTestLog)
	if err := _RegistryTest.contract.UnpackLog(event, "log", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryTestLogAddressIterator is returned from FilterLogAddress and is used to iterate over the raw logs and unpacked data for LogAddress events raised by the RegistryTest contract.
type RegistryTestLogAddressIterator struct {
	Event *RegistryTestLogAddress // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryTestLogAddressIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryTestLogAddress)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryTestLogAddress)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryTestLogAddressIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryTestLogAddressIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryTestLogAddress represents a LogAddress event raised by the RegistryTest contract.
type RegistryTestLogAddress struct {
	Arg0 common.Address
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogAddress is a free log retrieval operation binding the contract event 0x7ae74c527414ae135fd97047b12921a5ec3911b804197855d67e25c7b75ee6f3.
//
// Solidity: event log_address(address arg0)
func (_RegistryTest *RegistryTestFilterer) FilterLogAddress(opts *bind.FilterOpts) (*RegistryTestLogAddressIterator, error) {

	logs, sub, err := _RegistryTest.contract.FilterLogs(opts, "log_address")
	if err != nil {
		return nil, err
	}
	return &RegistryTestLogAddressIterator{contract: _RegistryTest.contract, event: "log_address", logs: logs, sub: sub}, nil
}

// WatchLogAddress is a free log subscription operation binding the contract event 0x7ae74c527414ae135fd97047b12921a5ec3911b804197855d67e25c7b75ee6f3.
//
// Solidity: event log_address(address arg0)
func (_RegistryTest *RegistryTestFilterer) WatchLogAddress(opts *bind.WatchOpts, sink chan<- *RegistryTestLogAddress) (event.Subscription, error) {

	logs, sub, err := _RegistryTest.contract.WatchLogs(opts, "log_address")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryTestLogAddress)
				if err := _RegistryTest.contract.UnpackLog(event, "log_address", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogAddress is a log parse operation binding the contract event 0x7ae74c527414ae135fd97047b12921a5ec3911b804197855d67e25c7b75ee6f3.
//
// Solidity: event log_address(address arg0)
func (_RegistryTest *RegistryTestFilterer) ParseLogAddress(log types.Log) (*RegistryTestLogAddress, error) {
	event := new(RegistryTestLogAddress)
	if err := _RegistryTest.contract.UnpackLog(event, "log_address", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryTestLogArrayIterator is returned from FilterLogArray and is used to iterate over the raw logs and unpacked data for LogArray events raised by the RegistryTest contract.
type RegistryTestLogArrayIterator struct {
	Event *RegistryTestLogArray // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryTestLogArrayIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryTestLogArray)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryTestLogArray)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryTestLogArrayIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryTestLogArrayIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryTestLogArray represents a LogArray event raised by the RegistryTest contract.
type RegistryTestLogArray struct {
	Val []*big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogArray is a free log retrieval operation binding the contract event 0xfb102865d50addddf69da9b5aa1bced66c80cf869a5c8d0471a467e18ce9cab1.
//
// Solidity: event log_array(uint256[] val)
func (_RegistryTest *RegistryTestFilterer) FilterLogArray(opts *bind.FilterOpts) (*RegistryTestLogArrayIterator, error) {

	logs, sub, err := _RegistryTest.contract.FilterLogs(opts, "log_array")
	if err != nil {
		return nil, err
	}
	return &RegistryTestLogArrayIterator{contract: _RegistryTest.contract, event: "log_array", logs: logs, sub: sub}, nil
}

// WatchLogArray is a free log subscription operation binding the contract event 0xfb102865d50addddf69da9b5aa1bced66c80cf869a5c8d0471a467e18ce9cab1.
//
// Solidity: event log_array(uint256[] val)
func (_RegistryTest *RegistryTestFilterer) WatchLogArray(opts *bind.WatchOpts, sink chan<- *RegistryTestLogArray) (event.Subscription, error) {

	logs, sub, err := _RegistryTest.contract.WatchLogs(opts, "log_array")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryTestLogArray)
				if err := _RegistryTest.contract.UnpackLog(event, "log_array", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogArray is a log parse operation binding the contract event 0xfb102865d50addddf69da9b5aa1bced66c80cf869a5c8d0471a467e18ce9cab1.
//
// Solidity: event log_array(uint256[] val)
func (_RegistryTest *RegistryTestFilterer) ParseLogArray(log types.Log) (*RegistryTestLogArray, error) {
	event := new(RegistryTestLogArray)
	if err := _RegistryTest.contract.UnpackLog(event, "log_array", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryTestLogArray0Iterator is returned from FilterLogArray0 and is used to iterate over the raw logs and unpacked data for LogArray0 events raised by the RegistryTest contract.
type RegistryTestLogArray0Iterator struct {
	Event *RegistryTestLogArray0 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryTestLogArray0Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryTestLogArray0)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryTestLogArray0)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryTestLogArray0Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryTestLogArray0Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryTestLogArray0 represents a LogArray0 event raised by the RegistryTest contract.
type RegistryTestLogArray0 struct {
	Val []*big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogArray0 is a free log retrieval operation binding the contract event 0x890a82679b470f2bd82816ed9b161f97d8b967f37fa3647c21d5bf39749e2dd5.
//
// Solidity: event log_array(int256[] val)
func (_RegistryTest *RegistryTestFilterer) FilterLogArray0(opts *bind.FilterOpts) (*RegistryTestLogArray0Iterator, error) {

	logs, sub, err := _RegistryTest.contract.FilterLogs(opts, "log_array0")
	if err != nil {
		return nil, err
	}
	return &RegistryTestLogArray0Iterator{contract: _RegistryTest.contract, event: "log_array0", logs: logs, sub: sub}, nil
}

// WatchLogArray0 is a free log subscription operation binding the contract event 0x890a82679b470f2bd82816ed9b161f97d8b967f37fa3647c21d5bf39749e2dd5.
//
// Solidity: event log_array(int256[] val)
func (_RegistryTest *RegistryTestFilterer) WatchLogArray0(opts *bind.WatchOpts, sink chan<- *RegistryTestLogArray0) (event.Subscription, error) {

	logs, sub, err := _RegistryTest.contract.WatchLogs(opts, "log_array0")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryTestLogArray0)
				if err := _RegistryTest.contract.UnpackLog(event, "log_array0", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogArray0 is a log parse operation binding the contract event 0x890a82679b470f2bd82816ed9b161f97d8b967f37fa3647c21d5bf39749e2dd5.
//
// Solidity: event log_array(int256[] val)
func (_RegistryTest *RegistryTestFilterer) ParseLogArray0(log types.Log) (*RegistryTestLogArray0, error) {
	event := new(RegistryTestLogArray0)
	if err := _RegistryTest.contract.UnpackLog(event, "log_array0", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryTestLogArray1Iterator is returned from FilterLogArray1 and is used to iterate over the raw logs and unpacked data for LogArray1 events raised by the RegistryTest contract.
type RegistryTestLogArray1Iterator struct {
	Event *RegistryTestLogArray1 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryTestLogArray1Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryTestLogArray1)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryTestLogArray1)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryTestLogArray1Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryTestLogArray1Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryTestLogArray1 represents a LogArray1 event raised by the RegistryTest contract.
type RegistryTestLogArray1 struct {
	Val []common.Address
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogArray1 is a free log retrieval operation binding the contract event 0x40e1840f5769073d61bd01372d9b75baa9842d5629a0c99ff103be1178a8e9e2.
//
// Solidity: event log_array(address[] val)
func (_RegistryTest *RegistryTestFilterer) FilterLogArray1(opts *bind.FilterOpts) (*RegistryTestLogArray1Iterator, error) {

	logs, sub, err := _RegistryTest.contract.FilterLogs(opts, "log_array1")
	if err != nil {
		return nil, err
	}
	return &RegistryTestLogArray1Iterator{contract: _RegistryTest.contract, event: "log_array1", logs: logs, sub: sub}, nil
}

// WatchLogArray1 is a free log subscription operation binding the contract event 0x40e1840f5769073d61bd01372d9b75baa9842d5629a0c99ff103be1178a8e9e2.
//
// Solidity: event log_array(address[] val)
func (_RegistryTest *RegistryTestFilterer) WatchLogArray1(opts *bind.WatchOpts, sink chan<- *RegistryTestLogArray1) (event.Subscription, error) {

	logs, sub, err := _RegistryTest.contract.WatchLogs(opts, "log_array1")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryTestLogArray1)
				if err := _RegistryTest.contract.UnpackLog(event, "log_array1", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogArray1 is a log parse operation binding the contract event 0x40e1840f5769073d61bd01372d9b75baa9842d5629a0c99ff103be1178a8e9e2.
//
// Solidity: event log_array(address[] val)
func (_RegistryTest *RegistryTestFilterer) ParseLogArray1(log types.Log) (*RegistryTestLogArray1, error) {
	event := new(RegistryTestLogArray1)
	if err := _RegistryTest.contract.UnpackLog(event, "log_array1", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryTestLogBytesIterator is returned from FilterLogBytes and is used to iterate over the raw logs and unpacked data for LogBytes events raised by the RegistryTest contract.
type RegistryTestLogBytesIterator struct {
	Event *RegistryTestLogBytes // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryTestLogBytesIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryTestLogBytes)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryTestLogBytes)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryTestLogBytesIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryTestLogBytesIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryTestLogBytes represents a LogBytes event raised by the RegistryTest contract.
type RegistryTestLogBytes struct {
	Arg0 []byte
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogBytes is a free log retrieval operation binding the contract event 0x23b62ad0584d24a75f0bf3560391ef5659ec6db1269c56e11aa241d637f19b20.
//
// Solidity: event log_bytes(bytes arg0)
func (_RegistryTest *RegistryTestFilterer) FilterLogBytes(opts *bind.FilterOpts) (*RegistryTestLogBytesIterator, error) {

	logs, sub, err := _RegistryTest.contract.FilterLogs(opts, "log_bytes")
	if err != nil {
		return nil, err
	}
	return &RegistryTestLogBytesIterator{contract: _RegistryTest.contract, event: "log_bytes", logs: logs, sub: sub}, nil
}

// WatchLogBytes is a free log subscription operation binding the contract event 0x23b62ad0584d24a75f0bf3560391ef5659ec6db1269c56e11aa241d637f19b20.
//
// Solidity: event log_bytes(bytes arg0)
func (_RegistryTest *RegistryTestFilterer) WatchLogBytes(opts *bind.WatchOpts, sink chan<- *RegistryTestLogBytes) (event.Subscription, error) {

	logs, sub, err := _RegistryTest.contract.WatchLogs(opts, "log_bytes")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryTestLogBytes)
				if err := _RegistryTest.contract.UnpackLog(event, "log_bytes", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogBytes is a log parse operation binding the contract event 0x23b62ad0584d24a75f0bf3560391ef5659ec6db1269c56e11aa241d637f19b20.
//
// Solidity: event log_bytes(bytes arg0)
func (_RegistryTest *RegistryTestFilterer) ParseLogBytes(log types.Log) (*RegistryTestLogBytes, error) {
	event := new(RegistryTestLogBytes)
	if err := _RegistryTest.contract.UnpackLog(event, "log_bytes", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryTestLogBytes32Iterator is returned from FilterLogBytes32 and is used to iterate over the raw logs and unpacked data for LogBytes32 events raised by the RegistryTest contract.
type RegistryTestLogBytes32Iterator struct {
	Event *RegistryTestLogBytes32 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryTestLogBytes32Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryTestLogBytes32)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryTestLogBytes32)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryTestLogBytes32Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryTestLogBytes32Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryTestLogBytes32 represents a LogBytes32 event raised by the RegistryTest contract.
type RegistryTestLogBytes32 struct {
	Arg0 [32]byte
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogBytes32 is a free log retrieval operation binding the contract event 0xe81699b85113eea1c73e10588b2b035e55893369632173afd43feb192fac64e3.
//
// Solidity: event log_bytes32(bytes32 arg0)
func (_RegistryTest *RegistryTestFilterer) FilterLogBytes32(opts *bind.FilterOpts) (*RegistryTestLogBytes32Iterator, error) {

	logs, sub, err := _RegistryTest.contract.FilterLogs(opts, "log_bytes32")
	if err != nil {
		return nil, err
	}
	return &RegistryTestLogBytes32Iterator{contract: _RegistryTest.contract, event: "log_bytes32", logs: logs, sub: sub}, nil
}

// WatchLogBytes32 is a free log subscription operation binding the contract event 0xe81699b85113eea1c73e10588b2b035e55893369632173afd43feb192fac64e3.
//
// Solidity: event log_bytes32(bytes32 arg0)
func (_RegistryTest *RegistryTestFilterer) WatchLogBytes32(opts *bind.WatchOpts, sink chan<- *RegistryTestLogBytes32) (event.Subscription, error) {

	logs, sub, err := _RegistryTest.contract.WatchLogs(opts, "log_bytes32")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryTestLogBytes32)
				if err := _RegistryTest.contract.UnpackLog(event, "log_bytes32", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogBytes32 is a log parse operation binding the contract event 0xe81699b85113eea1c73e10588b2b035e55893369632173afd43feb192fac64e3.
//
// Solidity: event log_bytes32(bytes32 arg0)
func (_RegistryTest *RegistryTestFilterer) ParseLogBytes32(log types.Log) (*RegistryTestLogBytes32, error) {
	event := new(RegistryTestLogBytes32)
	if err := _RegistryTest.contract.UnpackLog(event, "log_bytes32", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryTestLogIntIterator is returned from FilterLogInt and is used to iterate over the raw logs and unpacked data for LogInt events raised by the RegistryTest contract.
type RegistryTestLogIntIterator struct {
	Event *RegistryTestLogInt // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryTestLogIntIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryTestLogInt)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryTestLogInt)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryTestLogIntIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryTestLogIntIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryTestLogInt represents a LogInt event raised by the RegistryTest contract.
type RegistryTestLogInt struct {
	Arg0 *big.Int
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogInt is a free log retrieval operation binding the contract event 0x0eb5d52624c8d28ada9fc55a8c502ed5aa3fbe2fb6e91b71b5f376882b1d2fb8.
//
// Solidity: event log_int(int256 arg0)
func (_RegistryTest *RegistryTestFilterer) FilterLogInt(opts *bind.FilterOpts) (*RegistryTestLogIntIterator, error) {

	logs, sub, err := _RegistryTest.contract.FilterLogs(opts, "log_int")
	if err != nil {
		return nil, err
	}
	return &RegistryTestLogIntIterator{contract: _RegistryTest.contract, event: "log_int", logs: logs, sub: sub}, nil
}

// WatchLogInt is a free log subscription operation binding the contract event 0x0eb5d52624c8d28ada9fc55a8c502ed5aa3fbe2fb6e91b71b5f376882b1d2fb8.
//
// Solidity: event log_int(int256 arg0)
func (_RegistryTest *RegistryTestFilterer) WatchLogInt(opts *bind.WatchOpts, sink chan<- *RegistryTestLogInt) (event.Subscription, error) {

	logs, sub, err := _RegistryTest.contract.WatchLogs(opts, "log_int")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryTestLogInt)
				if err := _RegistryTest.contract.UnpackLog(event, "log_int", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogInt is a log parse operation binding the contract event 0x0eb5d52624c8d28ada9fc55a8c502ed5aa3fbe2fb6e91b71b5f376882b1d2fb8.
//
// Solidity: event log_int(int256 arg0)
func (_RegistryTest *RegistryTestFilterer) ParseLogInt(log types.Log) (*RegistryTestLogInt, error) {
	event := new(RegistryTestLogInt)
	if err := _RegistryTest.contract.UnpackLog(event, "log_int", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryTestLogNamedAddressIterator is returned from FilterLogNamedAddress and is used to iterate over the raw logs and unpacked data for LogNamedAddress events raised by the RegistryTest contract.
type RegistryTestLogNamedAddressIterator struct {
	Event *RegistryTestLogNamedAddress // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryTestLogNamedAddressIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryTestLogNamedAddress)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryTestLogNamedAddress)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryTestLogNamedAddressIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryTestLogNamedAddressIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryTestLogNamedAddress represents a LogNamedAddress event raised by the RegistryTest contract.
type RegistryTestLogNamedAddress struct {
	Key string
	Val common.Address
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedAddress is a free log retrieval operation binding the contract event 0x9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f.
//
// Solidity: event log_named_address(string key, address val)
func (_RegistryTest *RegistryTestFilterer) FilterLogNamedAddress(opts *bind.FilterOpts) (*RegistryTestLogNamedAddressIterator, error) {

	logs, sub, err := _RegistryTest.contract.FilterLogs(opts, "log_named_address")
	if err != nil {
		return nil, err
	}
	return &RegistryTestLogNamedAddressIterator{contract: _RegistryTest.contract, event: "log_named_address", logs: logs, sub: sub}, nil
}

// WatchLogNamedAddress is a free log subscription operation binding the contract event 0x9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f.
//
// Solidity: event log_named_address(string key, address val)
func (_RegistryTest *RegistryTestFilterer) WatchLogNamedAddress(opts *bind.WatchOpts, sink chan<- *RegistryTestLogNamedAddress) (event.Subscription, error) {

	logs, sub, err := _RegistryTest.contract.WatchLogs(opts, "log_named_address")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryTestLogNamedAddress)
				if err := _RegistryTest.contract.UnpackLog(event, "log_named_address", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedAddress is a log parse operation binding the contract event 0x9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f.
//
// Solidity: event log_named_address(string key, address val)
func (_RegistryTest *RegistryTestFilterer) ParseLogNamedAddress(log types.Log) (*RegistryTestLogNamedAddress, error) {
	event := new(RegistryTestLogNamedAddress)
	if err := _RegistryTest.contract.UnpackLog(event, "log_named_address", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryTestLogNamedArrayIterator is returned from FilterLogNamedArray and is used to iterate over the raw logs and unpacked data for LogNamedArray events raised by the RegistryTest contract.
type RegistryTestLogNamedArrayIterator struct {
	Event *RegistryTestLogNamedArray // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryTestLogNamedArrayIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryTestLogNamedArray)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryTestLogNamedArray)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryTestLogNamedArrayIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryTestLogNamedArrayIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryTestLogNamedArray represents a LogNamedArray event raised by the RegistryTest contract.
type RegistryTestLogNamedArray struct {
	Key string
	Val []*big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedArray is a free log retrieval operation binding the contract event 0x00aaa39c9ffb5f567a4534380c737075702e1f7f14107fc95328e3b56c0325fb.
//
// Solidity: event log_named_array(string key, uint256[] val)
func (_RegistryTest *RegistryTestFilterer) FilterLogNamedArray(opts *bind.FilterOpts) (*RegistryTestLogNamedArrayIterator, error) {

	logs, sub, err := _RegistryTest.contract.FilterLogs(opts, "log_named_array")
	if err != nil {
		return nil, err
	}
	return &RegistryTestLogNamedArrayIterator{contract: _RegistryTest.contract, event: "log_named_array", logs: logs, sub: sub}, nil
}

// WatchLogNamedArray is a free log subscription operation binding the contract event 0x00aaa39c9ffb5f567a4534380c737075702e1f7f14107fc95328e3b56c0325fb.
//
// Solidity: event log_named_array(string key, uint256[] val)
func (_RegistryTest *RegistryTestFilterer) WatchLogNamedArray(opts *bind.WatchOpts, sink chan<- *RegistryTestLogNamedArray) (event.Subscription, error) {

	logs, sub, err := _RegistryTest.contract.WatchLogs(opts, "log_named_array")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryTestLogNamedArray)
				if err := _RegistryTest.contract.UnpackLog(event, "log_named_array", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedArray is a log parse operation binding the contract event 0x00aaa39c9ffb5f567a4534380c737075702e1f7f14107fc95328e3b56c0325fb.
//
// Solidity: event log_named_array(string key, uint256[] val)
func (_RegistryTest *RegistryTestFilterer) ParseLogNamedArray(log types.Log) (*RegistryTestLogNamedArray, error) {
	event := new(RegistryTestLogNamedArray)
	if err := _RegistryTest.contract.UnpackLog(event, "log_named_array", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryTestLogNamedArray0Iterator is returned from FilterLogNamedArray0 and is used to iterate over the raw logs and unpacked data for LogNamedArray0 events raised by the RegistryTest contract.
type RegistryTestLogNamedArray0Iterator struct {
	Event *RegistryTestLogNamedArray0 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryTestLogNamedArray0Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryTestLogNamedArray0)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryTestLogNamedArray0)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryTestLogNamedArray0Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryTestLogNamedArray0Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryTestLogNamedArray0 represents a LogNamedArray0 event raised by the RegistryTest contract.
type RegistryTestLogNamedArray0 struct {
	Key string
	Val []*big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedArray0 is a free log retrieval operation binding the contract event 0xa73eda09662f46dde729be4611385ff34fe6c44fbbc6f7e17b042b59a3445b57.
//
// Solidity: event log_named_array(string key, int256[] val)
func (_RegistryTest *RegistryTestFilterer) FilterLogNamedArray0(opts *bind.FilterOpts) (*RegistryTestLogNamedArray0Iterator, error) {

	logs, sub, err := _RegistryTest.contract.FilterLogs(opts, "log_named_array0")
	if err != nil {
		return nil, err
	}
	return &RegistryTestLogNamedArray0Iterator{contract: _RegistryTest.contract, event: "log_named_array0", logs: logs, sub: sub}, nil
}

// WatchLogNamedArray0 is a free log subscription operation binding the contract event 0xa73eda09662f46dde729be4611385ff34fe6c44fbbc6f7e17b042b59a3445b57.
//
// Solidity: event log_named_array(string key, int256[] val)
func (_RegistryTest *RegistryTestFilterer) WatchLogNamedArray0(opts *bind.WatchOpts, sink chan<- *RegistryTestLogNamedArray0) (event.Subscription, error) {

	logs, sub, err := _RegistryTest.contract.WatchLogs(opts, "log_named_array0")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryTestLogNamedArray0)
				if err := _RegistryTest.contract.UnpackLog(event, "log_named_array0", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedArray0 is a log parse operation binding the contract event 0xa73eda09662f46dde729be4611385ff34fe6c44fbbc6f7e17b042b59a3445b57.
//
// Solidity: event log_named_array(string key, int256[] val)
func (_RegistryTest *RegistryTestFilterer) ParseLogNamedArray0(log types.Log) (*RegistryTestLogNamedArray0, error) {
	event := new(RegistryTestLogNamedArray0)
	if err := _RegistryTest.contract.UnpackLog(event, "log_named_array0", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryTestLogNamedArray1Iterator is returned from FilterLogNamedArray1 and is used to iterate over the raw logs and unpacked data for LogNamedArray1 events raised by the RegistryTest contract.
type RegistryTestLogNamedArray1Iterator struct {
	Event *RegistryTestLogNamedArray1 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryTestLogNamedArray1Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryTestLogNamedArray1)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryTestLogNamedArray1)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryTestLogNamedArray1Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryTestLogNamedArray1Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryTestLogNamedArray1 represents a LogNamedArray1 event raised by the RegistryTest contract.
type RegistryTestLogNamedArray1 struct {
	Key string
	Val []common.Address
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedArray1 is a free log retrieval operation binding the contract event 0x3bcfb2ae2e8d132dd1fce7cf278a9a19756a9fceabe470df3bdabb4bc577d1bd.
//
// Solidity: event log_named_array(string key, address[] val)
func (_RegistryTest *RegistryTestFilterer) FilterLogNamedArray1(opts *bind.FilterOpts) (*RegistryTestLogNamedArray1Iterator, error) {

	logs, sub, err := _RegistryTest.contract.FilterLogs(opts, "log_named_array1")
	if err != nil {
		return nil, err
	}
	return &RegistryTestLogNamedArray1Iterator{contract: _RegistryTest.contract, event: "log_named_array1", logs: logs, sub: sub}, nil
}

// WatchLogNamedArray1 is a free log subscription operation binding the contract event 0x3bcfb2ae2e8d132dd1fce7cf278a9a19756a9fceabe470df3bdabb4bc577d1bd.
//
// Solidity: event log_named_array(string key, address[] val)
func (_RegistryTest *RegistryTestFilterer) WatchLogNamedArray1(opts *bind.WatchOpts, sink chan<- *RegistryTestLogNamedArray1) (event.Subscription, error) {

	logs, sub, err := _RegistryTest.contract.WatchLogs(opts, "log_named_array1")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryTestLogNamedArray1)
				if err := _RegistryTest.contract.UnpackLog(event, "log_named_array1", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedArray1 is a log parse operation binding the contract event 0x3bcfb2ae2e8d132dd1fce7cf278a9a19756a9fceabe470df3bdabb4bc577d1bd.
//
// Solidity: event log_named_array(string key, address[] val)
func (_RegistryTest *RegistryTestFilterer) ParseLogNamedArray1(log types.Log) (*RegistryTestLogNamedArray1, error) {
	event := new(RegistryTestLogNamedArray1)
	if err := _RegistryTest.contract.UnpackLog(event, "log_named_array1", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryTestLogNamedBytesIterator is returned from FilterLogNamedBytes and is used to iterate over the raw logs and unpacked data for LogNamedBytes events raised by the RegistryTest contract.
type RegistryTestLogNamedBytesIterator struct {
	Event *RegistryTestLogNamedBytes // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryTestLogNamedBytesIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryTestLogNamedBytes)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryTestLogNamedBytes)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryTestLogNamedBytesIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryTestLogNamedBytesIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryTestLogNamedBytes represents a LogNamedBytes event raised by the RegistryTest contract.
type RegistryTestLogNamedBytes struct {
	Key string
	Val []byte
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedBytes is a free log retrieval operation binding the contract event 0xd26e16cad4548705e4c9e2d94f98ee91c289085ee425594fd5635fa2964ccf18.
//
// Solidity: event log_named_bytes(string key, bytes val)
func (_RegistryTest *RegistryTestFilterer) FilterLogNamedBytes(opts *bind.FilterOpts) (*RegistryTestLogNamedBytesIterator, error) {

	logs, sub, err := _RegistryTest.contract.FilterLogs(opts, "log_named_bytes")
	if err != nil {
		return nil, err
	}
	return &RegistryTestLogNamedBytesIterator{contract: _RegistryTest.contract, event: "log_named_bytes", logs: logs, sub: sub}, nil
}

// WatchLogNamedBytes is a free log subscription operation binding the contract event 0xd26e16cad4548705e4c9e2d94f98ee91c289085ee425594fd5635fa2964ccf18.
//
// Solidity: event log_named_bytes(string key, bytes val)
func (_RegistryTest *RegistryTestFilterer) WatchLogNamedBytes(opts *bind.WatchOpts, sink chan<- *RegistryTestLogNamedBytes) (event.Subscription, error) {

	logs, sub, err := _RegistryTest.contract.WatchLogs(opts, "log_named_bytes")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryTestLogNamedBytes)
				if err := _RegistryTest.contract.UnpackLog(event, "log_named_bytes", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedBytes is a log parse operation binding the contract event 0xd26e16cad4548705e4c9e2d94f98ee91c289085ee425594fd5635fa2964ccf18.
//
// Solidity: event log_named_bytes(string key, bytes val)
func (_RegistryTest *RegistryTestFilterer) ParseLogNamedBytes(log types.Log) (*RegistryTestLogNamedBytes, error) {
	event := new(RegistryTestLogNamedBytes)
	if err := _RegistryTest.contract.UnpackLog(event, "log_named_bytes", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryTestLogNamedBytes32Iterator is returned from FilterLogNamedBytes32 and is used to iterate over the raw logs and unpacked data for LogNamedBytes32 events raised by the RegistryTest contract.
type RegistryTestLogNamedBytes32Iterator struct {
	Event *RegistryTestLogNamedBytes32 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryTestLogNamedBytes32Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryTestLogNamedBytes32)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryTestLogNamedBytes32)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryTestLogNamedBytes32Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryTestLogNamedBytes32Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryTestLogNamedBytes32 represents a LogNamedBytes32 event raised by the RegistryTest contract.
type RegistryTestLogNamedBytes32 struct {
	Key string
	Val [32]byte
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedBytes32 is a free log retrieval operation binding the contract event 0xafb795c9c61e4fe7468c386f925d7a5429ecad9c0495ddb8d38d690614d32f99.
//
// Solidity: event log_named_bytes32(string key, bytes32 val)
func (_RegistryTest *RegistryTestFilterer) FilterLogNamedBytes32(opts *bind.FilterOpts) (*RegistryTestLogNamedBytes32Iterator, error) {

	logs, sub, err := _RegistryTest.contract.FilterLogs(opts, "log_named_bytes32")
	if err != nil {
		return nil, err
	}
	return &RegistryTestLogNamedBytes32Iterator{contract: _RegistryTest.contract, event: "log_named_bytes32", logs: logs, sub: sub}, nil
}

// WatchLogNamedBytes32 is a free log subscription operation binding the contract event 0xafb795c9c61e4fe7468c386f925d7a5429ecad9c0495ddb8d38d690614d32f99.
//
// Solidity: event log_named_bytes32(string key, bytes32 val)
func (_RegistryTest *RegistryTestFilterer) WatchLogNamedBytes32(opts *bind.WatchOpts, sink chan<- *RegistryTestLogNamedBytes32) (event.Subscription, error) {

	logs, sub, err := _RegistryTest.contract.WatchLogs(opts, "log_named_bytes32")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryTestLogNamedBytes32)
				if err := _RegistryTest.contract.UnpackLog(event, "log_named_bytes32", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedBytes32 is a log parse operation binding the contract event 0xafb795c9c61e4fe7468c386f925d7a5429ecad9c0495ddb8d38d690614d32f99.
//
// Solidity: event log_named_bytes32(string key, bytes32 val)
func (_RegistryTest *RegistryTestFilterer) ParseLogNamedBytes32(log types.Log) (*RegistryTestLogNamedBytes32, error) {
	event := new(RegistryTestLogNamedBytes32)
	if err := _RegistryTest.contract.UnpackLog(event, "log_named_bytes32", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryTestLogNamedDecimalIntIterator is returned from FilterLogNamedDecimalInt and is used to iterate over the raw logs and unpacked data for LogNamedDecimalInt events raised by the RegistryTest contract.
type RegistryTestLogNamedDecimalIntIterator struct {
	Event *RegistryTestLogNamedDecimalInt // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryTestLogNamedDecimalIntIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryTestLogNamedDecimalInt)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryTestLogNamedDecimalInt)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryTestLogNamedDecimalIntIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryTestLogNamedDecimalIntIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryTestLogNamedDecimalInt represents a LogNamedDecimalInt event raised by the RegistryTest contract.
type RegistryTestLogNamedDecimalInt struct {
	Key      string
	Val      *big.Int
	Decimals *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterLogNamedDecimalInt is a free log retrieval operation binding the contract event 0x5da6ce9d51151ba10c09a559ef24d520b9dac5c5b8810ae8434e4d0d86411a95.
//
// Solidity: event log_named_decimal_int(string key, int256 val, uint256 decimals)
func (_RegistryTest *RegistryTestFilterer) FilterLogNamedDecimalInt(opts *bind.FilterOpts) (*RegistryTestLogNamedDecimalIntIterator, error) {

	logs, sub, err := _RegistryTest.contract.FilterLogs(opts, "log_named_decimal_int")
	if err != nil {
		return nil, err
	}
	return &RegistryTestLogNamedDecimalIntIterator{contract: _RegistryTest.contract, event: "log_named_decimal_int", logs: logs, sub: sub}, nil
}

// WatchLogNamedDecimalInt is a free log subscription operation binding the contract event 0x5da6ce9d51151ba10c09a559ef24d520b9dac5c5b8810ae8434e4d0d86411a95.
//
// Solidity: event log_named_decimal_int(string key, int256 val, uint256 decimals)
func (_RegistryTest *RegistryTestFilterer) WatchLogNamedDecimalInt(opts *bind.WatchOpts, sink chan<- *RegistryTestLogNamedDecimalInt) (event.Subscription, error) {

	logs, sub, err := _RegistryTest.contract.WatchLogs(opts, "log_named_decimal_int")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryTestLogNamedDecimalInt)
				if err := _RegistryTest.contract.UnpackLog(event, "log_named_decimal_int", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedDecimalInt is a log parse operation binding the contract event 0x5da6ce9d51151ba10c09a559ef24d520b9dac5c5b8810ae8434e4d0d86411a95.
//
// Solidity: event log_named_decimal_int(string key, int256 val, uint256 decimals)
func (_RegistryTest *RegistryTestFilterer) ParseLogNamedDecimalInt(log types.Log) (*RegistryTestLogNamedDecimalInt, error) {
	event := new(RegistryTestLogNamedDecimalInt)
	if err := _RegistryTest.contract.UnpackLog(event, "log_named_decimal_int", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryTestLogNamedDecimalUintIterator is returned from FilterLogNamedDecimalUint and is used to iterate over the raw logs and unpacked data for LogNamedDecimalUint events raised by the RegistryTest contract.
type RegistryTestLogNamedDecimalUintIterator struct {
	Event *RegistryTestLogNamedDecimalUint // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryTestLogNamedDecimalUintIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryTestLogNamedDecimalUint)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryTestLogNamedDecimalUint)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryTestLogNamedDecimalUintIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryTestLogNamedDecimalUintIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryTestLogNamedDecimalUint represents a LogNamedDecimalUint event raised by the RegistryTest contract.
type RegistryTestLogNamedDecimalUint struct {
	Key      string
	Val      *big.Int
	Decimals *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterLogNamedDecimalUint is a free log retrieval operation binding the contract event 0xeb8ba43ced7537421946bd43e828b8b2b8428927aa8f801c13d934bf11aca57b.
//
// Solidity: event log_named_decimal_uint(string key, uint256 val, uint256 decimals)
func (_RegistryTest *RegistryTestFilterer) FilterLogNamedDecimalUint(opts *bind.FilterOpts) (*RegistryTestLogNamedDecimalUintIterator, error) {

	logs, sub, err := _RegistryTest.contract.FilterLogs(opts, "log_named_decimal_uint")
	if err != nil {
		return nil, err
	}
	return &RegistryTestLogNamedDecimalUintIterator{contract: _RegistryTest.contract, event: "log_named_decimal_uint", logs: logs, sub: sub}, nil
}

// WatchLogNamedDecimalUint is a free log subscription operation binding the contract event 0xeb8ba43ced7537421946bd43e828b8b2b8428927aa8f801c13d934bf11aca57b.
//
// Solidity: event log_named_decimal_uint(string key, uint256 val, uint256 decimals)
func (_RegistryTest *RegistryTestFilterer) WatchLogNamedDecimalUint(opts *bind.WatchOpts, sink chan<- *RegistryTestLogNamedDecimalUint) (event.Subscription, error) {

	logs, sub, err := _RegistryTest.contract.WatchLogs(opts, "log_named_decimal_uint")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryTestLogNamedDecimalUint)
				if err := _RegistryTest.contract.UnpackLog(event, "log_named_decimal_uint", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedDecimalUint is a log parse operation binding the contract event 0xeb8ba43ced7537421946bd43e828b8b2b8428927aa8f801c13d934bf11aca57b.
//
// Solidity: event log_named_decimal_uint(string key, uint256 val, uint256 decimals)
func (_RegistryTest *RegistryTestFilterer) ParseLogNamedDecimalUint(log types.Log) (*RegistryTestLogNamedDecimalUint, error) {
	event := new(RegistryTestLogNamedDecimalUint)
	if err := _RegistryTest.contract.UnpackLog(event, "log_named_decimal_uint", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryTestLogNamedIntIterator is returned from FilterLogNamedInt and is used to iterate over the raw logs and unpacked data for LogNamedInt events raised by the RegistryTest contract.
type RegistryTestLogNamedIntIterator struct {
	Event *RegistryTestLogNamedInt // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryTestLogNamedIntIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryTestLogNamedInt)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryTestLogNamedInt)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryTestLogNamedIntIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryTestLogNamedIntIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryTestLogNamedInt represents a LogNamedInt event raised by the RegistryTest contract.
type RegistryTestLogNamedInt struct {
	Key string
	Val *big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedInt is a free log retrieval operation binding the contract event 0x2fe632779174374378442a8e978bccfbdcc1d6b2b0d81f7e8eb776ab2286f168.
//
// Solidity: event log_named_int(string key, int256 val)
func (_RegistryTest *RegistryTestFilterer) FilterLogNamedInt(opts *bind.FilterOpts) (*RegistryTestLogNamedIntIterator, error) {

	logs, sub, err := _RegistryTest.contract.FilterLogs(opts, "log_named_int")
	if err != nil {
		return nil, err
	}
	return &RegistryTestLogNamedIntIterator{contract: _RegistryTest.contract, event: "log_named_int", logs: logs, sub: sub}, nil
}

// WatchLogNamedInt is a free log subscription operation binding the contract event 0x2fe632779174374378442a8e978bccfbdcc1d6b2b0d81f7e8eb776ab2286f168.
//
// Solidity: event log_named_int(string key, int256 val)
func (_RegistryTest *RegistryTestFilterer) WatchLogNamedInt(opts *bind.WatchOpts, sink chan<- *RegistryTestLogNamedInt) (event.Subscription, error) {

	logs, sub, err := _RegistryTest.contract.WatchLogs(opts, "log_named_int")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryTestLogNamedInt)
				if err := _RegistryTest.contract.UnpackLog(event, "log_named_int", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedInt is a log parse operation binding the contract event 0x2fe632779174374378442a8e978bccfbdcc1d6b2b0d81f7e8eb776ab2286f168.
//
// Solidity: event log_named_int(string key, int256 val)
func (_RegistryTest *RegistryTestFilterer) ParseLogNamedInt(log types.Log) (*RegistryTestLogNamedInt, error) {
	event := new(RegistryTestLogNamedInt)
	if err := _RegistryTest.contract.UnpackLog(event, "log_named_int", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryTestLogNamedStringIterator is returned from FilterLogNamedString and is used to iterate over the raw logs and unpacked data for LogNamedString events raised by the RegistryTest contract.
type RegistryTestLogNamedStringIterator struct {
	Event *RegistryTestLogNamedString // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryTestLogNamedStringIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryTestLogNamedString)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryTestLogNamedString)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryTestLogNamedStringIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryTestLogNamedStringIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryTestLogNamedString represents a LogNamedString event raised by the RegistryTest contract.
type RegistryTestLogNamedString struct {
	Key string
	Val string
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedString is a free log retrieval operation binding the contract event 0x280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf3583.
//
// Solidity: event log_named_string(string key, string val)
func (_RegistryTest *RegistryTestFilterer) FilterLogNamedString(opts *bind.FilterOpts) (*RegistryTestLogNamedStringIterator, error) {

	logs, sub, err := _RegistryTest.contract.FilterLogs(opts, "log_named_string")
	if err != nil {
		return nil, err
	}
	return &RegistryTestLogNamedStringIterator{contract: _RegistryTest.contract, event: "log_named_string", logs: logs, sub: sub}, nil
}

// WatchLogNamedString is a free log subscription operation binding the contract event 0x280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf3583.
//
// Solidity: event log_named_string(string key, string val)
func (_RegistryTest *RegistryTestFilterer) WatchLogNamedString(opts *bind.WatchOpts, sink chan<- *RegistryTestLogNamedString) (event.Subscription, error) {

	logs, sub, err := _RegistryTest.contract.WatchLogs(opts, "log_named_string")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryTestLogNamedString)
				if err := _RegistryTest.contract.UnpackLog(event, "log_named_string", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedString is a log parse operation binding the contract event 0x280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf3583.
//
// Solidity: event log_named_string(string key, string val)
func (_RegistryTest *RegistryTestFilterer) ParseLogNamedString(log types.Log) (*RegistryTestLogNamedString, error) {
	event := new(RegistryTestLogNamedString)
	if err := _RegistryTest.contract.UnpackLog(event, "log_named_string", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryTestLogNamedUintIterator is returned from FilterLogNamedUint and is used to iterate over the raw logs and unpacked data for LogNamedUint events raised by the RegistryTest contract.
type RegistryTestLogNamedUintIterator struct {
	Event *RegistryTestLogNamedUint // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryTestLogNamedUintIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryTestLogNamedUint)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryTestLogNamedUint)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryTestLogNamedUintIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryTestLogNamedUintIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryTestLogNamedUint represents a LogNamedUint event raised by the RegistryTest contract.
type RegistryTestLogNamedUint struct {
	Key string
	Val *big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedUint is a free log retrieval operation binding the contract event 0xb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a8.
//
// Solidity: event log_named_uint(string key, uint256 val)
func (_RegistryTest *RegistryTestFilterer) FilterLogNamedUint(opts *bind.FilterOpts) (*RegistryTestLogNamedUintIterator, error) {

	logs, sub, err := _RegistryTest.contract.FilterLogs(opts, "log_named_uint")
	if err != nil {
		return nil, err
	}
	return &RegistryTestLogNamedUintIterator{contract: _RegistryTest.contract, event: "log_named_uint", logs: logs, sub: sub}, nil
}

// WatchLogNamedUint is a free log subscription operation binding the contract event 0xb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a8.
//
// Solidity: event log_named_uint(string key, uint256 val)
func (_RegistryTest *RegistryTestFilterer) WatchLogNamedUint(opts *bind.WatchOpts, sink chan<- *RegistryTestLogNamedUint) (event.Subscription, error) {

	logs, sub, err := _RegistryTest.contract.WatchLogs(opts, "log_named_uint")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryTestLogNamedUint)
				if err := _RegistryTest.contract.UnpackLog(event, "log_named_uint", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedUint is a log parse operation binding the contract event 0xb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a8.
//
// Solidity: event log_named_uint(string key, uint256 val)
func (_RegistryTest *RegistryTestFilterer) ParseLogNamedUint(log types.Log) (*RegistryTestLogNamedUint, error) {
	event := new(RegistryTestLogNamedUint)
	if err := _RegistryTest.contract.UnpackLog(event, "log_named_uint", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryTestLogStringIterator is returned from FilterLogString and is used to iterate over the raw logs and unpacked data for LogString events raised by the RegistryTest contract.
type RegistryTestLogStringIterator struct {
	Event *RegistryTestLogString // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryTestLogStringIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryTestLogString)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryTestLogString)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryTestLogStringIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryTestLogStringIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryTestLogString represents a LogString event raised by the RegistryTest contract.
type RegistryTestLogString struct {
	Arg0 string
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogString is a free log retrieval operation binding the contract event 0x0b2e13ff20ac7b474198655583edf70dedd2c1dc980e329c4fbb2fc0748b796b.
//
// Solidity: event log_string(string arg0)
func (_RegistryTest *RegistryTestFilterer) FilterLogString(opts *bind.FilterOpts) (*RegistryTestLogStringIterator, error) {

	logs, sub, err := _RegistryTest.contract.FilterLogs(opts, "log_string")
	if err != nil {
		return nil, err
	}
	return &RegistryTestLogStringIterator{contract: _RegistryTest.contract, event: "log_string", logs: logs, sub: sub}, nil
}

// WatchLogString is a free log subscription operation binding the contract event 0x0b2e13ff20ac7b474198655583edf70dedd2c1dc980e329c4fbb2fc0748b796b.
//
// Solidity: event log_string(string arg0)
func (_RegistryTest *RegistryTestFilterer) WatchLogString(opts *bind.WatchOpts, sink chan<- *RegistryTestLogString) (event.Subscription, error) {

	logs, sub, err := _RegistryTest.contract.WatchLogs(opts, "log_string")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryTestLogString)
				if err := _RegistryTest.contract.UnpackLog(event, "log_string", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogString is a log parse operation binding the contract event 0x0b2e13ff20ac7b474198655583edf70dedd2c1dc980e329c4fbb2fc0748b796b.
//
// Solidity: event log_string(string arg0)
func (_RegistryTest *RegistryTestFilterer) ParseLogString(log types.Log) (*RegistryTestLogString, error) {
	event := new(RegistryTestLogString)
	if err := _RegistryTest.contract.UnpackLog(event, "log_string", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryTestLogUintIterator is returned from FilterLogUint and is used to iterate over the raw logs and unpacked data for LogUint events raised by the RegistryTest contract.
type RegistryTestLogUintIterator struct {
	Event *RegistryTestLogUint // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryTestLogUintIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryTestLogUint)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryTestLogUint)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryTestLogUintIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryTestLogUintIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryTestLogUint represents a LogUint event raised by the RegistryTest contract.
type RegistryTestLogUint struct {
	Arg0 *big.Int
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogUint is a free log retrieval operation binding the contract event 0x2cab9790510fd8bdfbd2115288db33fec66691d476efc5427cfd4c0969301755.
//
// Solidity: event log_uint(uint256 arg0)
func (_RegistryTest *RegistryTestFilterer) FilterLogUint(opts *bind.FilterOpts) (*RegistryTestLogUintIterator, error) {

	logs, sub, err := _RegistryTest.contract.FilterLogs(opts, "log_uint")
	if err != nil {
		return nil, err
	}
	return &RegistryTestLogUintIterator{contract: _RegistryTest.contract, event: "log_uint", logs: logs, sub: sub}, nil
}

// WatchLogUint is a free log subscription operation binding the contract event 0x2cab9790510fd8bdfbd2115288db33fec66691d476efc5427cfd4c0969301755.
//
// Solidity: event log_uint(uint256 arg0)
func (_RegistryTest *RegistryTestFilterer) WatchLogUint(opts *bind.WatchOpts, sink chan<- *RegistryTestLogUint) (event.Subscription, error) {

	logs, sub, err := _RegistryTest.contract.WatchLogs(opts, "log_uint")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryTestLogUint)
				if err := _RegistryTest.contract.UnpackLog(event, "log_uint", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogUint is a log parse operation binding the contract event 0x2cab9790510fd8bdfbd2115288db33fec66691d476efc5427cfd4c0969301755.
//
// Solidity: event log_uint(uint256 arg0)
func (_RegistryTest *RegistryTestFilterer) ParseLogUint(log types.Log) (*RegistryTestLogUint, error) {
	event := new(RegistryTestLogUint)
	if err := _RegistryTest.contract.UnpackLog(event, "log_uint", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryTestLogsIterator is returned from FilterLogs and is used to iterate over the raw logs and unpacked data for Logs events raised by the RegistryTest contract.
type RegistryTestLogsIterator struct {
	Event *RegistryTestLogs // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryTestLogsIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryTestLogs)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryTestLogs)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryTestLogsIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryTestLogsIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryTestLogs represents a Logs event raised by the RegistryTest contract.
type RegistryTestLogs struct {
	Arg0 []byte
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogs is a free log retrieval operation binding the contract event 0xe7950ede0394b9f2ce4a5a1bf5a7e1852411f7e6661b4308c913c4bfd11027e4.
//
// Solidity: event logs(bytes arg0)
func (_RegistryTest *RegistryTestFilterer) FilterLogs(opts *bind.FilterOpts) (*RegistryTestLogsIterator, error) {

	logs, sub, err := _RegistryTest.contract.FilterLogs(opts, "logs")
	if err != nil {
		return nil, err
	}
	return &RegistryTestLogsIterator{contract: _RegistryTest.contract, event: "logs", logs: logs, sub: sub}, nil
}

// WatchLogs is a free log subscription operation binding the contract event 0xe7950ede0394b9f2ce4a5a1bf5a7e1852411f7e6661b4308c913c4bfd11027e4.
//
// Solidity: event logs(bytes arg0)
func (_RegistryTest *RegistryTestFilterer) WatchLogs(opts *bind.WatchOpts, sink chan<- *RegistryTestLogs) (event.Subscription, error) {

	logs, sub, err := _RegistryTest.contract.WatchLogs(opts, "logs")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryTestLogs)
				if err := _RegistryTest.contract.UnpackLog(event, "logs", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogs is a log parse operation binding the contract event 0xe7950ede0394b9f2ce4a5a1bf5a7e1852411f7e6661b4308c913c4bfd11027e4.
//
// Solidity: event logs(bytes arg0)
func (_RegistryTest *RegistryTestFilterer) ParseLogs(log types.Log) (*RegistryTestLogs, error) {
	event := new(RegistryTestLogs)
	if err := _RegistryTest.contract.UnpackLog(event, "logs", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
