/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface ReceiverInterface extends utils.Interface {
  functions: {
    "receiveA(string,uint256,bool)": FunctionFragment;
    "receiveB(string[],uint256[],bool)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "receiveA" | "receiveB"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "receiveA",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "receiveB",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<boolean>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "receiveA", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "receiveB", data: BytesLike): Result;

  events: {
    "ReceivedA(address,uint256,string,uint256,bool)": EventFragment;
    "ReceivedB(address,string[],uint256[],bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ReceivedA"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReceivedB"): EventFragment;
}

export interface ReceivedAEventObject {
  sender: string;
  value: BigNumber;
  str: string;
  num: BigNumber;
  flag: boolean;
}
export type ReceivedAEvent = TypedEvent<
  [string, BigNumber, string, BigNumber, boolean],
  ReceivedAEventObject
>;

export type ReceivedAEventFilter = TypedEventFilter<ReceivedAEvent>;

export interface ReceivedBEventObject {
  sender: string;
  strs: string[];
  nums: BigNumber[];
  flag: boolean;
}
export type ReceivedBEvent = TypedEvent<
  [string, string[], BigNumber[], boolean],
  ReceivedBEventObject
>;

export type ReceivedBEventFilter = TypedEventFilter<ReceivedBEvent>;

export interface Receiver extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ReceiverInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    receiveA(
      str: PromiseOrValue<string>,
      num: PromiseOrValue<BigNumberish>,
      flag: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    receiveB(
      strs: PromiseOrValue<string>[],
      nums: PromiseOrValue<BigNumberish>[],
      flag: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  receiveA(
    str: PromiseOrValue<string>,
    num: PromiseOrValue<BigNumberish>,
    flag: PromiseOrValue<boolean>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  receiveB(
    strs: PromiseOrValue<string>[],
    nums: PromiseOrValue<BigNumberish>[],
    flag: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    receiveA(
      str: PromiseOrValue<string>,
      num: PromiseOrValue<BigNumberish>,
      flag: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    receiveB(
      strs: PromiseOrValue<string>[],
      nums: PromiseOrValue<BigNumberish>[],
      flag: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ReceivedA(address,uint256,string,uint256,bool)"(
      sender?: null,
      value?: null,
      str?: null,
      num?: null,
      flag?: null
    ): ReceivedAEventFilter;
    ReceivedA(
      sender?: null,
      value?: null,
      str?: null,
      num?: null,
      flag?: null
    ): ReceivedAEventFilter;

    "ReceivedB(address,string[],uint256[],bool)"(
      sender?: null,
      strs?: null,
      nums?: null,
      flag?: null
    ): ReceivedBEventFilter;
    ReceivedB(
      sender?: null,
      strs?: null,
      nums?: null,
      flag?: null
    ): ReceivedBEventFilter;
  };

  estimateGas: {
    receiveA(
      str: PromiseOrValue<string>,
      num: PromiseOrValue<BigNumberish>,
      flag: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    receiveB(
      strs: PromiseOrValue<string>[],
      nums: PromiseOrValue<BigNumberish>[],
      flag: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    receiveA(
      str: PromiseOrValue<string>,
      num: PromiseOrValue<BigNumberish>,
      flag: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    receiveB(
      strs: PromiseOrValue<string>[],
      nums: PromiseOrValue<BigNumberish>[],
      flag: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
