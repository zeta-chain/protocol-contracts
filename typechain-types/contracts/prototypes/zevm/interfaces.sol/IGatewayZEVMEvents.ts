/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumber, Signer, utils } from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export interface IGatewayZEVMEventsInterface extends utils.Interface {
  functions: {};

  events: {
    "Call(address,bytes,bytes)": EventFragment;
    "Withdrawal(address,address,bytes,uint256,uint256,uint256,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Call"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawal"): EventFragment;
}

export interface CallEventObject {
  sender: string;
  receiver: string;
  message: string;
}
export type CallEvent = TypedEvent<[string, string, string], CallEventObject>;

export type CallEventFilter = TypedEventFilter<CallEvent>;

export interface WithdrawalEventObject {
  from: string;
  zrc20: string;
  to: string;
  value: BigNumber;
  gasfee: BigNumber;
  protocolFlatFee: BigNumber;
  message: string;
}
export type WithdrawalEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, BigNumber, string],
  WithdrawalEventObject
>;

export type WithdrawalEventFilter = TypedEventFilter<WithdrawalEvent>;

export interface IGatewayZEVMEvents extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IGatewayZEVMEventsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "Call(address,bytes,bytes)"(
      sender?: PromiseOrValue<string> | null,
      receiver?: null,
      message?: null
    ): CallEventFilter;
    Call(
      sender?: PromiseOrValue<string> | null,
      receiver?: null,
      message?: null
    ): CallEventFilter;

    "Withdrawal(address,address,bytes,uint256,uint256,uint256,bytes)"(
      from?: PromiseOrValue<string> | null,
      zrc20?: null,
      to?: null,
      value?: null,
      gasfee?: null,
      protocolFlatFee?: null,
      message?: null
    ): WithdrawalEventFilter;
    Withdrawal(
      from?: PromiseOrValue<string> | null,
      zrc20?: null,
      to?: null,
      value?: null,
      gasfee?: null,
      protocolFlatFee?: null,
      message?: null
    ): WithdrawalEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
