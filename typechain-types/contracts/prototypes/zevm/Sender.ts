/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface SenderInterface extends utils.Interface {
  functions: {
    "callReceiver(bytes,string,uint256,bool)": FunctionFragment;
    "gateway()": FunctionFragment;
    "withdrawAndCallReceiver(bytes,uint256,address,string,uint256,bool)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "callReceiver"
      | "gateway"
      | "withdrawAndCallReceiver"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "callReceiver",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(functionFragment: "gateway", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawAndCallReceiver",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "callReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gateway", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAndCallReceiver",
    data: BytesLike
  ): Result;

  events: {
    "Call(address,bytes,bytes)": EventFragment;
    "Withdrawal(address,bytes,uint256,uint256,uint256,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Call"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawal"): EventFragment;
}

export interface CallEventObject {
  sender: string;
  receiver: string;
  message: string;
}
export type CallEvent = TypedEvent<[string, string, string], CallEventObject>;

export type CallEventFilter = TypedEventFilter<CallEvent>;

export interface WithdrawalEventObject {
  from: string;
  to: string;
  value: BigNumber;
  gasfee: BigNumber;
  protocolFlatFee: BigNumber;
  message: string;
}
export type WithdrawalEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, string],
  WithdrawalEventObject
>;

export type WithdrawalEventFilter = TypedEventFilter<WithdrawalEvent>;

export interface Sender extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SenderInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    callReceiver(
      receiver: PromiseOrValue<BytesLike>,
      str: PromiseOrValue<string>,
      num: PromiseOrValue<BigNumberish>,
      flag: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    gateway(overrides?: CallOverrides): Promise<[string]>;

    withdrawAndCallReceiver(
      receiver: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      zrc20: PromiseOrValue<string>,
      str: PromiseOrValue<string>,
      num: PromiseOrValue<BigNumberish>,
      flag: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  callReceiver(
    receiver: PromiseOrValue<BytesLike>,
    str: PromiseOrValue<string>,
    num: PromiseOrValue<BigNumberish>,
    flag: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  gateway(overrides?: CallOverrides): Promise<string>;

  withdrawAndCallReceiver(
    receiver: PromiseOrValue<BytesLike>,
    amount: PromiseOrValue<BigNumberish>,
    zrc20: PromiseOrValue<string>,
    str: PromiseOrValue<string>,
    num: PromiseOrValue<BigNumberish>,
    flag: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    callReceiver(
      receiver: PromiseOrValue<BytesLike>,
      str: PromiseOrValue<string>,
      num: PromiseOrValue<BigNumberish>,
      flag: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    gateway(overrides?: CallOverrides): Promise<string>;

    withdrawAndCallReceiver(
      receiver: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      zrc20: PromiseOrValue<string>,
      str: PromiseOrValue<string>,
      num: PromiseOrValue<BigNumberish>,
      flag: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Call(address,bytes,bytes)"(
      sender?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<BytesLike> | null,
      message?: null
    ): CallEventFilter;
    Call(
      sender?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<BytesLike> | null,
      message?: null
    ): CallEventFilter;

    "Withdrawal(address,bytes,uint256,uint256,uint256,bytes)"(
      from?: PromiseOrValue<string> | null,
      to?: null,
      value?: null,
      gasfee?: null,
      protocolFlatFee?: null,
      message?: null
    ): WithdrawalEventFilter;
    Withdrawal(
      from?: PromiseOrValue<string> | null,
      to?: null,
      value?: null,
      gasfee?: null,
      protocolFlatFee?: null,
      message?: null
    ): WithdrawalEventFilter;
  };

  estimateGas: {
    callReceiver(
      receiver: PromiseOrValue<BytesLike>,
      str: PromiseOrValue<string>,
      num: PromiseOrValue<BigNumberish>,
      flag: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    gateway(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawAndCallReceiver(
      receiver: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      zrc20: PromiseOrValue<string>,
      str: PromiseOrValue<string>,
      num: PromiseOrValue<BigNumberish>,
      flag: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    callReceiver(
      receiver: PromiseOrValue<BytesLike>,
      str: PromiseOrValue<string>,
      num: PromiseOrValue<BigNumberish>,
      flag: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    gateway(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawAndCallReceiver(
      receiver: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      zrc20: PromiseOrValue<string>,
      str: PromiseOrValue<string>,
      num: PromiseOrValue<BigNumberish>,
      flag: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
