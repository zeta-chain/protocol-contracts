/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface SenderInterface extends utils.Interface {
  functions: {
    "gateway()": FunctionFragment;
    "sendToReceiver(bytes,string,uint256,bool)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "gateway" | "sendToReceiver"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "gateway", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "sendToReceiver",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "gateway", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sendToReceiver",
    data: BytesLike
  ): Result;

  events: {
    "Call(address,bytes,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Call"): EventFragment;
}

export interface CallEventObject {
  sender: string;
  receiver: string;
  message: string;
}
export type CallEvent = TypedEvent<[string, string, string], CallEventObject>;

export type CallEventFilter = TypedEventFilter<CallEvent>;

export interface Sender extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SenderInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    gateway(overrides?: CallOverrides): Promise<[string]>;

    sendToReceiver(
      receiver: PromiseOrValue<BytesLike>,
      str: PromiseOrValue<string>,
      num: PromiseOrValue<BigNumberish>,
      flag: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  gateway(overrides?: CallOverrides): Promise<string>;

  sendToReceiver(
    receiver: PromiseOrValue<BytesLike>,
    str: PromiseOrValue<string>,
    num: PromiseOrValue<BigNumberish>,
    flag: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    gateway(overrides?: CallOverrides): Promise<string>;

    sendToReceiver(
      receiver: PromiseOrValue<BytesLike>,
      str: PromiseOrValue<string>,
      num: PromiseOrValue<BigNumberish>,
      flag: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Call(address,bytes,bytes)"(
      sender?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<BytesLike> | null,
      message?: null
    ): CallEventFilter;
    Call(
      sender?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<BytesLike> | null,
      message?: null
    ): CallEventFilter;
  };

  estimateGas: {
    gateway(overrides?: CallOverrides): Promise<BigNumber>;

    sendToReceiver(
      receiver: PromiseOrValue<BytesLike>,
      str: PromiseOrValue<string>,
      num: PromiseOrValue<BigNumberish>,
      flag: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    gateway(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sendToReceiver(
      receiver: PromiseOrValue<BytesLike>,
      str: PromiseOrValue<string>,
      num: PromiseOrValue<BigNumberish>,
      flag: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
