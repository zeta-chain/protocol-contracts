/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumber, Signer, utils } from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export interface IZetaConnectorEventsInterface extends utils.Interface {
  functions: {};

  events: {
    "Withdraw(address,uint256)": EventFragment;
    "WithdrawAndCall(address,uint256,bytes)": EventFragment;
    "WithdrawAndRevert(address,uint256,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawAndCall"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawAndRevert"): EventFragment;
}

export interface WithdrawEventObject {
  to: string;
  amount: BigNumber;
}
export type WithdrawEvent = TypedEvent<
  [string, BigNumber],
  WithdrawEventObject
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface WithdrawAndCallEventObject {
  to: string;
  amount: BigNumber;
  data: string;
}
export type WithdrawAndCallEvent = TypedEvent<
  [string, BigNumber, string],
  WithdrawAndCallEventObject
>;

export type WithdrawAndCallEventFilter = TypedEventFilter<WithdrawAndCallEvent>;

export interface WithdrawAndRevertEventObject {
  to: string;
  amount: BigNumber;
  data: string;
}
export type WithdrawAndRevertEvent = TypedEvent<
  [string, BigNumber, string],
  WithdrawAndRevertEventObject
>;

export type WithdrawAndRevertEventFilter =
  TypedEventFilter<WithdrawAndRevertEvent>;

export interface IZetaConnectorEvents extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IZetaConnectorEventsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "Withdraw(address,uint256)"(
      to?: PromiseOrValue<string> | null,
      amount?: null
    ): WithdrawEventFilter;
    Withdraw(
      to?: PromiseOrValue<string> | null,
      amount?: null
    ): WithdrawEventFilter;

    "WithdrawAndCall(address,uint256,bytes)"(
      to?: PromiseOrValue<string> | null,
      amount?: null,
      data?: null
    ): WithdrawAndCallEventFilter;
    WithdrawAndCall(
      to?: PromiseOrValue<string> | null,
      amount?: null,
      data?: null
    ): WithdrawAndCallEventFilter;

    "WithdrawAndRevert(address,uint256,bytes)"(
      to?: PromiseOrValue<string> | null,
      amount?: null,
      data?: null
    ): WithdrawAndRevertEventFilter;
    WithdrawAndRevert(
      to?: PromiseOrValue<string> | null,
      amount?: null,
      data?: null
    ): WithdrawAndRevertEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
