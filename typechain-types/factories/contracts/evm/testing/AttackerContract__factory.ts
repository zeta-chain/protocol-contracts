/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  AttackerContract,
  AttackerContractInterface,
} from "../../../../contracts/evm/testing/AttackerContract";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "victimContractAddress_",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    stateMutability: "nonpayable",
    type: "fallback",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "_methodSignature",
        type: "bytes4",
      },
      {
        internalType: "bytes",
        name: "_params",
        type: "bytes",
      },
    ],
    name: "attack",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "entered",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "_methodSignature",
        type: "bytes4",
      },
      {
        internalType: "bytes",
        name: "_params",
        type: "bytes",
      },
    ],
    name: "set",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "victimContractAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051610f12380380610f128339818101604052810190610032919061008d565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610108565b600081519050610087816100f1565b92915050565b6000602082840312156100a3576100a26100ec565b5b60006100b184828501610078565b91505092915050565b60006100c5826100cc565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b6100fa816100ba565b811461010557600080fd5b50565b610dfb806101176000396000f3fe6080604052600436106100435760003560e01c8063189e33ea14610222578063526569061461024b57806389bc0bb714610274578063a77f05e91461029f5761004a565b3661004a57005b34801561005657600080fd5b506100956040518060400160405280600e81526020017f41747461636b696e672e41312e2e0000000000000000000000000000000000008152506102ca565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600060149054906101000a900460e01b60016040516024016100f19190610a4f565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161015b91906109e0565b6000604051808303816000865af19150503d8060008114610198576040519150601f19603f3d011682016040523d82523d6000602084013e61019d565b606091505b505090506101df6040518060400160405280600e81526020017f41747461636b696e672e41322e2e0000000000000000000000000000000000008152506102ca565b8061021f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161021690610ab3565b60405180910390fd5b50005b34801561022e57600080fd5b50610249600480360381019061024491906107da565b610363565b005b34801561025757600080fd5b50610272600480360381019061026d91906107da565b610619565b005b34801561028057600080fd5b50610289610652565b60405161029691906109f7565b60405180910390f35b3480156102ab57600080fd5b506102b4610676565b6040516102c19190610a12565b60405180910390f35b610360816040516024016102de9190610a71565b6040516020818303038152906040527f41304fac000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610689565b50565b6103a16040518060400160405280600c81526020017f41747461636b696e672e2e2e00000000000000000000000000000000000000008152506102ca565b600260009054906101000a900460ff16156103f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103e890610a93565b60405180910390fd5b6001600260006101000a81548160ff02191690831515021790555081600060146101000a81548163ffffffff021916908360e01c021790555080600190805190602001906104409291906106b2565b5061047f6040518060400160405280600d81526020017f41747461636b696e67322e2e2e000000000000000000000000000000000000008152506102ca565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1683836040516024016104cb9190610a2d565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161053591906109e0565b6000604051808303816000865af19150503d8060008114610572576040519150601f19603f3d011682016040523d82523d6000602084013e610577565b606091505b505090506105b96040518060400160405280600d81526020017f41747461636b696e67332e2e2e000000000000000000000000000000000000008152506102ca565b806105f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105f090610ad3565b60405180910390fd5b6000600260006101000a81548160ff021916908315150217905550505050565b81600060146101000a81548163ffffffff021916908360e01c0217905550806001908051906020019061064d9291906106b2565b505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900460ff1681565b60008151905060006a636f6e736f6c652e6c6f679050602083016000808483855afa5050505050565b8280546106be90610c4d565b90600052602060002090601f0160209004810192826106e05760008555610727565b82601f106106f957805160ff1916838001178555610727565b82800160010185558215610727579182015b8281111561072657825182559160200191906001019061070b565b5b5090506107349190610738565b5090565b5b80821115610751576000816000905550600101610739565b5090565b600061076861076384610b18565b610af3565b90508281526020810184848401111561078457610783610d13565b5b61078f848285610c0b565b509392505050565b6000813590506107a681610dae565b92915050565b600082601f8301126107c1576107c0610d0e565b5b81356107d1848260208601610755565b91505092915050565b600080604083850312156107f1576107f0610d1d565b5b60006107ff85828601610797565b925050602083013567ffffffffffffffff8111156108205761081f610d18565b5b61082c858286016107ac565b9150509250929050565b61083f81610ba1565b82525050565b61084e81610bb3565b82525050565b600061085f82610b5e565b6108698185610b74565b9350610879818560208601610c1a565b61088281610d22565b840191505092915050565b600061089882610b5e565b6108a28185610b85565b93506108b2818560208601610c1a565b80840191505092915050565b600081546108cb81610c4d565b6108d58186610b74565b945060018216600081146108f0576001811461090257610935565b60ff1983168652602086019350610935565b61090b85610b49565b60005b8381101561092d5781548189015260018201915060208101905061090e565b808801955050505b50505092915050565b600061094982610b69565b6109538185610b90565b9350610963818560208601610c1a565b61096c81610d22565b840191505092915050565b6000610984601883610b90565b915061098f82610d33565b602082019050919050565b60006109a7601683610b90565b91506109b282610d5c565b602082019050919050565b60006109ca601383610b90565b91506109d582610d85565b602082019050919050565b60006109ec828461088d565b915081905092915050565b6000602082019050610a0c6000830184610836565b92915050565b6000602082019050610a276000830184610845565b92915050565b60006020820190508181036000830152610a478184610854565b905092915050565b60006020820190508181036000830152610a6981846108be565b905092915050565b60006020820190508181036000830152610a8b818461093e565b905092915050565b60006020820190508181036000830152610aac81610977565b9050919050565b60006020820190508181036000830152610acc8161099a565b9050919050565b60006020820190508181036000830152610aec816109bd565b9050919050565b6000610afd610b0e565b9050610b098282610c7f565b919050565b6000604051905090565b600067ffffffffffffffff821115610b3357610b32610cdf565b5b610b3c82610d22565b9050602081019050919050565b60008190508160005260206000209050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b6000610bac82610beb565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b82818337600083830152505050565b60005b83811015610c38578082015181840152602081019050610c1d565b83811115610c47576000848401525b50505050565b60006002820490506001821680610c6557607f821691505b60208210811415610c7957610c78610cb0565b5b50919050565b610c8882610d22565b810181811067ffffffffffffffff82111715610ca757610ca6610cdf565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f5265656e7472616e742063616c6c206465746563746564210000000000000000600082015250565b7f5265656e7472616e742063616c6c206661696c65642100000000000000000000600082015250565b7f4d6574686f642063616c6c206661696c65642100000000000000000000000000600082015250565b610db781610bbf565b8114610dc257600080fd5b5056fea26469706673582212203cad3a1adfdea950bfbfbe387cff44c920316b14efffb7361f9bdd2f0793977864736f6c63430008070033";

type AttackerContractConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AttackerContractConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AttackerContract__factory extends ContractFactory {
  constructor(...args: AttackerContractConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    victimContractAddress_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<AttackerContract> {
    return super.deploy(
      victimContractAddress_,
      overrides || {}
    ) as Promise<AttackerContract>;
  }
  override getDeployTransaction(
    victimContractAddress_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(victimContractAddress_, overrides || {});
  }
  override attach(address: string): AttackerContract {
    return super.attach(address) as AttackerContract;
  }
  override connect(signer: Signer): AttackerContract__factory {
    return super.connect(signer) as AttackerContract__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AttackerContractInterface {
    return new utils.Interface(_abi) as AttackerContractInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AttackerContract {
    return new Contract(address, _abi, signerOrProvider) as AttackerContract;
  }
}
