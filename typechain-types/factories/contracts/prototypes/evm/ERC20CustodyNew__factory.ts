/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  ERC20CustodyNew,
  ERC20CustodyNewInterface,
} from "../../../../contracts/prototypes/evm/ERC20CustodyNew";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_gateway",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "ZeroAddress",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Withdraw",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "WithdrawAndCall",
    type: "event",
  },
  {
    inputs: [],
    name: "gateway",
    outputs: [
      {
        internalType: "contract IGatewayEVM",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "withdrawAndCall",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051610ee2380380610ee2833981810160405281019061003291906100fd565b6001600081905550600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156100a1576040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610178565b6000815190506100f781610161565b92915050565b6000602082840312156101135761011261015c565b5b6000610121848285016100e8565b91505092915050565b60006101358261013c565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b61016a8161012a565b811461017557600080fd5b50565b610d5b806101876000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063116191b61461004657806321fc65f214610064578063d9caed1214610080575b600080fd5b61004e61009c565b60405161005b91906109b9565b60405180910390f35b61007e60048036038101906100799190610726565b6100c2565b005b61009a600480360381019061009591906106d3565b610224565b005b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6100ca6102c9565b610117600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16848773ffffffffffffffffffffffffffffffffffffffff166103199092919063ffffffff16565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635131ab5986868686866040518663ffffffff1660e01b815260040161017a959493929190610942565b600060405180830381600087803b15801561019457600080fd5b505af11580156101a8573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167f85b5be9cf454e05e0bddf49315178102227c312078eefa3c00294fb4d912ae4e85858560405161020d93929190610a91565b60405180910390a361021d61039f565b5050505050565b61022c6102c9565b61025782828573ffffffffffffffffffffffffffffffffffffffff166103199092919063ffffffff16565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb836040516102b49190610a76565b60405180910390a36102c461039f565b505050565b6002600054141561030f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161030690610a56565b60405180910390fd5b6002600081905550565b61039a8363a9059cbb60e01b8484604051602401610338929190610990565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506103a9565b505050565b6001600081905550565b600061040b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166104709092919063ffffffff16565b905060008151111561046b578080602001905181019061042b91906107ae565b61046a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161046190610a36565b60405180910390fd5b5b505050565b606061047f8484600085610488565b90509392505050565b6060824710156104cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104c4906109f6565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516104f6919061092b565b60006040518083038185875af1925050503d8060008114610533576040519150601f19603f3d011682016040523d82523d6000602084013e610538565b606091505b509150915061054987838387610555565b92505050949350505050565b606083156105b8576000835114156105b057610570856105cb565b6105af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105a690610a16565b60405180910390fd5b5b8290506105c3565b6105c283836105ee565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000825111156106015781518083602001fd5b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161063591906109d4565b60405180910390fd5b60008135905061064d81610ce0565b92915050565b60008151905061066281610cf7565b92915050565b60008083601f84011261067e5761067d610bcb565b5b8235905067ffffffffffffffff81111561069b5761069a610bc6565b5b6020830191508360018202830111156106b7576106b6610bd0565b5b9250929050565b6000813590506106cd81610d0e565b92915050565b6000806000606084860312156106ec576106eb610bda565b5b60006106fa8682870161063e565b935050602061070b8682870161063e565b925050604061071c868287016106be565b9150509250925092565b60008060008060006080868803121561074257610741610bda565b5b60006107508882890161063e565b95505060206107618882890161063e565b9450506040610772888289016106be565b935050606086013567ffffffffffffffff81111561079357610792610bd5565b5b61079f88828901610668565b92509250509295509295909350565b6000602082840312156107c4576107c3610bda565b5b60006107d284828501610653565b91505092915050565b6107e481610b06565b82525050565b60006107f68385610ad9565b9350610803838584610b84565b61080c83610bdf565b840190509392505050565b600061082282610ac3565b61082c8185610aea565b935061083c818560208601610b93565b80840191505092915050565b61085181610b4e565b82525050565b600061086282610ace565b61086c8185610af5565b935061087c818560208601610b93565b61088581610bdf565b840191505092915050565b600061089d602683610af5565b91506108a882610bf0565b604082019050919050565b60006108c0601d83610af5565b91506108cb82610c3f565b602082019050919050565b60006108e3602a83610af5565b91506108ee82610c68565b604082019050919050565b6000610906601f83610af5565b915061091182610cb7565b602082019050919050565b61092581610b44565b82525050565b60006109378284610817565b915081905092915050565b600060808201905061095760008301886107db565b61096460208301876107db565b610971604083018661091c565b81810360608301526109848184866107ea565b90509695505050505050565b60006040820190506109a560008301856107db565b6109b2602083018461091c565b9392505050565b60006020820190506109ce6000830184610848565b92915050565b600060208201905081810360008301526109ee8184610857565b905092915050565b60006020820190508181036000830152610a0f81610890565b9050919050565b60006020820190508181036000830152610a2f816108b3565b9050919050565b60006020820190508181036000830152610a4f816108d6565b9050919050565b60006020820190508181036000830152610a6f816108f9565b9050919050565b6000602082019050610a8b600083018461091c565b92915050565b6000604082019050610aa6600083018661091c565b8181036020830152610ab98184866107ea565b9050949350505050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b6000610b1182610b24565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610b5982610b60565b9050919050565b6000610b6b82610b72565b9050919050565b6000610b7d82610b24565b9050919050565b82818337600083830152505050565b60005b83811015610bb1578082015181840152602081019050610b96565b83811115610bc0576000848401525b50505050565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b610ce981610b06565b8114610cf457600080fd5b50565b610d0081610b18565b8114610d0b57600080fd5b50565b610d1781610b44565b8114610d2257600080fd5b5056fea2646970667358221220e0308fb4ed96edbeb2c69e14a5ca1b29a3ef7df2a96cb8bc20f2642e1f32fae964736f6c63430008070033";

type ERC20CustodyNewConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC20CustodyNewConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC20CustodyNew__factory extends ContractFactory {
  constructor(...args: ERC20CustodyNewConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _gateway: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ERC20CustodyNew> {
    return super.deploy(_gateway, overrides || {}) as Promise<ERC20CustodyNew>;
  }
  override getDeployTransaction(
    _gateway: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_gateway, overrides || {});
  }
  override attach(address: string): ERC20CustodyNew {
    return super.attach(address) as ERC20CustodyNew;
  }
  override connect(signer: Signer): ERC20CustodyNew__factory {
    return super.connect(signer) as ERC20CustodyNew__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC20CustodyNewInterface {
    return new utils.Interface(_abi) as ERC20CustodyNewInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC20CustodyNew {
    return new Contract(address, _abi, signerOrProvider) as ERC20CustodyNew;
  }
}
