/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  ZetaConnectorNative,
  ZetaConnectorNativeInterface,
} from "../../../../contracts/prototypes/evm/ZetaConnectorNative";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_gateway",
        type: "address",
      },
      {
        internalType: "address",
        name: "_zetaToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "_tssAddress",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "InvalidSender",
    type: "error",
  },
  {
    inputs: [],
    name: "ZeroAddress",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Withdraw",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "WithdrawAndCall",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "WithdrawAndRevert",
    type: "event",
  },
  {
    inputs: [],
    name: "gateway",
    outputs: [
      {
        internalType: "contract IGatewayEVM",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "receiveTokens",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "tssAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "internalSendHash",
        type: "bytes32",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
      {
        internalType: "bytes32",
        name: "internalSendHash",
        type: "bytes32",
      },
    ],
    name: "withdrawAndCall",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
      {
        internalType: "bytes32",
        name: "internalSendHash",
        type: "bytes32",
      },
    ],
    name: "withdrawAndRevert",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "zetaToken",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60c06040523480156200001157600080fd5b5060405162001462380380620014628339818101604052810190620000379190620001ab565b8282826001600081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161480620000aa5750600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b80620000e25750600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b156200011a576040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b815250508173ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1660601b815250505050505050506200025a565b600081519050620001a58162000240565b92915050565b600080600060608486031215620001c757620001c66200023b565b5b6000620001d78682870162000194565b9350506020620001ea8682870162000194565b9250506040620001fd8682870162000194565b9150509250925092565b600062000214826200021b565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b6200024b8162000207565b81146200025757600080fd5b50565b60805160601c60a05160601c611196620002cc6000396000818161017b015281816101fd015281816102e2015281816103a70152818161041e015281816104a0015261057e015260008181610159015281816101c101528181610383015281816103fc015261046401526111966000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c806321e093b11161005b57806321e093b1146100d85780635b112591146100f65780635e3e9fef14610114578063743e0c9b146101305761007d565b806302d5c89914610082578063106e62901461009e578063116191b6146100ba575b600080fd5b61009c60048036038101906100979190610ac1565b61014c565b005b6100b860048036038101906100b39190610a6e565b6102d3565b005b6100c2610381565b6040516100cf9190610dd3565b60405180910390f35b6100e06103a5565b6040516100ed9190610d0a565b60405180910390f35b6100fe6103c9565b60405161010b9190610d0a565b60405180910390f35b61012e60048036038101906101299190610ac1565b6103ef565b005b61014a60048036038101906101459190610b76565b610576565b005b6101546105c6565b6101bf7f0000000000000000000000000000000000000000000000000000000000000000857f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166106169092919063ffffffff16565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663b8969bd47f0000000000000000000000000000000000000000000000000000000000000000878787876040518663ffffffff1660e01b8152600401610240959493929190610d5c565b600060405180830381600087803b15801561025a57600080fd5b505af115801561026e573d6000803e3d6000fd5b505050508473ffffffffffffffffffffffffffffffffffffffff167fba96f26bdda53eb8c8ba39045dfb4ff39753fbc7a6edcf250a88e75e78d102fe8585856040516102bc93929190610eab565b60405180910390a26102cc61069c565b5050505050565b6102db6105c6565b61032683837f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166106169092919063ffffffff16565b8273ffffffffffffffffffffffffffffffffffffffff167f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243648360405161036c9190610e90565b60405180910390a261037c61069c565b505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6103f76105c6565b6104627f0000000000000000000000000000000000000000000000000000000000000000857f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166106169092919063ffffffff16565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635131ab597f0000000000000000000000000000000000000000000000000000000000000000878787876040518663ffffffff1660e01b81526004016104e3959493929190610d5c565b600060405180830381600087803b1580156104fd57600080fd5b505af1158015610511573d6000803e3d6000fd5b505050508473ffffffffffffffffffffffffffffffffffffffff167f7772f56296d3a5202974a45c61c9188d844ab4d6eeb18c851e4b8d5384ca6ced85858560405161055f93929190610eab565b60405180910390a261056f61069c565b5050505050565b6105c33330837f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166106a6909392919063ffffffff16565b50565b6002600054141561060c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060390610e70565b60405180910390fd5b6002600081905550565b6106978363a9059cbb60e01b8484604051602401610635929190610daa565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061072f565b505050565b6001600081905550565b610729846323b872dd60e01b8585856040516024016106c793929190610d25565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061072f565b50505050565b6000610791826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166107f69092919063ffffffff16565b90506000815111156107f157808060200190518101906107b19190610b49565b6107f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107e790610e50565b60405180910390fd5b5b505050565b6060610805848460008561080e565b90509392505050565b606082471015610853576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161084a90610e10565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161087c9190610cf3565b60006040518083038185875af1925050503d80600081146108b9576040519150601f19603f3d011682016040523d82523d6000602084013e6108be565b606091505b50915091506108cf878383876108db565b92505050949350505050565b6060831561093e57600083511415610936576108f685610951565b610935576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161092c90610e30565b60405180910390fd5b5b829050610949565b6109488383610974565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000825111156109875781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109bb9190610dee565b60405180910390fd5b6000813590506109d381611104565b92915050565b6000815190506109e88161111b565b92915050565b6000813590506109fd81611132565b92915050565b60008083601f840112610a1957610a18610fef565b5b8235905067ffffffffffffffff811115610a3657610a35610fea565b5b602083019150836001820283011115610a5257610a51610ff4565b5b9250929050565b600081359050610a6881611149565b92915050565b600080600060608486031215610a8757610a86610ffe565b5b6000610a95868287016109c4565b9350506020610aa686828701610a59565b9250506040610ab7868287016109ee565b9150509250925092565b600080600080600060808688031215610add57610adc610ffe565b5b6000610aeb888289016109c4565b9550506020610afc88828901610a59565b945050604086013567ffffffffffffffff811115610b1d57610b1c610ff9565b5b610b2988828901610a03565b93509350506060610b3c888289016109ee565b9150509295509295909350565b600060208284031215610b5f57610b5e610ffe565b5b6000610b6d848285016109d9565b91505092915050565b600060208284031215610b8c57610b8b610ffe565b5b6000610b9a84828501610a59565b91505092915050565b610bac81610f20565b82525050565b6000610bbe8385610ef3565b9350610bcb838584610fa8565b610bd483611003565b840190509392505050565b6000610bea82610edd565b610bf48185610f04565b9350610c04818560208601610fb7565b80840191505092915050565b610c1981610f72565b82525050565b6000610c2a82610ee8565b610c348185610f0f565b9350610c44818560208601610fb7565b610c4d81611003565b840191505092915050565b6000610c65602683610f0f565b9150610c7082611014565b604082019050919050565b6000610c88601d83610f0f565b9150610c9382611063565b602082019050919050565b6000610cab602a83610f0f565b9150610cb68261108c565b604082019050919050565b6000610cce601f83610f0f565b9150610cd9826110db565b602082019050919050565b610ced81610f68565b82525050565b6000610cff8284610bdf565b915081905092915050565b6000602082019050610d1f6000830184610ba3565b92915050565b6000606082019050610d3a6000830186610ba3565b610d476020830185610ba3565b610d546040830184610ce4565b949350505050565b6000608082019050610d716000830188610ba3565b610d7e6020830187610ba3565b610d8b6040830186610ce4565b8181036060830152610d9e818486610bb2565b90509695505050505050565b6000604082019050610dbf6000830185610ba3565b610dcc6020830184610ce4565b9392505050565b6000602082019050610de86000830184610c10565b92915050565b60006020820190508181036000830152610e088184610c1f565b905092915050565b60006020820190508181036000830152610e2981610c58565b9050919050565b60006020820190508181036000830152610e4981610c7b565b9050919050565b60006020820190508181036000830152610e6981610c9e565b9050919050565b60006020820190508181036000830152610e8981610cc1565b9050919050565b6000602082019050610ea56000830184610ce4565b92915050565b6000604082019050610ec06000830186610ce4565b8181036020830152610ed3818486610bb2565b9050949350505050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b6000610f2b82610f48565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610f7d82610f84565b9050919050565b6000610f8f82610f96565b9050919050565b6000610fa182610f48565b9050919050565b82818337600083830152505050565b60005b83811015610fd5578082015181840152602081019050610fba565b83811115610fe4576000848401525b50505050565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b61110d81610f20565b811461111857600080fd5b50565b61112481610f32565b811461112f57600080fd5b50565b61113b81610f3e565b811461114657600080fd5b50565b61115281610f68565b811461115d57600080fd5b5056fea264697066735822122044b5ad5eb3ea013245cb991fc849afd5dd201a8100905d349382c0c2e00c25e264736f6c63430008070033";

type ZetaConnectorNativeConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ZetaConnectorNativeConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ZetaConnectorNative__factory extends ContractFactory {
  constructor(...args: ZetaConnectorNativeConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _gateway: PromiseOrValue<string>,
    _zetaToken: PromiseOrValue<string>,
    _tssAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ZetaConnectorNative> {
    return super.deploy(
      _gateway,
      _zetaToken,
      _tssAddress,
      overrides || {}
    ) as Promise<ZetaConnectorNative>;
  }
  override getDeployTransaction(
    _gateway: PromiseOrValue<string>,
    _zetaToken: PromiseOrValue<string>,
    _tssAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _gateway,
      _zetaToken,
      _tssAddress,
      overrides || {}
    );
  }
  override attach(address: string): ZetaConnectorNative {
    return super.attach(address) as ZetaConnectorNative;
  }
  override connect(signer: Signer): ZetaConnectorNative__factory {
    return super.connect(signer) as ZetaConnectorNative__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ZetaConnectorNativeInterface {
    return new utils.Interface(_abi) as ZetaConnectorNativeInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ZetaConnectorNative {
    return new Contract(address, _abi, signerOrProvider) as ZetaConnectorNative;
  }
}
