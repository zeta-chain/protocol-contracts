/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  Gateway,
  GatewayInterface,
} from "../../../contracts/prototypes/Gateway";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "destination",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "Executed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "ExecutedWithERC20",
    type: "event",
  },
  {
    inputs: [],
    name: "custody",
    outputs: [
      {
        internalType: "contract ERC20CustodyNew",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "destination",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "execute",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "executeWithERC20",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_custody",
        type: "address",
      },
    ],
    name: "setCustody",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610b74806100206000396000f3fe60806040526004361061003f5760003560e01c80631cff79cd146100445780635131ab5914610074578063ae7a3a6f146100b1578063dda79b75146100da575b600080fd5b61005e600480360381019061005991906106e3565b610105565b60405161006b919061090d565b60405180910390f35b34801561008057600080fd5b5061009b6004803603810190610096919061065b565b610173565b6040516100a8919061090d565b60405180910390f35b3480156100bd57600080fd5b506100d860048036038101906100d3919061062e565b61045d565b005b3480156100e657600080fd5b506100ef6104a0565b6040516100fc919061092f565b60405180910390f35b606060006101148585856104c4565b90508473ffffffffffffffffffffffffffffffffffffffff167fcaf938de11c367272220bfd1d2baa99ca46665e7bc4d85f00adb51b90fe1fa9f3486866040516101609392919061096a565b60405180910390a2809150509392505050565b60608573ffffffffffffffffffffffffffffffffffffffff1663095ea7b386866040518363ffffffff1660e01b81526004016101b09291906108e4565b602060405180830381600087803b1580156101ca57600080fd5b505af11580156101de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102029190610743565b5060006102108685856104c4565b90508673ffffffffffffffffffffffffffffffffffffffff1663095ea7b38760006040518363ffffffff1660e01b815260040161024e9291906108bb565b602060405180830381600087803b15801561026857600080fd5b505af115801561027c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102a09190610743565b5060008773ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016102dc91906108a0565b60206040518083038186803b1580156102f457600080fd5b505afa158015610308573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061032c9190610770565b905060008111156103e6578773ffffffffffffffffffffffffffffffffffffffff1663a9059cbb60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b81526004016103929291906108e4565b602060405180830381600087803b1580156103ac57600080fd5b505af11580156103c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e49190610743565b505b8673ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff167f29c40793bffd84cb810179f15d1ceec72bc7f0785514c668ba36645cf99b73828888886040516104479392919061096a565b60405180910390a3819250505095945050505050565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60606000808573ffffffffffffffffffffffffffffffffffffffff163486866040516104f1929190610887565b60006040518083038185875af1925050503d806000811461052e576040519150601f19603f3d011682016040523d82523d6000602084013e610533565b606091505b509150915081610578576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056f9061094a565b60405180910390fd5b80925050509392505050565b60008135905061059381610af9565b92915050565b6000815190506105a881610b10565b92915050565b60008083601f8401126105c4576105c3610aab565b5b8235905067ffffffffffffffff8111156105e1576105e0610aa6565b5b6020830191508360018202830111156105fd576105fc610ab0565b5b9250929050565b60008135905061061381610b27565b92915050565b60008151905061062881610b27565b92915050565b60006020828403121561064457610643610aba565b5b600061065284828501610584565b91505092915050565b60008060008060006080868803121561067757610676610aba565b5b600061068588828901610584565b955050602061069688828901610584565b94505060406106a788828901610604565b935050606086013567ffffffffffffffff8111156106c8576106c7610ab5565b5b6106d4888289016105ae565b92509250509295509295909350565b6000806000604084860312156106fc576106fb610aba565b5b600061070a86828701610584565b935050602084013567ffffffffffffffff81111561072b5761072a610ab5565b5b610737868287016105ae565b92509250509250925092565b60006020828403121561075957610758610aba565b5b600061076784828501610599565b91505092915050565b60006020828403121561078657610785610aba565b5b600061079484828501610619565b91505092915050565b6107a6816109d4565b82525050565b60006107b883856109a7565b93506107c5838584610a64565b6107ce83610abf565b840190509392505050565b60006107e583856109b8565b93506107f2838584610a64565b82840190509392505050565b60006108098261099c565b61081381856109a7565b9350610823818560208601610a73565b61082c81610abf565b840191505092915050565b61084081610a1c565b82525050565b61084f81610a2e565b82525050565b6000610862600b836109c3565b915061086d82610ad0565b602082019050919050565b61088181610a12565b82525050565b60006108948284866107d9565b91508190509392505050565b60006020820190506108b5600083018461079d565b92915050565b60006040820190506108d0600083018561079d565b6108dd6020830184610846565b9392505050565b60006040820190506108f9600083018561079d565b6109066020830184610878565b9392505050565b6000602082019050818103600083015261092781846107fe565b905092915050565b60006020820190506109446000830184610837565b92915050565b6000602082019050818103600083015261096381610855565b9050919050565b600060408201905061097f6000830186610878565b81810360208301526109928184866107ac565b9050949350505050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b60006109df826109f2565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610a2782610a40565b9050919050565b6000610a3982610a12565b9050919050565b6000610a4b82610a52565b9050919050565b6000610a5d826109f2565b9050919050565b82818337600083830152505050565b60005b83811015610a91578082015181840152602081019050610a76565b83811115610aa0576000848401525b50505050565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b610b02816109d4565b8114610b0d57600080fd5b50565b610b19816109e6565b8114610b2457600080fd5b50565b610b3081610a12565b8114610b3b57600080fd5b5056fea2646970667358221220b7ca56a15d2b2ff5fa94491bdaf59465dd8a8a42b6b9b4f2c681577108e1907164736f6c63430008070033";

type GatewayConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: GatewayConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Gateway__factory extends ContractFactory {
  constructor(...args: GatewayConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Gateway> {
    return super.deploy(overrides || {}) as Promise<Gateway>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Gateway {
    return super.attach(address) as Gateway;
  }
  override connect(signer: Signer): Gateway__factory {
    return super.connect(signer) as Gateway__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GatewayInterface {
    return new utils.Interface(_abi) as GatewayInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Gateway {
    return new Contract(address, _abi, signerOrProvider) as Gateway;
  }
}
