/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  Receiver,
  ReceiverInterface,
} from "../../../contracts/prototypes/Receiver";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "string",
        name: "str",
        type: "string",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "num",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "flag",
        type: "bool",
      },
    ],
    name: "ReceivedA",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "string[]",
        name: "strs",
        type: "string[]",
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "nums",
        type: "uint256[]",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "flag",
        type: "bool",
      },
    ],
    name: "ReceivedB",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "destination",
        type: "address",
      },
    ],
    name: "ReceivedC",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "str",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "num",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "flag",
        type: "bool",
      },
    ],
    name: "receiveA",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string[]",
        name: "strs",
        type: "string[]",
      },
      {
        internalType: "uint256[]",
        name: "nums",
        type: "uint256[]",
      },
      {
        internalType: "bool",
        name: "flag",
        type: "bool",
      },
    ],
    name: "receiveB",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "destination",
        type: "address",
      },
    ],
    name: "receiveC",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610b49806100206000396000f3fe6080604052600436106100345760003560e01c806352df08b6146100395780636fa220ad14610062578063f5db6b391461007e575b600080fd5b34801561004557600080fd5b50610060600480360381019061005b9190610544565b6100a7565b005b61007c600480360381019061007791906104d5565b610179565b005b34801561008a57600080fd5b506100a560048036038101906100a0919061041d565b6101bd565b005b8173ffffffffffffffffffffffffffffffffffffffff166323b872dd3383866040518463ffffffff1660e01b81526004016100e493929190610744565b602060405180830381600087803b1580156100fe57600080fd5b505af1158015610112573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061013691906104a8565b507fe8077791e8d0f63b9e4c0b6d386cbbf6c65e1acb2a103019edba9d1cc0b329003384848460405161016c94939291906107ce565b60405180910390a1505050565b7f87d67858b5cc03bdd16a3fcc56773bd59410e946cff7193cf374402c6e8fb6ee33348585856040516101b0959493929190610813565b60405180910390a1505050565b7f463b3e5d6969d17b19e10c4ca95f5f1b6fdef8678f980af98071bd38f0d885c2338484846040516101f2949392919061077b565b60405180910390a1505050565b600061021261020d84610892565b61086d565b9050808382526020820190508285602086028201111561023557610234610aa9565b5b60005b8581101561028357813567ffffffffffffffff81111561025b5761025a610aa4565b5b80860161026889826103da565b85526020850194506020840193505050600181019050610238565b5050509392505050565b60006102a061029b846108be565b61086d565b905080838252602082019050828560208602820111156102c3576102c2610aa9565b5b60005b858110156102f357816102d98882610408565b8452602084019350602083019250506001810190506102c6565b5050509392505050565b600061031061030b846108ea565b61086d565b90508281526020810184848401111561032c5761032b610aae565b5b610337848285610a02565b509392505050565b60008135905061034e81610ace565b92915050565b600082601f83011261036957610368610aa4565b5b81356103798482602086016101ff565b91505092915050565b600082601f83011261039757610396610aa4565b5b81356103a784826020860161028d565b91505092915050565b6000813590506103bf81610ae5565b92915050565b6000815190506103d481610ae5565b92915050565b600082601f8301126103ef576103ee610aa4565b5b81356103ff8482602086016102fd565b91505092915050565b60008135905061041781610afc565b92915050565b60008060006060848603121561043657610435610ab8565b5b600084013567ffffffffffffffff81111561045457610453610ab3565b5b61046086828701610354565b935050602084013567ffffffffffffffff81111561048157610480610ab3565b5b61048d86828701610382565b925050604061049e868287016103b0565b9150509250925092565b6000602082840312156104be576104bd610ab8565b5b60006104cc848285016103c5565b91505092915050565b6000806000606084860312156104ee576104ed610ab8565b5b600084013567ffffffffffffffff81111561050c5761050b610ab3565b5b610518868287016103da565b935050602061052986828701610408565b925050604061053a868287016103b0565b9150509250925092565b60008060006060848603121561055d5761055c610ab8565b5b600061056b86828701610408565b935050602061057c8682870161033f565b925050604061058d8682870161033f565b9150509250925092565b60006105a383836106b4565b905092915050565b60006105b78383610726565b60208301905092915050565b6105cc816109ba565b82525050565b60006105dd8261093b565b6105e78185610976565b9350836020820285016105f98561091b565b8060005b8581101561063557848403895281516106168582610597565b94506106218361095c565b925060208a019950506001810190506105fd565b50829750879550505050505092915050565b600061065282610946565b61065c8185610987565b93506106678361092b565b8060005b8381101561069857815161067f88826105ab565b975061068a83610969565b92505060018101905061066b565b5085935050505092915050565b6106ae816109cc565b82525050565b60006106bf82610951565b6106c98185610998565b93506106d9818560208601610a11565b6106e281610abd565b840191505092915050565b60006106f882610951565b61070281856109a9565b9350610712818560208601610a11565b61071b81610abd565b840191505092915050565b61072f816109f8565b82525050565b61073e816109f8565b82525050565b600060608201905061075960008301866105c3565b61076660208301856105c3565b6107736040830184610735565b949350505050565b600060808201905061079060008301876105c3565b81810360208301526107a281866105d2565b905081810360408301526107b68185610647565b90506107c560608301846106a5565b95945050505050565b60006080820190506107e360008301876105c3565b6107f06020830186610735565b6107fd60408301856105c3565b61080a60608301846105c3565b95945050505050565b600060a08201905061082860008301886105c3565b6108356020830187610735565b818103604083015261084781866106ed565b90506108566060830185610735565b61086360808301846106a5565b9695505050505050565b6000610877610888565b90506108838282610a44565b919050565b6000604051905090565b600067ffffffffffffffff8211156108ad576108ac610a75565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156108d9576108d8610a75565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561090557610904610a75565b5b61090e82610abd565b9050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b60006109c5826109d8565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015610a2f578082015181840152602081019050610a14565b83811115610a3e576000848401525b50505050565b610a4d82610abd565b810181811067ffffffffffffffff82111715610a6c57610a6b610a75565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b610ad7816109ba565b8114610ae257600080fd5b50565b610aee816109cc565b8114610af957600080fd5b50565b610b05816109f8565b8114610b1057600080fd5b5056fea2646970667358221220b527761de2bd13716d222295f4916e8d7a026d48f4a81f3e2ea862cd974e15a864736f6c63430008070033";

type ReceiverConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ReceiverConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Receiver__factory extends ContractFactory {
  constructor(...args: ReceiverConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Receiver> {
    return super.deploy(overrides || {}) as Promise<Receiver>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Receiver {
    return super.attach(address) as Receiver;
  }
  override connect(signer: Signer): Receiver__factory {
    return super.connect(signer) as Receiver__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ReceiverInterface {
    return new utils.Interface(_abi) as ReceiverInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Receiver {
    return new Contract(address, _abi, signerOrProvider) as Receiver;
  }
}
