/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  TestZContract,
  TestZContractInterface,
} from "../../../../contracts/prototypes/zevm/TestZContract";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes",
        name: "origin",
        type: "bytes",
      },
      {
        indexed: false,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "chainID",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "msgSender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "string",
        name: "message",
        type: "string",
      },
    ],
    name: "ContextData",
    type: "event",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes",
            name: "origin",
            type: "bytes",
          },
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "chainID",
            type: "uint256",
          },
        ],
        internalType: "struct zContext",
        name: "context",
        type: "tuple",
      },
      {
        internalType: "address",
        name: "zrc20",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "message",
        type: "bytes",
      },
    ],
    name: "onCrossChainCall",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes",
            name: "origin",
            type: "bytes",
          },
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "chainID",
            type: "uint256",
          },
        ],
        internalType: "struct revertContext",
        name: "context",
        type: "tuple",
      },
      {
        internalType: "address",
        name: "zrc20",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "message",
        type: "bytes",
      },
    ],
    name: "onRevert",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506107b1806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806369582bee1461003b578063de43156e14610057575b600080fd5b61005560048036038101906100509190610317565b610073565b005b610071600480360381019061006c91906103bb565b6100f3565b005b6000828281019061008491906102ce565b90507fcdc8ee677dc5ebe680fb18cebda5e26ba5ea1f0ba504a47e2a9a2ecb476dc98e8680600001906100b79190610546565b8860200160208101906100ca91906102a1565b896040013533866040516100e3969594939291906104e3565b60405180910390a1505050505050565b6000828281019061010491906102ce565b90507fcdc8ee677dc5ebe680fb18cebda5e26ba5ea1f0ba504a47e2a9a2ecb476dc98e8680600001906101379190610546565b88602001602081019061014a91906102a1565b89604001353386604051610163969594939291906104e3565b60405180910390a1505050505050565b6000610186610181846105ce565b6105a9565b9050828152602081018484840111156101a2576101a161072d565b5b6101ad848285610668565b509392505050565b6000813590506101c48161074d565b92915050565b60008083601f8401126101e0576101df61070f565b5b8235905067ffffffffffffffff8111156101fd576101fc61070a565b5b60208301915083600182028301111561021957610218610723565b5b9250929050565b600082601f8301126102355761023461070f565b5b8135610245848260208601610173565b91505092915050565b60006060828403121561026457610263610719565b5b81905092915050565b60006060828403121561028357610282610719565b5b81905092915050565b60008135905061029b81610764565b92915050565b6000602082840312156102b7576102b6610737565b5b60006102c5848285016101b5565b91505092915050565b6000602082840312156102e4576102e3610737565b5b600082013567ffffffffffffffff81111561030257610301610732565b5b61030e84828501610220565b91505092915050565b60008060008060006080868803121561033357610332610737565b5b600086013567ffffffffffffffff81111561035157610350610732565b5b61035d8882890161024e565b955050602061036e888289016101b5565b945050604061037f8882890161028c565b935050606086013567ffffffffffffffff8111156103a05761039f610732565b5b6103ac888289016101ca565b92509250509295509295909350565b6000806000806000608086880312156103d7576103d6610737565b5b600086013567ffffffffffffffff8111156103f5576103f4610732565b5b6104018882890161026d565b9550506020610412888289016101b5565b94505060406104238882890161028c565b935050606086013567ffffffffffffffff81111561044457610443610732565b5b610450888289016101ca565b92509250509295509295909350565b6104688161062c565b82525050565b600061047a838561060a565b9350610487838584610668565b6104908361073c565b840190509392505050565b60006104a6826105ff565b6104b0818561061b565b93506104c0818560208601610677565b6104c98161073c565b840191505092915050565b6104dd8161065e565b82525050565b600060a08201905081810360008301526104fe81888a61046e565b905061050d602083018761045f565b61051a60408301866104d4565b610527606083018561045f565b8181036080830152610539818461049b565b9050979650505050505050565b600080833560016020038436030381126105635761056261071e565b5b80840192508235915067ffffffffffffffff82111561058557610584610714565b5b6020830192506001820236038313156105a1576105a0610728565b5b509250929050565b60006105b36105c4565b90506105bf82826106aa565b919050565b6000604051905090565b600067ffffffffffffffff8211156105e9576105e86106db565b5b6105f28261073c565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b60006106378261063e565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b8381101561069557808201518184015260208101905061067a565b838111156106a4576000848401525b50505050565b6106b38261073c565b810181811067ffffffffffffffff821117156106d2576106d16106db565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b6107568161062c565b811461076157600080fd5b50565b61076d8161065e565b811461077857600080fd5b5056fea264697066735822122066cf44b92a869772f8263906f54b9c640301bcfb59e1f9b384defb872c4de02564736f6c63430008070033";

type TestZContractConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestZContractConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestZContract__factory extends ContractFactory {
  constructor(...args: TestZContractConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TestZContract> {
    return super.deploy(overrides || {}) as Promise<TestZContract>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TestZContract {
    return super.attach(address) as TestZContract;
  }
  override connect(signer: Signer): TestZContract__factory {
    return super.connect(signer) as TestZContract__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestZContractInterface {
    return new utils.Interface(_abi) as TestZContractInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestZContract {
    return new Contract(address, _abi, signerOrProvider) as TestZContract;
  }
}
