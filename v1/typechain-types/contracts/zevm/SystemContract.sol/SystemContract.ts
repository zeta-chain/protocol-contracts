/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export type ZContextStruct = {
  origin: PromiseOrValue<BytesLike>;
  sender: PromiseOrValue<string>;
  chainID: PromiseOrValue<BigNumberish>;
};

export type ZContextStructOutput = [string, string, BigNumber] & {
  origin: string;
  sender: string;
  chainID: BigNumber;
};

export interface SystemContractInterface extends utils.Interface {
  functions: {
    "FUNGIBLE_MODULE_ADDRESS()": FunctionFragment;
    "depositAndCall((bytes,address,uint256),address,uint256,address,bytes)": FunctionFragment;
    "gasCoinZRC20ByChainId(uint256)": FunctionFragment;
    "gasPriceByChainId(uint256)": FunctionFragment;
    "gasZetaPoolByChainId(uint256)": FunctionFragment;
    "setConnectorZEVMAddress(address)": FunctionFragment;
    "setGasCoinZRC20(uint256,address)": FunctionFragment;
    "setGasPrice(uint256,uint256)": FunctionFragment;
    "setGasZetaPool(uint256,address)": FunctionFragment;
    "setWZETAContractAddress(address)": FunctionFragment;
    "uniswapv2FactoryAddress()": FunctionFragment;
    "uniswapv2PairFor(address,address,address)": FunctionFragment;
    "uniswapv2Router02Address()": FunctionFragment;
    "wZetaContractAddress()": FunctionFragment;
    "zetaConnectorZEVMAddress()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "FUNGIBLE_MODULE_ADDRESS"
      | "depositAndCall"
      | "gasCoinZRC20ByChainId"
      | "gasPriceByChainId"
      | "gasZetaPoolByChainId"
      | "setConnectorZEVMAddress"
      | "setGasCoinZRC20"
      | "setGasPrice"
      | "setGasZetaPool"
      | "setWZETAContractAddress"
      | "uniswapv2FactoryAddress"
      | "uniswapv2PairFor"
      | "uniswapv2Router02Address"
      | "wZetaContractAddress"
      | "zetaConnectorZEVMAddress"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "FUNGIBLE_MODULE_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositAndCall",
    values: [
      ZContextStruct,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "gasCoinZRC20ByChainId",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "gasPriceByChainId",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "gasZetaPoolByChainId",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setConnectorZEVMAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setGasCoinZRC20",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setGasPrice",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setGasZetaPool",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setWZETAContractAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapv2FactoryAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapv2PairFor",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapv2Router02Address",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "wZetaContractAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "zetaConnectorZEVMAddress",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "FUNGIBLE_MODULE_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gasCoinZRC20ByChainId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gasPriceByChainId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gasZetaPoolByChainId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setConnectorZEVMAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGasCoinZRC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGasPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGasZetaPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWZETAContractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapv2FactoryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapv2PairFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapv2Router02Address",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wZetaContractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "zetaConnectorZEVMAddress",
    data: BytesLike
  ): Result;

  events: {
    "SetConnectorZEVM(address)": EventFragment;
    "SetGasCoin(uint256,address)": EventFragment;
    "SetGasPrice(uint256,uint256)": EventFragment;
    "SetGasZetaPool(uint256,address)": EventFragment;
    "SetWZeta(address)": EventFragment;
    "SystemContractDeployed()": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "SetConnectorZEVM"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetGasCoin"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetGasPrice"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetGasZetaPool"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetWZeta"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SystemContractDeployed"): EventFragment;
}

export interface SetConnectorZEVMEventObject {
  arg0: string;
}
export type SetConnectorZEVMEvent = TypedEvent<
  [string],
  SetConnectorZEVMEventObject
>;

export type SetConnectorZEVMEventFilter =
  TypedEventFilter<SetConnectorZEVMEvent>;

export interface SetGasCoinEventObject {
  arg0: BigNumber;
  arg1: string;
}
export type SetGasCoinEvent = TypedEvent<
  [BigNumber, string],
  SetGasCoinEventObject
>;

export type SetGasCoinEventFilter = TypedEventFilter<SetGasCoinEvent>;

export interface SetGasPriceEventObject {
  arg0: BigNumber;
  arg1: BigNumber;
}
export type SetGasPriceEvent = TypedEvent<
  [BigNumber, BigNumber],
  SetGasPriceEventObject
>;

export type SetGasPriceEventFilter = TypedEventFilter<SetGasPriceEvent>;

export interface SetGasZetaPoolEventObject {
  arg0: BigNumber;
  arg1: string;
}
export type SetGasZetaPoolEvent = TypedEvent<
  [BigNumber, string],
  SetGasZetaPoolEventObject
>;

export type SetGasZetaPoolEventFilter = TypedEventFilter<SetGasZetaPoolEvent>;

export interface SetWZetaEventObject {
  arg0: string;
}
export type SetWZetaEvent = TypedEvent<[string], SetWZetaEventObject>;

export type SetWZetaEventFilter = TypedEventFilter<SetWZetaEvent>;

export interface SystemContractDeployedEventObject {}
export type SystemContractDeployedEvent = TypedEvent<
  [],
  SystemContractDeployedEventObject
>;

export type SystemContractDeployedEventFilter =
  TypedEventFilter<SystemContractDeployedEvent>;

export interface SystemContract extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SystemContractInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    FUNGIBLE_MODULE_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    depositAndCall(
      context: ZContextStruct,
      zrc20: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    gasCoinZRC20ByChainId(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    gasPriceByChainId(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    gasZetaPoolByChainId(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    setConnectorZEVMAddress(
      addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setGasCoinZRC20(
      chainID: PromiseOrValue<BigNumberish>,
      zrc20: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setGasPrice(
      chainID: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setGasZetaPool(
      chainID: PromiseOrValue<BigNumberish>,
      erc20: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setWZETAContractAddress(
      addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    uniswapv2FactoryAddress(overrides?: CallOverrides): Promise<[string]>;

    uniswapv2PairFor(
      factory: PromiseOrValue<string>,
      tokenA: PromiseOrValue<string>,
      tokenB: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string] & { pair: string }>;

    uniswapv2Router02Address(overrides?: CallOverrides): Promise<[string]>;

    wZetaContractAddress(overrides?: CallOverrides): Promise<[string]>;

    zetaConnectorZEVMAddress(overrides?: CallOverrides): Promise<[string]>;
  };

  FUNGIBLE_MODULE_ADDRESS(overrides?: CallOverrides): Promise<string>;

  depositAndCall(
    context: ZContextStruct,
    zrc20: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    target: PromiseOrValue<string>,
    message: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  gasCoinZRC20ByChainId(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  gasPriceByChainId(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  gasZetaPoolByChainId(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  setConnectorZEVMAddress(
    addr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setGasCoinZRC20(
    chainID: PromiseOrValue<BigNumberish>,
    zrc20: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setGasPrice(
    chainID: PromiseOrValue<BigNumberish>,
    price: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setGasZetaPool(
    chainID: PromiseOrValue<BigNumberish>,
    erc20: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setWZETAContractAddress(
    addr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  uniswapv2FactoryAddress(overrides?: CallOverrides): Promise<string>;

  uniswapv2PairFor(
    factory: PromiseOrValue<string>,
    tokenA: PromiseOrValue<string>,
    tokenB: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  uniswapv2Router02Address(overrides?: CallOverrides): Promise<string>;

  wZetaContractAddress(overrides?: CallOverrides): Promise<string>;

  zetaConnectorZEVMAddress(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    FUNGIBLE_MODULE_ADDRESS(overrides?: CallOverrides): Promise<string>;

    depositAndCall(
      context: ZContextStruct,
      zrc20: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      message: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    gasCoinZRC20ByChainId(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    gasPriceByChainId(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gasZetaPoolByChainId(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    setConnectorZEVMAddress(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setGasCoinZRC20(
      chainID: PromiseOrValue<BigNumberish>,
      zrc20: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setGasPrice(
      chainID: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setGasZetaPool(
      chainID: PromiseOrValue<BigNumberish>,
      erc20: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setWZETAContractAddress(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    uniswapv2FactoryAddress(overrides?: CallOverrides): Promise<string>;

    uniswapv2PairFor(
      factory: PromiseOrValue<string>,
      tokenA: PromiseOrValue<string>,
      tokenB: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    uniswapv2Router02Address(overrides?: CallOverrides): Promise<string>;

    wZetaContractAddress(overrides?: CallOverrides): Promise<string>;

    zetaConnectorZEVMAddress(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "SetConnectorZEVM(address)"(arg0?: null): SetConnectorZEVMEventFilter;
    SetConnectorZEVM(arg0?: null): SetConnectorZEVMEventFilter;

    "SetGasCoin(uint256,address)"(
      arg0?: null,
      arg1?: null
    ): SetGasCoinEventFilter;
    SetGasCoin(arg0?: null, arg1?: null): SetGasCoinEventFilter;

    "SetGasPrice(uint256,uint256)"(
      arg0?: null,
      arg1?: null
    ): SetGasPriceEventFilter;
    SetGasPrice(arg0?: null, arg1?: null): SetGasPriceEventFilter;

    "SetGasZetaPool(uint256,address)"(
      arg0?: null,
      arg1?: null
    ): SetGasZetaPoolEventFilter;
    SetGasZetaPool(arg0?: null, arg1?: null): SetGasZetaPoolEventFilter;

    "SetWZeta(address)"(arg0?: null): SetWZetaEventFilter;
    SetWZeta(arg0?: null): SetWZetaEventFilter;

    "SystemContractDeployed()"(): SystemContractDeployedEventFilter;
    SystemContractDeployed(): SystemContractDeployedEventFilter;
  };

  estimateGas: {
    FUNGIBLE_MODULE_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    depositAndCall(
      context: ZContextStruct,
      zrc20: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    gasCoinZRC20ByChainId(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gasPriceByChainId(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gasZetaPoolByChainId(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setConnectorZEVMAddress(
      addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setGasCoinZRC20(
      chainID: PromiseOrValue<BigNumberish>,
      zrc20: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setGasPrice(
      chainID: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setGasZetaPool(
      chainID: PromiseOrValue<BigNumberish>,
      erc20: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setWZETAContractAddress(
      addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    uniswapv2FactoryAddress(overrides?: CallOverrides): Promise<BigNumber>;

    uniswapv2PairFor(
      factory: PromiseOrValue<string>,
      tokenA: PromiseOrValue<string>,
      tokenB: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    uniswapv2Router02Address(overrides?: CallOverrides): Promise<BigNumber>;

    wZetaContractAddress(overrides?: CallOverrides): Promise<BigNumber>;

    zetaConnectorZEVMAddress(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    FUNGIBLE_MODULE_ADDRESS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depositAndCall(
      context: ZContextStruct,
      zrc20: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    gasCoinZRC20ByChainId(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gasPriceByChainId(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gasZetaPoolByChainId(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setConnectorZEVMAddress(
      addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setGasCoinZRC20(
      chainID: PromiseOrValue<BigNumberish>,
      zrc20: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setGasPrice(
      chainID: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setGasZetaPool(
      chainID: PromiseOrValue<BigNumberish>,
      erc20: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setWZETAContractAddress(
      addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    uniswapv2FactoryAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    uniswapv2PairFor(
      factory: PromiseOrValue<string>,
      tokenA: PromiseOrValue<string>,
      tokenB: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    uniswapv2Router02Address(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    wZetaContractAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    zetaConnectorZEVMAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
