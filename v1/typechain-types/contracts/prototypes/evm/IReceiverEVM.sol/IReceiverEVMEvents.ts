/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumber, Signer, utils } from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export interface IReceiverEVMEventsInterface extends utils.Interface {
  functions: {};

  events: {
    "ReceivedERC20(address,uint256,address,address)": EventFragment;
    "ReceivedNoParams(address)": EventFragment;
    "ReceivedNonPayable(address,string[],uint256[],bool)": EventFragment;
    "ReceivedPayable(address,uint256,string,uint256,bool)": EventFragment;
    "ReceivedRevert(address,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ReceivedERC20"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReceivedNoParams"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReceivedNonPayable"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReceivedPayable"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReceivedRevert"): EventFragment;
}

export interface ReceivedERC20EventObject {
  sender: string;
  amount: BigNumber;
  token: string;
  destination: string;
}
export type ReceivedERC20Event = TypedEvent<
  [string, BigNumber, string, string],
  ReceivedERC20EventObject
>;

export type ReceivedERC20EventFilter = TypedEventFilter<ReceivedERC20Event>;

export interface ReceivedNoParamsEventObject {
  sender: string;
}
export type ReceivedNoParamsEvent = TypedEvent<
  [string],
  ReceivedNoParamsEventObject
>;

export type ReceivedNoParamsEventFilter =
  TypedEventFilter<ReceivedNoParamsEvent>;

export interface ReceivedNonPayableEventObject {
  sender: string;
  strs: string[];
  nums: BigNumber[];
  flag: boolean;
}
export type ReceivedNonPayableEvent = TypedEvent<
  [string, string[], BigNumber[], boolean],
  ReceivedNonPayableEventObject
>;

export type ReceivedNonPayableEventFilter =
  TypedEventFilter<ReceivedNonPayableEvent>;

export interface ReceivedPayableEventObject {
  sender: string;
  value: BigNumber;
  str: string;
  num: BigNumber;
  flag: boolean;
}
export type ReceivedPayableEvent = TypedEvent<
  [string, BigNumber, string, BigNumber, boolean],
  ReceivedPayableEventObject
>;

export type ReceivedPayableEventFilter = TypedEventFilter<ReceivedPayableEvent>;

export interface ReceivedRevertEventObject {
  sender: string;
  data: string;
}
export type ReceivedRevertEvent = TypedEvent<
  [string, string],
  ReceivedRevertEventObject
>;

export type ReceivedRevertEventFilter = TypedEventFilter<ReceivedRevertEvent>;

export interface IReceiverEVMEvents extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IReceiverEVMEventsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "ReceivedERC20(address,uint256,address,address)"(
      sender?: null,
      amount?: null,
      token?: null,
      destination?: null
    ): ReceivedERC20EventFilter;
    ReceivedERC20(
      sender?: null,
      amount?: null,
      token?: null,
      destination?: null
    ): ReceivedERC20EventFilter;

    "ReceivedNoParams(address)"(sender?: null): ReceivedNoParamsEventFilter;
    ReceivedNoParams(sender?: null): ReceivedNoParamsEventFilter;

    "ReceivedNonPayable(address,string[],uint256[],bool)"(
      sender?: null,
      strs?: null,
      nums?: null,
      flag?: null
    ): ReceivedNonPayableEventFilter;
    ReceivedNonPayable(
      sender?: null,
      strs?: null,
      nums?: null,
      flag?: null
    ): ReceivedNonPayableEventFilter;

    "ReceivedPayable(address,uint256,string,uint256,bool)"(
      sender?: null,
      value?: null,
      str?: null,
      num?: null,
      flag?: null
    ): ReceivedPayableEventFilter;
    ReceivedPayable(
      sender?: null,
      value?: null,
      str?: null,
      num?: null,
      flag?: null
    ): ReceivedPayableEventFilter;

    "ReceivedRevert(address,bytes)"(
      sender?: null,
      data?: null
    ): ReceivedRevertEventFilter;
    ReceivedRevert(sender?: null, data?: null): ReceivedRevertEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
