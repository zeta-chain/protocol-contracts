/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface ICoreRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "chainActivation"
      | "getActiveChains"
      | "getChainMetadata"
      | "getContractConfiguration"
      | "getContractInfo"
      | "getZRC20AddressByForeignAsset"
      | "getZRC20TokenInfo"
      | "registerContract"
      | "registerZRC20Token"
      | "setContractActive"
      | "updateChainMetadata"
      | "updateContractConfiguration"
      | "updateZRC20Token"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ChainStatusChanged"
      | "ContractRegistered"
      | "ContractStatusChanged"
      | "NewChainMetadata"
      | "NewContractConfiguration"
      | "UpdatedRegistryManager"
      | "ZRC20TokenRegistered"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "chainActivation",
    values: [BigNumberish, BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveChains",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getChainMetadata",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getContractConfiguration",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getContractInfo",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getZRC20AddressByForeignAsset",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getZRC20TokenInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerContract",
    values: [BigNumberish, AddressLike, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerZRC20Token",
    values: [AddressLike, string, BigNumberish, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setContractActive",
    values: [BigNumberish, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updateChainMetadata",
    values: [BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateContractConfiguration",
    values: [BigNumberish, string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateZRC20Token",
    values: [AddressLike, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "chainActivation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveChains",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getChainMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractConfiguration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getZRC20AddressByForeignAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getZRC20TokenInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerZRC20Token",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setContractActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateChainMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateContractConfiguration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateZRC20Token",
    data: BytesLike
  ): Result;
}

export namespace ChainStatusChangedEvent {
  export type InputTuple = [chainId: BigNumberish];
  export type OutputTuple = [chainId: bigint];
  export interface OutputObject {
    chainId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ContractRegisteredEvent {
  export type InputTuple = [
    chainId: BigNumberish,
    contractType: string,
    addressString: string
  ];
  export type OutputTuple = [
    chainId: bigint,
    contractType: string,
    addressString: string
  ];
  export interface OutputObject {
    chainId: bigint;
    contractType: string;
    addressString: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ContractStatusChangedEvent {
  export type InputTuple = [addressString: string];
  export type OutputTuple = [addressString: string];
  export interface OutputObject {
    addressString: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewChainMetadataEvent {
  export type InputTuple = [
    chainId: BigNumberish,
    key: string,
    value: BytesLike
  ];
  export type OutputTuple = [chainId: bigint, key: string, value: string];
  export interface OutputObject {
    chainId: bigint;
    key: string;
    value: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewContractConfigurationEvent {
  export type InputTuple = [
    chainId: BigNumberish,
    contractType: string,
    key: string,
    value: BytesLike
  ];
  export type OutputTuple = [
    chainId: bigint,
    contractType: string,
    key: string,
    value: string
  ];
  export interface OutputObject {
    chainId: bigint;
    contractType: string;
    key: string;
    value: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdatedRegistryManagerEvent {
  export type InputTuple = [
    oldRegistryManager: AddressLike,
    newRegistryManager: AddressLike
  ];
  export type OutputTuple = [
    oldRegistryManager: string,
    newRegistryManager: string
  ];
  export interface OutputObject {
    oldRegistryManager: string;
    newRegistryManager: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ZRC20TokenRegisteredEvent {
  export type InputTuple = [
    originAddress: string,
    address_: AddressLike,
    decimals: BigNumberish,
    originChainId: BigNumberish,
    symbol: string
  ];
  export type OutputTuple = [
    originAddress: string,
    address_: string,
    decimals: bigint,
    originChainId: bigint,
    symbol: string
  ];
  export interface OutputObject {
    originAddress: string;
    address_: string;
    decimals: bigint;
    originChainId: bigint;
    symbol: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ICoreRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): ICoreRegistry;
  waitForDeployment(): Promise<this>;

  interface: ICoreRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  chainActivation: TypedContractMethod<
    [chainId: BigNumberish, registry: BytesLike, activation: boolean],
    [void],
    "nonpayable"
  >;

  getActiveChains: TypedContractMethod<[], [bigint[]], "view">;

  getChainMetadata: TypedContractMethod<
    [chainId: BigNumberish, key: string],
    [string],
    "view"
  >;

  getContractConfiguration: TypedContractMethod<
    [chainId: BigNumberish, contractType: string, key: string],
    [string],
    "view"
  >;

  getContractInfo: TypedContractMethod<
    [chainId: BigNumberish, contractType: string],
    [[boolean, string] & { active: boolean; address_: string }],
    "view"
  >;

  getZRC20AddressByForeignAsset: TypedContractMethod<
    [originChainId: BigNumberish, originAddress: string],
    [string],
    "view"
  >;

  getZRC20TokenInfo: TypedContractMethod<
    [address_: AddressLike],
    [
      [boolean, string, bigint, string, string, bigint] & {
        active: boolean;
        symbol: string;
        originChainId: bigint;
        originAddress: string;
        coinType: string;
        decimals: bigint;
      }
    ],
    "view"
  >;

  registerContract: TypedContractMethod<
    [
      chainId: BigNumberish,
      address_: AddressLike,
      contractType: string,
      addressString: string
    ],
    [void],
    "nonpayable"
  >;

  registerZRC20Token: TypedContractMethod<
    [
      address_: AddressLike,
      symbol: string,
      originChainId: BigNumberish,
      originAddress: string,
      coinType: string,
      decimals: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  setContractActive: TypedContractMethod<
    [chainId: BigNumberish, contractType: string, active: boolean],
    [void],
    "nonpayable"
  >;

  updateChainMetadata: TypedContractMethod<
    [chainId: BigNumberish, key: string, value: BytesLike],
    [void],
    "nonpayable"
  >;

  updateContractConfiguration: TypedContractMethod<
    [
      chainId: BigNumberish,
      contractType: string,
      key: string,
      value: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  updateZRC20Token: TypedContractMethod<
    [address_: AddressLike, active: boolean],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "chainActivation"
  ): TypedContractMethod<
    [chainId: BigNumberish, registry: BytesLike, activation: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getActiveChains"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getChainMetadata"
  ): TypedContractMethod<
    [chainId: BigNumberish, key: string],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getContractConfiguration"
  ): TypedContractMethod<
    [chainId: BigNumberish, contractType: string, key: string],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getContractInfo"
  ): TypedContractMethod<
    [chainId: BigNumberish, contractType: string],
    [[boolean, string] & { active: boolean; address_: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getZRC20AddressByForeignAsset"
  ): TypedContractMethod<
    [originChainId: BigNumberish, originAddress: string],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getZRC20TokenInfo"
  ): TypedContractMethod<
    [address_: AddressLike],
    [
      [boolean, string, bigint, string, string, bigint] & {
        active: boolean;
        symbol: string;
        originChainId: bigint;
        originAddress: string;
        coinType: string;
        decimals: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "registerContract"
  ): TypedContractMethod<
    [
      chainId: BigNumberish,
      address_: AddressLike,
      contractType: string,
      addressString: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerZRC20Token"
  ): TypedContractMethod<
    [
      address_: AddressLike,
      symbol: string,
      originChainId: BigNumberish,
      originAddress: string,
      coinType: string,
      decimals: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setContractActive"
  ): TypedContractMethod<
    [chainId: BigNumberish, contractType: string, active: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateChainMetadata"
  ): TypedContractMethod<
    [chainId: BigNumberish, key: string, value: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateContractConfiguration"
  ): TypedContractMethod<
    [
      chainId: BigNumberish,
      contractType: string,
      key: string,
      value: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateZRC20Token"
  ): TypedContractMethod<
    [address_: AddressLike, active: boolean],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ChainStatusChanged"
  ): TypedContractEvent<
    ChainStatusChangedEvent.InputTuple,
    ChainStatusChangedEvent.OutputTuple,
    ChainStatusChangedEvent.OutputObject
  >;
  getEvent(
    key: "ContractRegistered"
  ): TypedContractEvent<
    ContractRegisteredEvent.InputTuple,
    ContractRegisteredEvent.OutputTuple,
    ContractRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "ContractStatusChanged"
  ): TypedContractEvent<
    ContractStatusChangedEvent.InputTuple,
    ContractStatusChangedEvent.OutputTuple,
    ContractStatusChangedEvent.OutputObject
  >;
  getEvent(
    key: "NewChainMetadata"
  ): TypedContractEvent<
    NewChainMetadataEvent.InputTuple,
    NewChainMetadataEvent.OutputTuple,
    NewChainMetadataEvent.OutputObject
  >;
  getEvent(
    key: "NewContractConfiguration"
  ): TypedContractEvent<
    NewContractConfigurationEvent.InputTuple,
    NewContractConfigurationEvent.OutputTuple,
    NewContractConfigurationEvent.OutputObject
  >;
  getEvent(
    key: "UpdatedRegistryManager"
  ): TypedContractEvent<
    UpdatedRegistryManagerEvent.InputTuple,
    UpdatedRegistryManagerEvent.OutputTuple,
    UpdatedRegistryManagerEvent.OutputObject
  >;
  getEvent(
    key: "ZRC20TokenRegistered"
  ): TypedContractEvent<
    ZRC20TokenRegisteredEvent.InputTuple,
    ZRC20TokenRegisteredEvent.OutputTuple,
    ZRC20TokenRegisteredEvent.OutputObject
  >;

  filters: {
    "ChainStatusChanged(uint256)": TypedContractEvent<
      ChainStatusChangedEvent.InputTuple,
      ChainStatusChangedEvent.OutputTuple,
      ChainStatusChangedEvent.OutputObject
    >;
    ChainStatusChanged: TypedContractEvent<
      ChainStatusChangedEvent.InputTuple,
      ChainStatusChangedEvent.OutputTuple,
      ChainStatusChangedEvent.OutputObject
    >;

    "ContractRegistered(uint256,string,string)": TypedContractEvent<
      ContractRegisteredEvent.InputTuple,
      ContractRegisteredEvent.OutputTuple,
      ContractRegisteredEvent.OutputObject
    >;
    ContractRegistered: TypedContractEvent<
      ContractRegisteredEvent.InputTuple,
      ContractRegisteredEvent.OutputTuple,
      ContractRegisteredEvent.OutputObject
    >;

    "ContractStatusChanged(string)": TypedContractEvent<
      ContractStatusChangedEvent.InputTuple,
      ContractStatusChangedEvent.OutputTuple,
      ContractStatusChangedEvent.OutputObject
    >;
    ContractStatusChanged: TypedContractEvent<
      ContractStatusChangedEvent.InputTuple,
      ContractStatusChangedEvent.OutputTuple,
      ContractStatusChangedEvent.OutputObject
    >;

    "NewChainMetadata(uint256,string,bytes)": TypedContractEvent<
      NewChainMetadataEvent.InputTuple,
      NewChainMetadataEvent.OutputTuple,
      NewChainMetadataEvent.OutputObject
    >;
    NewChainMetadata: TypedContractEvent<
      NewChainMetadataEvent.InputTuple,
      NewChainMetadataEvent.OutputTuple,
      NewChainMetadataEvent.OutputObject
    >;

    "NewContractConfiguration(uint256,string,string,bytes)": TypedContractEvent<
      NewContractConfigurationEvent.InputTuple,
      NewContractConfigurationEvent.OutputTuple,
      NewContractConfigurationEvent.OutputObject
    >;
    NewContractConfiguration: TypedContractEvent<
      NewContractConfigurationEvent.InputTuple,
      NewContractConfigurationEvent.OutputTuple,
      NewContractConfigurationEvent.OutputObject
    >;

    "UpdatedRegistryManager(address,address)": TypedContractEvent<
      UpdatedRegistryManagerEvent.InputTuple,
      UpdatedRegistryManagerEvent.OutputTuple,
      UpdatedRegistryManagerEvent.OutputObject
    >;
    UpdatedRegistryManager: TypedContractEvent<
      UpdatedRegistryManagerEvent.InputTuple,
      UpdatedRegistryManagerEvent.OutputTuple,
      UpdatedRegistryManagerEvent.OutputObject
    >;

    "ZRC20TokenRegistered(string,address,uint8,uint256,string)": TypedContractEvent<
      ZRC20TokenRegisteredEvent.InputTuple,
      ZRC20TokenRegisteredEvent.OutputTuple,
      ZRC20TokenRegisteredEvent.OutputObject
    >;
    ZRC20TokenRegistered: TypedContractEvent<
      ZRC20TokenRegisteredEvent.InputTuple,
      ZRC20TokenRegisteredEvent.OutputTuple,
      ZRC20TokenRegisteredEvent.OutputObject
    >;
  };
}
