/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
} from "../common";

export interface ICoreRegistryEventsInterface extends Interface {
  getEvent(
    nameOrSignatureOrTopic:
      | "ChainStatusChanged"
      | "ContractRegistered"
      | "ContractStatusChanged"
      | "NewChainMetadata"
      | "NewContractConfiguration"
      | "ZRC20TokenRegistered"
      | "ZRC20TokenUpdated"
  ): EventFragment;
}

export namespace ChainStatusChangedEvent {
  export type InputTuple = [chainId: BigNumberish];
  export type OutputTuple = [chainId: bigint];
  export interface OutputObject {
    chainId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ContractRegisteredEvent {
  export type InputTuple = [
    chainId: BigNumberish,
    contractType: string,
    addressString: string
  ];
  export type OutputTuple = [
    chainId: bigint,
    contractType: string,
    addressString: string
  ];
  export interface OutputObject {
    chainId: bigint;
    contractType: string;
    addressString: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ContractStatusChangedEvent {
  export type InputTuple = [addressString: string];
  export type OutputTuple = [addressString: string];
  export interface OutputObject {
    addressString: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewChainMetadataEvent {
  export type InputTuple = [
    chainId: BigNumberish,
    key: string,
    value: BytesLike
  ];
  export type OutputTuple = [chainId: bigint, key: string, value: string];
  export interface OutputObject {
    chainId: bigint;
    key: string;
    value: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewContractConfigurationEvent {
  export type InputTuple = [
    chainId: BigNumberish,
    contractType: string,
    key: string,
    value: BytesLike
  ];
  export type OutputTuple = [
    chainId: bigint,
    contractType: string,
    key: string,
    value: string
  ];
  export interface OutputObject {
    chainId: bigint;
    contractType: string;
    key: string;
    value: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ZRC20TokenRegisteredEvent {
  export type InputTuple = [
    originAddress: string,
    address_: AddressLike,
    decimals: BigNumberish,
    originChainId: BigNumberish,
    symbol: string
  ];
  export type OutputTuple = [
    originAddress: string,
    address_: string,
    decimals: bigint,
    originChainId: bigint,
    symbol: string
  ];
  export interface OutputObject {
    originAddress: string;
    address_: string;
    decimals: bigint;
    originChainId: bigint;
    symbol: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ZRC20TokenUpdatedEvent {
  export type InputTuple = [address_: AddressLike, active: boolean];
  export type OutputTuple = [address_: string, active: boolean];
  export interface OutputObject {
    address_: string;
    active: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ICoreRegistryEvents extends BaseContract {
  connect(runner?: ContractRunner | null): ICoreRegistryEvents;
  waitForDeployment(): Promise<this>;

  interface: ICoreRegistryEventsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getEvent(
    key: "ChainStatusChanged"
  ): TypedContractEvent<
    ChainStatusChangedEvent.InputTuple,
    ChainStatusChangedEvent.OutputTuple,
    ChainStatusChangedEvent.OutputObject
  >;
  getEvent(
    key: "ContractRegistered"
  ): TypedContractEvent<
    ContractRegisteredEvent.InputTuple,
    ContractRegisteredEvent.OutputTuple,
    ContractRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "ContractStatusChanged"
  ): TypedContractEvent<
    ContractStatusChangedEvent.InputTuple,
    ContractStatusChangedEvent.OutputTuple,
    ContractStatusChangedEvent.OutputObject
  >;
  getEvent(
    key: "NewChainMetadata"
  ): TypedContractEvent<
    NewChainMetadataEvent.InputTuple,
    NewChainMetadataEvent.OutputTuple,
    NewChainMetadataEvent.OutputObject
  >;
  getEvent(
    key: "NewContractConfiguration"
  ): TypedContractEvent<
    NewContractConfigurationEvent.InputTuple,
    NewContractConfigurationEvent.OutputTuple,
    NewContractConfigurationEvent.OutputObject
  >;
  getEvent(
    key: "ZRC20TokenRegistered"
  ): TypedContractEvent<
    ZRC20TokenRegisteredEvent.InputTuple,
    ZRC20TokenRegisteredEvent.OutputTuple,
    ZRC20TokenRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "ZRC20TokenUpdated"
  ): TypedContractEvent<
    ZRC20TokenUpdatedEvent.InputTuple,
    ZRC20TokenUpdatedEvent.OutputTuple,
    ZRC20TokenUpdatedEvent.OutputObject
  >;

  filters: {
    "ChainStatusChanged(uint256)": TypedContractEvent<
      ChainStatusChangedEvent.InputTuple,
      ChainStatusChangedEvent.OutputTuple,
      ChainStatusChangedEvent.OutputObject
    >;
    ChainStatusChanged: TypedContractEvent<
      ChainStatusChangedEvent.InputTuple,
      ChainStatusChangedEvent.OutputTuple,
      ChainStatusChangedEvent.OutputObject
    >;

    "ContractRegistered(uint256,string,string)": TypedContractEvent<
      ContractRegisteredEvent.InputTuple,
      ContractRegisteredEvent.OutputTuple,
      ContractRegisteredEvent.OutputObject
    >;
    ContractRegistered: TypedContractEvent<
      ContractRegisteredEvent.InputTuple,
      ContractRegisteredEvent.OutputTuple,
      ContractRegisteredEvent.OutputObject
    >;

    "ContractStatusChanged(string)": TypedContractEvent<
      ContractStatusChangedEvent.InputTuple,
      ContractStatusChangedEvent.OutputTuple,
      ContractStatusChangedEvent.OutputObject
    >;
    ContractStatusChanged: TypedContractEvent<
      ContractStatusChangedEvent.InputTuple,
      ContractStatusChangedEvent.OutputTuple,
      ContractStatusChangedEvent.OutputObject
    >;

    "NewChainMetadata(uint256,string,bytes)": TypedContractEvent<
      NewChainMetadataEvent.InputTuple,
      NewChainMetadataEvent.OutputTuple,
      NewChainMetadataEvent.OutputObject
    >;
    NewChainMetadata: TypedContractEvent<
      NewChainMetadataEvent.InputTuple,
      NewChainMetadataEvent.OutputTuple,
      NewChainMetadataEvent.OutputObject
    >;

    "NewContractConfiguration(uint256,string,string,bytes)": TypedContractEvent<
      NewContractConfigurationEvent.InputTuple,
      NewContractConfigurationEvent.OutputTuple,
      NewContractConfigurationEvent.OutputObject
    >;
    NewContractConfiguration: TypedContractEvent<
      NewContractConfigurationEvent.InputTuple,
      NewContractConfigurationEvent.OutputTuple,
      NewContractConfigurationEvent.OutputObject
    >;

    "ZRC20TokenRegistered(string,address,uint8,uint256,string)": TypedContractEvent<
      ZRC20TokenRegisteredEvent.InputTuple,
      ZRC20TokenRegisteredEvent.OutputTuple,
      ZRC20TokenRegisteredEvent.OutputObject
    >;
    ZRC20TokenRegistered: TypedContractEvent<
      ZRC20TokenRegisteredEvent.InputTuple,
      ZRC20TokenRegisteredEvent.OutputTuple,
      ZRC20TokenRegisteredEvent.OutputObject
    >;

    "ZRC20TokenUpdated(address,bool)": TypedContractEvent<
      ZRC20TokenUpdatedEvent.InputTuple,
      ZRC20TokenUpdatedEvent.OutputTuple,
      ZRC20TokenUpdatedEvent.OutputObject
    >;
    ZRC20TokenUpdated: TypedContractEvent<
      ZRC20TokenUpdatedEvent.InputTuple,
      ZRC20TokenUpdatedEvent.OutputTuple,
      ZRC20TokenUpdatedEvent.OutputObject
    >;
  };
}
