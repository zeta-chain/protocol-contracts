/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface SystemContractMockInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "gasCoinZRC20ByChainId"
      | "gasPriceByChainId"
      | "gasZetaPoolByChainId"
      | "onCrossChainCall"
      | "setGasCoinZRC20"
      | "setGasPrice"
      | "setWZETAContractAddress"
      | "uniswapv2FactoryAddress"
      | "uniswapv2PairFor"
      | "uniswapv2Router02Address"
      | "wZetaContractAddress"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "SetGasCoin"
      | "SetGasPrice"
      | "SetGasZetaPool"
      | "SetWZeta"
      | "SystemContractDeployed"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "gasCoinZRC20ByChainId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "gasPriceByChainId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "gasZetaPoolByChainId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "onCrossChainCall",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setGasCoinZRC20",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setGasPrice",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setWZETAContractAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapv2FactoryAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapv2PairFor",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapv2Router02Address",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "wZetaContractAddress",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "gasCoinZRC20ByChainId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gasPriceByChainId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gasZetaPoolByChainId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onCrossChainCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGasCoinZRC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGasPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWZETAContractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapv2FactoryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapv2PairFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapv2Router02Address",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wZetaContractAddress",
    data: BytesLike
  ): Result;
}

export namespace SetGasCoinEvent {
  export type InputTuple = [arg0: BigNumberish, arg1: AddressLike];
  export type OutputTuple = [arg0: bigint, arg1: string];
  export interface OutputObject {
    arg0: bigint;
    arg1: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetGasPriceEvent {
  export type InputTuple = [arg0: BigNumberish, arg1: BigNumberish];
  export type OutputTuple = [arg0: bigint, arg1: bigint];
  export interface OutputObject {
    arg0: bigint;
    arg1: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetGasZetaPoolEvent {
  export type InputTuple = [arg0: BigNumberish, arg1: AddressLike];
  export type OutputTuple = [arg0: bigint, arg1: string];
  export interface OutputObject {
    arg0: bigint;
    arg1: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetWZetaEvent {
  export type InputTuple = [arg0: AddressLike];
  export type OutputTuple = [arg0: string];
  export interface OutputObject {
    arg0: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SystemContractDeployedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SystemContractMock extends BaseContract {
  connect(runner?: ContractRunner | null): SystemContractMock;
  waitForDeployment(): Promise<this>;

  interface: SystemContractMockInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  gasCoinZRC20ByChainId: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  gasPriceByChainId: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  gasZetaPoolByChainId: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  onCrossChainCall: TypedContractMethod<
    [
      target: AddressLike,
      zrc20: AddressLike,
      amount: BigNumberish,
      message: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  setGasCoinZRC20: TypedContractMethod<
    [chainID: BigNumberish, zrc20: AddressLike],
    [void],
    "nonpayable"
  >;

  setGasPrice: TypedContractMethod<
    [chainID: BigNumberish, price: BigNumberish],
    [void],
    "nonpayable"
  >;

  setWZETAContractAddress: TypedContractMethod<
    [addr: AddressLike],
    [void],
    "nonpayable"
  >;

  uniswapv2FactoryAddress: TypedContractMethod<[], [string], "view">;

  uniswapv2PairFor: TypedContractMethod<
    [factory: AddressLike, tokenA: AddressLike, tokenB: AddressLike],
    [string],
    "view"
  >;

  uniswapv2Router02Address: TypedContractMethod<[], [string], "view">;

  wZetaContractAddress: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "gasCoinZRC20ByChainId"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "gasPriceByChainId"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "gasZetaPoolByChainId"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "onCrossChainCall"
  ): TypedContractMethod<
    [
      target: AddressLike,
      zrc20: AddressLike,
      amount: BigNumberish,
      message: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setGasCoinZRC20"
  ): TypedContractMethod<
    [chainID: BigNumberish, zrc20: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setGasPrice"
  ): TypedContractMethod<
    [chainID: BigNumberish, price: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setWZETAContractAddress"
  ): TypedContractMethod<[addr: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "uniswapv2FactoryAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "uniswapv2PairFor"
  ): TypedContractMethod<
    [factory: AddressLike, tokenA: AddressLike, tokenB: AddressLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "uniswapv2Router02Address"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "wZetaContractAddress"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "SetGasCoin"
  ): TypedContractEvent<
    SetGasCoinEvent.InputTuple,
    SetGasCoinEvent.OutputTuple,
    SetGasCoinEvent.OutputObject
  >;
  getEvent(
    key: "SetGasPrice"
  ): TypedContractEvent<
    SetGasPriceEvent.InputTuple,
    SetGasPriceEvent.OutputTuple,
    SetGasPriceEvent.OutputObject
  >;
  getEvent(
    key: "SetGasZetaPool"
  ): TypedContractEvent<
    SetGasZetaPoolEvent.InputTuple,
    SetGasZetaPoolEvent.OutputTuple,
    SetGasZetaPoolEvent.OutputObject
  >;
  getEvent(
    key: "SetWZeta"
  ): TypedContractEvent<
    SetWZetaEvent.InputTuple,
    SetWZetaEvent.OutputTuple,
    SetWZetaEvent.OutputObject
  >;
  getEvent(
    key: "SystemContractDeployed"
  ): TypedContractEvent<
    SystemContractDeployedEvent.InputTuple,
    SystemContractDeployedEvent.OutputTuple,
    SystemContractDeployedEvent.OutputObject
  >;

  filters: {
    "SetGasCoin(uint256,address)": TypedContractEvent<
      SetGasCoinEvent.InputTuple,
      SetGasCoinEvent.OutputTuple,
      SetGasCoinEvent.OutputObject
    >;
    SetGasCoin: TypedContractEvent<
      SetGasCoinEvent.InputTuple,
      SetGasCoinEvent.OutputTuple,
      SetGasCoinEvent.OutputObject
    >;

    "SetGasPrice(uint256,uint256)": TypedContractEvent<
      SetGasPriceEvent.InputTuple,
      SetGasPriceEvent.OutputTuple,
      SetGasPriceEvent.OutputObject
    >;
    SetGasPrice: TypedContractEvent<
      SetGasPriceEvent.InputTuple,
      SetGasPriceEvent.OutputTuple,
      SetGasPriceEvent.OutputObject
    >;

    "SetGasZetaPool(uint256,address)": TypedContractEvent<
      SetGasZetaPoolEvent.InputTuple,
      SetGasZetaPoolEvent.OutputTuple,
      SetGasZetaPoolEvent.OutputObject
    >;
    SetGasZetaPool: TypedContractEvent<
      SetGasZetaPoolEvent.InputTuple,
      SetGasZetaPoolEvent.OutputTuple,
      SetGasZetaPoolEvent.OutputObject
    >;

    "SetWZeta(address)": TypedContractEvent<
      SetWZetaEvent.InputTuple,
      SetWZetaEvent.OutputTuple,
      SetWZetaEvent.OutputObject
    >;
    SetWZeta: TypedContractEvent<
      SetWZetaEvent.InputTuple,
      SetWZetaEvent.OutputTuple,
      SetWZetaEvent.OutputObject
    >;

    "SystemContractDeployed()": TypedContractEvent<
      SystemContractDeployedEvent.InputTuple,
      SystemContractDeployedEvent.OutputTuple,
      SystemContractDeployedEvent.OutputObject
    >;
    SystemContractDeployed: TypedContractEvent<
      SystemContractDeployedEvent.InputTuple,
      SystemContractDeployedEvent.OutputTuple,
      SystemContractDeployedEvent.OutputObject
    >;
  };
}
