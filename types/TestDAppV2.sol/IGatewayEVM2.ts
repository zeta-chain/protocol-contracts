/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export type RevertOptions2Struct = {
  revertAddress: AddressLike;
  callOnRevert: boolean;
  abortAddress: AddressLike;
  revertMessage: BytesLike;
  onRevertGasLimit: BigNumberish;
};

export type RevertOptions2StructOutput = [
  revertAddress: string,
  callOnRevert: boolean,
  abortAddress: string,
  revertMessage: string,
  onRevertGasLimit: bigint
] & {
  revertAddress: string;
  callOnRevert: boolean;
  abortAddress: string;
  revertMessage: string;
  onRevertGasLimit: bigint;
};

export interface IGatewayEVM2Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "additionalActionFeeWei"
      | "call"
      | "deposit"
      | "depositAndCall"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "additionalActionFeeWei",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "call",
    values: [AddressLike, BytesLike, RevertOptions2Struct]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [AddressLike, RevertOptions2Struct]
  ): string;
  encodeFunctionData(
    functionFragment: "depositAndCall",
    values: [AddressLike, BytesLike, RevertOptions2Struct]
  ): string;

  decodeFunctionResult(
    functionFragment: "additionalActionFeeWei",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "call", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositAndCall",
    data: BytesLike
  ): Result;
}

export interface IGatewayEVM2 extends BaseContract {
  connect(runner?: ContractRunner | null): IGatewayEVM2;
  waitForDeployment(): Promise<this>;

  interface: IGatewayEVM2Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  additionalActionFeeWei: TypedContractMethod<[], [bigint], "nonpayable">;

  call: TypedContractMethod<
    [
      receiver: AddressLike,
      payload: BytesLike,
      revertOptions: RevertOptions2Struct
    ],
    [void],
    "payable"
  >;

  deposit: TypedContractMethod<
    [receiver: AddressLike, revertOptions: RevertOptions2Struct],
    [void],
    "payable"
  >;

  depositAndCall: TypedContractMethod<
    [
      receiver: AddressLike,
      payload: BytesLike,
      revertOptions: RevertOptions2Struct
    ],
    [void],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "additionalActionFeeWei"
  ): TypedContractMethod<[], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "call"
  ): TypedContractMethod<
    [
      receiver: AddressLike,
      payload: BytesLike,
      revertOptions: RevertOptions2Struct
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<
    [receiver: AddressLike, revertOptions: RevertOptions2Struct],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "depositAndCall"
  ): TypedContractMethod<
    [
      receiver: AddressLike,
      payload: BytesLike,
      revertOptions: RevertOptions2Struct
    ],
    [void],
    "payable"
  >;

  filters: {};
}
