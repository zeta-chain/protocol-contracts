/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IZetaRegistryErrors,
  IZetaRegistryErrorsInterface,
} from "../../IZetaRegistry.sol/IZetaRegistryErrors";

const _abi = [
  {
    type: "error",
    name: "ArrayLengthMismatch",
    inputs: [
      {
        name: "expected",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "actual",
        type: "uint256",
        internalType: "uint256",
      },
    ],
  },
  {
    type: "error",
    name: "ChainAlreadyExists",
    inputs: [
      {
        name: "chainIdentifier",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
  },
  {
    type: "error",
    name: "ChainDoesNotExist",
    inputs: [
      {
        name: "chainIdentifier",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
  },
  {
    type: "error",
    name: "ContractAlreadyExists",
    inputs: [
      {
        name: "chainIdentifier",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "contractIdentifier",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
  },
  {
    type: "error",
    name: "ContractDoesNotExist",
    inputs: [
      {
        name: "chainIdentifier",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "contractIdentifier",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
  },
  {
    type: "error",
    name: "InvalidContractAddress",
    inputs: [
      {
        name: "contractAddress",
        type: "address",
        internalType: "address",
      },
    ],
  },
  {
    type: "error",
    name: "UnauthorizedCaller",
    inputs: [
      {
        name: "caller",
        type: "address",
        internalType: "address",
      },
    ],
  },
  {
    type: "error",
    name: "ZRC20TokenAlreadyExists",
    inputs: [
      {
        name: "chainIdentifier",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "tokenIdentifier",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
  },
  {
    type: "error",
    name: "ZRC20TokenDoesNotExist",
    inputs: [
      {
        name: "chainIdentifier",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "tokenIdentifier",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
  },
] as const;

export class IZetaRegistryErrors__factory {
  static readonly abi = _abi;
  static createInterface(): IZetaRegistryErrorsInterface {
    return new Interface(_abi) as IZetaRegistryErrorsInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): IZetaRegistryErrors {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as IZetaRegistryErrors;
  }
}
