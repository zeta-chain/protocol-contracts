/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  ZetaErrors,
  ZetaErrorsInterface,
} from "../../Zeta.non-eth.sol/ZetaErrors";

const _abi = [
  {
    type: "error",
    name: "CallerIsNotConnector",
    inputs: [
      {
        name: "caller",
        type: "address",
        internalType: "address",
      },
    ],
  },
  {
    type: "error",
    name: "CallerIsNotTss",
    inputs: [
      {
        name: "caller",
        type: "address",
        internalType: "address",
      },
    ],
  },
  {
    type: "error",
    name: "CallerIsNotTssOrUpdater",
    inputs: [
      {
        name: "caller",
        type: "address",
        internalType: "address",
      },
    ],
  },
  {
    type: "error",
    name: "CallerIsNotTssUpdater",
    inputs: [
      {
        name: "caller",
        type: "address",
        internalType: "address",
      },
    ],
  },
  {
    type: "error",
    name: "InvalidAddress",
    inputs: [],
  },
  {
    type: "error",
    name: "ZetaTransferError",
    inputs: [],
  },
] as const;

export class ZetaErrors__factory {
  static readonly abi = _abi;
  static createInterface(): ZetaErrorsInterface {
    return new Interface(_abi) as ZetaErrorsInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): ZetaErrors {
    return new Contract(address, _abi, runner) as unknown as ZetaErrors;
  }
}
