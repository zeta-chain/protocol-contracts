/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IGatewayEVMErrors,
  IGatewayEVMErrorsInterface,
} from "../../IGatewayEVM.sol/IGatewayEVMErrors";

const _abi = [
  {
    type: "error",
    name: "AdditionalActionDisabled",
    inputs: [],
  },
  {
    type: "error",
    name: "ApprovalFailed",
    inputs: [
      {
        name: "token",
        type: "address",
        internalType: "address",
      },
      {
        name: "spender",
        type: "address",
        internalType: "address",
      },
    ],
  },
  {
    type: "error",
    name: "ConnectorInitialized",
    inputs: [],
  },
  {
    type: "error",
    name: "CustodyInitialized",
    inputs: [],
  },
  {
    type: "error",
    name: "DepositFailed",
    inputs: [],
  },
  {
    type: "error",
    name: "ExcessETHProvided",
    inputs: [
      {
        name: "required",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "provided",
        type: "uint256",
        internalType: "uint256",
      },
    ],
  },
  {
    type: "error",
    name: "ExecutionFailed",
    inputs: [],
  },
  {
    type: "error",
    name: "FeeTransferFailed",
    inputs: [],
  },
  {
    type: "error",
    name: "IncorrectValueProvided",
    inputs: [
      {
        name: "expected",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "provided",
        type: "uint256",
        internalType: "uint256",
      },
    ],
  },
  {
    type: "error",
    name: "InsufficientERC20Amount",
    inputs: [],
  },
  {
    type: "error",
    name: "InsufficientETHAmount",
    inputs: [],
  },
  {
    type: "error",
    name: "InsufficientFee",
    inputs: [
      {
        name: "required",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "provided",
        type: "uint256",
        internalType: "uint256",
      },
    ],
  },
  {
    type: "error",
    name: "NotAllowedToCallOnCall",
    inputs: [],
  },
  {
    type: "error",
    name: "NotAllowedToCallOnRevert",
    inputs: [],
  },
  {
    type: "error",
    name: "NotWhitelistedInCustody",
    inputs: [
      {
        name: "token",
        type: "address",
        internalType: "address",
      },
    ],
  },
  {
    type: "error",
    name: "PayloadSizeExceeded",
    inputs: [
      {
        name: "provided",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "maximum",
        type: "uint256",
        internalType: "uint256",
      },
    ],
  },
  {
    type: "error",
    name: "ZeroAddress",
    inputs: [],
  },
] as const;

export class IGatewayEVMErrors__factory {
  static readonly abi = _abi;
  static createInterface(): IGatewayEVMErrorsInterface {
    return new Interface(_abi) as IGatewayEVMErrorsInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): IGatewayEVMErrors {
    return new Contract(address, _abi, runner) as unknown as IGatewayEVMErrors;
  }
}
