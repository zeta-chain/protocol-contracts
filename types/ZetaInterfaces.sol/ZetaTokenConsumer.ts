/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface ZetaTokenConsumerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getEthFromZeta"
      | "getTokenFromZeta"
      | "getZetaFromEth"
      | "getZetaFromToken"
      | "hasZetaLiquidity"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "EthExchangedForZeta"
      | "TokenExchangedForZeta"
      | "ZetaExchangedForEth"
      | "ZetaExchangedForToken"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "getEthFromZeta",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenFromZeta",
    values: [AddressLike, BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getZetaFromEth",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getZetaFromToken",
    values: [AddressLike, BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasZetaLiquidity",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "getEthFromZeta",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenFromZeta",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getZetaFromEth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getZetaFromToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasZetaLiquidity",
    data: BytesLike
  ): Result;
}

export namespace EthExchangedForZetaEvent {
  export type InputTuple = [amountIn: BigNumberish, amountOut: BigNumberish];
  export type OutputTuple = [amountIn: bigint, amountOut: bigint];
  export interface OutputObject {
    amountIn: bigint;
    amountOut: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenExchangedForZetaEvent {
  export type InputTuple = [
    token: AddressLike,
    amountIn: BigNumberish,
    amountOut: BigNumberish
  ];
  export type OutputTuple = [
    token: string,
    amountIn: bigint,
    amountOut: bigint
  ];
  export interface OutputObject {
    token: string;
    amountIn: bigint;
    amountOut: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ZetaExchangedForEthEvent {
  export type InputTuple = [amountIn: BigNumberish, amountOut: BigNumberish];
  export type OutputTuple = [amountIn: bigint, amountOut: bigint];
  export interface OutputObject {
    amountIn: bigint;
    amountOut: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ZetaExchangedForTokenEvent {
  export type InputTuple = [
    token: AddressLike,
    amountIn: BigNumberish,
    amountOut: BigNumberish
  ];
  export type OutputTuple = [
    token: string,
    amountIn: bigint,
    amountOut: bigint
  ];
  export interface OutputObject {
    token: string;
    amountIn: bigint;
    amountOut: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ZetaTokenConsumer extends BaseContract {
  connect(runner?: ContractRunner | null): ZetaTokenConsumer;
  waitForDeployment(): Promise<this>;

  interface: ZetaTokenConsumerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getEthFromZeta: TypedContractMethod<
    [
      destinationAddress: AddressLike,
      minAmountOut: BigNumberish,
      zetaTokenAmount: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  getTokenFromZeta: TypedContractMethod<
    [
      destinationAddress: AddressLike,
      minAmountOut: BigNumberish,
      outputToken: AddressLike,
      zetaTokenAmount: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  getZetaFromEth: TypedContractMethod<
    [destinationAddress: AddressLike, minAmountOut: BigNumberish],
    [bigint],
    "payable"
  >;

  getZetaFromToken: TypedContractMethod<
    [
      destinationAddress: AddressLike,
      minAmountOut: BigNumberish,
      inputToken: AddressLike,
      inputTokenAmount: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  hasZetaLiquidity: TypedContractMethod<[], [boolean], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getEthFromZeta"
  ): TypedContractMethod<
    [
      destinationAddress: AddressLike,
      minAmountOut: BigNumberish,
      zetaTokenAmount: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getTokenFromZeta"
  ): TypedContractMethod<
    [
      destinationAddress: AddressLike,
      minAmountOut: BigNumberish,
      outputToken: AddressLike,
      zetaTokenAmount: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getZetaFromEth"
  ): TypedContractMethod<
    [destinationAddress: AddressLike, minAmountOut: BigNumberish],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "getZetaFromToken"
  ): TypedContractMethod<
    [
      destinationAddress: AddressLike,
      minAmountOut: BigNumberish,
      inputToken: AddressLike,
      inputTokenAmount: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasZetaLiquidity"
  ): TypedContractMethod<[], [boolean], "view">;

  getEvent(
    key: "EthExchangedForZeta"
  ): TypedContractEvent<
    EthExchangedForZetaEvent.InputTuple,
    EthExchangedForZetaEvent.OutputTuple,
    EthExchangedForZetaEvent.OutputObject
  >;
  getEvent(
    key: "TokenExchangedForZeta"
  ): TypedContractEvent<
    TokenExchangedForZetaEvent.InputTuple,
    TokenExchangedForZetaEvent.OutputTuple,
    TokenExchangedForZetaEvent.OutputObject
  >;
  getEvent(
    key: "ZetaExchangedForEth"
  ): TypedContractEvent<
    ZetaExchangedForEthEvent.InputTuple,
    ZetaExchangedForEthEvent.OutputTuple,
    ZetaExchangedForEthEvent.OutputObject
  >;
  getEvent(
    key: "ZetaExchangedForToken"
  ): TypedContractEvent<
    ZetaExchangedForTokenEvent.InputTuple,
    ZetaExchangedForTokenEvent.OutputTuple,
    ZetaExchangedForTokenEvent.OutputObject
  >;

  filters: {
    "EthExchangedForZeta(uint256,uint256)": TypedContractEvent<
      EthExchangedForZetaEvent.InputTuple,
      EthExchangedForZetaEvent.OutputTuple,
      EthExchangedForZetaEvent.OutputObject
    >;
    EthExchangedForZeta: TypedContractEvent<
      EthExchangedForZetaEvent.InputTuple,
      EthExchangedForZetaEvent.OutputTuple,
      EthExchangedForZetaEvent.OutputObject
    >;

    "TokenExchangedForZeta(address,uint256,uint256)": TypedContractEvent<
      TokenExchangedForZetaEvent.InputTuple,
      TokenExchangedForZetaEvent.OutputTuple,
      TokenExchangedForZetaEvent.OutputObject
    >;
    TokenExchangedForZeta: TypedContractEvent<
      TokenExchangedForZetaEvent.InputTuple,
      TokenExchangedForZetaEvent.OutputTuple,
      TokenExchangedForZetaEvent.OutputObject
    >;

    "ZetaExchangedForEth(uint256,uint256)": TypedContractEvent<
      ZetaExchangedForEthEvent.InputTuple,
      ZetaExchangedForEthEvent.OutputTuple,
      ZetaExchangedForEthEvent.OutputObject
    >;
    ZetaExchangedForEth: TypedContractEvent<
      ZetaExchangedForEthEvent.InputTuple,
      ZetaExchangedForEthEvent.OutputTuple,
      ZetaExchangedForEthEvent.OutputObject
    >;

    "ZetaExchangedForToken(address,uint256,uint256)": TypedContractEvent<
      ZetaExchangedForTokenEvent.InputTuple,
      ZetaExchangedForTokenEvent.OutputTuple,
      ZetaExchangedForTokenEvent.OutputObject
    >;
    ZetaExchangedForToken: TypedContractEvent<
      ZetaExchangedForTokenEvent.InputTuple,
      ZetaExchangedForTokenEvent.OutputTuple,
      ZetaExchangedForTokenEvent.OutputObject
    >;
  };
}
