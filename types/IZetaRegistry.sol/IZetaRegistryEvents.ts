/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
} from "../common";

export interface IZetaRegistryEventsInterface extends Interface {
  getEvent(
    nameOrSignatureOrTopic:
      | "ChainAdded"
      | "ChainStatusUpdated"
      | "ContractAddressUpdated"
      | "ContractConfigurationUpdated"
      | "ContractStatusUpdated"
      | "ZRC20TokenAdded"
  ): EventFragment;
}

export namespace ChainAddedEvent {
  export type InputTuple = [
    chainIdentifier: BytesLike,
    chainId: BigNumberish,
    name: string
  ];
  export type OutputTuple = [
    chainIdentifier: string,
    chainId: bigint,
    name: string
  ];
  export interface OutputObject {
    chainIdentifier: string;
    chainId: bigint;
    name: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ChainStatusUpdatedEvent {
  export type InputTuple = [chainIdentifier: BytesLike, active: boolean];
  export type OutputTuple = [chainIdentifier: string, active: boolean];
  export interface OutputObject {
    chainIdentifier: string;
    active: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ContractAddressUpdatedEvent {
  export type InputTuple = [
    chainIdentifier: BytesLike,
    contractIdentifier: BytesLike,
    category: BigNumberish,
    contractAddress: AddressLike
  ];
  export type OutputTuple = [
    chainIdentifier: string,
    contractIdentifier: string,
    category: bigint,
    contractAddress: string
  ];
  export interface OutputObject {
    chainIdentifier: string;
    contractIdentifier: string;
    category: bigint;
    contractAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ContractConfigurationUpdatedEvent {
  export type InputTuple = [
    chainIdentifier: BytesLike,
    contractIdentifier: BytesLike,
    configurationData: BytesLike
  ];
  export type OutputTuple = [
    chainIdentifier: string,
    contractIdentifier: string,
    configurationData: string
  ];
  export interface OutputObject {
    chainIdentifier: string;
    contractIdentifier: string;
    configurationData: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ContractStatusUpdatedEvent {
  export type InputTuple = [
    chainIdentifier: BytesLike,
    contractIdentifier: BytesLike,
    active: boolean
  ];
  export type OutputTuple = [
    chainIdentifier: string,
    contractIdentifier: string,
    active: boolean
  ];
  export interface OutputObject {
    chainIdentifier: string;
    contractIdentifier: string;
    active: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ZRC20TokenAddedEvent {
  export type InputTuple = [
    chainIdentifier: BytesLike,
    tokenIdentifier: BytesLike,
    tokenAddress: AddressLike
  ];
  export type OutputTuple = [
    chainIdentifier: string,
    tokenIdentifier: string,
    tokenAddress: string
  ];
  export interface OutputObject {
    chainIdentifier: string;
    tokenIdentifier: string;
    tokenAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IZetaRegistryEvents extends BaseContract {
  connect(runner?: ContractRunner | null): IZetaRegistryEvents;
  waitForDeployment(): Promise<this>;

  interface: IZetaRegistryEventsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getEvent(
    key: "ChainAdded"
  ): TypedContractEvent<
    ChainAddedEvent.InputTuple,
    ChainAddedEvent.OutputTuple,
    ChainAddedEvent.OutputObject
  >;
  getEvent(
    key: "ChainStatusUpdated"
  ): TypedContractEvent<
    ChainStatusUpdatedEvent.InputTuple,
    ChainStatusUpdatedEvent.OutputTuple,
    ChainStatusUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ContractAddressUpdated"
  ): TypedContractEvent<
    ContractAddressUpdatedEvent.InputTuple,
    ContractAddressUpdatedEvent.OutputTuple,
    ContractAddressUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ContractConfigurationUpdated"
  ): TypedContractEvent<
    ContractConfigurationUpdatedEvent.InputTuple,
    ContractConfigurationUpdatedEvent.OutputTuple,
    ContractConfigurationUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ContractStatusUpdated"
  ): TypedContractEvent<
    ContractStatusUpdatedEvent.InputTuple,
    ContractStatusUpdatedEvent.OutputTuple,
    ContractStatusUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ZRC20TokenAdded"
  ): TypedContractEvent<
    ZRC20TokenAddedEvent.InputTuple,
    ZRC20TokenAddedEvent.OutputTuple,
    ZRC20TokenAddedEvent.OutputObject
  >;

  filters: {
    "ChainAdded(bytes32,uint256,string)": TypedContractEvent<
      ChainAddedEvent.InputTuple,
      ChainAddedEvent.OutputTuple,
      ChainAddedEvent.OutputObject
    >;
    ChainAdded: TypedContractEvent<
      ChainAddedEvent.InputTuple,
      ChainAddedEvent.OutputTuple,
      ChainAddedEvent.OutputObject
    >;

    "ChainStatusUpdated(bytes32,bool)": TypedContractEvent<
      ChainStatusUpdatedEvent.InputTuple,
      ChainStatusUpdatedEvent.OutputTuple,
      ChainStatusUpdatedEvent.OutputObject
    >;
    ChainStatusUpdated: TypedContractEvent<
      ChainStatusUpdatedEvent.InputTuple,
      ChainStatusUpdatedEvent.OutputTuple,
      ChainStatusUpdatedEvent.OutputObject
    >;

    "ContractAddressUpdated(bytes32,bytes32,uint8,address)": TypedContractEvent<
      ContractAddressUpdatedEvent.InputTuple,
      ContractAddressUpdatedEvent.OutputTuple,
      ContractAddressUpdatedEvent.OutputObject
    >;
    ContractAddressUpdated: TypedContractEvent<
      ContractAddressUpdatedEvent.InputTuple,
      ContractAddressUpdatedEvent.OutputTuple,
      ContractAddressUpdatedEvent.OutputObject
    >;

    "ContractConfigurationUpdated(bytes32,bytes32,bytes)": TypedContractEvent<
      ContractConfigurationUpdatedEvent.InputTuple,
      ContractConfigurationUpdatedEvent.OutputTuple,
      ContractConfigurationUpdatedEvent.OutputObject
    >;
    ContractConfigurationUpdated: TypedContractEvent<
      ContractConfigurationUpdatedEvent.InputTuple,
      ContractConfigurationUpdatedEvent.OutputTuple,
      ContractConfigurationUpdatedEvent.OutputObject
    >;

    "ContractStatusUpdated(bytes32,bytes32,bool)": TypedContractEvent<
      ContractStatusUpdatedEvent.InputTuple,
      ContractStatusUpdatedEvent.OutputTuple,
      ContractStatusUpdatedEvent.OutputObject
    >;
    ContractStatusUpdated: TypedContractEvent<
      ContractStatusUpdatedEvent.InputTuple,
      ContractStatusUpdatedEvent.OutputTuple,
      ContractStatusUpdatedEvent.OutputObject
    >;

    "ZRC20TokenAdded(bytes32,bytes32,address)": TypedContractEvent<
      ZRC20TokenAddedEvent.InputTuple,
      ZRC20TokenAddedEvent.OutputTuple,
      ZRC20TokenAddedEvent.OutputObject
    >;
    ZRC20TokenAdded: TypedContractEvent<
      ZRC20TokenAddedEvent.InputTuple,
      ZRC20TokenAddedEvent.OutputTuple,
      ZRC20TokenAddedEvent.OutputObject
    >;
  };
}
